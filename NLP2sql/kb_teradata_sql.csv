"Address","Content Type","Status Code","Status","Indexability","Indexability Status","Title 1","Title 1 Length","Title 1 Pixel Width","Meta Description 1","Meta Description 1 Length","Meta Description 1 Pixel Width","Meta Keywords 1","Meta Keywords 1 Length","H1-1","H1-1 Length","H2-1","H2-1 Length","H2-2","H2-2 Length","Meta Robots 1","X-Robots-Tag 1","Meta Refresh 1","Canonical Link Element 1","rel=""next"" 1","rel=""prev"" 1","HTTP rel=""next"" 1","HTTP rel=""prev"" 1","amphtml Link Element","Size (bytes)","Transferred (bytes)","Total Transferred (bytes)","CO2 (mg)","Carbon Rating","Word Count","Sentence Count","Average Words Per Sentence","Flesch Reading Ease Score","Readability","Text Ratio","Crawl Depth","Folder Depth","Link Score","Inlinks","Unique Inlinks","Unique JS Inlinks","% of Total","Outlinks","Unique Outlinks","Unique JS Outlinks","External Outlinks","Unique External Outlinks","Unique External JS Outlinks","Closest Similarity Match","No. Near Duplicates","Spelling Errors","Grammar Errors","Hash","Response Time","Last Modified","Redirect URL","Redirect Type","Cookies","Language","HTTP Version","(Chat GPT 4) Export Text 1","Search 1: Search_Select","Search 2: Search_Update","Search 3: Search_Create","Search 4: Search_delete","Mobile Alternate Link","URL Encoded Address","Crawl Timestamp"
"https://docs.teradata.com/","text/html;charset=UTF-8","200","","Indexable","","Docs Teradata","13","130","","0","0","","0","","0","","0","","0","","","","","","","","","","2102","2633","2633","0.933","A+","0","","","","","0.000","1","0","","750","707","0","99.860","0","0","0","","","","","","","","","0.374","","","","","en-US","1.1","### Summary

In relational databases, SQL (Structured Query Language) is used to interact with the data. The primary operations you can perform on a database are selecting, updating, deleting, and creating data. These operations correspond to the CRUD (Create, Read, Update, Delete) functionalities, which are fundamental to database management.

### Code Example

#### 1. Select (Read)

The SELECT statement is used to retrieve data from one or more tables.

```sql
SELECT first_name, last_name 
FROM employees 
WHERE department = 'Sales';
```

#### 2. Update

The UPDATE statement is used to modify existing records in a table.

```sql
UPDATE employees 
SET salary = salary * 1.1 
WHERE department = 'Sales';
```

#### 3. Delete

The DELETE statement is used to remove records from a table.

```sql
DELETE FROM employees 
WHERE last_name = 'Smith';
```

#### 4. Create

The CREATE statement is used to create a new table or database.

```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

### Keywords and Phrases

- SQL
- CRUD (Create, Read, Update, Delete)
- SELECT statement
- UPDATE statement
- DELETE statement
- CREATE statement
- Data retrieval
- Modifying records
- Removing records
- Creating tables
- Relational databases
- Data management
- Conditions (WHERE clause)
- Data types (VARCHAR, INT, DECIMAL)
- Primary key
- Database schema","1","0","0","0","","https://docs.teradata.com/","2024-07-27 11:52:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions","text/html;charset=UTF-8","200","","Indexable","","Analytics Database Analytic Functions | Teradata Vantage | 17.20 - Database Analytic Functions - Analytics Database","115","1035","Use Analytics Database (SQL Engine) analytic functions to gain insight into many types of data, including clickstreams, financial, and user interaction.","152","921","","0","Analytics Database Analytic Functions | Teradata Vantage | 17.20 - Database Analytic Functions - Analytics Database","115","","0","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions","","","","","","206819","12438","12438","4.409","A+","47","34","1.382","0.000","Very Hard","11.164","0","2","","706","706","0","99.720","709","707","0","","","","","","","","","1.289","","","","","en-US","1.1","## Overview of Teradata Vantage Analytics Database Functions

Teradata Vantage offers a rich set of analytic functions that facilitate data cleaning, exploration, feature engineering, model training, scoring, and evaluation, among other capabilities. With the release of version 17.20 in June 2022, various analytic functions have been organized into distinct categories to streamline usage. This comprehensive suite allows users to perform complex analytics on large datasets efficiently.

### Code Examples

Here are some basic SQL operations commonly used in Teradata Vantage, specifically focusing on the `SELECT`, `UPDATE`, `DELETE`, and `CREATE` statements.

#### 1. SELECT Statement
The `SELECT` statement is used to query data from a database.

```sql
SELECT customer_id, customer_name, order_date
FROM orders
WHERE order_total > 1000
ORDER BY order_date DESC;
```

#### 2. UPDATE Statement
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE customers
SET loyalty_points = loyalty_points + 100
WHERE customer_id = 12345;
```

#### 3. DELETE Statement
The `DELETE` statement removes records from a table.

```sql
DELETE FROM orders
WHERE order_date < '2022-01-01';
```

#### 4. CREATE Statement
The `CREATE` statement creates a new table in the database.

```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    email VARCHAR(100),
    signup_date DATE
);
```

### Summary
The above examples illustrate basic SQL operations in Teradata Vantage. The `SELECT` statement retrieves data, the `UPDATE` statement modifies existing records, the `DELETE` statement removes records, and the `CREATE` statement establishes new tables. These operations form the backbone of data manipulation within the analytics database.

### Keywords and Phrases
- Analytics Database
- Analytic Functions
- Teradata Vantage
- 17.20 - Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- Published
- Language
- Last Update
- Product Category
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- SQL Operations
- SELECT
- UPDATE
- DELETE
- CREATE
- Performance Optimization
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Workload Management
- Non-Deterministic Behavior

This structured overview provides the essential information and foundational examples needed to navigate the capabilities of Teradata Vantage's Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions","2024-07-27 11:19:10"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Additional-Information","text/html;charset=UTF-8","200","","Indexable","","Additional Information - Analytics Database","43","386","","0","0","","0","Additional Information - Analytics Database","43","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Additional-Information","","","","","","206937","12445","12445","4.412","A+","41","33","1.242","0.000","Very Hard","11.136","1","3","","707","707","0","99.860","710","708","0","","","","","","","","","0.574","","","","","","1.1","# Analytics Database Overview

The **Analytics Database** is a powerful tool within the Teradata Vantage™ ecosystem, designed to streamline data analytics through various functions and utilities. It supports a range of analytic functions, enabling users to perform tasks such as data cleaning, exploration, feature engineering, model training, scoring, and evaluation.

## Key Features

- **Analytic Functions**: Includes categories for data cleaning, exploration, feature engineering, model training, scoring, and evaluation.
- **Integration**: Works within the VantageCloud and VantageCore frameworks, providing flexibility in deployment.
- **Enterprise-ready**: Suitable for large-scale data processing with robust performance metrics and workload management.

## Summary of SQL Operations

In SQL, common operations include selecting data, updating records, deleting records, and creating new tables or records. Here’s a quick overview of each operation, along with code examples.

### Code Example

#### 1. Create
This operation is used to create a new table in the database.

```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    hire_date DATE,
    salary DECIMAL(10, 2)
);
```

#### 2. Select
This operation is used to retrieve data from a table.

```sql
SELECT first_name, last_name, salary 
FROM employees 
WHERE hire_date > '2020-01-01';
```

#### 3. Update
This operation modifies existing records in a table.

```sql
UPDATE employees 
SET salary = salary * 1.05 
WHERE hire_date < '2019-01-01';
```

#### 4. Delete
This operation removes records from a table.

```sql
DELETE FROM employees 
WHERE employee_id = 10;
```

## Additional Information - Analytics Database

- **Database Analytic Functions**
- **Deployment**: Supports VantageCloud and VantageCore
- **Edition**: Enterprise
- **IntelliFlex** and **VMware** compatibility
- **Product**: Teradata Vantage™
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06

### Function Categories

- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions

### Important Notes

- **Usage Notes**: Understanding syntax and function execution impact is crucial for effective data analysis.
- **Function Limitations**: Considerations when using functions like PARTITION BY and input table schemas.
- **Performance Recommendations**: Guidance on optimizing function performance, especially under high concurrency.

### Keywords and Phrases

- Analytics Database
- Teradata Vantage™
- Analytic Functions
- Data Cleaning, Exploration, Feature Engineering
- Model Training, Scoring, Evaluation
- VantageCloud, VantageCore
- Enterprise Edition
- IntelliFlex, VMware
- SQL Operations: Create, Select, Update, Delete
- Function Usage Notes
- Performance Recommendations

This overview provides foundational knowledge on the Analytics Database and its capabilities, along with essential SQL operations for beginners and experienced users alike.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Additional-Information","2024-07-27 11:33:46"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Additional-Information/Related-Documentation","text/html;charset=UTF-8","200","","Indexable","","Related Documentation | Teradata Vantage - Related Documentation - Analytics Database","85","799","Read a list of Teradata documents related to Analytics Database (SQL Engine) analytic function documentation.","109","691","","0","Related Documentation | Teradata Vantage - Related Documentation - Analytics Database","85","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Additional-Information/Related-Documentation","","","","","","209275","12995","12995","4.607","A+","85","40","2.125","6.615","Very Hard","11.182","1","4","","707","707","0","99.860","710","708","0","","","","","","","","","0.581","","","","","","1.1","### Teradata SQL Operations Overview

In Teradata, SQL (Structured Query Language) is used to perform various operations on databases. Four fundamental operations are used to manipulate database records: Select, Update, Delete, and Create. Understanding these operations is essential for effective database management in Teradata Vantage.

#### Summary of Operations

1. **Select**: This operation retrieves data from one or more tables.
2. **Update**: This operation modifies existing records in a table.
3. **Delete**: This operation removes records from a table.
4. **Create**: This operation creates new tables or other database objects.

### Code Example Section

#### 1. Select
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```
*Example*:
```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

#### 2. Update
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```
*Example*:
```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department = 'Sales';
```

#### 3. Delete
```sql
DELETE FROM table_name
WHERE condition;
```
*Example*:
```sql
DELETE FROM employees
WHERE last_name = 'Doe';
```

#### 4. Create
```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```
*Example*:
```sql
CREATE TABLE employees (
    employee_id INT,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

### Keywords and Phrases

- **Related Documentation**: Teradata Vantage - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**: Analytics Database
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Accumulated Columns Impact on Function Performance**
- **Recommendations for Using Analytic Functions**
- **SQL Fundamentals**
- **SQL Functions, Expressions, and Predicates**
- **SQL Data Manipulation Language** 

This overview provides foundational SQL operations within Teradata, crucial for data manipulation and analysis in the analytics database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Additional-Information/Related-Documentation","2024-07-27 11:23:27"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Additional-Information/Teradata-Links","text/html;charset=UTF-8","200","","Indexable","","Teradata Information | Teradata Documentation - Teradata Links - Analytics Database","83","764","When determining where to go for the Teradata product information you need, check our list of links to Teradata documentation and support.","138","870","","0","Teradata Information | Teradata Documentation - Teradata Links - Analytics Database","83","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Additional-Information/Teradata-Links","","","","","","209934","13246","13246","4.696","A+","107","63","1.698","0.000","Very Hard","11.257","1","4","","707","707","0","99.860","711","708","0","","","","","","","","","0.624","","","","","","1.1","# Teradata SQL Operations Overview

In Teradata, SQL operations are fundamental for managing databases. The four main types of SQL operations include **Select**, **Update**, **Delete**, and **Create**. Below is a summary and code examples for each operation.

## Summary of SQL Operations

1. **Select**: Used to retrieve data from one or more tables.
2. **Update**: Used to modify existing records in a table.
3. **Delete**: Used to remove records from a table.
4. **Create**: Used to create a new table or database.

## Code Examples

### 1. Select

The `SELECT` statement retrieves data from a table.

```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

### 2. Update

The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department = 'Sales';
```

### 3. Delete

The `DELETE` statement removes records from a table.

```sql
DELETE FROM employees
WHERE department = 'Outsourced';
```

### 4. Create

The `CREATE TABLE` statement creates a new table in the database.

```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

## Keywords and Phrases

- **Teradata Information**
- **Teradata Documentation**
- **Teradata Links**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Data Exploration Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Teradata Links**
- **Related Documentation**: [Teradata Documentation](https://docs.teradata.com/), [Support](https://support.teradata.com), [Education](https://www.teradata.com/University/Overview), [Community](https://support.teradata.com/community) 

This overview should provide a clear understanding of basic SQL operations in Teradata along with essential keywords and phrases for further exploration.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Additional-Information/Teradata-Links","2024-07-27 12:19:49"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions","text/html;charset=UTF-8","200","","Indexable","","Data Cleaning Functions | Teradata Vantage - Data Cleaning Functions - Analytics Database","89","813","Learn about the Analytics Database (SQL Engine) functions that prepare the input data set for the next set of transformations.","126","781","","0","Data Cleaning Functions | Teradata Vantage - Data Cleaning Functions - Analytics Database","89","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions","","","","","","210836","13413","13413","4.755","A+","99","50","1.980","25.371","Very Hard","11.129","1","3","","707","707","0","99.860","720","718","0","","","","","","","","","0.539","","","","","","1.1","### Summary

This document covers the data cleaning functions available in Teradata Vantage's Analytics Database. Data cleaning is a crucial step in preparing datasets for analysis and modeling. The functions provided help in handling outliers, missing values, and parsing data, among other tasks. Below, you'll find several examples of SQL queries for performing basic operations like selecting, updating, deleting, and creating data, along with specific data cleaning functions offered in Teradata Vantage.

### Code Example

#### 1. Select
```sql
SELECT *
FROM Employees
WHERE Salary > 50000;
```

#### 2. Update
```sql
UPDATE Employees
SET Salary = Salary * 1.10
WHERE PerformanceRating = 'Excellent';
```

#### 3. Delete
```sql
DELETE FROM Employees
WHERE TerminationDate IS NOT NULL;
```

#### 4. Create
```sql
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Salary DECIMAL(10, 2),
    PerformanceRating VARCHAR(20),
    TerminationDate DATE
);
```

### Data Cleaning Functions in Teradata Vantage

#### 1. TD_GetFutileColumns
- **Description**: Identifies columns that do not contribute any useful information for analysis.
- **Example**:
```sql
SELECT TD_GetFutileColumns('EmployeeData') AS FutileColumns;
```

#### 2. TD_OutlierFilterFit
- **Description**: Fits a model to identify outliers in a dataset.
- **Example**:
```sql
SELECT * FROM TD_OutlierFilterFit('EmployeeData', 'Salary');
```

#### 3. TD_OutlierFilterTransform
- **Description**: Applies the outlier filter model to transform the dataset.
- **Example**:
```sql
SELECT * FROM TD_OutlierFilterTransform('FilteredData', 'Salary');
```

#### 4. TD_GetRowsWithoutMissingValues
- **Description**: Retrieves rows from a dataset that do not contain any missing values.
- **Example**:
```sql
SELECT * FROM TD_GetRowsWithoutMissingValues('EmployeeData');
```

#### 5. TD_SimpleImputeTransform
- **Description**: Applies a simple imputation method to fill in missing values.
- **Example**:
```sql
SELECT * FROM TD_SimpleImputeTransform('EmployeeData', 'Salary', 'Mean');
```

### Keywords and Phrases
- Data Cleaning Functions
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Enterprise Edition
- IntelliFlex
- VMware
- Product Analytics Database
- Release Number 17.20
- Published June 2022
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- TD_GetFutileColumns
- TD_OutlierFilterFit
- TD_OutlierFilterTransform
- TD_GetRowsWithoutMissingValues
- TD_SimpleImputeTransform
- Data Parsing Functions
- Handling Outliers
- Handling Missing Values

This overview provides a foundational understanding of utilizing Teradata Vantage for data cleaning and basic SQL operations essential for data management.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions","2024-07-27 12:21:44"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack","text/html;charset=UTF-8","200","","Indexable","","Pack Function | Teradata Vantage - Pack - Analytics Database","60","549","This Analytics Database (SQL Engine) function concatenates data in multiple columns into a single packed data column.","117","740","","0","Pack Function | Teradata Vantage - Pack - Analytics Database","60","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack","","","","","","211052","13826","13826","4.901","A+","348","75","4.640","51.887","Fairly Hard","11.818","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.460","","","","","","1.1","### Summary of the Pack Function in Teradata Vantage

The **Pack** function in Teradata Vantage is a powerful tool for data profiling and cleansing. It allows users to combine data from multiple input columns into a single packed column, which contains virtual columns for each input column. This organization helps to eliminate redundancy and makes data sets more efficient and easier to manage. By default, the values in the packed column are separated by commas and labeled with their corresponding column names, ensuring traceability and clarity.

The function is especially useful for large data sets where inconsistencies or errors may be more challenging to identify. By simplifying the structure of data, the Pack function aids in data cleaning and enhances overall data quality.

### Code Example Section

Here are code examples for basic SQL operations: **Select**, **Update**, **Delete**, and **Create**. 

#### 1. Select
To retrieve data from a table named `employees`, you can use the following SQL statement:
```sql
SELECT employee_id, first_name, last_name 
FROM employees 
WHERE department = 'Sales';
```

#### 2. Update
To update the email address of a specific employee in the `employees` table:
```sql
UPDATE employees 
SET email = 'newemail@example.com' 
WHERE employee_id = 123;
```

#### 3. Delete
To delete an employee record from the `employees` table based on their employee ID:
```sql
DELETE FROM employees 
WHERE employee_id = 123;
```

#### 4. Create
To create a new table named `departments`:
```sql
CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(50),
    location VARCHAR(100)
);
```

### Keywords and Phrases
- Pack Function
- Teradata Vantage
- Pack
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Input Table Rows Redistribution
- Function Names with and without TD Prefix
- Examples: How to Use Pack
- Pack Syntax
- Required Syntax Elements for Pack
- Optional Syntax Elements for Pack
- Pack Input
- Pack Output
- Analytics Database Analytic Function Categories
- Recommendations for Using Analytic Functions

This concise summary and code examples provide a foundational understanding of the Pack function and related SQL operations within Teradata Vantage.","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack","2024-07-27 11:52:10"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Examples-How-to-Use-Pack","text/html;charset=UTF-8","200","","Indexable","","Pack Function Examples | Teradata Vantage - Examples: How to Use Pack - Analytics Database","90","845","See examples of the Analytics Database (SQL Engine) function Pack.","66","423","","0","Pack Function Examples | Teradata Vantage - Examples: How to Use Pack - Analytics Database","90","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Examples-How-to-Use-Pack","","","","","","209287","13445","13445","4.766","A+","116","49","2.367","44.713","Hard","11.250","1","5","","707","707","0","99.860","714","711","0","","","","","","","","","0.468","","","","","","1.1","## Summary

In Teradata Vantage, the Pack function is an analytic function that allows you to compact multiple rows of data into a single row. This can be useful in various scenarios, such as summarizing data or preparing it for further analysis. The Pack function is part of a broader set of database analytic functions designed to facilitate complex data manipulation and analysis.

Below are the SQL commands commonly used for managing data in Teradata databases, including examples of Select, Update, Delete, and Create operations.

## Code Example

### 1. Select
The SELECT statement is used to query data from a database.

```sql
SELECT *
FROM Employees
WHERE Department = 'Sales';
```

### 2. Update
The UPDATE statement is used to modify existing records in a table.

```sql
UPDATE Employees
SET Salary = Salary * 1.10
WHERE PerformanceRating = 'Excellent';
```

### 3. Delete
The DELETE statement is used to remove records from a table.

```sql
DELETE FROM Employees
WHERE TerminationDate < '2021-01-01';
```

### 4. Create
The CREATE statement is used to create a new table in the database.

```sql
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Department VARCHAR(50),
    Salary DECIMAL(10, 2),
    HireDate DATE
);
```

## Keywords and Phrases

- Pack Function Examples
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: April 6, 2024
- Product Category: Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Pack Syntax
- Pack Input
- Pack Output
- Examples: How to Use Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_SimpleImputeFit
- TD_BinCodeTransform
- TD_OneHotEncodingTransform
- TD_Pivoting
- TD_ScaleTransform
- TD_TargetEncodingTransform
- TD_Unpivoting
- Sessionize
- nPath
- TD_NaiveBayesTextClassifierPredict
- TD_SentimentExtractor
- TD_TFIDF
- Hypothesis Testing Functions
- Example: Default Options
- Example: Nondefault Options

This overview provides a foundational understanding of some essential SQL operations within the Teradata Vantage environment, alongside insights into the Pack function and its applications.","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Examples-How-to-Use-Pack","2024-07-27 12:51:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Examples-How-to-Use-Pack/Example-Default-Options","text/html;charset=UTF-8","200","","Indexable","","Pack Function Example | Teradata Vantage - Example: Default Options - Analytics Database","88","813","See example of Analytics Database (SQL Engine) function Pack that uses default options.","87","551","","0","Pack Function Example | Teradata Vantage - Example: Default Options - Analytics Database","88","Database Analytic Functions","27","Pack with Default Options SQL Call","34","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Examples-How-to-Use-Pack/Example-Default-Options","","","","","","211505","13401","13401","4.751","A+","169","134","1.261","4.818","Very Hard","11.559","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.442","","","","","","1.1","## Summary

The **Teradata Vantage™ Analytics Database** provides powerful analytic functions, including the ability to manipulate and analyze data using SQL commands such as SELECT, UPDATE, DELETE, and CREATE. This functionality allows users to efficiently manage their data while performing complex analytical tasks. In this section, we focus on the Pack function, which is used to aggregate multiple columns into a single packed column, as well as provide examples of the basic SQL commands.

### Code Example

#### 1. SELECT

```sql
SELECT city, state, period, temp_f 
FROM ville_temperature 
WHERE state = 'Tennessee';
```

#### 2. UPDATE

```sql
UPDATE ville_temperature 
SET temp_f = temp_f + 1 
WHERE city = 'Nashville';
```

#### 3. DELETE

```sql
DELETE FROM ville_temperature 
WHERE period < '2022-01-01 00:00:00';
```

#### 4. CREATE

```sql
CREATE TABLE ville_temperature (
    sn INT,
    city VARCHAR(50),
    state VARCHAR(50),
    period TIMESTAMP,
    temp_f FLOAT
);
```

#### 5. Pack Function Example

**Pack with Default Options SQL Call:**

```sql
SELECT * FROM Pack (
  ON ville_temperature
  USING
  Delimiter (',')
  OutputColumn ('packed_data')
  IncludeColumnName ('true')
  TargetColumns ('[1:4]')
  Accumulate ('sn')
) AS dt ORDER BY 2;
```

**Pack with Default Options Output:**

| packed_data                                               | sn |
|----------------------------------------------------------|----|
| city:Nashville,state:Tennessee,period:2022-01-01 00:00:00,temp_f:35.1 | 1  |
| city:Nashville,state:Tennessee,period:2022-01-01 01:00:00,temp_f:36.2 | 2  |
| city:Nashville,state:Tennessee,period:2022-01-01 02:00:00,temp_f:34.5 | 3  |
| city:Nashville,state:Tennessee,period:2022-01-01 03:00:00,temp_f:33.6 | 4  |
| city:Nashville,state:Tennessee,period:2022-01-01 04:00:00,temp_f:33.1 | 5  |
| city:Knoxville,state:Tennessee,period:2022-01-01 03:00:00,temp_f:33.2 | 6  |
| city:Knoxville,state:Tennessee,period:2022-01-01 04:00:00,temp_f:32.8 | 7  |
| city:Knoxville,state:Tennessee,period:2022-01-01 05:00:00,temp_f:32.4 | 8  |
| city:Knoxville,state:Tennessee,period:2022-01-01 06:00:00,temp_f:32.2 | 9  |
| city:Knoxville,state:Tennessee,period:2022-01-01 07:00:00,temp_f:32.4 | 10 |

### Keywords and Phrases

- Pack Function Example
- Teradata Vantage
- Default Options
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- TD Functions for Data Manipulation and Analysis","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Examples-How-to-Use-Pack/Example-Default-Options","2024-07-27 12:07:12"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Examples-How-to-Use-Pack/Example-Nondefault-Options","text/html;charset=UTF-8","200","","Indexable","","Pack Function Example | Teradata Vantage - Example: Nondefault Options - Analytics Database","91","847","See example of Analytics Database (SQL Engine) function Pack that uses nondefault options.","90","575","","0","Pack Function Example | Teradata Vantage - Example: Nondefault Options - Analytics Database","91","Database Analytic Functions","27","Pack with Nondefault Options SQL Call","37","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Examples-How-to-Use-Pack/Example-Nondefault-Options","","","","","","211111","13337","13337","4.728","A+","175","90","1.944","61.283","Normal","11.390","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.820","","","","","","1.1","## Summary

This document provides an overview of the foundational SQL operations, specifically focusing on the `SELECT`, `UPDATE`, `DELETE`, and `CREATE` commands. These operations are essential for interacting with databases in Teradata Vantage, especially within the context of managing and manipulating data in the Analytics Database.

### Code Example

#### 1. **Select**
The `SELECT` statement is used to query data from a database.

```sql
SELECT city, state, period, temp_f
FROM ville_temperature
WHERE state = 'Tennessee'
ORDER BY period;
```

#### 2. **Update**
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE ville_temperature
SET temp_f = temp_f + 1.0
WHERE city = 'Nashville' AND period = '2022-01-01 00:00:00';
```

#### 3. **Delete**
The `DELETE` statement is used to remove records from a table.

```sql
DELETE FROM ville_temperature
WHERE city = 'Knoxville' AND period < '2022-01-01 05:00:00';
```

#### 4. **Create**
The `CREATE` statement is used to create new tables in the database.

```sql
CREATE TABLE new_temperature_data (
    city VARCHAR(50),
    state VARCHAR(50),
    period TIMESTAMP,
    temp_f FLOAT
);
```

### Keywords and Phrases

- **Pack Function Example**
- **Teradata Vantage**
- **Example: Nondefault Options**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Examples-How-to-Use-Pack/Example-Nondefault-Options","2024-07-27 11:21:32"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Examples-How-to-Use-Pack/Pack-Examples-Input","text/html;charset=UTF-8","200","","Indexable","","Pack Examples Input - Analytics Database","40","373","The input table, ville_temperature contains temperature readings for the cities Nashville and Knoxville, in the state of Tennessee. ville_temperature sn city state period temp_f 1 Nashville Tennessee 2022-01-01 00:00:00 35.1 2 Nashville Tennessee 2022-01-01 01:00:00 36.2 3 Nashville Tennessee 2022-01-01 02:00:00 34.5 4...","323","1989","","0","Pack Examples Input - Analytics Database","40","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Examples-How-to-Use-Pack/Pack-Examples-Input","","","","","","213578","13262","13262","4.701","A+","126","77","1.636","64.174","Normal","11.092","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","1.192","","","","","","1.1","### Summary
In the context of managing an analytics database, performing operations such as selecting, updating, deleting, and creating records is fundamental. The examples below illustrate how to execute these operations using SQL syntax, specifically tailored for the `ville_temperature` table, which contains temperature readings for Nashville and Knoxville in Tennessee.

### Code Examples

#### 1. **Select**
To retrieve records from the `ville_temperature` table, you can use the `SELECT` statement. For example, to select all temperature readings for Nashville:

```sql
SELECT * 
FROM ville_temperature 
WHERE city = 'Nashville';
```

#### 2. **Update**
To update a specific temperature reading, use the `UPDATE` statement. For instance, if you want to change the temperature for Nashville on January 1, 2022, at 03:00:00 from 33.6 to 34.0:

```sql
UPDATE ville_temperature 
SET temp_f = 34.0 
WHERE city = 'Nashville' AND period = '2022-01-01 03:00:00';
```

#### 3. **Delete**
To delete a specific record, use the `DELETE` statement. For example, to delete the temperature reading for Knoxville on January 1, 2022, at 04:00:00:

```sql
DELETE FROM ville_temperature 
WHERE city = 'Knoxville' AND period = '2022-01-01 04:00:00';
```

#### 4. **Create**
To add a new temperature reading to the table, use the `INSERT INTO` statement. For instance, to insert a new temperature reading for Nashville on January 1, 2022, at 05:00:00:

```sql
INSERT INTO ville_temperature (sn, city, state, period, temp_f) 
VALUES (11, 'Nashville', 'Tennessee', '2022-01-01 05:00:00', 35.5);
```

### Keywords and Phrases
- Pack Examples Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact
- Limitations When Using PARTITION BY
- Recommendations for Using Analytic Functions
- Examples: How to Use Pack
- Example: Default Options
- Example: Nondefault Options
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- Data Exploration Functions
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- Feature Engineering Transform Functions
- Antiselect
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer
- TD_FunctionFit
- TD_FunctionTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_PolynomialFeaturesFit
- TD_PolynomialFeaturesTransform
- TD_RowNormalizeFit
- TD_RowNormalizeTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_Unpivoting
- Model Training Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_KNN
- TD_SVM
- TD_XGBoost
- Model Scoring Functions
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_SVMPredict
- TD_XGBoostPredict
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- Text Analytic Functions
- TD_NaiveBayesTextClassifierPredict
- TD_SentimentExtractor
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Testing Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Path and Pattern Analysis Functions
- nPath
- Sessionize

This compilation provides a foundational understanding for managing data within an analytics database, illustrating common SQL operations that can be performed on the `ville_temperature` dataset.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Examples-How-to-Use-Pack/Pack-Examples-Input","2024-07-27 11:59:49"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Optional-Syntax-Elements-for-Pack","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for Pack - Analytics Database","54","495","TargetColumns Specify the names of the input table columns to pack into a single output column. Column names must be valid object names, which are defined in Teradata Vantage™ - SQL Fundamentals, B035-1141. These names become the column names of the virtual columns. If you specify this syntax element, but do not specif...","323","2054","","0","Optional Syntax Elements for Pack - Analytics Database","54","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Optional-Syntax-Elements-for-Pack","","","","","","209250","13318","13318","4.721","A+","209","67","3.119","42.564","Hard","11.541","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.602","","","","","","1.1","## Summary

In the context of an Analytics Database, several SQL commands are essential for managing database interactions. The fundamental SQL operations include selecting, updating, deleting, and creating records in the database. Each operation serves a specific purpose in data management, from retrieving data to modifying or removing it.

### Code Examples

Here are examples of SQL commands for selecting, updating, deleting, and creating records in an Analytics Database:

### 1. Select

The `SELECT` statement is used to retrieve data from one or more tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

*Example: Retrieve names and ages from the employees table where the age is greater than 30.*

```sql
SELECT name, age
FROM employees
WHERE age > 30;
```

### 2. Update

The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

*Example: Update the age of an employee with ID 5.*

```sql
UPDATE employees
SET age = 35
WHERE id = 5;
```

### 3. Delete

The `DELETE` statement is used to remove records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

*Example: Delete an employee record where the ID is 10.*

```sql
DELETE FROM employees
WHERE id = 10;
```

### 4. Create

The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

*Example: Create a new table for storing employee details.*

```sql
CREATE TABLE employees (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    age INT,
    department VARCHAR(50)
);
```

## Keywords and Phrases

- **Optional Syntax Elements for Pack**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Data Cleaning Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Pack Syntax**
- **Required Syntax Elements for Pack**
- **Pack Input**
- **Pack Output**
- **Example: Default Options**
- **Example: Nondefault Options**
- **Function Names**
- **Accumulated Columns Impact**
- **Datatype Change**
- **Displaying Online Help**
- **Workload Management Configuration**
- **Avoid Deadlocks**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions**
- **TD_ConvertTo**
- **TD_GetRowsWithMissingValues**
- **TD_SimpleImputeFit**
- **TD_SimpleImputeTransform**
- **Unpack Syntax**
- **Data Exploration Functions**
- **TD_CategoricalSummary**
- **TD_ColumnSummary**
- **TD_Histogram**
- **TD_UnivariateStatistics**
- **Feature Engineering Utility Functions**
- **Model Evaluation Functions**
- **TD_Silhouette**
- **TD_ClassificationEvaluator**
- **TD_RegressionEvaluator**
- **TD_ROC**
- **Path and Pattern Analysis Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Optional-Syntax-Elements-for-Pack","2024-07-27 12:34:09"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Pack-Input","text/html;charset=UTF-8","200","","Indexable","","Pack Input - Analytics Database","31","281","Input Table Schema Column Data Type Description target_column Any Column to pack, with other input columns, into single output column. accumulate_column or other_input_column Any Column to copy to output table. Typically, one such column contains row identifiers.","263","1676","","0","Pack Input - Analytics Database","31","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Pack-Input","","","","","","209033","13099","13099","4.644","A+","78","39","2.000","8.490","Very Hard","11.145","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.460","","","","","","1.1","# Analytics Database: SQL Operations Overview

This document provides an overview of basic SQL operations such as Select, Update, Delete, and Create in the context of an analytics database, specifically focusing on Teradata Vantage™. 

## Summary of SQL Operations

1. **Select**: Used to retrieve data from one or more tables.
2. **Update**: Used to modify existing data within a table.
3. **Delete**: Used to remove records from a table.
4. **Create**: Used to create new tables or databases.

## Code Example

### 1. Select
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```
*Example*: Retrieve names and ages from the `employees` table where the age is greater than 30.
```sql
SELECT name, age
FROM employees
WHERE age > 30;
```

### 2. Update
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```
*Example*: Update the salary for an employee with ID 101.
```sql
UPDATE employees
SET salary = 75000
WHERE employee_id = 101;
```

### 3. Delete
```sql
DELETE FROM table_name
WHERE condition;
```
*Example*: Delete records of employees who have left the company.
```sql
DELETE FROM employees
WHERE status = 'left';
```

### 4. Create
```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```
*Example*: Create a new table for storing department information.
```sql
CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(50),
    location VARCHAR(100)
);
```

## Keywords and Phrases
- Pack Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Recommendations for Using Analytic Functions
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency

This overview serves as a foundational reference for performing essential SQL operations within an analytics database, utilizing Teradata Vantage's capabilities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Pack-Input","2024-07-27 12:21:28"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Pack-Output","text/html;charset=UTF-8","200","","Indexable","","Pack Output - Analytics Database","32","297","Output Table Schema Column Data Type Description output_column VARCHAR Packed column. If a column of type DATE is packed into the output, its format is 'YYYY-MM-DD'. accumulate_column Nonnumeric column or numeric column with ColCast ('false'):Same as in input table Numeric column with ColCast ('true'): VARCHAR Column c...","323","2087","","0","Pack Output - Analytics Database","32","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Pack-Output","","","","","","209809","13271","13271","4.705","A+","113","46","2.457","26.906","Very Hard","11.221","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.847","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database provides robust analytic functions that allow users to perform a variety of tasks, including data cleaning, exploration, feature engineering, model training, scoring, and evaluation. These functions are essential for transforming raw data into actionable insights. The database supports various operations on data, including the creation, selection, updating, and deletion of records. Below are code examples demonstrating these operations.

### Code Examples

#### 1. Create
To create a new table in the Analytics Database, you can use the following SQL syntax:
```sql
CREATE TABLE sales_data (
    sale_id INT,
    product_name VARCHAR(100),
    sale_date DATE,
    sale_amount DECIMAL(10, 2)
);
```

#### 2. Select
To retrieve data from a table, you can use the SELECT statement:
```sql
SELECT product_name, sale_amount
FROM sales_data
WHERE sale_date >= '2023-01-01';
```

#### 3. Update
To update existing records in a table, you can use the UPDATE statement:
```sql
UPDATE sales_data
SET sale_amount = sale_amount * 1.10
WHERE sale_date < '2023-01-01';
```

#### 4. Delete
To remove records from a table, you can use the DELETE statement:
```sql
DELETE FROM sales_data
WHERE sale_amount < 100.00;
```

### Keywords and Phrases
- Pack Output
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- TD Functions
- SQL Operations
- Create, Select, Update, Delete","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Pack-Output","2024-07-27 12:08:46"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Pack-Syntax","text/html;charset=UTF-8","200","","Indexable","","Pack Function Syntax | Teradata Vantage - Pack Syntax - Analytics Database","74","679","See the syntax of Analytics Database (SQL Engine) function Pack and read descriptions of its required and optional syntax elements.","131","816","","0","Pack Function Syntax | Teradata Vantage - Pack Syntax - Analytics Database","74","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Pack-Syntax","","","","","","208730","13005","13005","4.610","A+","133","49","2.714","61.596","Normal","11.324","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.550","","","","","","1.1","### Summary
The **Pack** function in Teradata Vantage is an analytic function designed to aggregate multiple values into a single output column, based on specified target columns. This function can be particularly useful for data transformations where you want to concatenate or combine values into a single string, optionally including delimiters. The syntax allows for various options, such as including column names in the output and accumulating values over specified columns.

### Code Example Section

#### 1. **Select**
```sql
SELECT Pack(
   ON my_table
   USING
   TargetColumns ('column1', 'column2')
   Delimiter (',')
   OutputColumn ('packed_column')
) AS packed_result
FROM my_table;
```

#### 2. **Insert (Create)**
```sql
CREATE TABLE packed_results AS (
   SELECT Pack(
      ON my_table
      USING
      TargetColumns ('column1', 'column2')
      Delimiter (',')
      OutputColumn ('packed_column')
   )
) WITH NO DATA;
```

#### 3. **Update**
```sql
UPDATE my_table
SET packed_column = Pack(
   ON my_table
   USING
   TargetColumns ('column1', 'column2')
   Delimiter (',')
   OutputColumn ('packed_column')
)
WHERE some_condition;
```

#### 4. **Delete**
```sql
DELETE FROM my_table
WHERE packed_column IS NULL;
```

### Keywords and Phrases
- **Pack Function Syntax**
- **Teradata Vantage**
- **Pack Syntax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Language**
- **English (United States)**
- **Last Update**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Pack Input**
- **Pack Output**
- **Examples: How to Use Pack**
- **Required Syntax Elements for Pack**
- **Optional Syntax Elements for Pack**
- **Accumulate**
- **Delimiter**
- **OutputColumn**
- **TargetColumns**

This summary and examples section provides a concise guide to using the Pack function in Teradata Vantage, along with relevant keywords and phrases that can assist in further exploration of the topic.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Pack-Syntax","2024-07-27 12:52:22"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Required-Syntax-Elements-for-Pack","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for Pack - Analytics Database","54","499","ON clause The ON clause accepts.... OutputColumn Specify the name to give to the packed output column. The name must be a valid object name, as defined in Teradata Vantage™ - SQL Fundamentals, B035-1141.","203","1312","","0","Required Syntax Elements for Pack - Analytics Database","54","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Required-Syntax-Elements-for-Pack","","","","","","207757","12836","12836","4.550","A+","78","40","1.950","38.910","Hard","11.196","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.456","","","","","","1.1","# Summary of Required Syntax Elements for Pack - Analytics Database

The Analytics Database in Teradata Vantage™ provides powerful analytic functions that can perform various data manipulation tasks. The ""Pack"" function is a specific analytic function that consolidates multiple input columns into a single output column, which can be useful for data transformation and preparation.

## Code Examples

### SELECT
```sql
SELECT column1, column2, PACK(column3, column4) AS packed_column
FROM your_table
WHERE condition;
```

### INSERT
```sql
INSERT INTO your_table (column1, column2, packed_column)
VALUES (value1, value2, PACK(value3, value4));
```

### UPDATE
```sql
UPDATE your_table
SET packed_column = PACK(column3, column4)
WHERE condition;
```

### DELETE
```sql
DELETE FROM your_table
WHERE condition;
```

## Keywords and Phrases
- **Required Syntax Elements for Pack**: List of mandatory components needed to execute the Pack function.
- **Analytics Database**: A system designed for performing complex analytics.
- **Deployment**: The process of setting up the database for use.
- **VantageCloud**: Cloud version of Teradata Vantage.
- **VantageCore**: Core functionalities of the Vantage system.
- **Edition**: Different versions or distributions of the Vantage software.
- **Enterprise**: Business-level features and services offered by Teradata.
- **IntelliFlex**: Teradata's flexible infrastructure design.
- **VMware**: Virtualization software that can be used with Vantage.
- **Product**: General term for the offering from Teradata.
- **Analytics Database**: Core analytic capabilities of the Teradata platform.
- **Release Number**: Versioning for the software (e.g., 17.20).
- **Published**: Date of release (e.g., June 2022).
- **Language**: English (United States).
- **Last Update**: Date of the most recent update (e.g., 2024-04-06).
- **Function Syntax Descriptions**: Guidelines on how to properly use functions in SQL.
- **Limitations When Using PARTITION BY**: Restrictions related to the partitioning of data in queries.
- **Input Table Schemas**: Structures of the tables used as input for functions.
- **Displaying Online Help**: Accessing usage notes and help documents related to functions.

This summary and the examples provided should give you a solid understanding of how to utilize the Pack function and its context within the Teradata Vantage Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Required-Syntax-Elements-for-Pack","2024-07-27 11:46:50"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity","text/html;charset=UTF-8","200","","Indexable","","StringSimilarity Function | Teradata Vantage - StringSimilarity - Analytics Database","84","735","This Analytics Database (SQL Engine) function calculates the similarity between two strings, using the specified comparison method.","131","818","","0","StringSimilarity Function | Teradata Vantage - StringSimilarity - Analytics Database","84","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity","","","","","","209257","13159","13159","4.665","A+","114","47","2.426","20.331","Very Hard","11.259","1","4","","707","707","0","99.860","715","713","0","","","","","","","","","0.664","","","","","","1.1","### Overview of Teradata Vantage - StringSimilarity Function

The **StringSimilarity** function in Teradata Vantage is a powerful analytical tool used to calculate the similarity between two strings. It is particularly useful in data cleaning, exploration, and processing tasks where determining the closeness of textual data is essential. This function supports various comparison methods and is designed to work with strings in the same Unicode script, specifically in Normalization Form C (NFC).

### Key Features
- **Comparison Methods**: Supports different methods to compare strings.
- **Unicode Support**: Ensures comparison is done with strings that are normalized.
- **ASCII Collation**: When using the ORDER BY clause, it only supports ASCII collation.

### Code Examples

Here’s how you can use the StringSimilarity function along with basic SQL operations like SELECT, UPDATE, DELETE, and CREATE in Teradata.

#### 1. **Select**
```sql
SELECT 
    string1, 
    string2, 
    StringSimilarity(string1, string2) AS similarity_score
FROM 
    my_table
WHERE 
    StringSimilarity(string1, string2) > 0.8;
```
This query selects pairs of strings from `my_table` that have a similarity score greater than 0.8.

#### 2. **Update**
```sql
UPDATE my_table
SET similarity_score = StringSimilarity(string1, string2)
WHERE id = 123;
```
This query updates the `similarity_score` of a specific record in `my_table` for the given `id`.

#### 3. **Delete**
```sql
DELETE FROM my_table
WHERE StringSimilarity(string1, string2) < 0.5;
```
This query deletes records from `my_table` where the similarity score between `string1` and `string2` is less than 0.5.

#### 4. **Create**
```sql
CREATE TABLE my_table (
    id INT,
    string1 VARCHAR(255),
    string2 VARCHAR(255),
    similarity_score FLOAT
);
```
This command creates a new table called `my_table` with columns for id, two strings, and their calculated similarity score.

### Summary
The StringSimilarity function in Teradata Vantage provides a robust means to analyze string similarity, facilitating tasks in data cleaning, exploration, and machine learning applications. By leveraging SQL operations like SELECT, UPDATE, DELETE, and CREATE, you can effectively manage and analyze your data.

### Keywords and Phrases
- StringSimilarity Function
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- Input Table Rows Redistribution
- Usage Notes
- Function Syntax Descriptions
- Maximum Number of Columns in a Database Table
- Recommendations for Using Analytic Functions
- StringSimilarity Syntax
- StringSimilarity Input
- StringSimilarity Output
- Examples: How to Use StringSimilarity
- ASCII Collation","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity","2024-07-27 11:32:33"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/Examples-How-to-Use-StringSimilarity","text/html;charset=UTF-8","200","","Indexable","","StringSimilarity Function Examples | Teradata Vantage - Examples: How to Use StringSimilarity - Analytics Database","114","1031","See examples of the Analytics Database (SQL Engine) function StringSimilarity.","78","486","","0","StringSimilarity Function Examples | Teradata Vantage - Examples: How to Use StringSimilarity - Analytics Database","114","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/Examples-How-to-Use-StringSimilarity","","","","","","209256","13443","13443","4.766","A+","116","48","2.417","29.348","Very Hard","11.273","1","5","","707","707","0","99.860","713","710","0","","","","","","","","","1.441","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a collection of analytic functions that facilitate data manipulation and analysis within the database environment. This includes functions for data cleaning, exploration, feature engineering, modeling, and evaluation. Understanding how to use these functions, particularly basic SQL operations such as SELECT, UPDATE, DELETE, and CREATE, is essential for effectively managing and querying data in Teradata.

### Code Examples

Here are examples of the basic SQL operations in Teradata:

#### 1. SELECT
```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

#### 2. UPDATE
```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department = 'Sales';
```

#### 3. DELETE
```sql
DELETE FROM employees
WHERE hire_date < '2020-01-01';
```

#### 4. CREATE
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    hire_date DATE,
    salary DECIMAL(10, 2)
);
```

### Keywords and Phrases

- **StringSimilarity Function Examples**
- **Teradata Vantage**
- **Examples: How to Use StringSimilarity**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Maximum Number of Columns in a Database Table**
- **StringSimilarity Syntax**
- **StringSimilarity Input**
- **StringSimilarity Output**
- **Examples: How to Use StringSimilarity**
- **TD_ConvertTo**
- **TD_GetFutileColumns**
- **TD_GetRowsWithoutMissingValues**
- **TD_SimpleImputeFit**
- **TD_SimpleImputeTransform**
- **TD_Histogram**
- **TD_WhichMax**
- **TD_WhichMin**
- **NGramSplitter**
- **TD_NaiveBayesTextClassifierPredict** 
- **TD_SentimentExtractor**
- **TD_TFIDF**
- **TD_ROC**
- **Hypothesis Test Types**
- **Attribution**
- **nPath**
- **Sessionize**","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/Examples-How-to-Use-StringSimilarity","2024-07-27 12:30:11"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/Examples-How-to-Use-StringSimilarity/StringSimilarity-Example-Specify-Column-Names","text/html;charset=UTF-8","200","","Indexable","","StringSimilarity Function Example | Teradata Vantage - StringSimilarity Example: Specify Column Names - Analytics Database","122","1117","See example of Analytics Database (SQL Engine) function StringSimilarity that specifies columns only by name.","109","683","","0","StringSimilarity Function Example | Teradata Vantage - StringSimilarity Example: Specify Column Names - Analytics Database","122","Database Analytic Functions","27","StringSimilarity Input","22","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/Examples-How-to-Use-StringSimilarity/StringSimilarity-Example-Specify-Column-Names","","","","","","224208","14132","14132","5.010","A+","259","139","1.863","84.087","Easy","11.100","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.462","","","","","","1.1","## Summary

In Teradata Vantage, analytic functions provide a powerful way to analyze and manipulate data. This document covers the essential SQL statements for performing basic operations such as selecting, updating, deleting, and creating records in a Teradata database. It also highlights the use of the `StringSimilarity` function, which is useful for comparing strings and evaluating their similarity.

### Code Examples

#### 1. SELECT
The `SELECT` statement is used to query data from one or more tables.

```sql
SELECT id, src_text1, tar_text
FROM strsimilarity_input
WHERE id = 1;
```

#### 2. UPDATE
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE strsimilarity_input
SET src_text1 = 'new_value'
WHERE id = 1;
```

#### 3. DELETE
The `DELETE` statement removes records from a table.

```sql
DELETE FROM strsimilarity_input
WHERE id = 1;
```

#### 4. CREATE
The `CREATE` statement is used to create a new table.

```sql
CREATE TABLE strsimilarity_input (
    id INT,
    src_text1 VARCHAR(255),
    tar_text VARCHAR(255)
);
```

### StringSimilarity Function Example

The `StringSimilarity` function is used to compare pairs of strings based on various algorithms. Below is an example that specifies column names for comparison.

#### SQL Call with Specified Column Names

```sql
SELECT * FROM StringSimilarity (
    ON strsimilarity_input PARTITION BY ANY
    USING
    ComparisonColumnPairs ('jaro (src_text1, tar_text) AS jaro1_sim',
                           'LD (src_text1, tar_text) AS ld1_sim',
                           'n_gram (src_text1, tar_text, 2) AS ngram1_sim',
                           'jaro_winkler (src_text1, tar_text, 0.1) AS jw1_sim'
    )
    CaseSensitive ('true')
    Accumulate ('id', 'src_text1', 'tar_text')
) AS dt ORDER BY id;
```

### Keywords and Phrases

- StringSimilarity Function Example
- Teradata Vantage - StringSimilarity Example: Specify Column Names
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- nPath
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- TD_OneClassSVM
- TD_DecisionForest
- TD_SVM
- TD_XGBoost
- TD_KMeans
- TD_NaiveBayesTextClassifierPredict
- TD_ROC
- TD_TrainTestSplit

This summary and examples provide a foundational understanding of Teradata SQL operations and the utilization of analytic functions, specifically focusing on string similarity analysis.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/Examples-How-to-Use-StringSimilarity/StringSimilarity-Example-Specify-Column-Names","2024-07-27 12:17:53"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/Examples-How-to-Use-StringSimilarity/StringSimilarity-Example-Specify-Column-Ranges","text/html;charset=UTF-8","200","","Indexable","","StringSimilarity Function Example | Teradata Vantage - StringSimilarity Example: Specify Column Ranges - Analytics Database","123","1119","See example of Analytics Database (SQL Engine) function StringSimilarity that specifies a column range.","103","641","","0","StringSimilarity Function Example | Teradata Vantage - StringSimilarity Example: Specify Column Ranges - Analytics Database","123","Database Analytic Functions","27","StringSimilarity Input","22","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/Examples-How-to-Use-StringSimilarity/StringSimilarity-Example-Specify-Column-Ranges","","","","","","224022","14086","14086","4.994","A+","258","140","1.843","84.951","Easy","10.952","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.672","","","","","","1.1","### Summary

In this guide, we will explore basic SQL operations such as `SELECT`, `UPDATE`, `DELETE`, and `CREATE`. These commands are fundamental to managing and manipulating data within a database. 

- **SELECT**: Used to retrieve data from one or more tables.
- **UPDATE**: Used to modify existing data within a table.
- **DELETE**: Used to remove records from a table.
- **CREATE**: Used to create new tables or databases.

### Code Example

#### 1. SELECT

```sql
SELECT * 
FROM employees 
WHERE department = 'Sales';
```
This query retrieves all records from the `employees` table where the department is 'Sales'.

#### 2. UPDATE

```sql
UPDATE employees 
SET salary = salary * 1.10 
WHERE performance_rating = 'Excellent';
```
This command increases the salary by 10% for all employees who have an 'Excellent' performance rating.

#### 3. DELETE

```sql
DELETE FROM employees 
WHERE termination_date < '2022-01-01';
```
This query deletes all records from the `employees` table where the termination date is before January 1, 2022.

#### 4. CREATE

```sql
CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(100) NOT NULL
);
```
This command creates a new table called `departments` with two columns: `department_id` and `department_name`.

### Keywords and Phrases

- **StringSimilarity Function Example**
- **Teradata Vantage - StringSimilarity Example: Specify Column Ranges**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language English (United States)**
- **Last Update April 2024**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Function Names with and without TD Prefix**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/Examples-How-to-Use-StringSimilarity/StringSimilarity-Example-Specify-Column-Ranges","2024-07-27 12:30:13"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/StringSimilarity-Input","text/html;charset=UTF-8","200","","Indexable","","StringSimilarity Input - Analytics Database","43","374","Column Data Type Description column1 CHARACTER or VARCHAR String to compare to string in column2. column2 CHARACTER or VARCHAR String to compare to string in column1. accumulate_column Any Column to copy to output table. If any column1 or column2 in the input table schema supports more than 200 characters, you must cas...","323","2125","","0","StringSimilarity Input - Analytics Database","43","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/StringSimilarity-Input","","","","","","209573","13233","13233","4.691","A+","102","41","2.488","28.475","Very Hard","11.183","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.551","","","","","","1.1","# Summary

This document provides an overview of the Teradata Vantage™ Analytics Database, specifically focusing on analytic functions available in the Analytics Database. It includes details on various function categories such as data cleaning, data exploration, feature engineering, model training, scoring, evaluation functions, text analytics, and hypothesis testing. Additionally, it outlines the syntax and usage of functions like `StringSimilarity`, `TD_ConvertTo`, and various model training functions, among others. 

The document is structured to facilitate understanding of how to read function syntax, the required and optional elements for each function, and provides examples for practical application.

## Code Examples

### Create Table
```sql
CREATE TABLE customer_data (
    customer_id INT,
    customer_name VARCHAR(100),
    email VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Insert Data
```sql
INSERT INTO customer_data (customer_id, customer_name, email)
VALUES (1, 'John Doe', 'john.doe@example.com'),
       (2, 'Jane Smith', 'jane.smith@example.com');
```

### Select Data
```sql
SELECT customer_id, customer_name, email
FROM customer_data
WHERE created_at > '2022-01-01';
```

### Update Data
```sql
UPDATE customer_data
SET email = 'john.newemail@example.com'
WHERE customer_id = 1;
```

### Delete Data
```sql
DELETE FROM customer_data
WHERE customer_id = 2;
```

## Keywords and Phrases
- StringSimilarity Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Function Syntax Descriptions
- Input Table Rows Redistribution
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Examples: How to Use StringSimilarity
- TD_ConvertTo
- TD_GetRowsWithoutMissingValues
- TD_KMeans
- TD_OneClassSVM
- TD_XGBoost
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_NaiveBayesTextClassifierPredict
- TD_TextParser
- nPath
- Sessionize
- Spool Space Exhaustion
- Workload Management Configuration
- Avoid Deadlocks Using Volatile Tables","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/StringSimilarity-Input","2024-07-27 12:10:09"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/StringSimilarity-Output","text/html;charset=UTF-8","200","","Indexable","","StringSimilarity Output - Analytics Database","44","390","Output Table Schema Column Data Type Description accumulate_column Any Column copied from input table. output_column DOUBLE PRECISION Similarity between strings in column pair.","176","1163","","0","StringSimilarity Output - Analytics Database","44","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/StringSimilarity-Output","","","","","","208801","13019","13019","4.615","A+","64","37","1.730","0.000","Very Hard","11.122","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.471","","","","","","1.1","## Summary

Teradata Vantage™ offers a robust set of analytic functions within its Analytics Database to facilitate data manipulation, exploration, and modeling. This includes features to create, update, delete, and select data efficiently. Here, we provide examples of SQL commands for these operations in the context of an analytics database.

## Code Examples

### 1. Select

The `SELECT` statement is used to query data from a database.

```sql
SELECT customer_id, customer_name, purchase_amount
FROM sales
WHERE purchase_date >= '2023-01-01';
```

### 2. Update

The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE sales
SET purchase_amount = purchase_amount * 1.10
WHERE purchase_date >= '2023-01-01';
```

### 3. Delete

The `DELETE` statement is used to remove records from a table.

```sql
DELETE FROM sales
WHERE purchase_date < '2022-01-01';
```

### 4. Create

The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE customer_data (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(255),
    email VARCHAR(255),
    purchase_amount DECIMAL(10, 2)
);
```

---

### Keywords and Phrases

- **StringSimilarity Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number** - 17.20
- **Published** - June 2022
- **Language** - English (United States)
- **Last Update** - 2024-04-06
- **dita:mapPath** - gjn1627595495337.ditamap
- **dita:ditavalPath** - ayr1485454803741.ditaval
- **dita:id** - jmh1512506877710
- **Product Category** - Teradata Vantage™

#### Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions

#### Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Limitations When Using PARTITION BY

#### Examples of Functions
- StringSimilarity
- TD_ConvertTo
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_SimpleImputeFit
- TD_DecisionForest
- TD_GLMPredict

This overview captures essential SQL operations and relevant keywords related to the Teradata Vantage Analytics Database, suitable for users looking to leverage its powerful analytic capabilities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/StringSimilarity-Output","2024-07-27 11:52:33"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/StringSimilarity-Syntax","text/html;charset=UTF-8","200","","Indexable","","StringSimilarity Function Syntax | Teradata Vantage - StringSimilarity Syntax - Analytics Database","98","865","See the syntax of Analytics Database (SQL Engine) function StringSimilarity and read descriptions of its required and optional syntax elements.","143","879","","0","StringSimilarity Function Syntax | Teradata Vantage - StringSimilarity Syntax - Analytics Database","98","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/StringSimilarity-Syntax","","","","","","208655","13041","13041","4.623","A+","118","48","2.458","39.441","Hard","11.303","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.543","","","","","","1.1","## Summary of StringSimilarity Function in Teradata Vantage

The `StringSimilarity` function in Teradata Vantage is an analytic function used to measure the similarity between pairs of strings in specified columns. It is particularly useful when dealing with data cleaning, deduplication, and matching tasks. The function allows users to define the type of comparison they want to perform through its parameters, including specifying whether the comparison should be case-sensitive.

### Syntax

```sql
StringSimilarity (
  ON { table | view | (query) } [ PARTITION BY ANY ]
  USING
  ComparisonColumnPairs ('comparison_type (column1,column2[,constant])[ AS output_column]' [,...])
  [ CaseSensitive ({'true'|'t'|'yes'|'y'|'1'|'false'|'f'|'no'|'n'|'0'}[,...]) ]
  [ Accumulate ({ 'accumulate_column' | accumulate_column_range }[,...]) ]
)
```

### Code Example Section

#### 1. SELECT
To use the `StringSimilarity` function within a SELECT statement, you can retrieve similarity scores between pairs of columns:

```sql
SELECT 
  id, 
  StringSimilarity( 
    ON my_table 
    USING ComparisonColumnPairs ('Levenshtein (name1, name2) AS similarity_score') 
  ) 
FROM my_table;
```

#### 2. UPDATE
You can utilize the `StringSimilarity` function to update records based on similarity conditions:

```sql
UPDATE my_table
SET similarity_flag = 
  CASE 
    WHEN StringSimilarity( 
      ON my_table 
      USING ComparisonColumnPairs ('Levenshtein (name1, name2)') 
    ) > 0.8 THEN 'Similar'
    ELSE 'Not Similar' 
  END;
```

#### 3. DELETE
You might want to delete records with low similarity scores:

```sql
DELETE FROM my_table 
WHERE StringSimilarity( 
  ON my_table 
  USING ComparisonColumnPairs ('Levenshtein (name1, name2)') 
) < 0.5;
```

#### 4. CREATE
You can create a table that includes a similarity score using the `StringSimilarity` function:

```sql
CREATE TABLE similar_records AS 
(
  SELECT 
    id, 
    StringSimilarity( 
      ON my_table 
      USING ComparisonColumnPairs ('Levenshtein (name1, name2) AS similarity_score') 
    ) AS similarity_score
  FROM my_table
) WITH DATA;
```

### Keywords and Phrases
- **StringSimilarity Function Syntax**
- **Teradata Vantage**
- **StringSimilarity Syntax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/StringSimilarity-Syntax","2024-07-27 12:45:57"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/StringSimilarity-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","StringSimilarity Syntax Elements - Analytics Database","53","478","ComparisonColumnPairs Specify the names of the input table columns that contain strings to compare (column1 and column2), how to compare them (comparison_type), and (optionally) a constant and the name of the output column for their similarity (output_column). The similarity is a value in the range [0, 1]. For column1 ...","323","2019","","0","StringSimilarity Syntax Elements - Analytics Database","53","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/StringSimilarity-Syntax-Elements","","","","","","217000","14850","14850","5.264","A+","609","139","4.381","56.248","Fairly Hard","12.371","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.597","","","","","","1.1","## Summary

The Analytics Database in Teradata Vantage™ provides comprehensive analytic functions that facilitate data exploration, cleaning, feature engineering, model training, scoring, and evaluation. This overview elaborates on the core SQL operations you can perform—Select, Update, Delete, and Create—within this context. Each operation is essential for managing and manipulating data, especially when using analytic functions.

## Code Example

### 1. Create

Creating a new table in the Analytics Database can be done using the following SQL syntax:

```sql
CREATE TABLE employee_data (
    employee_id INT,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    hire_date DATE,
    salary DECIMAL(10, 2)
);
```

### 2. Select

Selecting data from the created table can be achieved using:

```sql
SELECT employee_id, first_name, last_name
FROM employee_data
WHERE salary > 50000;
```

### 3. Update

Updating existing records in the table is straightforward:

```sql
UPDATE employee_data
SET salary = salary * 1.10
WHERE hire_date < '2020-01-01';
```

### 4. Delete

To remove records from the table, you can execute:

```sql
DELETE FROM employee_data
WHERE employee_id = 101;
```

## Keywords and Phrases

- **StringSimilarity Syntax Elements**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Release Number 17.20**
- **Published June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Product Category: Teradata Vantage™**

### Function Categories
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**

### Usage Notes
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Accumulated Columns Impact on Function Performance**

### Examples
- **StringSimilarity Examples**
- **TD_ConvertTo Examples**
- **TD_GetRowsWithoutMissingValues Examples**
- **TD_KMeansPredict Examples**

These keywords and phrases encapsulate the features and functionalities available in the Teradata Vantage Analytics Database, aiding users in effectively leveraging its capabilities for data analytics and management.","27","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/StringSimilarity-Syntax-Elements","2024-07-27 11:46:04"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo","text/html;charset=UTF-8","200","","Indexable","","TD_ConvertTo Function | ConvertTo | Teradata Vantage - TD_ConvertTo - Analytics Database","88","823","This Analytics Database (SQL Engine) data cleaning function converts the specified input table columns to specified data types.","127","785","","0","TD_ConvertTo Function | ConvertTo | Teradata Vantage - TD_ConvertTo - Analytics Database","88","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo","","","","","","209823","13295","13295","4.713","A+","181","57","3.175","42.825","Hard","11.413","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.627","","","","","","1.1","### Summary

The **TD_ConvertTo** function in Teradata Vantage is a powerful utility that allows users to convert specified input table columns to designated data types. This conversion ensures that the data is in the correct format, which is crucial for efficient processing and compatibility with subsequent operations. The function is part of the broader suite of analytic functions available in Teradata Vantage, which provides tools for data cleaning, exploration, feature engineering, model training, and evaluation.

### Code Examples

Here are examples of basic SQL operations using Teradata syntax, including `SELECT`, `UPDATE`, `DELETE`, and `CREATE`:

#### 1. SELECT
```sql
SELECT column1, column2
FROM your_table
WHERE condition;
```

#### 2. UPDATE
```sql
UPDATE your_table
SET column1 = new_value
WHERE condition;
```

#### 3. DELETE
```sql
DELETE FROM your_table
WHERE condition;
```

#### 4. CREATE
```sql
CREATE TABLE your_table (
    column1 INT,
    column2 VARCHAR(100),
    column3 DATE
);
```

### Keywords and Phrases

- **TD_ConvertTo Function**
- **ConvertTo**
- **Teradata Vantage**
- **TD_ConvertTo - Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Function Names with and without TD Prefix**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Recommendations for Using Analytic Functions** 

These keywords and phrases encapsulate the essential aspects and functionalities of the TD_ConvertTo function and its context within the broader framework of Teradata Vantage.","27","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo","2024-07-27 11:59:06"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/Example-How-to-Use-TD_ConvertTo","text/html;charset=UTF-8","200","","Indexable","","TD_ConvertTo Example | ConvertTo | Teradata Vantage - Example: How to Use TD_ConvertTo - Analytics Database","107","1017","See an example of the Analytics Database (SQL Engine) data cleaning function TD_ConvertTo.","90","579","","0","TD_ConvertTo Example | ConvertTo | Teradata Vantage - Example: How to Use TD_ConvertTo - Analytics Database","107","Database Analytic Functions","27","TD_ConvertTo InputTable: input_table","36","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/Example-How-to-Use-TD_ConvertTo","","","","","","210975","13975","13975","4.954","A+","329","81","4.062","100.000","Very Easy","12.068","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.523","","","","","","1.1","### Summary
In Teradata Vantage, the `TD_ConvertTo` function is designed to convert data types of specified columns within a dataset. This is particularly useful for ensuring that data types are consistent for analytics and model training purposes. The function allows users to specify which columns to convert and the target data type they wish to convert to. 

### Code Example: Using TD_ConvertTo
This example demonstrates how to use the `TD_ConvertTo` function to convert the `fare` column from its original data type to an integer data type.

```sql
-- Initial SQL query to retrieve and display the input data
SELECT * FROM input_table;

-- Using TD_ConvertTo to change the data type of the 'fare' column to integer
SELECT * FROM TD_ConvertTo (
  ON input_table AS InputTable
  USING
  TargetColumns ('fare')            -- Specify the column to convert
  TargetDataType ('integer')        -- Specify the target data type
) AS dt ORDER BY 1;                   -- Ordering the results
```

### Output Example
After executing the `TD_ConvertTo` function, the output displays the `fare` column as an integer:

| passenger | survived | pclass | name                                  | gender | age | sibsp | parch | ticket     | fare | cabin | embarked |
|-----------|----------|--------|---------------------------------------|--------|-----|-------|-------|------------|------|-------|----------|
| 97        | 0        | 1      | Goldschmidt; Mr. George B            | male   | 71  | 0     | 0     | PC 17754   | 34   | A5    | C        |
| 488       | 0        | 1      | Kent; Mr. Edward Austin              | male   | 58  | 0     | 0     | 11771      | 29   | B37   | C        |
| 505       | 1        | 1      | Maioni; Miss. Roberta                | female | 16  | 0     | 0     | 110152     | 86   | B79   | S        |
| 631       | 1        | 1      | Barkworth; Mr. Algernon Henry Wilson | male   | 80  | 0     | 0     | 27042      | 30   | A23   | S        |
| 873       | 0        | 1      | Carlsson; Mr. Frans Olof             | male   | 33  | 0     | 0     | 695        | 5    | B51 B53 B55 | S |

### Keywords and Phrases
- TD_ConvertTo Example
- ConvertTo
- Teradata Vantage - Example: How to Use TD_ConvertTo
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Recommendations for Using Analytic Functions
- Example: How to Use TD_ConvertTo
- Example: Using TD_GetRowsWithMissingValues
- Non-Deterministic Behavior
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_SimpleImputeTransform
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_Unpivoting
- SQL script file
- Downloadable example zip file

This structure provides clarity on the purpose of the `TD_ConvertTo` function, an example of its implementation, and a comprehensive list of relevant keywords and phrases associated with Teradata Vantage and its analytic functions.","26","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/Example-How-to-Use-TD_ConvertTo","2024-07-27 12:17:18"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/Optional-Syntax-Elements-for-TD_ConvertTo","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_ConvertTo - Analytics Database","62","578","Accumulate Specify the input table column names to copy to the output table.","76","479","","0","Optional Syntax Elements for TD_ConvertTo - Analytics Database","62","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/Optional-Syntax-Elements-for-TD_ConvertTo","","","","","","207428","12650","12650","4.484","A+","57","35","1.629","7.782","Very Hard","11.156","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.462","","","","","","1.1","## Summary

This document provides a comprehensive overview of the **Analytics Database Analytic Functions** offered by Teradata Vantage™. The document covers various functions and their syntax for tasks such as data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analytics. It also includes specific usage notes, examples, and optional syntax elements for functions like `TD_ConvertTo`, `TD_GetFutileColumns`, and others.

### Code Example

Below are code examples demonstrating fundamental SQL operations: **SELECT**, **UPDATE**, **DELETE**, and **CREATE**.

#### SELECT
```sql
SELECT 
    customer_id, 
    first_name, 
    last_name 
FROM 
    customers 
WHERE 
    city = 'New York';
```

#### UPDATE
```sql
UPDATE 
    customers 
SET 
    city = 'Los Angeles' 
WHERE 
    customer_id = 1;
```

#### DELETE
```sql
DELETE FROM 
    customers 
WHERE 
    customer_id = 2;
```

#### CREATE
```sql
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    city VARCHAR(50)
);
```

### Keywords and Phrases

- **Optional Syntax Elements for TD_ConvertTo**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Language**
- **English (United States)**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Recommendations for Using Analytic Functions**

This structured overview serves as a foundation for understanding the capabilities and syntax of Teradata's Analytics Database analytic functions, which can aid in various data analysis tasks.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/Optional-Syntax-Elements-for-TD_ConvertTo","2024-07-27 11:47:17"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/Required-Syntax-Elements-for-TD_ConvertTo","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_ConvertTo - Analytics Database","62","582","ON clause Accept the InputTable clause. TargetColumns Specify the names of the InputTable columns to convert to another data type. TargetDataType Specify either a single target data type for all target columns or a target data type for each target column. If you specify multiple target data types, the function assigns ...","323","1979","","0","Required Syntax Elements for TD_ConvertTo - Analytics Database","62","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/Required-Syntax-Elements-for-TD_ConvertTo","","","","","","220773","14249","14249","5.051","A+","549","145","3.786","42.576","Hard","11.988","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.537","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a wide array of analytic functions and SQL operations that can be performed on data. This includes essential database operations such as selecting, updating, deleting, and creating records. Understanding the syntax and usage of these operations is crucial for effectively managing and analyzing data.

### Code Examples

Here are some basic SQL operations that can be performed in the Teradata analytics environment:

### 1. SELECT

The `SELECT` statement is used to query data from a database table.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

### 2. UPDATE

The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

### 3. DELETE

The `DELETE` statement is used to remove records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

### 4. CREATE

The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Keywords and Phrases

- **Required Syntax Elements for TD_ConvertTo**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number 17.20**
- **Published June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Product Category: Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/Required-Syntax-Elements-for-TD_ConvertTo","2024-07-27 12:28:27"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/TD_ConvertTo-Input","text/html;charset=UTF-8","200","","Indexable","","TD_ConvertTo Input - Analytics Database","39","364","InputTable Schema Column Data Type Description target_column Any Column to convert to target_datatype.","102","670","","0","TD_ConvertTo Input - Analytics Database","39","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/TD_ConvertTo-Input","","","","","","208408","12923","12923","4.581","A+","54","36","1.500","0.000","Very Hard","11.105","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.554","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a robust set of analytic functions designed to support various data processing and analysis tasks. It includes capabilities for data cleaning, exploration, feature engineering, model training, scoring, and evaluation, among others. These functions help users manipulate datasets and derive insights efficiently. This document outlines key SQL commands such as Select, Update, Delete, and Create, which are essential for interacting with the database.

### Code Example

Here are examples of basic SQL commands for managing tables in the Analytics Database:

#### 1. **Select**
Retrieving data from a table is fundamental in SQL. The `SELECT` statement is used to query the database.

```sql
SELECT target_column, another_column
FROM your_table
WHERE condition;
```

#### 2. **Update**
Updating existing records in a table can be accomplished using the `UPDATE` statement.

```sql
UPDATE your_table
SET target_column = new_value
WHERE condition;
```

#### 3. **Delete**
To remove records from a table, the `DELETE` command is utilized.

```sql
DELETE FROM your_table
WHERE condition;
```

#### 4. **Create**
Creating a new table in the database is done using the `CREATE TABLE` statement.

```sql
CREATE TABLE new_table (
    column1 datatype,
    column2 datatype,
    target_column datatype
);
```

### Keywords and Phrases
- TD_ConvertTo Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Data Type Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This structured overview provides a clear understanding of how to interact with the Teradata Vantage™ Analytics Database, emphasizing the core SQL operations needed for effective data management and analysis.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/TD_ConvertTo-Input","2024-07-27 12:31:11"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/TD_ConvertTo-Output","text/html;charset=UTF-8","200","","Indexable","","TD_ConvertTo Output - Analytics Database","40","380","Output Table Schema Column Data Type Description target_column target_datatype Column converted to target_datatype. input_column Same as in InputTable Column copied from InputTable. AccumulateColumns Any The specified column names in the Accumulate element copied to the output table.","284","1857","","0","TD_ConvertTo Output - Analytics Database","40","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/TD_ConvertTo-Output","","","","","","209421","13087","13087","4.639","A+","78","39","2.000","4.151","Very Hard","11.139","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.554","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database includes a variety of analytic functions designed to facilitate data cleaning, exploration, feature engineering, model training, scoring, and evaluation. With the addition of functions such as `TD_ConvertTo`, `TD_GetFutileColumns`, and `TD_GetRowsWithoutMissingValues`, users can effectively manipulate and analyze data within their databases, ensuring robust data quality and insightful analytics.

### Code Example

Here’s a simple set of SQL examples covering the basic operations of `SELECT`, `UPDATE`, `DELETE`, and `CREATE` in the context of an analytics database.

#### 1. SELECT

```sql
SELECT customer_id, first_name, last_name 
FROM customers 
WHERE country = 'USA';
```

#### 2. UPDATE

```sql
UPDATE customers 
SET email = 'new_email@example.com' 
WHERE customer_id = 12345;
```

#### 3. DELETE

```sql
DELETE FROM customers 
WHERE customer_id = 12345;
```

#### 4. CREATE

```sql
CREATE TABLE customer_orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    order_amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);
```

### Keywords and Phrases

- **TD_ConvertTo Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number** - 17.20
- **Published** - June 2022
- **Language** - English (United States)
- **Last Update** - 2024-04-06
- **dita:mapPath** - gjn1627595495337.ditamap
- **dita:ditavalPath** - ayr1485454803741.ditaval
- **dita:id** - jmh1512506877710
- **Product Category** - Teradata Vantage™
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
  
This summary and the code examples give an overview of the fundamental operations one can perform in the Teradata Vantage™ Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/TD_ConvertTo-Output","2024-07-27 12:16:47"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/TD_ConvertTo-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_ConvertTo Syntax | ConvertTo | Teradata Vantage - TD_ConvertTo Syntax - Analytics Database","93","871","See the syntax of the Analytics Database (SQL Engine) function TD_ConvertTo and read descriptions of its required and optional syntax elements.","143","896","","0","TD_ConvertTo Syntax | ConvertTo | Teradata Vantage - TD_ConvertTo Syntax - Analytics Database","93","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/TD_ConvertTo-Syntax","","","","","","208373","12923","12923","4.581","A+","104","48","2.167","32.995","Hard","11.275","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.573","","","","","","1.1","## Summary

In Teradata Vantage, the `TD_ConvertTo` function is a powerful utility designed for converting data types of one or more columns in a table or view. This function can be particularly useful in scenarios where data cleaning or transformation is required for analytics. The syntax allows you to specify the input table, the target columns for conversion, the desired data types, and optionally, columns to accumulate during the process.

### Code Examples

Here are examples of basic SQL operations: `SELECT`, `UPDATE`, `DELETE`, and `CREATE`, as well as an example of using `TD_ConvertTo`.

#### 1. SELECT
```sql
SELECT column1, column2
FROM my_table
WHERE condition;
```

#### 2. UPDATE
```sql
UPDATE my_table
SET column1 = 'new_value'
WHERE condition;
```

#### 3. DELETE
```sql
DELETE FROM my_table
WHERE condition;
```

#### 4. CREATE
```sql
CREATE TABLE new_table (
    column1 INT,
    column2 VARCHAR(100)
);
```

#### 5. TD_ConvertTo Example
```sql
CREATE TABLE converted_table AS (
    SELECT 
        TD_ConvertTo (
            ON my_table AS InputTable
            USING
            TargetColumns ('column1', 'column2')
            TargetDataType ('VARCHAR(50)', 'INTEGER')
        )
    )
WITH NO DATA;
```

In this example, a new table `converted_table` is created based on the conversion of `column1` to `VARCHAR(50)` and `column2` to `INTEGER` from the `my_table`.

### Keywords and Phrases
- **TD_ConvertTo Syntax**
- **ConvertTo**
- **Teradata Vantage - TD_ConvertTo Syntax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product: Analytics Database**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: April 6, 2024**
- **Function Syntax Descriptions**
- **Data Exploration Functions**
- **Data Cleaning Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Workload Management Configuration**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion** 
- **Recommendations for Using Analytic Functions**
- **Input Table Rows Redistribution**
- **Display Online Help for Functions** 

This summary and the included examples should provide a solid foundation for understanding how to utilize Teradata's `TD_ConvertTo` function and perform basic SQL operations.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/TD_ConvertTo-Syntax","2024-07-27 12:19:24"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/TD_ConvertTo-Usage-Notes","text/html;charset=UTF-8","200","","Indexable","","TD_ConvertTo Usage Notes - Analytics Database","45","433","Data types define the kind of data that can be stored in a column, such as text, numbers, dates, or Boolean values. Converting a column's data type may be necessary to ensure that the data is in the appropriate format for analysis or modeling. This conversion is an important aspect of data cleaning that can improve the...","323","1977","","0","TD_ConvertTo Usage Notes - Analytics Database","45","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/TD_ConvertTo-Usage-Notes","","","","","","208878","13354","13354","4.734","A+","264","57","4.632","49.277","Hard","11.670","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.696","","","","","","1.1","# Teradata Vantage™ Analytics Database: TD_ConvertTo Usage Notes

## Summary
The TD_ConvertTo function in Teradata Vantage™ is used to change the data type of a column in a table, which is essential for data cleaning and preparation in analytics. By ensuring that data types are appropriate for the intended analysis, users can enhance the accuracy and efficiency of their queries. This function plays a significant role in data consistency, enabling proper calculations, comparisons, and memory optimization.

## Code Example

### 1. **Create Table**
```sql
CREATE TABLE SalesData (
    SaleID INT,
    SaleDate VARCHAR(10),
    SaleAmount VARCHAR(20)
);
```

### 2. **Insert Sample Data**
```sql
INSERT INTO SalesData (SaleID, SaleDate, SaleAmount) VALUES
(1, '2023-01-01', '100.50'),
(2, '2023-01-02', '150.75'),
(3, '2023-01-03', '200.00');
```

### 3. **Convert Data Types**
Convert `SaleDate` from VARCHAR to DATE and `SaleAmount` from VARCHAR to DECIMAL.
```sql
SELECT 
    SaleID,
    TD_ConvertTo(DATE, SaleDate) AS ConvertedSaleDate,
    TD_ConvertTo(DECIMAL(10,2), SaleAmount) AS ConvertedSaleAmount
FROM SalesData;
```

### 4. **Update Table with Converted Values**
To update the original table with the converted values:
```sql
UPDATE SalesData
SET 
    SaleDate = TD_ConvertTo(DATE, SaleDate),
    SaleAmount = TD_ConvertTo(DECIMAL(10,2), SaleAmount);
```

### 5. **Delete Unnecessary Columns (if any)**
If necessary, drop the original VARCHAR columns after conversion:
```sql
ALTER TABLE SalesData 
DROP COLUMN SaleDate VARCHAR(10), 
DROP COLUMN SaleAmount VARCHAR(20);
```

### 6. **Select Data to Verify Changes**
```sql
SELECT * FROM SalesData;
```

## Keywords and Phrases
- **TD_ConvertTo**: Function to convert data types in Teradata.
- **Usage Notes**: Important considerations for using TD_ConvertTo effectively.
- **Analytics Database**: Database specifically designed for analytical functions and operations.
- **Data Cleaning Functions**: Functions aimed at preparing data for analysis.
- **Deployment**: Setting up and configuring Teradata Vantage™.
- **VantageCloud**: Cloud-based version of Teradata Vantage.
- **VantageCore**: Core functionalities of the Teradata Vantage platform.
- **Edition**: Different versions or releases of Teradata products.
- **Enterprise**: Large-scale implementations of Teradata solutions.
- **IntelliFlex**: Flexible infrastructure options for Teradata.
- **VMware**: Virtualization platform often used with Teradata deployments.
- **Release Number**: Version number of the software (e.g., 17.20).
- **Published**: Date when the documentation or version was released (e.g., June 2022).
- **Language**: Specifies the language used in documentation (e.g., English (United States)).
- **Last Update**: Most recent date for updates on the documentation (e.g., 2024-04-06).
- **Data Types**: Types of data (e.g., INT, VARCHAR, DECIMAL, DATE).
- **Data Conversion**: Process of changing data types for usability and consistency.
- **Memory Optimization**: Reducing the amount of memory used by converting data types appropriately.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/TD_ConvertTo-Usage-Notes","2024-07-27 11:30:20"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns","text/html;charset=UTF-8","200","","Indexable","","TD_GetFutileColumns | GetFutileColumns | Teradata Vantage - TD_GetFutileColumns - Analytics Database","100","945","This Analytics Database (SQL Engine) data cleaning function returns the futile column names under specific conditions. Learn about them here.","141","883","","0","TD_GetFutileColumns | GetFutileColumns | Teradata Vantage - TD_GetFutileColumns - Analytics Database","100","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns","","","","","","210585","13647","13647","4.838","A+","320","73","4.384","47.726","Hard","11.785","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","0.511","","","","","","1.1","### Summary

Data cleaning is a critical part of data analysis and involves identifying and addressing issues within a dataset. One common issue is the presence of futile columns, which are columns that do not provide useful information for analysis, such as constant values, unique identifiers, or redundant data. The Teradata Vantage function `TD_GetFutileColumns` helps to identify these columns so they can be removed, thus streamlining the dataset and facilitating more efficient analysis.

### Code Examples

Here are some basic SQL operations for interacting with a database, specifically tailored to Teradata:

#### 1. **Create**
To create a new table:

```sql
CREATE TABLE Employees (
    EmployeeID INT,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    HireDate DATE
);
```

#### 2. **Select**
To select data from a table:

```sql
SELECT EmployeeID, FirstName, LastName
FROM Employees
WHERE HireDate > '2020-01-01';
```

#### 3. **Update**
To update existing records in a table:

```sql
UPDATE Employees
SET LastName = 'Smith'
WHERE EmployeeID = 1;
```

#### 4. **Delete**
To delete records from a table:

```sql
DELETE FROM Employees
WHERE HireDate < '2010-01-01';
```

### Keywords and Phrases

- **TD_GetFutileColumns**
- **GetFutileColumns**
- **Teradata Vantage - TD_GetFutileColumns - Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Data Quality**
- **Data Integrity**
- **Data Preparation** 
- **Data Transformation**
- **Analytics Database Analytic Functions**
- **Futile Columns** 
- **Constant Columns**
- **Unique Identifier Columns**
- **Redundant Columns**
- **Text Columns**
- **Data Analysis Efficiency**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns","2024-07-27 12:12:27"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/Example-How-to-Use-TD_GetFutileColumns","text/html;charset=UTF-8","200","","Indexable","","Example: How to Use TD_GetFutileColumns - Analytics Database","60","576","TD_GetFutileColumns InputTable passenger  gender ticket           cabin survived 
 --------- ------ ---------------- ----- -------- 
         1 male   A/5 21171        C            0
         2 Female PC 17599         C            1
         3 Female STON/O2. 3101282 C            1
         4 male   113803           C ...","323","1250","","0","Example: How to Use TD_GetFutileColumns - Analytics Database","60","Database Analytic Functions","27","TD_GetFutileColumns InputTable","30","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/Example-How-to-Use-TD_GetFutileColumns","","","","","","211135","13623","13623","4.829","A+","316","109","2.899","55.307","Fairly Hard","12.163","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.822","","","","","","1.1","## Summary

In Teradata Vantage™, analytic functions are crucial for processing and analyzing large datasets. This document provides an overview of key SQL operations: **Select**, **Update**, **Delete**, and **Create**. These operations allow users to manipulate and query data effectively within the Analytics Database environment. Below are code examples demonstrating each operation.

### Code Examples

#### 1. Select
This operation retrieves data from a table.

```sql
SELECT *
FROM employees
WHERE department = 'Sales';
```

#### 2. Update
This operation modifies existing records in a table.

```sql
UPDATE employees
SET salary = salary * 1.10
WHERE performance_rating = 'Excellent';
```

#### 3. Delete
This operation removes records from a table.

```sql
DELETE FROM employees
WHERE termination_date < '2022-01-01';
```

#### 4. Create
This operation creates a new table in the database.

```sql
CREATE TABLE department_summary AS (
    SELECT department, COUNT(*) AS employee_count
    FROM employees
    GROUP BY department
) WITH DATA;
```

### Keywords and Phrases
- **Analytics Database**
- **Analytic Functions**
- **Select**
- **Update**
- **Delete**
- **Create**
- **Teradata Vantage™**
- **Deployment**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Release Number 17.20**
- **Published June 2022**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Non-Deterministic Behavior**
- **Volume and Performance**
- **Input Table Rows Redistribution**
- **Workload Management Configuration**
- **Maximum Number of Columns in a Database Table**
- **Deadlocks Using Volatile Tables**
- **Function Names with and without TD Prefix**
- **Displaying Online Help for Analytics Database Analytic Functions**

This structured overview provides a foundational understanding of how to utilize SQL operations within Teradata Vantage's analytic framework, along with relevant terminology for further exploration.","28","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/Example-How-to-Use-TD_GetFutileColumns","2024-07-27 11:32:44"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/Optional-Syntax-Elements-for-TD_GetFutileColumns","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_GetFutileColumns - Analytics Database","69","646","CategoricalSummaryColumn Specifies the column name from the CategoricalSummaryTable generated using TD_CategoricalSummary. Default: ColumnName. ThresholdValue Specifies the value up to which a particular column in input table is not considered futile. The value must be between 0 to 1. Default: 0.95","299","1917","","0","Optional Syntax Elements for TD_GetFutileColumns - Analytics Database","69","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/Optional-Syntax-Elements-for-TD_GetFutileColumns","","","","","","208380","13075","13075","4.635","A+","84","45","1.867","7.540","Very Hard","11.215","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.492","","","","","","1.1","## Overview

The Teradata Analytics Database provides a comprehensive set of analytic functions designed to facilitate data manipulation, exploration, and modeling. These functions support various operations, including data cleaning, feature engineering, model training, and evaluation. The database is equipped to handle complex queries and analyses, making it a powerful tool for data analysts and data scientists.

### Code Example Section

Below are examples of basic SQL operations: `SELECT`, `UPDATE`, `DELETE`, and `CREATE`, specifically tailored for use within a Teradata Analytics Database context.

#### 1. SELECT

The `SELECT` statement is used to retrieve data from one or more tables.

```sql
SELECT 
    customer_id, 
    first_name, 
    last_name, 
    email 
FROM 
    customers 
WHERE 
    country = 'USA';
```

#### 2. UPDATE

The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE 
    customers 
SET 
    email = 'new_email@example.com' 
WHERE 
    customer_id = 12345;
```

#### 3. DELETE

The `DELETE` statement is used to remove existing records from a table.

```sql
DELETE FROM 
    customers 
WHERE 
    last_purchase_date < '2022-01-01';
```

#### 4. CREATE

The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE product_sales (
    product_id INT,
    product_name VARCHAR(100),
    sale_date DATE,
    quantity_sold INT,
    sales_amount DECIMAL(10, 2)
);
```

### Keywords and Phrases

- **Optional Syntax Elements for TD_GetFutileColumns**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Limitations When Using PARTITION BY**
- **Function Names with and without TD Prefix**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This summary provides a concise overview of functionalities and operations within the Teradata Analytics Database, along with practical SQL examples for common tasks.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/Optional-Syntax-Elements-for-TD_GetFutileColumns","2024-07-27 11:26:49"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/Required-Syntax-Elements-for-TD_GetFutileColumns","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_GetFutileColumns - Analytics Database","69","650","ON clause Accepts the InputTable and CategoryTable clauses.","59","384","","0","Required Syntax Elements for TD_GetFutileColumns - Analytics Database","69","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/Required-Syntax-Elements-for-TD_GetFutileColumns","","","","","","207422","12628","12628","4.477","A+","52","35","1.486","0.000","Very Hard","11.151","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.448","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database includes a wide range of analytic functions that facilitate data manipulation and analysis. This summary covers fundamental SQL operations such as SELECT, UPDATE, DELETE, and CREATE, which form the backbone of data management in any relational database. Understanding these operations is essential for effectively utilizing the Analytics Database and its functions for data cleaning, exploration, feature engineering, and more.

## Code Examples

### 1. SELECT
The SELECT statement is used to retrieve data from one or more tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

Example:
```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

### 2. UPDATE
The UPDATE statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

Example:
```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department = 'Sales';
```

### 3. DELETE
The DELETE statement removes existing records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

Example:
```sql
DELETE FROM employees
WHERE last_name = 'Smith';
```

### 4. CREATE
The CREATE statement is used to create a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

Example:
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

## Keywords and Phrases
- Required Syntax Elements for TD_GetFutileColumns
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Input Table Rows Redistribution
- Function Names with and without TD Prefix
- Recommendations for Using Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Online Help for Analytics Database Analytic Functions
- Workload Management Configuration for Analytics Database Analytic Functions

This structured overview and code examples provide a foundational understanding of SQL operations within the Teradata Vantage™ Analytics Database environment.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/Required-Syntax-Elements-for-TD_GetFutileColumns","2024-07-27 11:47:47"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/TD_GetFutileColumns-Input","text/html;charset=UTF-8","200","","Indexable","","TD_GetFutileColumns Input - Analytics Database","46","432","Input Table Schema Column Data Type Description Target_Column VARCHAR The input table columns from the Category Summary table. Categorical Summary Table Schema Column Data Type Description ColumnName VARCHAR,CHARACTER SET UNICODE The column name of the target column. DistinctValue VARCHAR,CHARACTER SET UNICODE The dist...","323","2224","","0","TD_GetFutileColumns Input - Analytics Database","46","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/TD_GetFutileColumns-Input","","","","","","210553","13158","13158","4.665","A+","100","42","2.381","18.298","Very Hard","11.151","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.533","","","","","","1.1","### Summary
This guide introduces the core SQL operations—Select, Update, Delete, and Create—within the context of the Teradata Vantage™ Analytics Database. These operations are fundamental for data manipulation and management in relational databases. 

### Code Example

#### 1. Select
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT Column1, Column2
FROM TableName
WHERE Condition;
```

**Example:**
```sql
SELECT FirstName, LastName
FROM Employees
WHERE Department = 'Sales';
```

#### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE TableName
SET Column1 = Value1, Column2 = Value2
WHERE Condition;
```

**Example:**
```sql
UPDATE Employees
SET Salary = Salary * 1.10
WHERE Department = 'Sales';
```

#### 3. Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM TableName
WHERE Condition;
```

**Example:**
```sql
DELETE FROM Employees
WHERE LastName = 'Smith';
```

#### 4. Create
The `CREATE` statement is used to create a new table or database.

```sql
CREATE TABLE TableName (
    Column1 DataType,
    Column2 DataType,
    ...
);
```

**Example:**
```sql
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Department VARCHAR(50),
    Salary DECIMAL(10, 2)
);
```

### Keywords and Phrases
- **TD_GetFutileColumns Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Data Cleaning Functions**
- **Pack**
- **StringSimilarity**
- **TD_ConvertTo**
- **TD_GetRowsWithoutMissingValues**
- **TD_OutlierFilterFit**
- **TD_SimpleImputeFit**
- **Unpack**
- **MovingAverage**
- **TD_CategoricalSummary**
- **TD_ColumnSummary**
- **TD_GetRowsWithMissingValues**
- **TD_Histogram**
- **TD_QQNorm**
- **TD_UnivariateStatistics**
- **TD_WhichMax**
- **TD_WhichMin**
- **Feature Engineering Transform Functions**
- **Antiselect**
- **TD_BinCodeFit**
- **TD_ColumnTransformer**
- **TD_FunctionFit**
- **TD_OneHotEncodingFit**
- **TD_OrdinalEncodingFit**
- **TD_Pivoting**
- **TD_PolynomialFeaturesFit**
- **TD_RandomProjectionFit**
- **TD_RowNormalizeFit**
- **TD_ScaleFit**
- **TD_TargetEncodingFit**
- **TD_Unpivoting**
- **Feature Engineering Utility Functions**
- **TD_FillRowID**
- **TD_NumApply**
- **TD_RoundColumns**
- **TD_StrApply**
- **Model Training Functions**
- **TD_DecisionForest**
- **TD_GLM**
- **TD_KMeans**
- **TD_KNN**
- **TD_OneClassSVM**
- **TD_SVM**
- **TD_XGBoost**
- **Model Scoring Functions**
- **TD_DecisionForestPredict**
- **TD_GLMPredict**
- **TD_KMeansPredict**
- **TD_OneClassSVMPredict**
- **TD_SVMPredict**
- **TD_XGBoostPredict**
- **Model Evaluation Functions**
- **TD_Silhouette**
- **TD_ClassificationEvaluator**
- **TD_RegressionEvaluator**
- **TD_ROC**
- **TD_TrainTestSplit**
- **Text Analytic Functions**
- **NGramSplitter**
- **TD_NaiveBayesTextClassifierPredict**
- **TD_SentimentExtractor**
- **TD_TextParser**
- **TD_TFIDF**
- **TD_WordEmbeddings**
- **Hypothesis Testing Functions**
- **TD_ANOVA**
- **TD_ChiSq**
- **TD_FTest**
- **TD_ZTest**
- **Path and Pattern Analysis Functions**
- **Attribution**
- **nPath**
- **Sessionize**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/TD_GetFutileColumns-Input","2024-07-27 12:07:48"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/TD_GetFutileColumns-Output","text/html;charset=UTF-8","200","","Indexable","","TD_GetFutileColumns Output - Analytics Database","47","448","Output Table Schema Column Data Type Description FutileColumns VARCHAR,CHARACTER SET UNICODE The column names that are futile.","126","865","","0","TD_GetFutileColumns Output - Analytics Database","47","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/TD_GetFutileColumns-Output","","","","","","208414","12946","12946","4.589","A+","58","36","1.611","0.000","Very Hard","11.120","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.764","","","","","","1.1","## Summary of Teradata Analytics Database Functions

The Teradata Analytics Database provides a robust set of analytic functions designed to facilitate data manipulation, machine learning, and statistical analysis. This includes functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation, among others. The functionality offered allows analysts and data scientists to derive insights and build predictive models efficiently.

### Code Examples

Here are some basic SQL operations commonly used in the Teradata Analytics Database, showcasing how to select, update, delete, and create data:

#### 1. SELECT
```sql
SELECT column1, column2
FROM your_table
WHERE condition;
```
**Example:**
```sql
SELECT name, age
FROM employees
WHERE department = 'Sales';
```

#### 2. UPDATE
```sql
UPDATE your_table
SET column1 = value1, column2 = value2
WHERE condition;
```
**Example:**
```sql
UPDATE employees
SET age = age + 1
WHERE department = 'Sales';
```

#### 3. DELETE
```sql
DELETE FROM your_table
WHERE condition;
```
**Example:**
```sql
DELETE FROM employees
WHERE termination_date < '2022-01-01';
```

#### 4. CREATE
```sql
CREATE TABLE your_table (
    column1 DATA_TYPE,
    column2 DATA_TYPE,
    ...
);
```
**Example:**
```sql
CREATE TABLE employees (
    employee_id INT,
    name VARCHAR(100),
    age INT,
    department VARCHAR(50)
);
```

### Keywords and Phrases
- TD_GetFutileColumns Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Example Syntax
- Function Output
- Input Table Rows Redistribution
- PARTITION BY Limitations
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion
- Avoid Deadlocks Using Volatile Tables
- Displaying Online Help for Functions
- TD_ExampleFunction
- Function Names with and without TD Prefix

This structured approach allows users to efficiently navigate and utilize the various analytic functions available in the Teradata Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/TD_GetFutileColumns-Output","2024-07-27 12:27:47"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/TD_GetFutileColumns-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_GetFutileColumns Syntax | GetFutileColumns | Teradata Vantage - TD_GetFutileColumns Syntax - Analytics Database","114","1075","See the syntax of the Analytics Database (SQL Engine) function TD_GetFutileColumns and read descriptions of its required and optional syntax elements.","150","942","","0","TD_GetFutileColumns Syntax | GetFutileColumns | Teradata Vantage - TD_GetFutileColumns Syntax - Analytics Database","114","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/TD_GetFutileColumns-Syntax","","","","","","208282","12918","12918","4.579","A+","102","45","2.267","18.746","Very Hard","11.278","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.465","","","","","","1.1","### Summary

In Teradata Vantage, the `TD_GetFutileColumns` function is part of the analytics database analytic functions. It is designed to identify columns in a dataset that do not provide significant information for predictive modeling or analysis. This function is particularly useful in data preprocessing, where removing uninformative features can enhance model performance and reduce complexity.

### Code Example

#### 1. SELECT
To select futile columns from a dataset, you can use the following SQL statement:

```sql
SELECT 
    TD_GetFutileColumns(
        ON my_table AS InputTable
        PARTITION BY ANY
        ON my_category_table AS CategoryTable
        DIMENSION
        USING 
            CategoricalSummaryColumn('target_column')
            ThresholdValue(0.05)
    ) AS FutileColumns;
```

#### 2. CREATE TABLE
You can create a new table that includes only the relevant columns by excluding the futile ones identified by the function:

```sql
CREATE TABLE my_cleaned_table AS (
    SELECT *
    FROM my_table
    WHERE ColumnName NOT IN (
        SELECT *
        FROM TD_GetFutileColumns(
            ON my_table AS InputTable
            PARTITION BY ANY
            ON my_category_table AS CategoryTable
            DIMENSION
            USING 
                CategoricalSummaryColumn('target_column')
                ThresholdValue(0.05)
        )
    )
) WITH NO DATA;
```

#### 3. UPDATE
If you want to update values in a specific column based on the results of the `TD_GetFutileColumns` function, you can do so as follows:

```sql
UPDATE my_table
SET my_column = NULL
WHERE ColumnName IN (
    SELECT *
    FROM TD_GetFutileColumns(
        ON my_table AS InputTable
        PARTITION BY ANY
        ON my_category_table AS CategoryTable
        DIMENSION
        USING 
            CategoricalSummaryColumn('target_column')
            ThresholdValue(0.05)
    )
);
```

#### 4. DELETE
To delete rows that contain futile columns, you can run:

```sql
DELETE FROM my_table
WHERE ColumnName IN (
    SELECT *
    FROM TD_GetFutileColumns(
        ON my_table AS InputTable
        PARTITION BY ANY
        ON my_category_table AS CategoryTable
        DIMENSION
        USING 
            CategoricalSummaryColumn('target_column')
            ThresholdValue(0.05)
    )
);
```

### Keywords and Phrases
- TD_GetFutileColumns Syntax
- GetFutileColumns
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Hypothesis Testing Functions
- TD_GetRowsWithoutMissingValues
- Example: How to Use TD_GetFutileColumns
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Limitations When Using PARTITION BY
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Avoid Deadlocks Using Volatile Tables
- Displaying Online Help for Analytics Database Analytic Functions","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/TD_GetFutileColumns-Syntax","2024-07-27 12:31:25"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues","text/html;charset=UTF-8","200","","Indexable","","TD_GetRowsWithoutMissingValues | GetRowsWithoutMissingValues - TD_GetRowsWithoutMissingValues - Analytics Database","114","1126","This Analytics Database (SQL Engine) data cleaning function displays the rows that have non-NULL values in the specified input table columns.","141","881","","0","TD_GetRowsWithoutMissingValues | GetRowsWithoutMissingValues - TD_GetRowsWithoutMissingValues - Analytics Database","114","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues","","","","","","213894","14750","14750","5.229","A+","645","120","5.375","45.164","Hard","12.651","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.548","","","","","","1.1","### Summary of TD_GetRowsWithoutMissingValues 

The `TD_GetRowsWithoutMissingValues` function in Teradata's Analytics Database is designed to filter rows from a specified input table, returning only those rows that do not contain any NULL values in selected columns. Handling NULL values is crucial in data analysis as they can skew results and impact the accuracy of insights derived from the data.

#### Benefits of Removing NULL Values:
- **Improved Accuracy**: Enhances the reliability of analysis by ensuring only complete data is considered.
- **Enhanced Efficiency**: Streamlines data processing, reducing time and resource consumption.
- **Increased Data Quality**: Improves the overall quality of the dataset, making it more useful for decision-making.
- **Better Customer Insights**: Provides a clearer view of customer behavior by eliminating gaps in data.

#### Techniques for Handling NULL Values:
- **Deleting Rows**: Removes all rows with any NULL values, which may result in loss of valuable data.
- **Deleting Columns**: Eliminates columns that contain NULLs, retaining more rows but potentially losing important information.
- **Imputing Values**: Fills NULLs with reasonable substitutes (like mean or median), maintaining dataset size.
- **Advanced Modeling**: Uses predictive techniques to estimate missing values based on other available data.

### Code Examples

#### Create Table
```sql
CREATE TABLE SampleData (
    ID INT,
    Name VARCHAR(100),
    Age INT,
    Email VARCHAR(100)
);
```

#### Insert Data
```sql
INSERT INTO SampleData (ID, Name, Age, Email) VALUES 
(1, 'Alice', 30, 'alice@example.com'),
(2, 'Bob', NULL, 'bob@example.com'),
(3, 'Charlie', 25, NULL),
(4, 'David', 40, 'david@example.com');
```

#### Select Rows Without Missing Values
```sql
SELECT * 
FROM TD_GetRowsWithoutMissingValues('SampleData', 'Name', 'Age', 'Email');
```

#### Update Row
```sql
UPDATE SampleData
SET Age = 35
WHERE ID = 1;
```

#### Delete Row
```sql
DELETE FROM SampleData
WHERE ID = 2;
```

### Keywords and Phrases
- **TD_GetRowsWithoutMissingValues**
- **GetRowsWithoutMissingValues**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language: English (United States)**
- **Last Update 2024-04-06**
- **Function Syntax Descriptions**
- **Usage Notes**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Limitations When Using PARTITION BY**
- **Recommendations for Using Analytic Functions**
- **Null Values Handling Techniques**","25","1","0","1","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues","2024-07-27 12:11:26"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/Example-How-to-Use-TD_GetRowsWithoutMissingValues","text/html;charset=UTF-8","200","","Indexable","","TD_GetRowsWithoutMissingValues Example | Teradata Vantage - Example: How to Use TD_GetRowsWithoutMissingValues - Analytics Database","131","1283","See an example of the Analytics Database (SQL Engine) data cleaning function TD_GetRowsWithoutMissingValues.","108","710","","0","TD_GetRowsWithoutMissingValues Example | Teradata Vantage - Example: How to Use TD_GetRowsWithoutMissingValues - Analytics Database","131","Database Analytic Functions","27","TD_GetRowsWithoutMissingValues InputTable: input_table","54","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/Example-How-to-Use-TD_GetRowsWithoutMissingValues","","","","","","210985","13939","13939","4.941","A+","300","79","3.797","91.873","Very Easy","11.993","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.601","","","","","","1.1","## Summary

The Teradata Vantage platform provides a robust set of analytic functions, particularly useful for data cleaning, exploration, feature engineering, model training, and evaluation. One such function, `TD_GetRowsWithoutMissingValues`, is specifically designed to filter out rows in a dataset that contain missing values in specified columns. This function is invaluable for ensuring data quality before conducting further analysis or modeling.

### Code Example

Here's how to perform basic SQL operations such as Select, Update, Delete, and Create in Teradata:

#### 1. SELECT
```sql
SELECT * 
FROM input_table 
WHERE survived = 1;
```

#### 2. UPDATE
```sql
UPDATE input_table 
SET age = 30 
WHERE passenger = 505;
```

#### 3. DELETE
```sql
DELETE FROM input_table 
WHERE passenger = 30;
```

#### 4. CREATE
```sql
CREATE TABLE input_table (
    passenger INT,
    survived INT,
    pclass INT,
    name VARCHAR(100),
    gender VARCHAR(10),
    age FLOAT,
    sibsp INT,
    parch INT,
    ticket VARCHAR(20),
    fare FLOAT,
    cabin VARCHAR(20),
    embarked CHAR(1)
);
```

### TD_GetRowsWithoutMissingValues Example

#### SQL Call
```sql
SELECT * 
FROM TD_GetRowsWithoutMissingValues (
  ON input_table AS InputTable
  USING
  TargetColumns ('[name:cabin]')
) AS dt;
```

#### Output Table
| passenger | survived | pclass | name                                 | gender | age | sibsp | parch | ticket  | fare | cabin       | embarked |
|-----------|----------|--------|--------------------------------------|--------|-----|-------|-------|---------|------|-------------|----------|
| 505       | 1        | 1      | Maioni; Miss. Roberta               | female | 16  | 0     | 0     | 110152  | 86.5 | B79         | S        |
| 631       | 1        | 1      | Barkworth; Mr. Algernon Henry Wilson | male   | 80  | 0     | 0     | 27042   | 30   | A23         | S        |
| 873       | 0        | 1      | Carlsson; Mr. Frans Olof            | male   | 33  | 0     | 0     | 695     | 5    | B51 B53 B55 | S        |

### Keywords and Phrases
- TD_GetRowsWithoutMissingValues Example
- Teradata Vantage
- Analytics Database
- Data Cleaning Functions
- SQL Operations: Select, Update, Delete, Create
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Evaluation Functions
- Hypothesis Testing Functions
- Deployment
- VantageCloud
- VantageCore
- Edition Enterprise
- IntelliFlex
- VMware
- Last Update: 2024-04-06
- Teradata Vantage™","26","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/Example-How-to-Use-TD_GetRowsWithoutMissingValues","2024-07-27 11:30:35"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/Optional-Syntax-Elements-for-TD_GetRowsWithoutMissingValues","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_GetRowsWithoutMissingValues - Analytics Database","80","765","TargetColumns Specifies the target column names to check for non-null values. Default: If omitted, the function considers all columns of the input table. Accumulate Specifies the input table column names to copy to the output table.","232","1423","","0","Optional Syntax Elements for TD_GetRowsWithoutMissingValues - Analytics Database","80","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/Optional-Syntax-Elements-for-TD_GetRowsWithoutMissingValues","","","","","","207897","12813","12813","4.542","A+","80","40","2.000","17.628","Very Hard","11.214","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.169","","","","","","1.1","### Summary
This document details the optional syntax elements for the `TD_GetRowsWithoutMissingValues` function in the Analytics Database of Teradata Vantage, specifically addressing its application for data cleaning and exploration. The focus is on ensuring that queries return only complete rows, devoid of any missing values, facilitating cleaner datasets for analysis and reporting.

### Code Example
Here are examples demonstrating the basic SQL operations of `SELECT`, `UPDATE`, `DELETE`, and `CREATE` in the context of Teradata SQL.

#### SELECT
```sql
SELECT *
FROM Employees
WHERE Department = 'Sales';
```

#### UPDATE
```sql
UPDATE Employees
SET Salary = Salary * 1.10
WHERE PerformanceRating = 'Excellent';
```

#### DELETE
```sql
DELETE FROM Employees
WHERE TerminationDate IS NOT NULL;
```

#### CREATE
```sql
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Department VARCHAR(50),
    Salary DECIMAL(10, 2),
    PerformanceRating CHAR(1)
);
```

### Keywords and Phrases
- **Optional Syntax Elements for TD_GetRowsWithoutMissingValues**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Language**
- **Last Update**
- **Product Category**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact**
- **Limitations with PARTITION BY**
- **Function Names with TD Prefix**
- **Displaying Online Help**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Recommendations for Using Analytic Functions** 

This structured approach provides clear guidance on using Teradata Vantage's capabilities while ensuring data integrity and performance in analytics operations.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/Optional-Syntax-Elements-for-TD_GetRowsWithoutMissingValues","2024-07-27 12:11:10"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/Required-Syntax-Elements-for-TD_GetRowsWithoutMissingValues","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_GetRowsWithoutMissingValues - Analytics Database","80","769","ON clause Specifies the table name, view name or query as an InputTable.","72","453","","0","Required Syntax Elements for TD_GetRowsWithoutMissingValues - Analytics Database","80","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/Required-Syntax-Elements-for-TD_GetRowsWithoutMissingValues","","","","","","207487","12644","12644","4.482","A+","57","35","1.629","6.298","Very Hard","11.160","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.436","","","","","","1.1","## Summary

The **Teradata Vantage™ Analytics Database** is a powerful tool designed for advanced analytics and data processing. It offers a variety of analytical functions that cater to different data manipulation needs, including data cleaning, exploration, feature engineering, model training, and evaluation. The following sections provide examples of fundamental SQL operations: **SELECT**, **UPDATE**, **DELETE**, and **CREATE** tailored for the Analytics Database context.

## Code Examples

### 1. SELECT
The `SELECT` statement is used to query data from a database.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

**Example:**
```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE country = 'USA';
```

### 2. UPDATE
The `UPDATE` statement modifies existing data within a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example:**
```sql
UPDATE customers
SET last_name = 'Smith'
WHERE customer_id = 1;
```

### 3. DELETE
The `DELETE` statement removes rows from a table based on a specified condition.

```sql
DELETE FROM table_name
WHERE condition;
```

**Example:**
```sql
DELETE FROM customers
WHERE last_name = 'Smith';
```

### 4. CREATE
The `CREATE` statement is used to create a new table or database.

```sql
CREATE TABLE new_table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example:**
```sql
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2)
);
```

## Keywords and Phrases

- **Required Syntax Elements for TD_GetRowsWithoutMissingValues**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **TD_ConvertTo**
- **TD_GetRowsWithMissingValues**
- **TD_SimpleImputeFit**
- **TD_SimpleImputeTransform**
- **TD_CategoricalSummary**
- **TD_Histogram**
- **TD_Silhouette**
- **TD_ROC**
- **Hypothesis Test Types**
- **Path and Pattern Analysis Functions**
- **Sessionize Syntax**

These keywords and phrases encompass critical components and functionalities of the Teradata Vantage™ Analytics Database, providing a comprehensive overview for users and developers.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/Required-Syntax-Elements-for-TD_GetRowsWithoutMissingValues","2024-07-27 11:48:44"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/TD_GetRowsWithoutMissingValues-Input","text/html;charset=UTF-8","200","","Indexable","","TD_GetRowsWithoutMissingValues Input - Analytics Database","57","551","InputTable Schema Column Data Type Description target_column Any Columns for which non-null values are checked. accumulate_column Any The input table column names to copy to the output table.","191","1241","","0","TD_GetRowsWithoutMissingValues Input - Analytics Database","57","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/TD_GetRowsWithoutMissingValues-Input","","","","","","208864","13003","13003","4.610","A+","69","38","1.816","3.914","Very Hard","11.132","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.652","","","","","","1.1","# Teradata Vantage™: Analytics Database Analytic Functions Overview

The Teradata Vantage™ Analytics Database provides a comprehensive set of analytic functions designed to facilitate data analysis, processing, and machine learning tasks. This document outlines some key operations, including how to select, update, delete, and create data within the database. Additionally, it covers various analytic functions available for data cleaning, exploration, and model training.

## Summary of Key Operations

### 1. Create
To create a new table in the analytics database, you can use the `CREATE TABLE` statement. 

**Code Example: Create Table**
```sql
CREATE TABLE CustomerData (
    CustomerID INT,
    CustomerName VARCHAR(100),
    Email VARCHAR(100),
    JoinDate DATE
);
```

### 2. Select
The `SELECT` statement is used to retrieve data from the database.

**Code Example: Select Data**
```sql
SELECT CustomerID, CustomerName, Email
FROM CustomerData
WHERE JoinDate > '2023-01-01';
```

### 3. Update
Use the `UPDATE` statement to modify existing records in a table.

**Code Example: Update Data**
```sql
UPDATE CustomerData
SET Email = 'newemail@example.com'
WHERE CustomerID = 1;
```

### 4. Delete
The `DELETE` statement is used to remove records from a table.

**Code Example: Delete Data**
```sql
DELETE FROM CustomerData
WHERE CustomerID = 1;
```

## Keywords and Phrases

- **TD_GetRowsWithoutMissingValues Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number** - 17.20
- **Published** - June 2022
- **Language** - English (United States)
- **Last Update** - 2024-04-06
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category** - Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This guide provides a foundation for using the Teradata Vantage™ Analytics Database, highlighting core SQL operations and analytic functionalities that enhance data processing capabilities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/TD_GetRowsWithoutMissingValues-Input","2024-07-27 11:50:44"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/TD_GetRowsWithoutMissingValues-Output","text/html;charset=UTF-8","200","","Indexable","","TD_GetRowsWithoutMissingValues Output - Analytics Database","58","567","Output Table Schema Column Data Type Description target_column Any Columns for which non-null values are checked. accumulate_column Any The input table column names to copy to the output table.","193","1255","","0","TD_GetRowsWithoutMissingValues Output - Analytics Database","58","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/TD_GetRowsWithoutMissingValues-Output","","","","","","208857","12988","12988","4.604","A+","70","38","1.842","6.760","Very Hard","11.134","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.451","","","","","","1.1","### Summary

The **Analytics Database** from Teradata Vantage™ offers a comprehensive set of analytic functions designed to handle various aspects of data analysis, including data cleaning, exploration, feature engineering, and modeling. This document outlines key functions, their syntax, and examples for performing basic database operations such as Select, Update, Delete, and Create.

### Code Example

Here are examples for the **Select**, **Update**, **Delete**, and **Create** operations in SQL:

#### Select
```sql
SELECT target_column, accumulate_column
FROM analytics_table
WHERE target_column IS NOT NULL;
```

#### Update
```sql
UPDATE analytics_table
SET target_column = 'new_value'
WHERE condition_column = 'some_condition';
```

#### Delete
```sql
DELETE FROM analytics_table
WHERE condition_column = 'some_condition';
```

#### Create
```sql
CREATE TABLE new_analytics_table (
    target_column VARCHAR(255),
    accumulate_column INTEGER
);
```

### Keywords and Phrases
- **TD_GetRowsWithoutMissingValues Output**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/TD_GetRowsWithoutMissingValues-Output","2024-07-27 12:51:53"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/TD_GetRowsWithoutMissingValues-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_GetRowsWithoutMissingValues Syntax | Teradata Vantage - TD_GetRowsWithoutMissingValues Syntax - Analytics Database","117","1137","See the syntax of the Analytics Database (SQL Engine) function TD_GetRowsWithoutMissingValues and read descriptions of its required & optional syntax elements.","159","1012","","0","TD_GetRowsWithoutMissingValues Syntax | Teradata Vantage - TD_GetRowsWithoutMissingValues Syntax - Analytics Database","117","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/TD_GetRowsWithoutMissingValues-Syntax","","","","","","208496","12964","12964","4.596","A+","111","47","2.362","32.951","Hard","11.294","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.681","","","","","","1.1","## Summary

The `TD_GetRowsWithoutMissingValues` function in Teradata Vantage is a powerful analytic function designed to filter rows from a table or view, eliminating those with missing values in specified target columns. It enhances data quality and supports analytics by ensuring that only complete data is used in further analysis or modeling.

### Code Example

Here are examples of common SQL operations using the `TD_GetRowsWithoutMissingValues` function along with standard `SELECT`, `UPDATE`, `DELETE`, and `CREATE` statements.

#### 1. SELECT

```sql
SELECT *
FROM TD_GetRowsWithoutMissingValues (
    ON my_table AS InputTable
    USING TargetColumns ('column1', 'column2')
);
```

#### 2. UPDATE

To update records after filtering out rows with missing values, you can first select the complete rows and then perform the update:

```sql
UPDATE my_table
SET column1 = 'New Value'
WHERE id IN (
    SELECT id
    FROM TD_GetRowsWithoutMissingValues (
        ON my_table AS InputTable
        USING TargetColumns ('column1', 'column2')
    )
);
```

#### 3. DELETE

To delete rows with missing values in specific columns:

```sql
DELETE FROM my_table
WHERE id IN (
    SELECT id
    FROM my_table
    WHERE column1 IS NULL OR column2 IS NULL
);
```

#### 4. CREATE

To create a new table that only includes rows without missing values:

```sql
CREATE TABLE my_new_table AS (
    SELECT *
    FROM TD_GetRowsWithoutMissingValues (
        ON my_table AS InputTable
        USING TargetColumns ('column1', 'column2')
    )
) WITH NO DATA;
```

## Keywords and Phrases

- **TD_GetRowsWithoutMissingValues Syntax**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product Category**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Volatile Tables**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions**
- **Accumulate Columns Impact on Function Performance**
- **Function Names with and without TD Prefix**
- **Displaying Online Help for Analytics Database Analytic Functions**","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/TD_GetRowsWithoutMissingValues-Syntax","2024-07-27 12:00:48"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit","text/html;charset=UTF-8","200","","Indexable","","TD_OutlierFilterFit Function | OutlierFilterFit | Teradata Vantage - TD_OutlierFilterFit - Analytics Database","109","931","This Analytics Database (SQL Engine) data cleaning function outputs a table of metrics to input to OutlierFilterTransform.","122","749","","0","TD_OutlierFilterFit Function | OutlierFilterFit | Teradata Vantage - TD_OutlierFilterFit - Analytics Database","109","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit","","","","","","209056","13101","13101","4.644","A+","103","46","2.239","6.615","Very Hard","11.274","1","4","","707","707","0","99.860","715","713","0","","","","","","","","","0.518","","","","","","1.1","### Summary

The `TD_OutlierFilterFit` function is a part of Teradata Vantage's Analytics Database, specifically designed for outlier detection in data analysis. It calculates statistical metrics such as lower and upper percentiles, the count of rows, and the median for specified columns in an input table. This information is then utilized by the `TD_OutlierFilterTransform` function to identify outliers based on the computed values.

### Code Example

Here are some basic SQL operations (Select, Update, Delete, Create) relevant to the use of `TD_OutlierFilterFit` and similar functions in Teradata Vantage:

#### 1. Create Table
```sql
CREATE TABLE sales_data (
    sales_id INT,
    product_id INT,
    sale_amount DECIMAL(10, 2),
    sale_date DATE
);
```

#### 2. Insert Data
```sql
INSERT INTO sales_data (sales_id, product_id, sale_amount, sale_date)
VALUES (1, 101, 150.00, '2023-01-01'),
       (2, 102, 200.00, '2023-01-02'),
       (3, 101, 300.00, '2023-01-03'),
       (4, 103, 50.00, '2023-01-04');
```

#### 3. Select Data
```sql
SELECT * FROM sales_data;
```

#### 4. Update Data
```sql
UPDATE sales_data
SET sale_amount = sale_amount * 1.10
WHERE product_id = 101;
```

#### 5. Delete Data
```sql
DELETE FROM sales_data
WHERE sales_id = 4;
```

#### 6. Using `TD_OutlierFilterFit`
Here’s how you would use the `TD_OutlierFilterFit` function to calculate statistics for detecting outliers:
```sql
SELECT TD_OutlierFilterFit(sale_amount)
FROM sales_data;
```

### Keywords and Phrases
- TD_OutlierFilterFit Function
- OutlierFilterFit
- Teradata Vantage - TD_OutlierFilterFit
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Outlier detection
- Percentile Method
- Statistical Metrics
- SQL Operations
- Create, Select, Update, Delete","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit","2024-07-27 12:42:50"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit/Example-Using-TD_OutlierFilterFit-with-Percentile-Method","text/html;charset=UTF-8","200","","Indexable","","TD_OutlierFilterFit Example | OutlierFilterFit | Teradata Vantage - Example: Using TD_OutlierFilterFit with Percentile Method - Analytics Database","146","1285","See an example of the Analytics Database (SQL Engine) data cleaning function TD_OutlierFilterFit.","97","602","","0","TD_OutlierFilterFit Example | OutlierFilterFit | Teradata Vantage - Example: Using TD_OutlierFilterFit with Percentile Method - Analytics Database","146","Database Analytic Functions","27","TD_OutlierFilterFit InputTable: titanic","39","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit/Example-Using-TD_OutlierFilterFit-with-Percentile-Method","","","","","","212913","14189","14189","5.030","A+","199","86","2.314","28.909","Very Hard","11.555","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.652","","","","","","1.1","### Summary of TD_OutlierFilterFit

The `TD_OutlierFilterFit` function in Teradata Vantage is utilized to identify and handle outliers in datasets. This function fits a model to the specified target columns, allowing for the definition of boundaries (percentiles) beyond which data points are considered outliers. The function can replace these outliers with specified replacement values, such as the median, to ensure the integrity of statistical analyses.

### Code Example

Here are examples of SQL statements demonstrating the basic operations of `SELECT`, `UPDATE`, `DELETE`, and `CREATE` within the context of using `TD_OutlierFilterFit`.

#### 1. **Create Table Example**
```sql
CREATE TABLE outlier_fit AS (
  SELECT * FROM TD_OutlierFilterFit (
    ON titanic AS InputTable
    OUT TABLE OutputTable (outlier_fit)
    USING
    TargetColumns ('Fare')
    LowerPercentile (0.1)
    UpperPercentile (0.9)
    OutlierMethod ('Percentile')
    ReplacementValue ('median')
    PercentileMethod ('PercentileCont')
  ) AS dt
) WITH DATA;
```

#### 2. **Select Example**
```sql
SELECT *
FROM outlier_fit
WHERE TD_OUTLIERMETHOD_OFTFIT = 'PERCENTILE';
```

#### 3. **Update Example**
```sql
UPDATE outlier_fit
SET TD_REPLACEMENTVALUE_OFTFIT = 'mean'
WHERE TD_OUTLIERMETHOD_OFTFIT = 'PERCENTILE';
```

#### 4. **Delete Example**
```sql
DELETE FROM outlier_fit
WHERE TD_COUNTVALUE_OFTFIT < 5;
```

### Keywords and Phrases

- **TD_OutlierFilterFit Example**
- **OutlierFilterFit**
- **Teradata Vantage - Example: Using TD_OutlierFilterFit with Percentile Method**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product: Analytics Database**
- **Release Number: 17.20**
- **Published: June 2022**
- **Last Update: 2024-04-06**
- **Product Category: Teradata Vantage™**
- **Data Cleaning Functions**
- **Outlier Identification**
- **Statistical Analysis**
- **Percentile Method**
- **Replacement Value**
- **SQL Syntax**
- **Data Integrity**
- **Analytics Functions**
- **Input Table: titanic**
- **Output Table Example**
- **Percentile Cont Method** 
- **Outlier Method: Percentile** 
- **Lower and Upper Percentiles** 
- **Example: Using TD_OutlierFilterFit** 

This summary and the provided examples should help you understand and apply the `TD_OutlierFilterFit` function effectively within your Teradata Vantage environment.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit/Example-Using-TD_OutlierFilterFit-with-Percentile-Method","2024-07-27 12:29:08"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit/TD_OutlierFilterFit-Input","text/html;charset=UTF-8","200","","Indexable","","TD_OutlierFilterFit Input - Analytics Database","46","400","InputTable Schema Column Data Type Description target_column NUMERIC The input table column names for computing metrics and filtering outliers using the TD_OutlierFilterTransform function. group_column Any [Optional] Column by which to group input data.","253","1624","","0","TD_OutlierFilterFit Input - Analytics Database","46","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit/TD_OutlierFilterFit-Input","","","","","","209215","13213","13213","4.684","A+","74","38","1.947","5.934","Very Hard","11.138","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.651","","","","","","1.1","# Overview of Teradata Vantage Analytics Database Functions

The Teradata Vantage Analytics Database provides a robust environment for data analysis and processing. It integrates various analytic functions that assist users in data cleaning, exploration, feature engineering, model training, and evaluation. This document covers foundational SQL operations—Select, Update, Delete, and Create—along with an introduction to analytic functions available in the Teradata Analytics Database.

## SQL Operations

### 1. Select

The `SELECT` statement is used to query data from a database. You can retrieve specific columns or all columns from a table.

**Example:**
```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

### 2. Update

The `UPDATE` statement modifies existing records in a table based on a specified condition.

**Example:**
```sql
UPDATE employees
SET salary = salary * 1.10
WHERE performance_rating = 'Excellent';
```

### 3. Delete

The `DELETE` statement removes records from a table. Be cautious as this operation is irreversible.

**Example:**
```sql
DELETE FROM employees
WHERE last_name = 'Smith';
```

### 4. Create

The `CREATE` statement is used to create a new table or database object.

**Example:**
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

## Summary of Analytic Functions

The Teradata Vantage Analytics Database provides a variety of analytic functions that can be categorized into several groups, including:

- **Data Cleaning Functions**: Such as `TD_OutlierFilterFit` and `TD_OutlierFilterTransform`.
- **Data Exploration Functions**: For statistical summaries and visualizations.
- **Feature Engineering Functions**: To prepare data for model training.
- **Model Training and Evaluation Functions**: For building and assessing predictive models.

### Example of Using `TD_OutlierFilterFit`

The `TD_OutlierFilterFit` function is designed to filter outliers from data based on specified criteria.

**Example:**
```sql
SELECT *
FROM TD_OutlierFilterFit(
    ON my_table
    USING target_column
    RETURNING OUTLIERS AS outliers
);
```

### Example of Using `TD_OutlierFilterTransform`

The `TD_OutlierFilterTransform` function applies the outlier filter created by `TD_OutlierFilterFit`.

**Example:**
```sql
SELECT *
FROM TD_OutlierFilterTransform(
    ON my_table
    USING target_column
);
```

## Keywords and Phrases

- TD_OutlierFilterFit Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This overview should provide a solid foundation for working with SQL operations and analytic functions in the Teradata Vantage Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit/TD_OutlierFilterFit-Input","2024-07-27 12:15:12"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit/TD_OutlierFilterFit-Output","text/html;charset=UTF-8","200","","Indexable","","TD_OutlierFilterFit Output - Analytics Database","47","416","FitTable (fit_table) Schema Column Data Type Description TD_OutlierMethod_OFTFIT VARCHAR (CHARACTER SET UNICODE) Value of OutlierMethod ('percentile', 'tukey', or 'carling'). group_column Any [Column appears only if you specify GroupColumns.] Column by which input data is grouped. TD_IQRMultiplier_OFTFIT NUMERIC Value ...","323","2080","","0","TD_OutlierFilterFit Output - Analytics Database","47","Database Analytic Functions","27","FitTable (fit_table) Schema","27","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit/TD_OutlierFilterFit-Output","","","","","","213146","13606","13606","4.823","A+","192","62","3.097","0.000","Very Hard","11.441","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.532","","","","","","1.1","## Summary

This document discusses the Teradata Vantage™ Analytics Database and its analytic functions, focusing on the `TD_OutlierFilterFit` function and its associated capabilities. The Analytics Database provides various functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation, making it an essential tool for data analysis and machine learning.

The `TD_OutlierFilterFit` function is particularly useful for detecting and managing outliers in datasets. It allows users to specify different methods for outlier detection, such as percentile, Tukey, or Carling methods, and provides options for handling outliers, like deletion or replacement with a specified value.

## Code Example

### SQL Commands: Select, Update, Delete, Create

#### 1. **Select**
To retrieve data from a table:
```sql
SELECT *
FROM your_table_name
WHERE condition;
```

#### 2. **Insert**
To add a new row to a table:
```sql
INSERT INTO your_table_name (column1, column2, column3)
VALUES (value1, value2, value3);
```

#### 3. **Update**
To modify existing data in a table:
```sql
UPDATE your_table_name
SET column1 = new_value1, column2 = new_value2
WHERE condition;
```

#### 4. **Delete**
To remove rows from a table:
```sql
DELETE FROM your_table_name
WHERE condition;
```

#### 5. **Create**
To create a new table:
```sql
CREATE TABLE new_table_name (
    column1 data_type,
    column2 data_type,
    column3 data_type
);
```

## Keywords and Phrases
- **TD_OutlierFilterFit Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number** - 17.20
- **Published** - June 2022
- **Language** - English (United States)
- **Last Update** - 2024-04-06
- **dita:mapPath** - gjn1627595495337.ditamap
- **dita:ditavalPath** - ayr1485454803741.ditaval
- **dita:id** - jmh1512506877710
- **Product Category** - Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
  - Data Cleaning Functions
  - Data Exploration Functions
  - Feature Engineering Transform Functions
  - Model Training Functions
  - Model Scoring Functions
  - Model Evaluation Functions
  - Text Analytic Functions
  - Path and Pattern Analysis Functions
  - Hypothesis Testing Functions
- **Usage Notes**
- **How to Read Syntax**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Accumulated Columns Impact on Function Performance**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Example Usage** - TD_OutlierFilterFit, TD_OutlierFilterTransform, TD_SimpleImputeFit, TD_SimpleImputeTransform, etc.","25","1","0","1","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit/TD_OutlierFilterFit-Output","2024-07-27 12:43:03"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit/TD_OutlierFilterFit-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_OutlierFilterFit Syntax | OutlierFilterFit | Teradata Vantage - TD_OutlierFilterFit Syntax - Analytics Database","114","979","See the syntax of the Analytics Database (SQL Engine) function TD_OutlierFilterFit and read descriptions of its required and optional syntax elements.","150","919","","0","TD_OutlierFilterFit Syntax | OutlierFilterFit | Teradata Vantage - TD_OutlierFilterFit Syntax - Analytics Database","114","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit/TD_OutlierFilterFit-Syntax","","","","","","208917","13113","13113","4.649","A+","132","53","2.491","17.162","Very Hard","11.428","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.595","","","","","","1.1","### Summary

The `TD_OutlierFilterFit` function in Teradata Vantage is an analytic function that facilitates the identification and treatment of outliers within a dataset. This function allows users to specify which columns are considered target columns for outlier detection, the method for detecting outliers, and how to handle them. Users can specify parameters such as percentile thresholds, replacement values, and the method for calculating percentiles.

### Code Examples

#### 1. SELECT Example
```sql
SELECT *
FROM TD_OutlierFilterFit (
    ON my_table AS InputTable
    OUT TABLE filtered_data
    USING
    TargetColumns ('sales', 'profit')
    OutlierMethod ('tukey')
    LowerPercentile (0.05)
    UpperPercentile (0.95)
    ReplacementValue ('median')
);
```
*This example selects data from `my_table`, applies the `TD_OutlierFilterFit` function to filter out outliers in the 'sales' and 'profit' columns, and outputs the result to `filtered_data`.*

#### 2. UPDATE Example
```sql
UPDATE my_table
FROM TD_OutlierFilterFit (
    ON my_table AS InputTable
    OUT TABLE filtered_data
    USING
    TargetColumns ('sales', 'profit')
    OutlierMethod ('carling')
    ReplacementValue ('null')
) AS outliers
SET my_table.sales = outliers.sales
WHERE my_table.id = outliers.id;
```
*This example updates the `sales` column in `my_table` using filtered results from the `TD_OutlierFilterFit` function.*

#### 3. DELETE Example
```sql
DELETE FROM my_table
WHERE id IN (
    SELECT id
    FROM TD_OutlierFilterFit (
        ON my_table AS InputTable
        USING
        TargetColumns ('sales')
        OutlierMethod ('percentile')
        LowerPercentile (0.01)
        UpperPercentile (0.99)
    )
);
```
*This example deletes rows from `my_table` where the 'sales' values are determined to be outliers based on the `TD_OutlierFilterFit` function.*

#### 4. CREATE Example
```sql
CREATE TABLE filtered_sales AS
(
    SELECT *
    FROM TD_OutlierFilterFit (
        ON sales_data AS InputTable
        USING
        TargetColumns ('sales')
        OutlierMethod ('percentile')
        LowerPercentile (0.05)
        UpperPercentile (0.95)
    )
) WITH NO DATA;
```
*This example creates a new table `filtered_sales` to store the results of the outlier filtering operation without copying any data.*

### Keywords and Phrases

- TD_OutlierFilterFit Syntax
- OutlierFilterFit
- Teradata Vantage - TD_OutlierFilterFit Syntax
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Examples of TD_OutlierFilterFit","26","1","2","1","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit/TD_OutlierFilterFit-Syntax","2024-07-27 11:53:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit/TD_OutlierFilterFit-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","TD_OutlierFilterFit Syntax Elements - Analytics Database","56","504","TargetColumns Specify the names of the numeric InputTable columns for which to compute metrics. GroupColumns [Optional] Specify the name of the InputTable column by which to group the input data. Default behavior: Function does not group input data. OutlierMethod [Optional] Specify one of these methods for filtering ou...","323","2031","","0","TD_OutlierFilterFit Syntax Elements - Analytics Database","56","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit/TD_OutlierFilterFit-Syntax-Elements","","","","","","213793","14043","14043","4.978","A+","404","111","3.640","63.886","Normal","11.840","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.593","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a range of analytic functions to facilitate data processing, cleaning, exploration, feature engineering, and model training. This includes functions designed to manage outliers, perform statistical analysis, and implement various machine learning algorithms. The `TD_OutlierFilterFit` function, in particular, is used to identify and handle outliers within datasets based on specified criteria and methods.

### Code Example Section

Here are basic SQL examples for typical database operations: Select, Update, Delete, and Create.

#### Select
```sql
SELECT column1, column2
FROM my_table
WHERE condition;
```

#### Update
```sql
UPDATE my_table
SET column1 = value1, column2 = value2
WHERE condition;
```

#### Delete
```sql
DELETE FROM my_table
WHERE condition;
```

#### Create
```sql
CREATE TABLE my_table (
    id INT PRIMARY KEY,
    column1 VARCHAR(100),
    column2 DECIMAL(10, 2)
);
```

### Keywords and Phrases

- **TD_OutlierFilterFit Syntax Elements** 
- **Analytics Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Data Types**
- **Output Tables**
- **Example Usage**
- **Recommendations for Using Analytic Functions**
- **Outlier Methods**
- **Percentile Method**
- **Tukey Method**
- **Carling Method**
- **Replacement Value**
- **Interquartile Range (IQR)**
- **PercentileCont**
- **PercentileDisc**","25","1","0","1","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit/TD_OutlierFilterFit-Syntax-Elements","2024-07-27 11:37:56"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform","text/html;charset=UTF-8","200","","Indexable","","TD_OutlierFilterTransform Function | OutlierFilterTransform - TD_OutlierFilterTransform - Analytics Database","108","968","This Analytics Database (SQL Engine) data cleaning function filters outliers from the input table.","98","591","","0","TD_OutlierFilterTransform Function | OutlierFilterTransform - TD_OutlierFilterTransform - Analytics Database","108","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform","","","","","","212828","14166","14166","5.022","A+","571","127","4.496","76.631","Fairly Easy","12.342","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.529","","","","","","1.1","# Overview of TD_OutlierFilterTransform Function

The `TD_OutlierFilterTransform` function is designed to filter outliers from a dataset based on metrics derived from the `TD_OutlierFilterFit` function. Outlier filtering is essential in data preprocessing for machine learning, as it helps improve model accuracy by removing extreme values that can skew results.

## Key Concepts:
- **Outlier Filtering**: Identifying and removing extreme data points that differ significantly from other observations in the dataset.
- **Percentiles**: Used to establish thresholds for determining outliers, typically the 25th and 75th percentiles.
- **Inter-Quartile Range (IQR)**: Calculated as the difference between the 75th and 25th percentiles, it helps define the range of acceptable values.
- **Tukey and Carling Methods**: Techniques for calculating bounds to identify outliers.

### Example Calculation:
Given a dataset:
```
[10, 12, 15, 17, 20, 22, 25, 30, 40, 100]
```
- **25th Percentile**: 13.5
- **75th Percentile**: 27.5
- **IQR**: 27.5 - 13.5 = 14
- **Upper Bound** (Tukey): 27.5 + (1.5 * 14) = 48.5
- **Lower Bound** (Tukey): 13.5 - (1.5 * 14) = -4.5

**Identified Outlier**: 100 (above upper bound)

Filtered dataset: 
```
[10, 12, 15, 17, 20, 22, 25, 30, 40]
```

## Code Example Section

### SQL Code Examples

#### 1. **Create Table**
```sql
CREATE TABLE data_points (
    id INT,
    value FLOAT
);
```

#### 2. **Insert Data**
```sql
INSERT INTO data_points (id, value) VALUES
(1, 10),
(2, 12),
(3, 15),
(4, 17),
(5, 20),
(6, 22),
(7, 25),
(8, 30),
(9, 40),
(10, 100);
```

#### 3. **Select Data**
```sql
SELECT * FROM data_points;
```

#### 4. **Update Data**
```sql
UPDATE data_points
SET value = 50
WHERE id = 10;  -- Updating the outlier
```

#### 5. **Delete Data**
```sql
DELETE FROM data_points
WHERE value > 48.5;  -- Assuming we want to remove outliers
```

### 6. **Using TD_OutlierFilterTransform**
```sql
-- Assuming we have already fitted the outlier filter with TD_OutlierFilterFit
SELECT *
FROM TD_OutlierFilterTransform(
    ON data_points
    USING TD_OutlierFilterFit(...)
) AS filtered_data;
```

## Summary
The `TD_OutlierFilterTransform` function is an integral part of preparing data for analysis by effectively removing outliers based on statistical methods. Understanding how to implement this function, along with basic SQL operations like `CREATE`, `INSERT`, `SELECT`, `UPDATE`, and `DELETE`, is essential for data manipulation in Teradata Vantage.

## Keywords and Phrases
- **TD_OutlierFilterTransform Function**
- **OutlierFilterTransform**
- **TD_OutlierFilterTransform**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Function Information**
- **Outlier Filtering**
- **Percentiles**
- **Inter-Quartile Range (IQR)**
- **Tukey Method**
- **Carling Method** 
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Usage Notes**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform","2024-07-27 12:09:18"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/Example-How-to-Use-TD_OutlierFilterTransform","text/html;charset=UTF-8","200","","Indexable","","TD_OutlierFilterTransform Example | OutlierFilterTransform - Example: How to Use TD_OutlierFilterTransform - Analytics Database","127","1162","See an example of the Analytics Database (SQL Engine) data cleaning function TD_OutlierFilterTransform.","103","652","","0","TD_OutlierFilterTransform Example | OutlierFilterTransform - Example: How to Use TD_OutlierFilterTransform - Analytics Database","127","Database Analytic Functions","27","TD_OutlierFilterTransform Input","31","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/Example-How-to-Use-TD_OutlierFilterTransform","","","","","","208581","12840","12840","4.552","A+","131","66","1.985","76.952","Fairly Easy","11.464","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.631","","","","","","1.1","# Overview of TD_OutlierFilterTransform

The `TD_OutlierFilterTransform` function in Teradata's Analytics Database is used to filter out outliers from a given data set based on a specified model. This function is particularly useful when cleaning data to improve the accuracy of analyses and predictive modeling. By identifying and removing outliers, you can ensure that your data is more representative of the underlying trends.

## Code Example

### Select

To select data using the `TD_OutlierFilterTransform`, you would typically write a SQL query like the following:

```sql
SELECT * FROM TD_OutlierFilterTransform (
  ON titanic AS InputTable PARTITION BY ANY
  ON outlier_fit AS FitTable DIMENSION
) AS dt;
```

### Update

While the `TD_OutlierFilterTransform` itself does not directly perform updates, you can create a new table with the filtered results and then update your existing tables if necessary.

```sql
CREATE TABLE filtered_titanic AS (
  SELECT * FROM TD_OutlierFilterTransform (
    ON titanic AS InputTable PARTITION BY ANY
    ON outlier_fit AS FitTable DIMENSION
  ) AS dt
) WITH NO DATA;
```

### Delete

To delete rows identified as outliers from a table, you could execute a delete statement after identifying the outliers with the transform.

```sql
DELETE FROM titanic
WHERE passenger IN (
  SELECT passenger FROM TD_OutlierFilterTransform (
    ON titanic AS InputTable PARTITION BY ANY
    ON outlier_fit AS FitTable DIMENSION
  ) AS dt
);
```

### Create

To create an outlier fit model, you would typically set up the model using your data:

```sql
CREATE TABLE outlier_fit AS (
  SELECT * FROM TD_OutlierFilterFit (
    ON titanic AS InputTable 
    DIMENSION
  )
);
```

## Summary

The `TD_OutlierFilterTransform` function is essential for data preprocessing in analytics. By filtering outliers, it enhances the quality of data used for analysis. The basic operations of selecting, creating, and updating data tables can be efficiently managed with this function in Teradata.

## Keywords and Phrases

- TD_OutlierFilterTransform Example
- OutlierFilterTransform - Example: How to Use TD_OutlierFilterTransform
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Language English (United States)
- Last Update 2024-04-06
- Product Category Teradata Vantage™
- Data Cleaning Functions
- TD_OutlierFilterTransform Syntax
- TD_OutlierFilterTransform Input
- TD_OutlierFilterTransform Output
- Using TD_OutlierFilterTransform
- SQL Call
- Example of TD_OutlierFilterTransform
- Filtering Outliers
- Data Quality Improvement
- Data Analysis
- Outlier Detection
- SQL Queries for Outlier Filtering","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/Example-How-to-Use-TD_OutlierFilterTransform","2024-07-27 11:48:56"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/Optional-Syntax-Elements-for-TD_OutlierFilterTransform","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_OutlierFilterTransform - Analytics Database","75","685","All syntax elements are required.","33","200","","0","Optional Syntax Elements for TD_OutlierFilterTransform - Analytics Database","75","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/Optional-Syntax-Elements-for-TD_OutlierFilterTransform","","","","","","207331","12577","12577","4.459","A+","49","34","1.441","0.000","Very Hard","11.147","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.472","","","","","","1.1","### Summary
In this document, we explore essential SQL operations in the context of an Analytics Database, specifically focusing on the Teradata Vantage™ product. The operations include Select, Update, Delete, and Create statements, which are fundamental for data management. This guide also provides a framework for understanding the optional syntax elements associated with the `TD_OutlierFilterTransform` function, which is a part of Teradata's analytical capabilities.

### Code Examples

#### 1. Select
The `SELECT` statement is used to query data from a database. You can specify the columns you want to retrieve and the conditions for filtering rows.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

**Example:**
```sql
SELECT customer_name, purchase_amount
FROM sales
WHERE purchase_amount > 100;
```

#### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example:**
```sql
UPDATE customers
SET status = 'active'
WHERE last_purchase_date >= '2023-01-01';
```

#### 3. Delete
The `DELETE` statement removes rows from a table based on a condition.

```sql
DELETE FROM table_name
WHERE condition;
```

**Example:**
```sql
DELETE FROM orders
WHERE order_date < '2022-01-01';
```

#### 4. Create
The `CREATE` statement is used to create a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example:**
```sql
CREATE TABLE sales (
    sale_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    purchase_amount DECIMAL(10, 2),
    purchase_date DATE
);
```

### Keywords and Phrases
- **Optional Syntax Elements for TD_OutlierFilterTransform**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Example Usage**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/Optional-Syntax-Elements-for-TD_OutlierFilterTransform","2024-07-27 11:55:41"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/Required-Syntax-Elements-for-TD_OutlierFilterTransform","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_OutlierFilterTransform - Analytics Database","75","689","ON clause Specifies the table name, view name, or query as an InputTable and FitTable.","86","536","","0","Required Syntax Elements for TD_OutlierFilterTransform - Analytics Database","75","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/Required-Syntax-Elements-for-TD_OutlierFilterTransform","","","","","","207500","12664","12664","4.489","A+","59","36","1.639","8.727","Very Hard","11.163","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.464","","","","","","1.1","## Summary

In Teradata Vantage's Analytics Database, various analytic functions are provided to facilitate data processing, including data cleaning, exploration, feature engineering, model training, and evaluation. These functions are integral for performing complex data analyses and transformations efficiently.

### Code Examples

Below are basic SQL code examples illustrating the four primary operations: Select, Update, Delete, and Create.

#### 1. Select

```sql
SELECT
    customer_id,
    first_name,
    last_name,
    email
FROM
    customers
WHERE
    active = 'Y';
```

#### 2. Update

```sql
UPDATE
    customers
SET
    email = 'new_email@example.com'
WHERE
    customer_id = 12345;
```

#### 3. Delete

```sql
DELETE FROM
    customers
WHERE
    last_purchase_date < '2022-01-01';
```

#### 4. Create

```sql
CREATE TABLE new_customers (
    customer_id INT,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Keywords and Phrases

- **Required Syntax Elements for TD_OutlierFilterTransform**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Workload Management Configuration**
- **Non-Deterministic Behavior**
- **Input Table Rows Redistribution**
- **Usage Notes**
- **Amp Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Examples: How to Use** (various functions)","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/Required-Syntax-Elements-for-TD_OutlierFilterTransform","2024-07-27 12:14:16"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/TD_OutlierFilterTransform-Input","text/html;charset=UTF-8","200","","Indexable","","TD_OutlierFilterTransform Input - Analytics Database","52","471","InputTable Schema Column Data Type Description target_column NUMERIC Input table column names for computing metrics and filtering outliers. group_column Any [Optional] Column to group input data. FitTable Schema Column Data Type Description TD_OutlierMethod_OFTFIT VARCHAR (CHARACTER SET UNICODE) Value of OutlierMethod ...","323","2135","","0","TD_OutlierFilterTransform Input - Analytics Database","52","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/TD_OutlierFilterTransform-Input","","","","","","214630","13651","13651","4.839","A+","211","67","3.149","0.000","Very Hard","11.440","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.479","","","","","","1.1","### Summary

This guide provides an overview of the Teradata Vantage™ Analytics Database, focusing on the analytic functions available for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. It also touches on some key concepts, such as how to structure queries and the syntax of various functions. For users looking to manipulate their data effectively, understanding the fundamental operations—Select, Update, Delete, and Create—within the context of the Analytics Database is essential.

### Code Examples

Here are some fundamental SQL operations that can be performed in the Analytics Database:

#### 1. **Select**
Retrieve data from a table.

```sql
SELECT target_column, group_column
FROM your_table
WHERE condition_column = 'some_value';
```

#### 2. **Update**
Update existing records in a table.

```sql
UPDATE your_table
SET target_column = 'new_value'
WHERE condition_column = 'some_value';
```

#### 3. **Delete**
Remove records from a table.

```sql
DELETE FROM your_table
WHERE condition_column = 'some_value';
```

#### 4. **Create**
Create a new table.

```sql
CREATE TABLE new_table (
    column1 VARCHAR(255),
    column2 NUMERIC,
    column3 DATE
);
```

### Keywords and Phrases

- TD_OutlierFilterTransform Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions","25","1","0","1","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/TD_OutlierFilterTransform-Input","2024-07-27 12:44:52"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/TD_OutlierFilterTransform-Output","text/html;charset=UTF-8","200","","Indexable","","TD_OutlierFilterTransform Output - Analytics Database","53","487","Column Data Type Description target_column NUMERIC Columnwith the computed metrics. OtherColumns Any The columns from the input table excluding the target columns are displayed.","177","1162","","0","TD_OutlierFilterTransform Output - Analytics Database","53","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/TD_OutlierFilterTransform-Output","","","","","","208793","12989","12989","4.605","A+","65","37","1.757","8.520","Very Hard","11.127","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.559","","","","","","1.1","# Teradata Vantage™ - Analytics Database Overview

Teradata Vantage™ offers a comprehensive suite of analytic functions designed for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Understanding the core operations of this system is essential for data scientists and analysts who utilize Teradata's powerful analytics capabilities. This guide will provide concise examples of basic SQL operations: **Select**, **Update**, **Delete**, and **Create**.

## Code Example

### 1. Select
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT target_column, OtherColumns
FROM your_table
WHERE target_column > 100;
```

### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE your_table
SET target_column = target_column + 10
WHERE OtherColumn = 'specific_value';
```

### 3. Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM your_table
WHERE target_column < 50;
```

### 4. Create
The `CREATE` statement generates a new table in the database.

```sql
CREATE TABLE new_table (
    target_column NUMERIC,
    OtherColumn VARCHAR(255)
);
```

## Summary
This guide covered the fundamental SQL operations in Teradata Vantage™ analytics database. Utilizing these operations allows users to manage and manipulate data effectively, facilitating insightful analysis and reporting.

## Keywords and Phrases
- TD_OutlierFilterTransform Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- gjn1627595495337.ditamap
- dita:ditavalPath
- ayr1485454803741.ditaval
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Exploration Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Feature Engineering Transform Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- Sessionize
- Teradata Links
- Related Documentation
- Column
- Data Type
- Description
- target_column
- NUMERIC
- Column with the computed metrics.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/TD_OutlierFilterTransform-Output","2024-07-27 11:35:05"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/TD_OutlierFilterTransform-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_OutlierFilterTransform Syntax | OutlierFilterTransform - TD_OutlierFilterTransform Syntax - Analytics Database","113","1016","See the syntax of the Analytics Database (SQL Engine) function TD_OutlierFilterTransform and read descriptions of its required and optional syntax elements.","156","969","","0","TD_OutlierFilterTransform Syntax | OutlierFilterTransform - TD_OutlierFilterTransform Syntax - Analytics Database","113","Database Analytic Functions","27","TD_OutlierFilterTransform Syntax Using Partition by Any","55","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/TD_OutlierFilterTransform-Syntax","","","","","","208512","12884","12884","4.567","A+","135","48","2.812","39.167","Hard","11.356","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.603","","","","","","1.1","### Summary

The `TD_OutlierFilterTransform` function in Teradata Vantage™ is an analytic function used to filter outliers from a dataset. It can be applied to various types of data stored in tables or views, leveraging partitioning to group data for more efficient processing. This function is particularly useful in data cleaning and preprocessing steps during data analysis or machine learning model training.

### Code Examples

Here are examples of basic SQL operations (`SELECT`, `UPDATE`, `DELETE`, `CREATE`) using the `TD_OutlierFilterTransform` function.

#### 1. Select
```sql
SELECT *
FROM TD_OutlierFilterTransform (
    ON my_table AS InputTable PARTITION BY ANY
    ON fit_table AS FitTable DIMENSION
);
```

#### 2. Update
```sql
UPDATE my_table
SET column_name = new_value
WHERE column_name IN (
    SELECT column_name
    FROM TD_OutlierFilterTransform (
        ON my_table AS InputTable PARTITION BY ANY
        ON fit_table AS FitTable DIMENSION
    )
);
```

#### 3. Delete
```sql
DELETE FROM my_table
WHERE column_name IN (
    SELECT column_name
    FROM TD_OutlierFilterTransform (
        ON my_table AS InputTable PARTITION BY ANY
        ON fit_table AS FitTable DIMENSION
    )
);
```

#### 4. Create
```sql
CREATE TABLE filtered_table AS (
    SELECT *
    FROM TD_OutlierFilterTransform (
        ON my_table AS InputTable PARTITION BY group_column
        ON fit_table AS FitTable PARTITION BY group_column
    )
) WITH NO DATA;
```

### Keywords and Phrases

- TD_OutlierFilterTransform Syntax
- OutlierFilterTransform
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Language English (United States)
- Last Update 2024-04-06
- Product Category Teradata Vantage™
- Data Cleaning Functions
- Input Table
- Output Table
- Partitioning
- Function Execution
- Analytic Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Recommendations for Using Analytic Functions

This structure provides a solid understanding of the `TD_OutlierFilterTransform` function and its usage in SQL operations within the Teradata Vantage environment.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/TD_OutlierFilterTransform-Syntax","2024-07-27 11:46:05"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit","text/html;charset=UTF-8","200","","Indexable","","TD_SimpleImputeFit Function | SimpleImputeFit| Teradata Vantage - TD_SimpleImputeFit - Analytics Database","105","983","This Analytics Database (SQL Engine) data cleaning function outputs a table of substitute values to input to SimpleImputeTransform.","131","822","","0","TD_SimpleImputeFit Function | SimpleImputeFit| Teradata Vantage - TD_SimpleImputeFit - Analytics Database","105","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit","","","","","","211220","13737","13737","4.870","A+","339","75","4.520","43.030","Hard","11.856","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.524","","","","","","1.1","# Overview of TD_SimpleImputeFit Function

The `TD_SimpleImputeFit` function in Teradata Vantage is designed to address missing values in datasets by imputing them with statistical estimates. This function is essential in data preprocessing, especially in analytics where missing data can skew results and lead to inaccurate models. The imputation strategies include filling missing values with the mean, median, or most frequently occurring value based on the feature type.

## Key Features:
- **Imputation Strategies**: Mean, median, or mode.
- **Feature Types**: Can handle both numeric and categorical variables.
- **Output**: Provides a table of substitution values for missing entries.

## Code Examples

### 1. Create a Table
```sql
CREATE TABLE patient_records (
    patient_id INT,
    age INT,
    gender VARCHAR(10),
    blood_pressure FLOAT,
    cholesterol_level FLOAT
);
```

### 2. Insert Sample Data
```sql
INSERT INTO patient_records (patient_id, age, gender, blood_pressure, cholesterol_level) VALUES
(1, 25, 'Male', 120, NULL),
(2, 30, 'Female', NULL, 180),
(3, 45, 'Female', 130, 200),
(4, 50, 'Male', NULL, NULL);
```

### 3. Fit Simple Imputer
```sql
SELECT 
    TD_SimpleImputeFit(
        ON patient_records
        USING 
        'blood_pressure' AS numeric,
        'cholesterol_level' AS numeric
    ) AS impute_results;
```

### 4. Transform Data Using Imputed Values
```sql
SELECT 
    TD_SimpleImputeTransform(
        ON patient_records
        USING impute_results
    ) AS imputed_patient_records;
```

### 5. Update Imputed Values
```sql
UPDATE patient_records
SET blood_pressure = imputed_value
WHERE blood_pressure IS NULL;
```

### 6. Delete Unused Data
```sql
DELETE FROM impute_results WHERE some_condition;
```

## Summary
The `TD_SimpleImputeFit` function is a powerful tool in Teradata Vantage for handling missing data. By employing various imputation strategies, it enables analysts to prepare datasets for robust data analysis and modeling, ultimately leading to more accurate insights.

### Keywords and Phrases
- **TD_SimpleImputeFit Function**
- **SimpleImputeFit**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware Product**
- **Analytics Database Release Number 17.20**
- **Published June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Product Category: Teradata Vantage™**
- **Data Cleaning Functions**
- **Imputation Strategy**
- **Mean, Median, Mode**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Usage Notes** 
- **Function Output** 
- **Model Training Functions**
- **Data Exploration Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit","2024-07-27 12:03:18"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/Example-How-to-Use-TD_SimpleImputeFit","text/html;charset=UTF-8","200","","Indexable","","TD_SimpleImputeFit Example | SimpleImputeFit | Teradata Vantage - Example: How to Use TD_SimpleImputeFit - Analytics Database","125","1182","See an example of the Analytics Database (SQL Engine) data cleaning function TD_SimpleImputeFit.","96","615","","0","TD_SimpleImputeFit Example | SimpleImputeFit | Teradata Vantage - Example: How to Use TD_SimpleImputeFit - Analytics Database","125","Database Analytic Functions","27","TD_SimpleImputeFit InputTable: simpleimputefit_input","52","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/Example-How-to-Use-TD_SimpleImputeFit","","","","","","210381","13806","13806","4.894","A+","201","76","2.645","56.837","Fairly Hard","11.750","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.677","","","","","","1.1","## Summary
Teradata Vantage provides powerful analytic functions and utilities for data processing and analysis. One such function is `TD_SimpleImputeFit`, which is used for imputing missing values in a dataset. This function allows users to specify columns for which to impute values based on statistical measures like mode and median. This can be particularly useful in preparing datasets for further analysis or machine learning.

### Code Example: TD_SimpleImputeFit

Here are examples of SQL commands used for basic database operations including Select, Update, Delete, Create, and a specific usage of `TD_SimpleImputeFit`.

#### 1. Create Table
```sql
CREATE TABLE simpleimputefit_input (
    passenger INT,
    pclass INT,
    gender VARCHAR(10),
    fare DECIMAL(10, 2),
    survived INT
);
```

#### 2. Insert Data
```sql
INSERT INTO simpleimputefit_input (passenger, pclass, gender, fare, survived) VALUES
(1, 3, 'male', 725.320, 0),
(2, 1, 'female', 712.250, 1),
(3, NULL, 'female', NULL, 1),
(4, 1, NULL, 531.780, 1),
(5, 3, 'male', 805.210, 0);
```

#### 3. Select Data
```sql
SELECT * FROM simpleimputefit_input;
```

#### 4. Update Data
```sql
UPDATE simpleimputefit_input
SET fare = 700.000
WHERE passenger = 4;
```

#### 5. Delete Data
```sql
DELETE FROM simpleimputefit_input
WHERE passenger = 5;
```

#### 6. Use TD_SimpleImputeFit
```sql
CREATE TABLE fit_table AS (
  SELECT * FROM TD_SimpleImputeFit (
    ON simpleimputefit_input AS InputTable
    USING
    ColsForLiterals ('Pclass')
    Literals ('2')
    ColsForStats ('Gender', 'Fare')
    Stats ('mode', 'median')
  ) AS dt
) WITH DATA;
```

### Output of TD_SimpleImputeFit
The output of the `TD_SimpleImputeFit` function might look like this:

| TD_INDEX_SIMFIT | TD_TARGETCOLUMN_SIMFIT | TD_NUM_COLVAL_SIMFIT | TD_STR_COLVAL_SIMFIT | TD_ISNUMERIC_SIMFIT |
|------------------|-----------------------|-----------------------|-----------------------|----------------------|
| 1                | pclass                | 2.000                 | NULL                  | 1                    |
| 2                | gender                | NULL                  | male                  | 0                    |
| 3                | fare                  | 718.785               | NULL                  | 1                    |

### Keywords and Phrases
- TD_SimpleImputeFit Example
- SimpleImputeFit
- Teradata Vantage
- How to Use TD_SimpleImputeFit
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Example SQL for TD_SimpleImputeFit
- Input Table: simpleimputefit_input
- Output Table: fit_table
- Columns for Statistics
- Mode and Median Imputation","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/Example-How-to-Use-TD_SimpleImputeFit","2024-07-27 11:53:35"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/Optional-Syntax-Elements-for-TD_SimpleImputeFit","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_SimpleImputeFit - Analytics Database","68","633","OUT clause Accept the OutputTable clause. ColsForLiterals Specify the names of the InputTable columns that have missing values to replace with specified literal values. Literals Specify the literal values to substitute for missing values in the columns specified by ColsForLiterals. A literal must not exceed 128 charact...","323","1948","","0","Optional Syntax Elements for TD_SimpleImputeFit - Analytics Database","68","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/Optional-Syntax-Elements-for-TD_SimpleImputeFit","","","","","","209974","13335","13335","4.727","A+","301","83","3.627","66.276","Normal","11.748","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.625","","","","","","1.1","# Summary

This guide provides an overview of essential SQL operations such as **SELECT**, **UPDATE**, **DELETE**, and **CREATE** in the context of an Analytics Database using Teradata Vantage. Additionally, it includes a section on optional syntax elements relevant for function usage within the Teradata Analytics Database.

## Code Examples

### 1. **SELECT**

The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

**Example:**

```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

### 2. **UPDATE**

The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example:**

```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department = 'Sales';
```

### 3. **DELETE**

The `DELETE` statement removes records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

**Example:**

```sql
DELETE FROM employees
WHERE last_name = 'Smith';
```

### 4. **CREATE**

The `CREATE` statement creates a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example:**

```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

## Keywords and Phrases

- **Optional Syntax Elements for TD_SimpleImputeFit**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **Product Category**: Teradata Vantage™
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Displaying Online Help for Analytics Database Analytic Functions**

This guide serves as a foundational resource for working with SQL in Teradata's Analytics Database, outlining basic operations and providing a clear structure for more advanced analytics functions.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/Optional-Syntax-Elements-for-TD_SimpleImputeFit","2024-07-27 12:00:00"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/Required-Syntax-Elements-for-TD_SimpleImputeFit","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_SimpleImputeFit - Analytics Database","68","637","ON clause Accept the InputTable clause. literal_specification ColsForLiterals ({'literal_column' | literal_column_range } [,...])
Literals ('literal' [,...]) stats_specification ColsForStats ({'stats_column' | stats_column_range } [,...])
Stats ('statistic' [,...])
[ PartitionColumn ('partition_column') ]","306","1722","","0","Required Syntax Elements for TD_SimpleImputeFit - Analytics Database","68","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/Required-Syntax-Elements-for-TD_SimpleImputeFit","","","","","","208499","12915","12915","4.578","A+","72","46","1.565","0.000","Very Hard","11.216","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.550","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a comprehensive set of analytic functions that facilitate data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This document outlines the essential syntax and elements needed to effectively utilize some of the key functions within the Analytics Database, particularly focusing on data manipulation operations like selection, updating, deletion, and creation of records.

### Code Examples

#### 1. **Select**
To retrieve data from a table, you can use the SELECT statement. Here's an example of selecting specific columns from a table:

```sql
SELECT column1, column2
FROM your_table
WHERE condition;
```

#### 2. **Update**
To modify existing records in a table, the UPDATE statement is used. Below is an example:

```sql
UPDATE your_table
SET column1 = new_value
WHERE condition;
```

#### 3. **Delete**
To remove records from a table, the DELETE statement is utilized. Here’s how you can delete specific records:

```sql
DELETE FROM your_table
WHERE condition;
```

#### 4. **Create**
To create a new table in the database, the CREATE TABLE statement is used. Below is an example:

```sql
CREATE TABLE new_table (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Keywords and Phrases

- **Required Syntax Elements for TD_SimpleImputeFit**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Product Category: Teradata Vantage™**
- **Data Cleaning Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact**
- **Limitations When Using PARTITION BY**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Non-Deterministic Behavior**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Recommendations for Using Analytic Functions**

This overview serves as a foundational guide for users to navigate the capabilities of the Analytics Database and perform essential data operations effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/Required-Syntax-Elements-for-TD_SimpleImputeFit","2024-07-27 12:12:28"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/TD_SimpleImputeFit-Input","text/html;charset=UTF-8","200","","Indexable","","TD_SimpleImputeFit Input - Analytics Database","45","419","InputTable Schema Column Data Type Description target_column CHAR, VARCHAR (with CHARACTER SET LATIN or UNICODE) or NUMERIC Column to find missing values.","154","1055","","0","TD_SimpleImputeFit Input - Analytics Database","45","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/TD_SimpleImputeFit-Input","","","","","","208468","13003","13003","4.610","A+","63","37","1.703","3.678","Very Hard","11.130","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.823","","","","","","1.1","# Summary

The Teradata Vantage™ Analytics Database provides a robust set of analytic functions to support various tasks in data analysis, including data cleaning, feature engineering, model training, and evaluation. This comprehensive set of functions enables users to manipulate and analyze data effectively, catering to diverse analytical needs.

### Code Example

Below are examples of SQL commands for common operations: `SELECT`, `UPDATE`, `DELETE`, and `CREATE` using Teradata SQL syntax.

#### 1. Select
```sql
SELECT customer_id, customer_name, purchase_amount
FROM customers
WHERE purchase_date > '2023-01-01'
ORDER BY purchase_amount DESC;
```

#### 2. Update
```sql
UPDATE customers
SET purchase_amount = purchase_amount * 1.1
WHERE customer_id IN (SELECT customer_id FROM loyalty_members);
```

#### 3. Delete
```sql
DELETE FROM customers
WHERE purchase_date < '2022-01-01';
```

#### 4. Create
```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    purchase_amount DECIMAL(10, 2),
    purchase_date DATE
);
```

### Keywords and Phrases

- TD_SimpleImputeFit Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Function Names with and without TD Prefix
- Recommendations for Using Analytic Functions
- Examples of Various Functions
- Data Exploration Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- NGramSplitter
- TD_DecisionForestPredict
- TD_XGBoostPredict
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_Silhouette
- TD_TrainTestSplit
- Sessionize
- Input Table Schema
- Column Data Type
- Description","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/TD_SimpleImputeFit-Input","2024-07-27 12:12:14"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/TD_SimpleImputeFit-Output","text/html;charset=UTF-8","200","","Indexable","","TD_SimpleImputeFit Output - Analytics Database","46","435","Output Table Schema Column Data Type Description TD _INDEX_SIMFIT INTEGER Unique row identifier. TD_TARGETCOLUMN_SIMFIT VARCHAR (CHARACTER SET UNICODE) Target column name (literal_column or stats_column). TD_NUM_COLVAL_SIMFIT NUMERIC If column is numeric, value substituted for missing value. Otherwise NULL. TD_STR_COLV...","323","2204","","0","TD_SimpleImputeFit Output - Analytics Database","46","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/TD_SimpleImputeFit-Output","","","","","","210725","13385","13385","4.745","A+","124","51","2.431","19.475","Very Hard","11.223","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.959","","","","","","1.1","### Summary

This document provides a comprehensive overview of Teradata Vantage's Analytics Database Analytic Functions, specifically focusing on functions for data cleaning, exploration, feature engineering, model training, scoring, evaluation, text analytics, and hypothesis testing. It covers syntax, required and optional elements for various functions, and includes examples to illustrate their usage. This is valuable for those looking to leverage Teradata Vantage for advanced data analytics and machine learning applications.

### Code Example Section

Here are some examples of SQL operations commonly used in Teradata Analytics Database. These include `SELECT`, `UPDATE`, `DELETE`, and `CREATE` statements.

#### 1. SELECT
```sql
SELECT 
    CustomerID, 
    FirstName, 
    LastName 
FROM 
    Customers 
WHERE 
    Country = 'USA';
```

#### 2. UPDATE
```sql
UPDATE 
    Customers 
SET 
    ContactName = 'John Doe', 
    City = 'Los Angeles' 
WHERE 
    CustomerID = 1;
```

#### 3. DELETE
```sql
DELETE FROM 
    Customers 
WHERE 
    Country = 'Germany' 
    AND City = 'Berlin';
```

#### 4. CREATE
```sql
CREATE TABLE NewCustomers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Country VARCHAR(50)
);
```

### Keywords and Phrases

- **TD_SimpleImputeFit Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/TD_SimpleImputeFit-Output","2024-07-27 12:31:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/TD_SimpleImputeFit-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_SimpleImputeFit Syntax | SimpleImputeFit | Teradata Vantage - TD_SimpleImputeFit Syntax - Analytics Database","111","1036","See the syntax of the Analytics Database (SQL Engine) function TD_SimpleImputeFit and read descriptions of its required and optional syntax elements.","149","932","","0","TD_SimpleImputeFit Syntax | SimpleImputeFit | Teradata Vantage - TD_SimpleImputeFit Syntax - Analytics Database","111","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/TD_SimpleImputeFit-Syntax","","","","","","208379","12923","12923","4.581","A+","107","47","2.277","28.999","Very Hard","11.282","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.598","","","","","","1.1","### Summary

Teradata Vantage offers a range of analytic functions for data manipulation and model training, including the `TD_SimpleImputeFit` function which is designed for filling in missing values within datasets. This function allows users to specify how to handle missing data, providing flexibility in data preprocessing. Below, you will find code examples illustrating the basic operations: Select, Update, Delete, and Create using Teradata SQL syntax.

### Code Examples

#### 1. Select
To retrieve data from a table, use the SELECT statement:
```sql
SELECT column1, column2
FROM my_table
WHERE condition;
```

#### 2. Update
To modify existing records in a table, use the UPDATE statement:
```sql
UPDATE my_table
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 3. Delete
To remove records from a table, use the DELETE statement:
```sql
DELETE FROM my_table
WHERE condition;
```

#### 4. Create
To create a new table, use the CREATE TABLE statement:
```sql
CREATE TABLE new_table (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Keywords and Phrases
- TD_SimpleImputeFit Syntax
- SimpleImputeFit
- Teradata Vantage
- TD_SimpleImputeFit Syntax
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This comprehensive overview provides a foundational understanding of how to perform basic operations in Teradata, as well as insights into its analytic capabilities.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/TD_SimpleImputeFit-Syntax","2024-07-27 12:09:41"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform","text/html;charset=UTF-8","200","","Indexable","","TD_SimpleImputeTransform Function | SimpleImputeTransform - TD_SimpleImputeTransform - Analytics Database","105","1025","This Analytics Database (SQL Engine) data cleaning function substitutes specified values for missing values in the input table.","127","774","","0","TD_SimpleImputeTransform Function | SimpleImputeTransform - TD_SimpleImputeTransform - Analytics Database","105","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform","","","","","","211401","13756","13756","4.877","A+","311","72","4.319","34.067","Hard","11.823","1","4","","707","707","0","99.860","718","715","0","","","","","","","","","0.591","","","","","","1.1","## Overview of TD_SimpleImputeTransform Function

The `TD_SimpleImputeTransform` function in Teradata is designed to handle missing data within tables or views. By using this function, you can substitute specified values for missing entries based on the output from the `TD_SimpleImputeFit` function. This is crucial for maintaining the integrity of your data analysis and ensuring that your results are reliable and valid.

### Key Benefits
- **Imputation Strategies**: It allows various strategies such as mean, median, most frequent, or constant values for replacing missing data.
- **Data Integrity**: Helps avoid the loss of valuable information by filling in gaps instead of removing incomplete data entries.
- **Enhanced Analysis**: Ensures that subsequent data analyses, such as statistical evaluations and machine learning model training, are based on complete datasets.

### Example Use Case
Imagine a dataset containing customer information where some income values are missing. Instead of discarding these rows, `TD_SimpleImputeTransform` can be applied to fill in the missing income figures with the mean or median of the available income data, thereby preserving valuable insights that could be derived from the entire dataset.

---

## Code Examples

Here are examples of SQL commands for performing basic database operations: `SELECT`, `UPDATE`, `DELETE`, and `CREATE`.

### 1. SELECT
Retrieve all records from a customer table.

```sql
SELECT *
FROM customers;
```

### 2. UPDATE
Update the income of a specific customer based on their ID.

```sql
UPDATE customers
SET income = 50000
WHERE customer_id = 1234;
```

### 3. DELETE
Delete a customer record from the table.

```sql
DELETE FROM customers
WHERE customer_id = 1234;
```

### 4. CREATE
Create a new table to store customer information.

```sql
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100),
    age INT,
    income DECIMAL(10, 2),
    gender CHAR(1)
);
```

---

## Summary

The `TD_SimpleImputeTransform` function is a powerful tool in Teradata for handling missing data effectively. By using this function, analysts can ensure that their datasets remain robust and comprehensive, thereby enhancing the quality of their analyses.

### Keywords and Phrases
- **TD_SimpleImputeTransform Function**
- **SimpleImputeTransform**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Imputation Strategies**
- **Mean, Median, Most Frequent, Constant Values**
- **Data Integrity**
- **Missing Values Handling**
- **Function Syntax Descriptions**
- **Usage Notes**
- **Recommendations for Using Analytic Functions** 

This encapsulated overview should provide a comprehensive understanding of the `TD_SimpleImputeTransform` function as well as basic SQL operations relevant to database management.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform","2024-07-27 11:39:54"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/Example-How-to-Use-TD_SimpleImputeTransform","text/html;charset=UTF-8","200","","Indexable","","TD_SimpleImputeTransform Example | SimpleImputeTransform - Example: How to Use TD_SimpleImputeTransform - Analytics Database","124","1219","See an example of the Analytics Database (SQL Engine) data cleaning function TD_SimpleImputeTransform.","102","665","","0","TD_SimpleImputeTransform Example | SimpleImputeTransform - Example: How to Use TD_SimpleImputeTransform - Analytics Database","124","Database Analytic Functions","27","TD_SimpleImputeTransform Input Table","36","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/Example-How-to-Use-TD_SimpleImputeTransform","","","","","","209419","13050","13050","4.626","A+","174","74","2.351","70.255","Fairly Easy","11.749","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.482","","","","","","1.1","### Summary

The `TD_SimpleImputeTransform` function in Teradata Vantage™ is a powerful tool for handling missing values in datasets. It allows users to impute missing data based on a fitted model created using the `TD_SimpleImputeFit` function. This is particularly useful in analytics and machine learning tasks, where missing values can impede the performance of models. The function takes an input table and a fit table and outputs a new table with missing values filled based on the specified imputation strategy.

### Code Example

Here are the basic SQL operations involved in working with databases, specifically using the `TD_SimpleImputeTransform` function as a reference:

#### 1. Select
```sql
SELECT * 
FROM passenger_data;
```

#### 2. Update
```sql
UPDATE passenger_data 
SET fare = 750.00 
WHERE passenger = 3;
```

#### 3. Delete
```sql
DELETE FROM passenger_data 
WHERE passenger = 4;
```

#### 4. Create
```sql
CREATE TABLE passenger_data (
    passenger INT,
    pclass INT,
    gender VARCHAR(10),
    fare DECIMAL(10, 2),
    survived INT
);
```

#### 5. TD_SimpleImputeTransform Example
```sql
SELECT * FROM TD_SimpleImputeTransform (
  ON simpleimputefit_input AS InputTable
  ON fit_table AS FitTable DIMENSION
) AS dt;
```

### Example Input Table
```plaintext
 passenger | pclass | gender | fare          | survived 
-----------|--------|--------|---------------|----------
         1 |      3 | male   | 725.32       | 0
         2 |      1 | female | 712.25       | 1
         3 |   null | female | null         | 1
         4 |      1 | null   | 531.78       | 1
         5 |      3 | male   | 805.21       | 0
```

### Example Output Table
```plaintext
 passenger | pclass | gender | fare          | survived 
-----------|--------|--------|---------------|----------
         5 |      3 | male   | 805.21       | 0
         4 |      1 | male   | 531.78       | 1
         3 |      2 | female | 718.79       | 1
         1 |      3 | male   | 725.32       | 0
         2 |      1 | female | 712.25       | 1
```

### Keywords and Phrases
- **TD_SimpleImputeTransform Example**
- **SimpleImputeTransform - Example: How to Use TD_SimpleImputeTransform**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Example: How to Use TD_SimpleImputeTransform**","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/Example-How-to-Use-TD_SimpleImputeTransform","2024-07-27 11:28:37"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/Optional-Syntax-Elements-for-TD_SimpleImputeTransform","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_SimpleImputeTransform - Analytics Database","74","704","All syntax elements are required.","33","200","","0","Optional Syntax Elements for TD_SimpleImputeTransform - Analytics Database","74","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/Optional-Syntax-Elements-for-TD_SimpleImputeTransform","","","","","","207322","12568","12568","4.455","A+","49","34","1.441","0.000","Very Hard","11.147","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.685","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database provides a rich set of analytic functions that facilitate data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Among these functions are specific operations related to data manipulation, such as `SELECT`, `UPDATE`, `DELETE`, and `CREATE`, which are foundational for managing and analyzing data within the database. 

Below are code examples illustrating each of these fundamental SQL operations.

### Code Example

#### 1. SELECT
```sql
SELECT first_name, last_name, email
FROM customers
WHERE active = 'Y';
```
This query retrieves the first name, last name, and email of all active customers from the `customers` table.

#### 2. UPDATE
```sql
UPDATE customers
SET email = 'newemail@example.com'
WHERE customer_id = 12345;
```
This command updates the email address of the customer with the ID `12345` in the `customers` table.

#### 3. DELETE
```sql
DELETE FROM customers
WHERE last_purchase_date < '2020-01-01';
```
This command deletes all records of customers who have not made a purchase since January 1, 2020.

#### 4. CREATE
```sql
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2)
);
```
This SQL statement creates a new table named `orders` with columns for order ID, customer ID, order date, and total amount.

### Keywords and Phrases

- **Optional Syntax Elements for TD_SimpleImputeTransform**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Analytics Database Release Number**
- **Published June 2022**
- **Last Update 2024-04-06**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Accumulated Columns Impact on Function Performance**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Examples: How to Use Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/Optional-Syntax-Elements-for-TD_SimpleImputeTransform","2024-07-27 12:33:55"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/Required-Syntax-Elements-for-TD_SimpleImputeTransform","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_SimpleImputeTransform - Analytics Database","74","708","ON clause Accept the InputTable and FitTable clauses.","53","336","","0","Required Syntax Elements for TD_SimpleImputeTransform - Analytics Database","74","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/Required-Syntax-Elements-for-TD_SimpleImputeTransform","","","","","","207430","12627","12627","4.476","A+","52","35","1.486","0.335","Very Hard","11.151","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.917","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a robust environment for data manipulation and analysis. This includes various analytic functions that enable users to perform tasks such as data cleaning, exploration, feature engineering, model training, and evaluation. This document specifically focuses on the `TD_SimpleImputeTransform`, which is used for imputing missing values in datasets.

### Code Examples

Here are examples of basic SQL operations (Select, Update, Delete, Create) that can be performed in Teradata.

**1. Select**
```sql
SELECT *
FROM Customers
WHERE Country = 'USA';
```

**2. Update**
```sql
UPDATE Customers
SET ContactName = 'John Doe'
WHERE CustomerID = 1;
```

**3. Delete**
```sql
DELETE FROM Customers
WHERE CustomerID = 1;
```

**4. Create**
```sql
CREATE TABLE Customers (
    CustomerID INT,
    ContactName VARCHAR(255),
    Country VARCHAR(255)
);
```

### Example: TD_SimpleImputeTransform

The following example demonstrates how to use the `TD_SimpleImputeTransform` function in Teradata for imputing missing values.

```sql
-- Example usage of TD_SimpleImputeTransform
SELECT TD_SimpleImputeTransform(
    InputTable => 'SalesData',
    ImputationMethod => 'mean',
    ColumnsToImpute => 'SalesAmount'
) AS ImputedData
FROM SalesData;
```

### Keywords and Phrases

- **Required Syntax Elements for TD_SimpleImputeTransform**
- **Analytics Database**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Release Number 17.20**
- **Published June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This structured summary provides a clear overview of the capabilities within the Teradata Analytics Database, specifically focusing on the `TD_SimpleImputeTransform` function, while also offering foundational SQL operations for managing data.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/Required-Syntax-Elements-for-TD_SimpleImputeTransform","2024-07-27 12:15:38"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/TD_SimpleImputeTransform-Input","text/html;charset=UTF-8","200","","Indexable","","TD_SimpleImputeTransform Input - Analytics Database","51","490","InputTable Schema Column Data Type Description target_column CHAR, VARCHAR, or (with CHARACTER SET LATIN or UNICODE) or NUMERIC Column to find missing values. Column is in the output from TD_SimpleImputeFit. FitTable Schema Column Data Type Description TD _INDEX_SIMFIT INTEGER Unique row identifier. TD_TARGETCOLUMN_SIM...","323","2171","","0","TD_SimpleImputeTransform Input - Analytics Database","51","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/TD_SimpleImputeTransform-Input","","","","","","212715","13667","13667","4.845","A+","161","58","2.776","24.308","Very Hard","11.241","1","5","","707","707","0","99.860","712","709","0","","","","","","","","","0.567","","","","","","1.1","## Summary
This document outlines the capabilities and functionalities of the Teradata Vantage™ Analytics Database. It includes various analytic functions tailored for data cleaning, exploration, feature engineering, modeling, scoring, evaluation, and text analytics. Each function has specific syntax requirements, input-output specifications, and examples of usage to aid users in effectively leveraging the database's analytical power.

### Code Example

#### 1. Create a Table
```sql
CREATE TABLE sales_data (
    sales_id INT,
    product_name VARCHAR(100),
    sales_amount DECIMAL(10, 2),
    sales_date DATE
);
```

#### 2. Select Data
```sql
SELECT product_name, SUM(sales_amount) AS total_sales
FROM sales_data
GROUP BY product_name
ORDER BY total_sales DESC;
```

#### 3. Update Data
```sql
UPDATE sales_data
SET sales_amount = sales_amount * 1.10
WHERE sales_date < '2023-01-01';
```

#### 4. Delete Data
```sql
DELETE FROM sales_data
WHERE sales_date < '2020-01-01';
```

### Keywords and Phrases
- **TD_SimpleImputeTransform Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/TD_SimpleImputeTransform-Input","2024-07-27 12:20:13"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/TD_SimpleImputeTransform-Output","text/html;charset=UTF-8","200","","Indexable","","TD_SimpleImputeTransform Output - Analytics Database","52","506","Output Table Schema Column Data Type Description target_column Same as in InputTable Column in which missing values have been replaced.","135","882","","0","TD_SimpleImputeTransform Output - Analytics Database","52","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/TD_SimpleImputeTransform-Output","","","","","","208460","12969","12969","4.598","A+","61","37","1.649","5.450","Very Hard","11.124","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.799","","","","","","1.1","## Summary

This document provides an overview of key functionalities related to Teradata's Analytics Database, particularly focusing on various analytic functions and their applications. The functions are categorized into data cleaning, exploration, feature engineering, model training, evaluation, and text analysis, among others. Each function comes with a specific syntax, required elements, examples, and relevant usage notes.

The document also includes updates about the product, its deployment in VantageCloud, and the specific release details. Understanding how to utilize these functions effectively can significantly enhance data analysis capabilities within Teradata's ecosystem.

## Code Example

Below are examples of basic SQL operations (Select, Update, Delete, and Create) relevant to the Teradata environment:

### 1. Select

```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE city = 'New York';
```

### 2. Update

```sql
UPDATE customers
SET last_name = 'Smith'
WHERE customer_id = 101;
```

### 3. Delete

```sql
DELETE FROM customers
WHERE customer_id = 102;
```

### 4. Create

```sql
CREATE TABLE new_customers (
    customer_id INT,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    city VARCHAR(50),
    PRIMARY KEY (customer_id)
);
```

## Keywords and Phrases

- **TD_SimpleImputeTransform Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Examples: How to Use Pack**
- **TD_GetRowsWithoutMissingValues**
- **TD_SimpleImputeFit**
- **TD_SimpleImputeTransform**
- **TD_OneHotEncodingFit**
- **TD_OneHotEncodingTransform**
- **TD_Pivoting**
- **TD_Unpivoting**
- **TD_TrainTestSplit**
- **TD_Silhouette**
- **TD_ClassificationEvaluator**
- **TD_RegressionEvaluator**
- **TD_ANOVA**
- **TD_ChiSq**
- **TD_ZTest**
- **TD_NaiveBayesTextClassifierTrainer**
- **TD_TextParser** 

This outline provides a foundational understanding of the functionalities and operations available within the Teradata Analytics Database environment.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/TD_SimpleImputeTransform-Output","2024-07-27 11:34:49"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/TD_SimpleImputeTransform-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_SimpleImputeTransform Syntax | SimpleImputeTransform - TD_SimpleImputeTransform Syntax - Analytics Database","110","1073","See the syntax of the Analytics Database (SQL Engine) function TD_SimpleImputeTransform and read descriptions of its required and optional syntax elements.","155","982","","0","TD_SimpleImputeTransform Syntax | SimpleImputeTransform - TD_SimpleImputeTransform Syntax - Analytics Database","110","Database Analytic Functions","27","TD_SimpleImputeTransform without partition_column","49","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/TD_SimpleImputeTransform-Syntax","","","","","","209037","12908","12908","4.576","A+","129","48","2.688","32.940","Hard","11.326","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.556","","","","","","1.1","## Summary

The `TD_SimpleImputeTransform` function in Teradata Vantage™ is utilized for handling missing values in datasets. It allows for the transformation of input datasets by filling in missing values based on a fitted model from a training dataset. This capability is part of Teradata's Analytics Database, which provides a variety of analytic functions for data cleaning, feature engineering, model training, and evaluation.

The syntax can be applied in two ways: without a partition column or with a specified partition column. This flexibility allows users to tailor their data imputation based on their dataset's structure and requirements.

### Code Example

#### Creating a Table
To create a table to store the imputed data:
```sql
CREATE TABLE imputed_data AS (
  SELECT *
  FROM TD_SimpleImputeTransform (
    ON my_input_table AS InputTable PARTITION BY ANY
    ON my_fit_table AS FitTable DIMENSION
  ) AS result
) WITH NO DATA;
```

#### Selecting Data
To select data after applying the transformation:
```sql
SELECT *
FROM TD_SimpleImputeTransform (
  ON my_input_table AS InputTable PARTITION BY partition_column
  ON my_fit_table AS FitTable PARTITION BY partition_column
) AS imputed;
```

#### Updating Data
When updating the imputation based on new fit data:
```sql
UPDATE my_input_table
SET column_name = (
  SELECT new_value
  FROM TD_SimpleImputeTransform (
    ON my_input_table AS InputTable PARTITION BY partition_column
    ON my_fit_table AS FitTable PARTITION BY partition_column
  ) AS imputed
  WHERE my_input_table.id = imputed.id
)
WHERE column_name IS NULL;
```

#### Deleting Data
To delete records based on certain conditions after transformation:
```sql
DELETE FROM my_input_table
WHERE column_name IS NULL AND condition_column = 'specific_condition';
```

### Keywords and Phrases
- **TD_SimpleImputeTransform Syntax**
- **SimpleImputeTransform - TD_SimpleImputeTransform Syntax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Displaying Online Help for Analytics Database Analytic Functions** 

This guide offers a solid foundation for using the `TD_SimpleImputeTransform` function within Teradata's Analytics Database, enabling effective data handling and modeling strategies.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/TD_SimpleImputeTransform-Syntax","2024-07-27 11:37:56"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack","text/html;charset=UTF-8","200","","Indexable","","Unpack Function | Teradata Vantage - Unpack - Analytics Database","64","593","This Analytics Database (SQL Engine) function splits data from a single packed column into multiple unpacked columns, using a specified delimiter.","146","904","","0","Unpack Function | Teradata Vantage - Unpack - Analytics Database","64","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack","","","","","","210403","13573","13573","4.812","A+","273","66","4.136","55.749","Fairly Hard","11.607","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.578","","","","","","1.1","## Summary

The **Unpack** function in Teradata Vantage is designed to split data from a single packed column into multiple virtual columns. This is particularly useful when you have data stored in a single column that is delimited or formatted in such a way that it can be logically separated into distinct fields. The function can be employed with or without a specified delimiter, allowing for flexibility in data extraction.

The **Unpack** function complements the **Pack** function, enabling data analysts to effectively manage and manipulate data stored in various formats. This capability is especially valuable in data cleaning, transformation, and preparation for analysis.

## Code Example

### 1. Create
To create a table that will hold packed data:
```sql
CREATE TABLE packed_data (
    id INT,
    full_name VARCHAR(100)
);
```

### 2. Insert
Inserting data into the table:
```sql
INSERT INTO packed_data (id, full_name) VALUES (1, 'John Doe');
INSERT INTO packed_data (id, full_name) VALUES (2, 'Jane Smith');
```

### 3. Unpack
Using the `UNPACK` function to separate the `full_name` into `first_name` and `last_name`:
```sql
SELECT 
    id,
    UNPACK(full_name, ' ') AS (first_name VARCHAR(50), last_name VARCHAR(50))
FROM 
    packed_data;
```

### 4. Update
Updating a specific row in the table:
```sql
UPDATE packed_data 
SET full_name = 'Johnathan Doe' 
WHERE id = 1;
```

### 5. Delete
Deleting a row from the table:
```sql
DELETE FROM packed_data 
WHERE id = 2;
```

## Keywords and Phrases
- Unpack Function
- Teradata Vantage
- Unpack Syntax
- Required Syntax Elements for Unpack
- Optional Syntax Elements for Unpack
- Unpack Input
- Unpack Output
- Create Table
- Insert Data
- Data Manipulation
- Transform Functions
- Data Cleaning Functions
- Data Exploration Functions
- Analytics Database
- VantageCloud
- VantageCore
- Enterprise Edition
- IntelliFlex
- VMware
- Product Category
- Model Training Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Limitations When Using PARTITION BY
- Spool Space Exhaustion
- Data Exploration Functions
- Data Transformation Functions","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack","2024-07-27 11:47:45"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Examples-How-to-Use-Unpack","text/html;charset=UTF-8","200","","Indexable","","Unpack Function Examples | Teradata Vantage - Examples: How to Use Unpack - Analytics Database","94","889","See examples of the Analytics Database (SQL Engine) function Unpack.","68","439","","0","Unpack Function Examples | Teradata Vantage - Examples: How to Use Unpack - Analytics Database","94","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Examples-How-to-Use-Unpack","","","","","","209926","13616","13616","4.827","A+","133","52","2.558","38.855","Hard","11.277","1","5","","707","707","0","99.860","715","712","0","","","","","","","","","0.553","","","","","","1.1","### Summary
The Teradata Vantage platform provides a comprehensive suite of analytic functions designed to process and analyze large datasets efficiently. Among these functions, the ""Unpack"" function is particularly notable for transforming concatenated data into separate columns based on specified delimiters. This can be crucial for data cleaning and preparation, especially when dealing with complex datasets.

The following sections will showcase SQL code examples for essential SQL operations: Select, Update, Delete, and Create. These examples will help you understand how to interact with Teradata databases effectively.

### Code Example

#### 1. Select
```sql
SELECT customer_id, customer_name, order_date
FROM orders
WHERE order_status = 'Shipped';
```

#### 2. Update
```sql
UPDATE customers
SET customer_status = 'Inactive'
WHERE last_order_date < DATE - INTERVAL '1' YEAR;
```

#### 3. Delete
```sql
DELETE FROM orders
WHERE order_status = 'Cancelled' AND order_date < CURRENT_DATE - INTERVAL '30' DAY;
```

#### 4. Create
```sql
CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    price DECIMAL(10, 2),
    stock_quantity INT
);
```

### Keywords and Phrases
- Unpack Function Examples
- Teradata Vantage - Examples: How to Use Unpack
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Syntax Descriptions
- Input Table Rows Redistribution
- Partitioning
- Function Performance
- Non-Deterministic Behavior
- Recommendations for Using Analytic Functions
- Example Use Cases
- SQL Operations: Select, Update, Delete, Create

Use these keywords and phrases to further explore the capabilities of Teradata Vantage and its analytic functions.","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Examples-How-to-Use-Unpack","2024-07-27 11:49:31"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Examples-How-to-Use-Unpack/Example-Delimiter-Separates-Virtual-Columns","text/html;charset=UTF-8","200","","Indexable","","Unpack Function Example | Teradata Vantage - Example: Delimiter Separates Virtual Columns - Analytics Database","110","1022","See example of Analytics Database (SQL Engine) function Unpack in which a delimiter separates virtual columns.","110","693","","0","Unpack Function Example | Teradata Vantage - Example: Delimiter Separates Virtual Columns - Analytics Database","110","Database Analytic Functions","27","Unpack Input","12","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Examples-How-to-Use-Unpack/Example-Delimiter-Separates-Virtual-Columns","","","","","","216841","13800","13800","4.892","A+","259","105","2.467","41.664","Hard","11.455","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","1.524","","","","","","1.1","## Summary

In Teradata Vantage, the Analytics Database provides powerful capabilities for data manipulation and analysis, including analytic functions, data cleaning, and feature engineering. The SQL commands such as SELECT, UPDATE, DELETE, and CREATE are fundamental for interacting with databases. Understanding how to use these commands effectively will enhance your ability to work with Teradata Vantage's analytic functions.

### Code Examples

#### 1. SELECT
The SELECT statement is used to query data from a database. You can specify the columns you want to retrieve and the conditions for filtering records.

```sql
SELECT city, state, temp_f 
FROM unpacked_temp_data
WHERE state = 'Tennessee';
```

#### 2. UPDATE
The UPDATE statement modifies existing records in a table. You can set specific columns to new values based on conditions.

```sql
UPDATE unpacked_temp_data
SET temp_f = temp_f * 1.8 + 32
WHERE state = 'Tennessee';
```

#### 3. DELETE
The DELETE statement removes records from a table based on specified conditions.

```sql
DELETE FROM unpacked_temp_data
WHERE temp_f < 32;
```

#### 4. CREATE
The CREATE statement is used to create a new table in the database. You specify the table name and the columns along with their data types.

```sql
CREATE TABLE unpacked_temp_data (
    sn INTEGER,
    city VARCHAR(50),
    state VARCHAR(50),
    temp_f REAL
);
```

### Keywords and Phrases
- **Unpack Function Example** 
- **Teradata Vantage**
- **Delimiter Separates Virtual Columns**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Function Names with and without TD Prefix**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Input Table, ville_tempdata**
- **Packed Data**
- **IgnoreInvalid**
- **Regex**
- **OutputColumns**
- **OutputDataTypes**
- **Accumulate**","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Examples-How-to-Use-Unpack/Example-Delimiter-Separates-Virtual-Columns","2024-07-27 12:16:00"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Examples-How-to-Use-Unpack/Example-Input-Columns-with-Trailing-Special-Characters","text/html;charset=UTF-8","200","","Indexable","","Unpack Function Example | Teradata Vantage - Example: Input Columns with Trailing Special Characters - Analytics Database","121","1113","See example of SQL Engine function Unpack with IgnoreInvalid ('true'), trailing special characters in a virtual input column, and unexpected output.","148","898","","0","Unpack Function Example | Teradata Vantage - Example: Input Columns with Trailing Special Characters - Analytics Database","121","Database Analytic Functions","27","Unpack Input","12","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Examples-How-to-Use-Unpack/Example-Input-Columns-with-Trailing-Special-Characters","","","","","","213864","13776","13776","4.884","A+","292","101","2.891","64.542","Normal","11.607","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.504","","","","","","1.1","### Summary of SQL Operations in Teradata Vantage

In Teradata Vantage, SQL operations such as selecting, updating, deleting, and creating tables are fundamental for managing and manipulating data within an analytics database. This summary provides a brief overview of these operations and includes detailed code examples for each operation type.

### Code Examples

#### 1. **Select**
The SELECT statement retrieves data from one or more tables.

```sql
SELECT *
FROM Employees
WHERE Department = 'Sales';
```

#### 2. **Update**
The UPDATE statement modifies existing records in a table.

```sql
UPDATE Employees
SET Salary = Salary * 1.1
WHERE Department = 'Sales';
```

#### 3. **Delete**
The DELETE statement removes records from a table.

```sql
DELETE FROM Employees
WHERE LastName = 'Smith';
```

#### 4. **Create**
The CREATE statement is used to create a new table in the database.

```sql
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Department VARCHAR(50),
    Salary DECIMAL(10, 2)
);
```

### Keywords and Phrases
- **Unpack Function Example**
- **Teradata Vantage**
- **Input Columns with Trailing Special Characters**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product Category: Teradata Vantage™**
- **Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions**
- **Unpack Syntax**
- **Required Syntax Elements for Unpack**
- **Optional Syntax Elements for Unpack**
- **Unpack Input and Output**
- **Examples: How to Use Unpack**
- **Example: Delimiter Separates Virtual Columns**
- **Example: No Delimiter Separates Virtual Columns**
- **Example: More Input Columns than Output Columns**
- **Example: Input Columns with Trailing Special Characters**

This collection of code examples and keywords will assist in understanding the fundamental SQL operations in Teradata Vantage, especially concerning the use of analytic functions and managing data effectively.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Examples-How-to-Use-Unpack/Example-Input-Columns-with-Trailing-Special-Characters","2024-07-27 12:40:18"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Examples-How-to-Use-Unpack/Example-More-Input-Columns-than-Output-Columns","text/html;charset=UTF-8","200","","Indexable","","Unpack Function Example | Teradata Vantage - Example: More Input Columns than Output Columns - Analytics Database","113","1071","See example of Analytics Database (SQL Engine) function Unpack that has more input columns than output columns.","111","723","","0","Unpack Function Example | Teradata Vantage - Example: More Input Columns than Output Columns - Analytics Database","113","Database Analytic Functions","27","Unpack Input","12","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Examples-How-to-Use-Unpack/Example-More-Input-Columns-than-Output-Columns","","","","","","215386","13610","13610","4.825","A+","214","91","2.352","29.713","Very Hard","11.334","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.530","","","","","","1.1","### Teradata Vantage SQL Operations Overview

In Teradata Vantage, you can perform various SQL operations such as selecting, updating, deleting, and creating data. Below is a brief overview of these operations, along with examples.

#### Summary of SQL Operations

1. **Select**: Retrieve data from one or more tables.
2. **Update**: Modify existing data in a table.
3. **Delete**: Remove data from a table.
4. **Create**: Establish a new table or database.

### Code Example

#### 1. Select

```sql
SELECT city, state 
FROM ville_tempdata1 
WHERE sn < 15;
```

#### 2. Update

```sql
UPDATE ville_tempdata1 
SET packed_temp_data = 'NashvilleTennessee37.0' 
WHERE sn = 11;
```

#### 3. Delete

```sql
DELETE FROM ville_tempdata1 
WHERE sn = 20;
```

#### 4. Create

```sql
CREATE TABLE ville_tempdata1 (
    sn INT,
    packed_temp_data VARCHAR(50)
);
```

### Keywords and Phrases

- **Unpack Function Example**
- **Teradata Vantage**
- **More Input Columns than Output Columns**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **English (United States)**
- **Last Update 2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior** 

This overview and the examples provided should help you understand the basic SQL operations that can be performed in Teradata Vantage, along with some relevant keywords and phrases for further exploration.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Examples-How-to-Use-Unpack/Example-More-Input-Columns-than-Output-Columns","2024-07-27 12:30:26"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Examples-How-to-Use-Unpack/Example-No-Delimiter-Separates-Virtual-Columns","text/html;charset=UTF-8","200","","Indexable","","Unpack Function Example | Teradata Vantage - Example: No Delimiter Separates Virtual Columns - Analytics Database","113","1052","See example of Analytics Database (SQL Engine) function Unpack in which no delimiter separates virtual columns.","111","701","","0","Unpack Function Example | Teradata Vantage - Example: No Delimiter Separates Virtual Columns - Analytics Database","113","Database Analytic Functions","27","Unpack Input","12","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Examples-How-to-Use-Unpack/Example-No-Delimiter-Separates-Virtual-Columns","","","","","","216510","13640","13640","4.835","A+","218","98","2.224","40.810","Hard","11.340","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.571","","","","","","1.1","### Summary
In Teradata Vantage, analytic functions are essential for performing complex data analysis tasks efficiently. This guide focuses on some fundamental SQL operations—Select, Update, Delete, and Create—along with an example of the `Unpack` function, which is used to handle packed data without delimiters.

### Code Examples

#### 1. Select
```sql
SELECT city, state, temp_f
FROM ville_tempdata1
WHERE state = 'Tennessee';
```

#### 2. Update
```sql
UPDATE ville_tempdata1
SET temp_f = temp_f + 1.0
WHERE city = 'Nashville';
```

#### 3. Delete
```sql
DELETE FROM ville_tempdata1
WHERE sn = 20;  -- Deletes the entry with sn 20
```

#### 4. Create
```sql
CREATE TABLE new_table (
    sn INT,
    city VARCHAR(50),
    state VARCHAR(50),
    temp_f REAL
);
```

### Unpack Function Example
The `Unpack` function in Teradata Vantage allows you to extract virtual columns from packed data. Below is an example where packed data does not have any delimiters separating the columns.

#### Example: No Delimiter Separates Virtual Columns
**Input Table:**
```sql
ville_tempdata1
sn	packed_temp_data
10	NashvilleTennessee35.1
11	NashvilleTennessee36.2
...
20	Thisisbaddata
```

**Unpack SQL Call:**
```sql
SELECT * FROM Unpack (
    ON ville_tempdata1 AS InputTable
    USING
    TargetColumn ('packed_temp_data')
    OutputColumns ('city', 'state', 'temp_f')
    OutputDataTypes ('varchar', 'varchar', 'real')
    ColumnLength ('9', '9', '4') 
    Regex ('(.*)')
    RegexSet (1)
    IgnoreInvalid ('true')
) AS dt ORDER BY sn;
```

**Output:**
```plaintext
city      state      temp_f         sn
Nashville Tennessee 3.51000000000000E 001  10
Nashville Tennessee 3.62000000000000E 001  11
...
```

### Keywords and Phrases
- Unpack Function Example
- Teradata Vantage
- No Delimiter Separates Virtual Columns
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- teradata syntax
- analytic functions
- data cleaning functions
- data exploration functions
- model training functions
- model scoring functions
- model evaluation functions
- text analytic functions
- hypothesis testing functions
- path and pattern analysis functions
- SQL operations
- Select, Update, Delete, Create
- packed data
- virtual columns
- Regex
- IgnoreInvalid
- structured query language (SQL)","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Examples-How-to-Use-Unpack/Example-No-Delimiter-Separates-Virtual-Columns","2024-07-27 11:57:35"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Optional-Syntax-Elements-for-Unpack","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for Unpack - Analytics Database","56","517","ON clause Accepts the InputTable clause. Delimiter Specifies the delimiter, a single Unicode character in Normalization Form C (NFC), that separates the virtual columns in the packed data. The delimiter is case-sensitive. Do not specify both this and ColumnLength. If the virtual columns are separated by a delimiter, sp...","323","1955","","0","Optional Syntax Elements for Unpack - Analytics Database","56","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Optional-Syntax-Elements-for-Unpack","","","","","","212712","14294","14294","5.067","A+","551","127","4.339","58.565","Fairly Hard","12.377","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.550","","","","","","1.1","## Summary of Analytics Database Functions

The Analytics Database in Teradata Vantage™ provides a suite of analytic functions designed to facilitate data analysis, feature engineering, and model training. These functions can be categorized into several groups, including data cleaning, exploration, feature engineering, model training, scoring, and evaluation, among others. This summary highlights fundamental SQL operations such as SELECT, UPDATE, DELETE, and CREATE, which are essential for managing data within the database.

### Code Examples

#### 1. SELECT
Retrieving data from a table can be done using the `SELECT` statement.
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

#### 2. UPDATE
To modify existing records in a table, the `UPDATE` statement is used.
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 3. DELETE
Removing records from a table can be performed with the `DELETE` statement.
```sql
DELETE FROM table_name
WHERE condition;
```

#### 4. CREATE
Creating a new table is accomplished using the `CREATE TABLE` statement.
```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Keywords and Phrases
- **Optional Syntax Elements for Unpack**
- **Analytics Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This concise guide provides foundational SQL operations and highlights key aspects of the Analytics Database in Teradata Vantage™ for effective data management and analysis.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Optional-Syntax-Elements-for-Unpack","2024-07-27 12:13:16"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Required-Syntax-Elements-for-Unpack","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for Unpack - Analytics Database","56","521","TargetColumn Specifies the name of the input column that contains the packed data. OutputColumns Specifies the name for the output columns, in the order in which the corresponding virtual columns appear in target column. The names must be valid object names, as defined in Teradata Vantage™ - SQL Fundamentals, B035-1141...","323","2056","","0","Required Syntax Elements for Unpack - Analytics Database","56","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Required-Syntax-Elements-for-Unpack","","","","","","209348","13299","13299","4.715","A+","222","58","3.828","46.707","Hard","11.583","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.441","","","","","","1.1","# Summary of Analytics Database Analytic Functions

The Analytics Database in Teradata Vantage™ provides a wide range of analytic functions to facilitate data processing and analysis. These functions can be categorized into various groups including data cleaning, feature engineering, model training, scoring, evaluation, and text analytics. This structured approach helps users efficiently manage and analyze their data, enabling insights that drive decision-making.

## Code Examples: Basic SQL Operations

### 1. **Select**
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

### 2. **Update**
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

### 3. **Delete**
```sql
DELETE FROM table_name
WHERE condition;
```

### 4. **Create**
```sql
CREATE TABLE new_table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype
);
```

## Keywords and Phrases

- **Required Syntax Elements for Unpack**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**

This summary provides an overview of essential functions and their syntax used in the Teradata Vantage™ Analytics Database, facilitating data analysis and manipulation in a structured manner.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Required-Syntax-Elements-for-Unpack","2024-07-27 12:07:20"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Unpack-Input","text/html;charset=UTF-8","200","","Indexable","","Unpack Input - Analytics Database","33","303","Input Table Schema Column Data Type Description target_column CHARACTER, VARCHAR, or CLOB Packed data. accumulate_column or other_input_column Any [Column appears zero or more times.] Column to copy to output table. Typically, one such column contains row identifiers.","268","1753","","0","Unpack Input - Analytics Database","33","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Unpack-Input","","","","","","208960","13154","13154","4.663","A+","78","42","1.857","8.635","Very Hard","11.152","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.948","","","","","","1.1","### Summary

The **Analytics Database** in Teradata Vantage™ provides robust capabilities for data analytics, including a wide array of analytic functions categorized for various tasks such as data cleaning, exploration, feature engineering, and model evaluation. The functionality enables efficient handling of data, advanced statistical analysis, and predictive modeling.

This document serves as a reference for various database operations such as **Select**, **Update**, **Delete**, and **Create**, which are essential for managing and manipulating data within the Analytics Database.

### Code Examples

#### 1. Select
To retrieve data from a table, use the `SELECT` statement:
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```
**Example:**
```sql
SELECT customer_id, customer_name
FROM customers
WHERE country = 'USA';
```

#### 2. Update
To update existing records in a table, use the `UPDATE` statement:
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```
**Example:**
```sql
UPDATE customers
SET customer_name = 'John Doe'
WHERE customer_id = 123;
```

#### 3. Delete
To remove records from a table, use the `DELETE` statement:
```sql
DELETE FROM table_name
WHERE condition;
```
**Example:**
```sql
DELETE FROM customers
WHERE customer_id = 123;
```

#### 4. Create
To create a new table, use the `CREATE TABLE` statement:
```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```
**Example:**
```sql
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    country VARCHAR(50)
);
```

### Keywords and Phrases
- Unpack Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Exploration Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- Sessionize
- Input Table Schema","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Unpack-Input","2024-07-27 12:32:21"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Unpack-Output","text/html;charset=UTF-8","200","","Indexable","","Unpack Output - Analytics Database","34","319","Output Table Schema Column Data Type Description output_column Specified by OutputDataTypes syntax element. Unpacked column. accumulate_column Any Column copied from input table. other_input_column Any [Column does not appear when using Acumulate. Appears once for each input table column not specified by TargetColumn s...","323","2121","","0","Unpack Output - Analytics Database","34","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Unpack-Output","","","","","","209444","13160","13160","4.665","A+","90","43","2.093","8.251","Very Hard","11.174","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.625","","","","","","1.1","## Summary

The Analytics Database from Teradata Vantage™ provides a robust environment for data analytics, enabling organizations to harness their data effectively. This environment includes a variety of analytic functions that cover data cleaning, feature engineering, model training, scoring, and evaluation, among others. As of the latest release in June 2022 (Release Number 17.20), users can leverage these functions to improve data quality, extract insights, and build predictive models. 

The following code examples illustrate SQL operations commonly used for managing data within this database environment, including selection, updates, deletion, and creation of data.

## Code Examples

### 1. Select

```sql
SELECT employee_id, first_name, last_name
FROM employees
WHERE department = 'Sales';
```

### 2. Update

```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department = 'Sales';
```

### 3. Delete

```sql
DELETE FROM employees
WHERE employee_id = 101;
```

### 4. Create

```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

## Keywords and Phrases

- Unpack Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_OutlierFilterTransform
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- Unpack
- Data Exploration Functions
- MovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- Feature Engineering Transform Functions
- Antiselect
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer
- TD_FunctionFit
- TD_FunctionTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_PolynomialFeaturesFit
- TD_PolynomialFeaturesTransform
- TD_RandomProjectionFit
- TD_RandomProjectionTransform
- TD_RowNormalizeFit
- TD_RowNormalizeTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_Unpivoting
- Feature Engineering Utility Functions
- TD_FillRowID
- TD_NumApply
- TD_RoundColumns
- TD_StrApply
- Model Training Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_KNN
- TD_OneClassSVM
- TD_SVM
- TD_XGBoost
- Model Scoring Functions
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_OneClassSVMPredict
- TD_SVMPredict
- TD_XGBoostPredict
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- Text Analytic Functions
- NGramSplitter
- TD_NaiveBayesTextClassifierPredict
- TD_NaiveBayesTextClassifierTrainer
- TD_SentimentExtractor
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Testing Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Path and Pattern Analysis Functions
- Attribution
- nPath
- Sessionize
- Output Table Schema","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Unpack-Output","2024-07-27 12:22:28"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Unpack-Syntax","text/html;charset=UTF-8","200","","Indexable","","Unpack Function Syntax | Teradata Vantage - Unpack Syntax - Analytics Database","78","723","See the syntax of Analytics Database (SQL Engine) function Unpack and read descriptions of its required and optional syntax elements.","133","832","","0","Unpack Function Syntax | Teradata Vantage - Unpack Syntax - Analytics Database","78","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Unpack-Syntax","","","","","","208468","13054","13054","4.628","A+","137","54","2.537","51.115","Fairly Hard","11.370","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.565","","","","","","1.1","## Summary

The **Unpack** function in Teradata Vantage allows users to split a single column containing delimited data into multiple columns. This can be particularly useful when dealing with data that has been stored in a compact format, such as CSV, where multiple values are often combined into a single string. The function supports various parameters to handle delimiters, output data types, and regular expressions to customize the unpacking process.

### Code Examples

Here are examples of the common SQL operations: Select, Update, Delete, and Create, related to how the Unpack function can be utilized.

#### 1. Select
This example demonstrates how to use the `Unpack` function to extract data from a column:

```sql
SELECT 
    Unpack(
        ON my_table AS InputTable 
        USING 
            TargetColumn('combined_data')
            OutputColumns('column1', 'column2', 'column3')
            Delimiter(',')
        ) AS unpacked_columns
FROM my_table;
```

#### 2. Update
While `Unpack` is primarily used for selection, if you want to update a table based on unpacked values, you might first extract the values and then use them to update other columns:

```sql
UPDATE my_table
SET column1 = unpacked.column1, 
    column2 = unpacked.column2
FROM (
    SELECT 
        Unpack(
            ON my_table AS InputTable
            USING 
                TargetColumn('combined_data')
                OutputColumns('column1', 'column2')
                Delimiter(',')
        ) AS unpacked_columns
) AS unpacked
WHERE my_table.id = unpacked.id;
```

#### 3. Delete
Although `Unpack` does not directly relate to deleting operations, you can delete rows that match certain conditions after unpacking:

```sql
DELETE FROM my_table
WHERE EXISTS (
    SELECT 1 
    FROM (
        SELECT 
            Unpack(
                ON my_table AS InputTable
                USING 
                    TargetColumn('combined_data')
                    OutputColumns('column1', 'column2')
                    Delimiter(',')
            ) AS unpacked_columns
    ) AS unpacked
    WHERE unpacked.column1 = 'value_to_delete'
);
```

#### 4. Create
Creating a new table using the `Unpack` function can be done as follows:

```sql
CREATE TABLE new_table AS (
    SELECT 
        Unpack(
            ON my_table AS InputTable
            USING 
                TargetColumn('combined_data')
                OutputColumns('column1', 'column2', 'column3')
                Delimiter(',')
        ) AS unpacked_columns
) WITH DATA;
```

### Keywords and Phrases

- Unpack Function Syntax
- Teradata Vantage - Unpack Syntax 
- Analytics Database 
- Database Analytic Functions 
- Deployment 
- VantageCloud 
- VantageCore 
- Edition 
- Enterprise 
- IntelliFlex 
- VMware 
- Product 
- Analytics Database 
- Release Number 
- Published 
- Language 
- Last Update 
- Product Category 
- Teradata Vantage™ 
- Data Cleaning Functions 
- Data Exploration Functions 
- Feature Engineering Transform Functions 
- Model Training Functions 
- Model Scoring Functions 
- Model Evaluation Functions 
- Text Analytic Functions 
- Path and Pattern Analysis Functions 
- Hypothesis Testing Functions 
- How to Read Syntax 
- Input Table Rows Redistribution 
- Function Syntax Descriptions 
- Function Names with and without TD Prefix 
- Accumulated Columns Impact on Function Performance 
- Data Types 
- Spool Space 
- Recommendations for Using Analytic Functions 
- Example Usage of Unpack 
- Regular Expressions 
- Delimiter Handling 
- Output Data Types 
- Column Length Handling 
- Data Extraction Techniques 

These keywords and phrases can help in navigating through the functionalities and features of the Teradata Vantage system and its analytic functions.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Unpack-Syntax","2024-07-27 12:19:32"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions","text/html;charset=UTF-8","200","","Indexable","","Data Exploration Functions | Teradata Vantage - Data Exploration Functions - Analytics Database","95","857","Learn about the Analytics Database (SQL Engine) functions that help you learn about the variables (columns) of the input data set (input table).","144","885","","0","Data Exploration Functions | Teradata Vantage - Data Exploration Functions - Analytics Database","95","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions","","","","","","210406","13307","13307","4.717","A+","81","45","1.800","9.697","Very Hard","11.095","1","3","","707","707","0","99.860","719","717","0","","","","","","","","","0.624","","","","","","1.1","### Introduction to Teradata Vantage Data Exploration Functions

Teradata Vantage offers a rich set of data exploration functions designed to facilitate analytical tasks and provide insights into the data at hand. These functions help users understand the characteristics of their datasets, including distributions, missing values, and summary statistics. Key functions include Moving Average, Categorical Summary, and Univariate Statistics, among others.

### Code Example Section

Here are examples showcasing SQL operations for selecting, updating, deleting, and creating tables in Teradata Vantage:

#### 1. **Select**
```sql
SELECT 
    customer_id, 
    first_name, 
    last_name 
FROM 
    customers 
WHERE 
    status = 'Active';
```

#### 2. **Update**
```sql
UPDATE 
    customers 
SET 
    status = 'Inactive' 
WHERE 
    last_purchase_date < DATE '2022-01-01';
```

#### 3. **Delete**
```sql
DELETE FROM 
    customers 
WHERE 
    status = 'Inactive' 
    AND last_purchase_date < DATE '2021-01-01';
```

#### 4. **Create**
```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    registration_date DATE
);
```

### Summary

Data exploration functions in Teradata Vantage enable users to analyze and understand their datasets effectively. By leveraging SQL commands for selecting, updating, deleting, and creating data structures, users can manipulate and derive insights from large datasets.

### Keywords and Phrases
- **Data Exploration Functions**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Analytics Database Release Number 17.20**
- **Data Cleaning Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **TD_CategoricalSummary**
- **TD_ColumnSummary**
- **TD_GetRowsWithMissingValues**
- **TD_Histogram**
- **TD_UnivariateStatistics**
- **MovingAverage**
- **Data Summary**
- **Data Visualization** 

This comprehensive overview and examples are intended to familiarize users with key functionalities and SQL operations within Teradata Vantage.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions","2024-07-27 12:45:25"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage","text/html;charset=UTF-8","200","","Indexable","","MovingAverage Function | Teradata Vantage - MovingAverage - Analytics Database","78","739","This Analytics Database (SQL Engine) function computes average values in a series, using the specified moving average type.","123","770","","0","MovingAverage Function | Teradata Vantage - MovingAverage - Analytics Database","78","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage","","","","","","212964","14294","14294","5.067","A+","436","95","4.589","29.678","Very Hard","12.090","1","4","","707","707","0","99.860","722","720","0","","","","","","","","","0.721","","","","","","1.1","## Overview of Moving Average Function in Teradata Vantage

The `MovingAverage` function is a powerful analytic function used in Teradata Vantage to compute average values over a specified set of data points in a time series. This function helps in smoothing out fluctuations and identifying trends, making it a valuable tool across various fields, including finance, meteorology, traffic analysis, and healthcare.

### Types of Moving Averages
- **Simple Moving Average (SMA)**: Computes the unweighted mean of previous `n` data points.
- **Weighted Moving Average (WMA)**: Applies weights to older values, decreasing them arithmetically.
- **Exponential Moving Average (EMA)**: Uses a damping factor to decrease weights of older values exponentially.
- **Cumulative Moving Average (CMA)**: Calculates the average from the beginning of the series up to the current point.
- **Modified Moving Average**: The first value is calculated as a simple moving average, and subsequent values adjust based on the new data point.
- **Triangular Moving Average**: Computes a double-smoothed average, providing a more refined trend.

### Use Cases
- **Financial Analysis**: Identify market trends and potential buy/sell signals.
- **Weather Forecasting**: Smooth variations in temperature and humidity to identify patterns.
- **Traffic Analysis**: Analyze traffic flow to optimize infrastructure.
- **Manufacturing**: Monitor production efficiency and quality control.
- **Healthcare**: Track changes in health indicators for disease outbreak analysis.

## Code Example Section

### SQL Statements for Common Operations

1. **Select**
   ```sql
   SELECT 
       date,
       MovingAverage(temperature, 7) AS avg_temperature
   FROM weather_data
   WHERE date BETWEEN '2023-01-01' AND '2023-01-31';
   ```

2. **Update**
   ```sql
   UPDATE stock_prices
   SET moving_avg = MovingAverage(price, 30)
   WHERE stock_symbol = 'AAPL';
   ```

3. **Delete**
   ```sql
   DELETE FROM traffic_data
   WHERE date < '2022-01-01';
   ```

4. **Create**
   ```sql
   CREATE TABLE moving_average_results AS (
       SELECT 
           date,
           MovingAverage(stock_price, 14) AS moving_avg_price
       FROM stock_prices
   ) WITH NO DATA;
   ```

### Summary
The `MovingAverage` function in Teradata Vantage is essential for performing time-series analysis across various domains. By using different types of moving averages, analysts can effectively identify trends and make informed decisions based on historical data.

### Keywords and Phrases
- MovingAverage Function
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Input Table Rows Redistribution
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Non-Deterministic Behavior
- Recommendations for Using Analytic Functions
- Simple Moving Average
- Weighted Moving Average
- Exponential Moving Average
- Cumulative Moving Average
- Modified Moving Average
- Triangular Moving Average","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage","2024-07-27 11:40:46"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Cumulative-Moving-Average","text/html;charset=UTF-8","200","","Indexable","","Cumulative Moving Average - Analytics Database","46","438","The cumulative moving average, also known as the running average, is calculated by adding all of the data points up to a certain point in time and dividing by the number of data points. The formula for calculating a cumulative moving average is: CMA = (Sum of data points up to a specific point in time) / (Number of dat...","323","1969","","0","Cumulative Moving Average - Analytics Database","46","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Cumulative-Moving-Average","","","","","","208515","13094","13094","4.642","A+","189","49","3.857","68.634","Normal","11.427","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.620","","","","","","1.1","### Summary

The Cumulative Moving Average (CMA) is a statistical measure that provides the average of a set of data points up to a certain point in time. It is particularly useful in analytics for smoothing data and identifying trends over time. In Teradata Vantage™, the CMA can be computed using analytic functions, allowing users to gain insights from large datasets easily. The following sections include code examples for common SQL operations such as Select, Update, Delete, and Create, along with specific examples of calculating the Cumulative Moving Average.

### Code Example

#### 1. **Select**

```sql
SELECT 
    date,
    closing_price,
    (SELECT AVG(closing_price) FROM stock_prices WHERE date <= sp.date) AS cumulative_moving_average
FROM 
    stock_prices sp
ORDER BY 
    date;
```

#### 2. **Update**

```sql
UPDATE stock_prices
SET closing_price = closing_price * 1.05
WHERE date >= '2023-01-01';
```

#### 3. **Delete**

```sql
DELETE FROM stock_prices
WHERE date < '2020-01-01';
```

#### 4. **Create**

```sql
CREATE TABLE stock_prices (
    date DATE,
    closing_price DECIMAL(10, 2)
);
```

#### 5. **Cumulative Moving Average Calculation**

```sql
SELECT 
    date,
    closing_price,
    AVG(closing_price) OVER (ORDER BY date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_moving_average
FROM 
    stock_prices
ORDER BY 
    date;
```

### Keywords and Phrases

- Cumulative Moving Average
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Workload Management Configuration
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Recommendations for Using Analytic Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Cumulative-Moving-Average","2024-07-27 12:00:33"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage","text/html;charset=UTF-8","200","","Indexable","","MovingAverage Function Example | Teradata Vantage - Examples: How to Use MovingAverage - Analytics Database","107","1025","See examples of the Analytics Database (SQL Engine) function MovingAverage.","75","489","","0","MovingAverage Function Example | Teradata Vantage - Examples: How to Use MovingAverage - Analytics Database","107","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage","","","","","","210710","13635","13635","4.834","A+","138","57","2.421","32.112","Hard","11.257","1","5","","707","707","0","99.860","718","715","0","","","","","","","","","0.555","","","","","","1.1","## Summary

Teradata Vantage provides a robust platform for analytics, including a rich set of analytic functions. One of the key functions available is the **MovingAverage**, which allows users to compute various types of moving averages for data analysis. This function is particularly useful in time series analysis, financial modeling, and other areas where understanding trends over time is essential.

The MovingAverage function can be customized with several parameters to produce different types of averages, including simple, weighted, exponential, modified, cumulative, and triangular moving averages. Users can specify required and optional elements to tailor the output to their needs.

### Code Example

#### 1. SELECT
```sql
SELECT 
    date, 
    sales, 
    MovingAverage(sales, 3) AS avg_sales
FROM 
    sales_data
ORDER BY 
    date;
```
This example calculates the simple moving average of sales over a 3-day window.

#### 2. UPDATE
```sql
UPDATE 
    sales_data
SET 
    moving_avg = MovingAverage(sales, 7)
WHERE 
    date BETWEEN '2023-01-01' AND '2023-12-31';
```
This example updates the `moving_avg` column with a 7-day moving average of sales for the specified date range.

#### 3. DELETE
```sql
DELETE FROM 
    sales_data
WHERE 
    MovingAverage(sales, 3) < 100;
```
This example deletes records from the `sales_data` table where the 3-day moving average of sales is less than 100.

#### 4. CREATE
```sql
CREATE TABLE moving_average_sales AS 
SELECT 
    date, 
    sales, 
    MovingAverage(sales, 5) AS five_day_avg
FROM 
    sales_data
WITH NO DATA;
```
This example creates a new table `moving_average_sales` that will store the 5-day moving average of sales data.

### Keywords and Phrases

- **MovingAverage Function Example**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Moving Average Types**: Simple, Weighted, Exponential, Modified, Cumulative, Triangular
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Recommendations for Using Analytic Functions**
- **TD Functions**: TD_ConvertTo, TD_GetFutileColumns, TD_SimpleImputeFit, etc.","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage","2024-07-27 12:50:15"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Cumulative-Moving-Average","text/html;charset=UTF-8","200","","Indexable","","MovingAverage Function Example | Teradata Vantage - Example: Cumulative Moving Average - Analytics Database","107","1020","See example of Analytics Database (SQL Engine) function MovingAverage that computes cumulative moving average.","110","726","","0","MovingAverage Function Example | Teradata Vantage - Example: Cumulative Moving Average - Analytics Database","107","Database Analytic Functions","27","MovingAverage SQL Call for Cumulative Moving Average","52","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Cumulative-Moving-Average","","","","","","222153","13743","13743","4.872","A+","253","195","1.297","100.000","Very Easy","11.393","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.566","","","","","","1.1","### Moving Average Function Example | Teradata Vantage

The **MovingAverage** function in Teradata Vantage is a powerful analytic function that computes various types of moving averages, such as cumulative, simple, weighted, and exponential moving averages. This function is particularly useful in time series analysis for understanding trends over time by smoothing out fluctuations in data.

#### Example: Cumulative Moving Average

Here, we illustrate the use of the MovingAverage function to calculate a cumulative moving average for stock prices in a sample dataset.

```sql
SELECT * FROM MovingAverage (
  ON company1_stock PARTITION BY name ORDER BY period
  USING
  MAvgType ('C')
  TargetColumns ('stockprice')
) AS dt ORDER BY id;
```

**Output for Cumulative Moving Average**
| id | name     | period               | stockprice | stockprice_cmavg |
|----|----------|----------------------|------------|-------------------|
| 1  | Company1 | 1961-05-17 00:00:00  | 460.000000 | 460.000000        |
| 2  | Company1 | 1961-05-18 00:00:00  | 457.000000 | 458.500000        |
| 3  | Company1 | 1961-05-19 00:00:00  | 452.000000 | 456.333333        |
| 4  | Company1 | 1961-05-22 00:00:00  | 459.000000 | 457.000000        |
| 5  | Company1 | 1961-05-23 00:00:00  | 462.000000 | 458.000000        |
| ...| ...      | ...                  | ...        | ...               |
| 25 | Company1 | 1961-06-21 00:00:00  | 479.000000 | 479.840000        |

### Summary

The MovingAverage function in Teradata Vantage allows users to perform detailed time series analyses through various types of moving averages. This capability is essential for businesses and analysts looking to derive insights from historical data trends, particularly in finance, sales, and other fields where time-dependent data is prevalent.

### Keywords and Phrases

- MovingAverage Function Example
- Teradata Vantage
- Cumulative Moving Average
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Enterprise Edition
- IntelliFlex
- VMware
- Analytics Database Release Number: 17.20
- Published June 2022
- Last Update April 2024
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- SQL Example
- TargetColumns
- MAvgType
- PARTITION BY
- ORDER BY
- Time Series Analysis
- Stock Price Analysis
- Smoothing Data Trends
- Cumulative Average Output","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Cumulative-Moving-Average","2024-07-27 12:06:51"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Exponential-Moving-Average","text/html;charset=UTF-8","200","","Indexable","","MovingAverage Function Example | Teradata Vantage - Example: Exponential Moving Average - Analytics Database","108","1022","See example of Analytics Database (SQL Engine) function MovingAverage that computes exponential moving average.","111","730","","0","MovingAverage Function Example | Teradata Vantage - Example: Exponential Moving Average - Analytics Database","108","Database Analytic Functions","27","MovingAverage SQL Call for Exponential Moving Average","53","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Exponential-Moving-Average","","","","","","221959","13782","13782","4.886","A+","259","190","1.363","100.000","Very Easy","11.370","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.458","","","","","","1.1","## Overview of SQL Operations in Teradata Vantage

In Teradata Vantage, SQL operations like SELECT, UPDATE, DELETE, and CREATE are fundamental for managing and manipulating data in the analytics database. This guide provides examples of these operations to help you understand how to perform basic database tasks effectively.

### SQL Operations Examples

#### 1. SELECT
The SELECT statement is used to query data from a database. You can specify columns, apply filters, and sort the results.

```sql
SELECT name, stockprice
FROM company1_stock
WHERE period >= '1961-05-01'
ORDER BY period;
```

#### 2. UPDATE
The UPDATE statement modifies existing data in a table. You can set new values and specify conditions for which rows to update.

```sql
UPDATE company1_stock
SET stockprice = stockprice * 1.05
WHERE name = 'Company1' AND period >= '1961-06-01';
```

#### 3. DELETE
The DELETE statement removes rows from a table based on specific conditions.

```sql
DELETE FROM company1_stock
WHERE period < '1961-05-01';
```

#### 4. CREATE
The CREATE statement is used to create a new table in the database. You define the table structure and data types.

```sql
CREATE TABLE company1_stock (
    id INT,
    name VARCHAR(50),
    period TIMESTAMP,
    stockprice DECIMAL(10, 2)
);
```

### Summary
These SQL operations are essential for interacting with data in Teradata Vantage. The SELECT statement retrieves data, UPDATE modifies it, DELETE removes it, and CREATE establishes new tables.

### Keywords and Phrases
- **MovingAverage Function Example**
- **Teradata Vantage**
- **Example: Exponential Moving Average**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **MovingAverage Syntax**
- **TargetColumns**
- **StartRows**
- **Alpha**
- **IncludeFirst**
- **Exponential Moving Average**
- **Cumulative Moving Average**
- **Simple Moving Average**
- **Modified Moving Average**
- **Weighted Moving Average**
- **Triangular Moving Average**
- **Output Examples**
- **SELECT, UPDATE, DELETE, CREATE**","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Exponential-Moving-Average","2024-07-27 12:24:01"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Modified-Moving-Average","text/html;charset=UTF-8","200","","Indexable","","MovingAverage Function Example | Teradata Vantage - Example: Modified Moving Average - Analytics Database","105","996","See example of Analytics Database (SQL Engine) function MovingAverage that computes modified moving average.","108","712","","0","MovingAverage Function Example | Teradata Vantage - Example: Modified Moving Average - Analytics Database","105","Database Analytic Functions","27","MovingAverage SQL Call for Modified Moving Average","50","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Modified-Moving-Average","","","","","","222061","13879","13879","4.920","A+","257","197","1.305","100.000","Very Easy","11.414","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.585","","","","","","1.1","## Overview of SQL Operations in Teradata Vantage

In Teradata Vantage, SQL is used extensively for data manipulation and retrieval through various statements. Here, we provide a brief overview of the common SQL operations: **Select**, **Update**, **Delete**, and **Create**. Each operation is essential for managing and interacting with data in a relational database.

### SQL Operations: Summary and Examples

1. **Select**: This operation is used to retrieve data from a database.
   ```sql
   SELECT name, stockprice 
   FROM company1_stock 
   WHERE period >= '1961-05-01' AND period <= '1961-06-30';
   ```

2. **Update**: This operation is used to modify existing data in a table.
   ```sql
   UPDATE company1_stock 
   SET stockprice = stockprice * 1.05 
   WHERE period >= '1961-06-01';
   ```

3. **Delete**: This operation is used to remove data from a table.
   ```sql
   DELETE FROM company1_stock 
   WHERE period < '1961-05-01';
   ```

4. **Create**: This operation is used to create a new table.
   ```sql
   CREATE TABLE company1_stock (
       id INT,
       name VARCHAR(50),
       period TIMESTAMP,
       stockprice DECIMAL(10, 2)
   );
   ```

### Moving Average Function Example

The **MovingAverage** function in Teradata Vantage calculates various types of moving averages, including simple, weighted, modified, and exponential moving averages. Below is an example of using the `MovingAverage` function to compute the modified moving average for stock prices.

**SQL Call for Modified Moving Average:**
```sql
SELECT * FROM MovingAverage (
  ON company1_stock PARTITION BY name ORDER BY period
  USING
  MAvgType ('M')
  TargetColumns ('stockprice')
  WindowSize (10)
  IncludeFirst ('true')
) AS dt ORDER BY id;
```

**Output for Modified Moving Average:**
| id | name     | period               | stockprice | stockprice_mmavg |
|----|----------|----------------------|------------|-------------------|
| 1  | Company1 | 1961-05-17 00:00:00  | 460.00     | 460.00            |
| 2  | Company1 | 1961-05-18 00:00:00  | 457.00     | 459.70            |
| 3  | Company1 | 1961-05-19 00:00:00  | 452.00     | 458.93            |
| 4  | Company1 | 1961-05-22 00:00:00  | 459.00     | 458.94            |
| ...| ...      | ...                  | ...        | ...               |
| 25 | Company1 | 1961-06-21 00:00:00  | 479.00     | 481.67            |

### Keywords and Phrases
- MovingAverage Function Example
- Teradata Vantage
- Example: Modified Moving Average
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This comprehensive overview provides a solid foundation for understanding essential SQL operations in Teradata Vantage, as well as specific use cases for its analytic functions.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Modified-Moving-Average","2024-07-27 11:20:14"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Simple-Moving-Average","text/html;charset=UTF-8","200","","Indexable","","MovingAverage Function Example | Teradata Vantage - Example: Simple Moving Average - Analytics Database","103","980","See example of Analytics Database (SQL Engine) function MovingAverage that computes simple moving average.","106","698","","0","MovingAverage Function Example | Teradata Vantage - Example: Simple Moving Average - Analytics Database","103","Database Analytic Functions","27","MovingAverage SQL Call for Simple Moving Average","48","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Simple-Moving-Average","","","","","","222040","13637","13637","4.834","A+","257","188","1.367","100.000","Very Easy","11.350","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.657","","","","","","1.1","### Overview of Teradata Vantage Analytics Functions

Teradata Vantage provides a robust environment for analytical computations, offering a variety of functions for data manipulation and analysis. This includes not only standard SQL operations but also specialized analytic functions designed for advanced data analytics tasks, such as moving averages, model training, and hypothesis testing.

### Code Examples

#### 1. **Select**: Retrieving Data
```sql
SELECT name, period, stockprice
FROM company1_stock
WHERE period >= '1961-05-17' AND period <= '1961-06-21';
```

#### 2. **Update**: Modifying Existing Data
```sql
UPDATE company1_stock
SET stockprice = stockprice * 1.05
WHERE period = '1961-06-01';
```

#### 3. **Delete**: Removing Data
```sql
DELETE FROM company1_stock
WHERE period < '1961-05-17';
```

#### 4. **Create**: Creating a New Table
```sql
CREATE TABLE company1_stock (
    id INT,
    name VARCHAR(50),
    period TIMESTAMP,
    stockprice FLOAT
);
```

### Moving Average Function Example

The `MovingAverage` function in Teradata Vantage allows users to compute various types of moving averages over a specified window of data. Below is an example that demonstrates how to calculate a simple moving average for stock prices.

#### **SQL Call for Simple Moving Average**
```sql
SELECT * 
FROM MovingAverage (
    ON company1_stock PARTITION BY name ORDER BY period
    USING
    MAvgType ('S')  -- Simple Moving Average
    TargetColumns ('stockprice')  -- Column to compute moving average on
    WindowSize (10)  -- Size of the moving window
    IncludeFirst ('true')  -- Include the first row in the average calculation
) AS dt 
ORDER BY id;
```

#### **Output for Simple Moving Average**
| id | name      | period                | stockprice          | stockprice_smavg   |
|----|-----------|----------------------|---------------------|---------------------|
| 1  | Company1  | 1961-05-17 00:00:00  | 460.000000          | ?                   |
| 2  | Company1  | 1961-05-18 00:00:00  | 457.000000          | ?                   |
| 3  | Company1  | 1961-05-19 00:00:00  | 452.000000          | ?                   |
| ...| ...       | ...                  | ...                 | ...                 |
| 10 | Company1  | 1961-05-31 00:00:00  | 490.000000          | 467.400000          |
| ...| ...       | ...                  | ...                 | ...                 |
| 25 | Company1  | 1961-06-21 00:00:00  | 479.000000          | 484.000000          |

### Keywords and Phrases
- MovingAverage Function Example
- Teradata Vantage
- Simple Moving Average
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Enterprise Edition
- IntelliFlex
- VMware
- Analytics Database Release Number
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- SQL Call for Moving Average
- Output for Moving Average
- WindowSize

This summary provides an overview of how to work with analytic functions in Teradata, including essential SQL operations and a practical example of calculating a moving average.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Simple-Moving-Average","2024-07-27 12:08:31"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Triangular-Moving-Average","text/html;charset=UTF-8","200","","Indexable","","MovingAverage Function Example | Teradata Vantage - Example: Triangular Moving Average - Analytics Database","107","1009","See example of Analytics Database (SQL Engine) function MovingAverage that computes triangular moving average.","110","719","","0","MovingAverage Function Example | Teradata Vantage - Example: Triangular Moving Average - Analytics Database","107","Database Analytic Functions","27","MovingAverage SQL Call for Triangular Moving Average","52","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Triangular-Moving-Average","","","","","","222074","13733","13733","4.868","A+","257","197","1.305","100.000","Very Easy","11.417","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.575","","","","","","1.1","## Summary

The Moving Average function in Teradata Vantage is a powerful analytic function used to smooth time series data by averaging data points over a specified window. This function is particularly useful in analyzing trends in stock prices or any other time-dependent data. One of the variations of the Moving Average is the Triangular Moving Average, which gives more weight to the data points in the center of the window. 

### Code Example

Here are some basic SQL operations using Teradata Vantage for managing data:

1. **Create Table**
   ```sql
   CREATE TABLE company1_stock (
       id INT,
       name VARCHAR(50),
       period TIMESTAMP,
       stockprice DECIMAL(10, 2)
   );
   ```

2. **Insert Data**
   ```sql
   INSERT INTO company1_stock (id, name, period, stockprice) VALUES 
   (1, 'Company1', '1961-05-17 00:00:00.000000', 460.00),
   (2, 'Company1', '1961-05-18 00:00:00.000000', 457.00);
   ```

3. **Select Data**
   ```sql
   SELECT * FROM company1_stock WHERE name = 'Company1' ORDER BY period;
   ```

4. **Update Data**
   ```sql
   UPDATE company1_stock
   SET stockprice = 465.00
   WHERE id = 1;
   ```

5. **Delete Data**
   ```sql
   DELETE FROM company1_stock WHERE id = 2;
   ```

6. **Using Moving Average Function**
   ```sql
   SELECT * FROM MovingAverage (
       ON company1_stock PARTITION BY name ORDER BY period
       USING
       MAvgType ('T') -- Triangular Moving Average
       TargetColumns ('stockprice')
       WindowSize (10)
       IncludeFirst ('true')
   ) AS dt ORDER BY id;
   ```

### MovingAverage SQL Call for Triangular Moving Average
```sql
SELECT * FROM MovingAverage (
  ON company1_stock PARTITION BY name ORDER BY period
  USING
  MAvgType ('T')
  TargetColumns ('stockprice')
  WindowSize (10)
  IncludeFirst ('true')
) AS dt ORDER BY id;
```

### MovingAverage Output for Triangular Moving Average
| id | name     | period                | stockprice | stockprice_tmavg  |
|----|----------|-----------------------|-------------|--------------------|
| 1  | Company1 | 1961-05-17 00:00:00   | 460.00      | 460.00             |
| 2  | Company1 | 1961-05-18 00:00:00   | 457.00      | 459.25             |
| ...| ...      | ...                   | ...         | ...                |
| 25 | Company1 | 1961-06-21 00:00:00   | 479.00      | 485.31             |

### Keywords and Phrases
- MovingAverage Function Example
- Teradata Vantage
- Triangular Moving Average
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Enterprise Edition
- IntelliFlex
- VMware Product
- Analytics Database Release Number 17.20
- Published June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- SELECT, UPDATE, DELETE, CREATE operations
- SQL Syntax Examples
- Moving Average Types: Simple, Weighted, Modified, Exponential, Cumulative
- SQL Table Management
- Teradata SQL Functions","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Triangular-Moving-Average","2024-07-27 11:51:54"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Weighted-Moving-Average","text/html;charset=UTF-8","200","","Indexable","","MovingAverage Function Example | Teradata Vantage - Example: Weighted Moving Average - Analytics Database","105","1003","See example of Analytics Database (SQL Engine) function MovingAverage that computes weighted moving average.","108","715","","0","MovingAverage Function Example | Teradata Vantage - Example: Weighted Moving Average - Analytics Database","105","Database Analytic Functions","27","MovingAverage SQL Call for Weighted Moving Average","50","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Weighted-Moving-Average","","","","","","221812","13710","13710","4.860","A+","257","188","1.367","100.000","Very Easy","11.366","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.566","","","","","","1.1","## Summary

The `MovingAverage` function in Teradata Vantage is a powerful analytic function that allows users to compute various types of moving averages on specified data columns. This function can be particularly useful in financial analysis, forecasting, and other data analysis tasks where trends over time are critical.

The `MovingAverage` function supports multiple types of averages, including simple, weighted, exponential, and cumulative moving averages, among others. It uses a specified window size and can be partitioned by different categories to provide focused insights.

### Code Examples

Here are examples of SQL commands for performing `SELECT`, `UPDATE`, `DELETE`, and `CREATE` operations in Teradata, including the use of the `MovingAverage` function.

#### 1. **SELECT**
This example shows how to use the `MovingAverage` function to calculate the weighted moving average of stock prices.

```sql
SELECT * FROM MovingAverage (
  ON company1_stock PARTITION BY name ORDER BY period
  USING
  MAvgType ('W')
  TargetColumns ('stockprice')
  WindowSize (10)
  IncludeFirst ('true')
) AS dt ORDER BY id;
```

#### 2. **UPDATE**
Here’s an example of how to update the stock prices in the `company1_stock` table.

```sql
UPDATE company1_stock
SET stockprice = stockprice * 1.05
WHERE name = 'Company1' AND period > '1961-06-01';
```

#### 3. **DELETE**
This example demonstrates how to delete records from the `company1_stock` table where the stock price is below a certain threshold.

```sql
DELETE FROM company1_stock
WHERE stockprice < 450;
```

#### 4. **CREATE**
This example shows how to create a new table for storing stock data.

```sql
CREATE TABLE company1_stock (
  id INTEGER,
  name VARCHAR(50),
  period TIMESTAMP,
  stockprice DECIMAL(10, 2)
);
```

### Keywords and Phrases
- MovingAverage Function Example
- Teradata Vantage
- Weighted Moving Average
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- SQL Queries
- SELECT, UPDATE, DELETE, CREATE","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Weighted-Moving-Average","2024-07-27 12:13:32"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/MovingAverage-Examples-Input","text/html;charset=UTF-8","200","","Indexable","","MovingAverage Examples Input - Analytics Database","49","468","The input table, company1_stock, contains observations of common stock closing prices. company1_stock id name period stockprice 1 Company1 1961-05-17 00:00:00.000000 460.000000000000 2 Company1 1961-05-18 00:00:00.000000 457.000000000000 3 Company1 1961-05-19 00:00:00.000000 452.000000000000 4 Company1 1961-05-22 00:00...","323","2206","","0","MovingAverage Examples Input - Analytics Database","49","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/MovingAverage-Examples-Input","","","","","","219126","13435","13435","4.763","A+","183","162","1.130","100.000","Very Easy","11.213","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.538","","","","","","1.1","# Summary of Teradata Vantage™ Analytics Database Functions

The Teradata Vantage™ Analytics Database provides a range of analytic functions designed for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. These functions enable users to perform complex analyses and gain insights from their data efficiently. Below, we cover basic SQL operations (Select, Update, Delete, Create) as examples that users can apply when working with the Analytics Database.

## Code Examples

### 1. **Select**
Retrieve stock prices for ""Company1"" from the `company1_stock` table.

```sql
SELECT id, name, period, stockprice
FROM company1_stock
WHERE name = 'Company1';
```

### 2. **Update**
Update the stock price for a specific date.

```sql
UPDATE company1_stock
SET stockprice = 465.00
WHERE id = 1;
```

### 3. **Delete**
Delete a record for a specific stock closing price.

```sql
DELETE FROM company1_stock
WHERE id = 10;
```

### 4. **Create**
Create a new table to store average stock prices.

```sql
CREATE TABLE average_stock_prices (
    name VARCHAR(255),
    average_price DECIMAL(10, 2)
);
```

## Moving Average Examples Input - Analytics Database

### Moving Average Implementation

The `MovingAverage` function can be used to analyze trends in stock prices over time. Below are examples of how to use various moving average types within Teradata.

### Examples: How to Use MovingAverage

1. **Simple Moving Average**
   ```sql
   SELECT 
       period,
       stockprice,
       MovingAverage(stockprice, 5) AS simple_moving_avg
   FROM 
       company1_stock
   ORDER BY 
       period;
   ```

2. **Weighted Moving Average**
   ```sql
   SELECT 
       period,
       stockprice,
       MovingAverage(stockprice, 5, 'WEIGHTED') AS weighted_moving_avg
   FROM 
       company1_stock
   ORDER BY 
       period;
   ```

3. **Exponential Moving Average**
   ```sql
   SELECT 
       period,
       stockprice,
       MovingAverage(stockprice, 5, 'EXPONENTIAL') AS exponential_moving_avg
   FROM 
       company1_stock
   ORDER BY 
       period;
   ```

4. **Modified Moving Average**
   ```sql
   SELECT 
       period,
       stockprice,
       MovingAverage(stockprice, 5, 'MODIFIED') AS modified_moving_avg
   FROM 
       company1_stock
   ORDER BY 
       period;
   ```

5. **Cumulative Moving Average**
   ```sql
   SELECT 
       period,
       stockprice,
       MovingAverage(stockprice, 'CUMULATIVE') AS cumulative_moving_avg
   FROM 
       company1_stock
   ORDER BY 
       period;
   ```

6. **Triangular Moving Average**
   ```sql
   SELECT 
       period,
       stockprice,
       MovingAverage(stockprice, 5, 'TRIANGULAR') AS triangular_moving_avg
   FROM 
       company1_stock
   ORDER BY 
       period;
   ```

## Keywords and Phrases

- MovingAverage Examples Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Example Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- AMP Configuration Impact
- Function Performance
- Recommendations for Using Analytic Functions
- Data Exploration Functions
- Example: Simple Moving Average
- Example: Weighted Moving Average
- Example: Exponential Moving Average
- Example: Modified Moving Average
- Example: Cumulative Moving Average
- Example: Triangular Moving Average

This overview provides a solid foundation for understanding the capabilities of the Teradata Vantage™ Analytics Database and demonstrates how to utilize SQL for data manipulation and analysis effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/MovingAverage-Examples-Input","2024-07-27 12:19:40"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Exponential-Moving-Average","text/html;charset=UTF-8","200","","Indexable","","Exponential Moving Average - Analytics Database","47","440","Exponential moving average (EMA), or exponentially weighted moving average (EWMA), applies a damping factor, alpha, that exponentially decreases the weights of older values. This technique gives much more weight to recent observations, while retaining older observations. With MAvgType ('E'), the MovingAverage function ...","323","2020","","0","Exponential Moving Average - Analytics Database","47","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Exponential-Moving-Average","","","","","","208293","13078","13078","4.636","A+","123","45","2.733","34.861","Hard","11.319","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.585","","","","","","1.1","### Summary

The Exponential Moving Average (EMA) is a widely used technique in data analysis, especially in time series forecasting. It applies a damping factor (alpha) that exponentially decreases the weights of older values, allowing recent observations to have a significant impact on the average. This method is particularly useful in analytics databases for smoothing data and identifying trends.

In this guide, we will cover foundational SQL operations such as Select, Update, Delete, and Create, with corresponding code examples that demonstrate their usage in an analytics database context.

### Code Examples

#### 1. Select

The `SELECT` statement is used to query data from a database.

```sql
SELECT 
    customer_id, 
    order_date, 
    total_amount 
FROM 
    orders 
WHERE 
    order_date >= '2023-01-01' 
ORDER BY 
    order_date DESC;
```

#### 2. Update

The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE 
    customers 
SET 
    loyalty_points = loyalty_points + 100 
WHERE 
    customer_id = 12345;
```

#### 3. Delete

The `DELETE` statement is used to remove records from a table.

```sql
DELETE FROM 
    orders 
WHERE 
    order_date < '2023-01-01';
```

#### 4. Create

The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE customer_feedback (
    feedback_id INT PRIMARY KEY,
    customer_id INT,
    feedback_text VARCHAR(255),
    feedback_date DATE
);
```

### Keywords and Phrases

- Exponential Moving Average
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Function Syntax Descriptions
- Input Table Rows Redistribution
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- Workload Management Configuration
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This overview provides a foundational understanding of basic SQL operations and the context of Exponential Moving Average in analytics databases, positioning users to effectively manage and analyze their data.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Exponential-Moving-Average","2024-07-27 11:49:16"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Modified-Moving-Average","text/html;charset=UTF-8","200","","Indexable","","Modified Moving Average - Analytics Database","44","414","Modified moving average (MMA) makes averages more susceptible to recent shifts. The Modified moving average is a special case of the Exponential moving average, for which the smoothing constant is equal to the reciprocal of the smoothing interval. The first point of the modified moving average is calculated like the fi...","323","1985","","0","Modified Moving Average - Analytics Database","44","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Modified-Moving-Average","","","","","","208753","13192","13192","4.677","A+","188","51","3.686","55.943","Fairly Hard","11.479","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.007","","","","","","1.1","### Summary

The Modified Moving Average (MMA) is an analytical method used primarily in time series analysis to smooth data and highlight trends. It is particularly responsive to recent changes, making it useful for detecting shifts in data patterns. The calculation for MMA starts with the simple moving average for the first point, and each subsequent point is derived from the previous modified average and the current value.

This document covers the key functionalities of the Analytics Database, particularly focusing on the Teradata Vantage™ offerings, including various analytic functions for data exploration, feature engineering, model training, and evaluation. 

### Code Examples

Below are SQL code examples demonstrating how to use basic SQL commands such as `SELECT`, `UPDATE`, `DELETE`, and `CREATE` with the context of the Modified Moving Average and the Teradata Analytics Database.

#### 1. SELECT Example

```sql
SELECT 
    date, 
    value, 
    MovingAverage(value, 5) AS modified_moving_average 
FROM 
    sales_data 
WHERE 
    date >= '2022-01-01';
```

This query retrieves the date, value, and the modified moving average of the last 5 values from the `sales_data` table starting from January 1, 2022.

#### 2. UPDATE Example

```sql
UPDATE sales_data 
SET value = value * 1.1 
WHERE date < '2022-01-01';
```

This query updates the `value` column in the `sales_data` table, increasing it by 10% for all records prior to January 1, 2022.

#### 3. DELETE Example

```sql
DELETE FROM sales_data 
WHERE date < '2021-01-01';
```

This command deletes all records from the `sales_data` table where the date is before January 1, 2021.

#### 4. CREATE Example

```sql
CREATE TABLE sales_data (
    id INT PRIMARY KEY,
    date DATE,
    value FLOAT
);
```

This SQL statement creates a new table called `sales_data` with three columns: `id`, `date`, and `value`.

### Keywords and Phrases

- **Modified Moving Average**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Displaying Online Help** 
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions**
- **MovingAverage**
- **Weighted Moving Average**
- **Triangular Moving Average**
- **Simple Moving Average**
- **Exponential Moving Average**
- **Cumulative Moving Average**
- **TD_ColumnSummary**
- **TD_Histogram**
- **TD_QQNorm**
- **TD_UnivariateStatistics**
- **TD_WhichMax**
- **TD_WhichMin** 

This structured overview encapsulates the critical concepts and functionalities regarding the Modified Moving Average and related database operations within Teradata Vantage.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Modified-Moving-Average","2024-07-27 12:15:55"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/MovingAverage-Input","text/html;charset=UTF-8","200","","Indexable","","MovingAverage Input - Analytics Database","40","376","Input Table Schema Column Data Type Description partition_column Any Column by which input data is partitioned. This column must contain all rows of an entity. For example, if function is to compute moving average of a particular stock share price, all transactions of that stock must be in one partition. PARTITION BY c...","323","1991","","0","MovingAverage Input - Analytics Database","40","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/MovingAverage-Input","","","","","","209734","13361","13361","4.737","A+","131","46","2.848","28.932","Very Hard","11.264","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.674","","","","","","1.1","# Overview of SQL Operations: Select, Update, Delete, Create

In relational database management systems, SQL (Structured Query Language) is used to perform various operations on the data stored in tables. The four fundamental operations are **Select**, **Update**, **Delete**, and **Create**. Below is a summary of each operation along with code examples.

## Summary of SQL Operations

- **Select**: This operation retrieves data from one or more tables. It can filter, sort, and transform the retrieved data using various clauses.
  
- **Update**: This operation modifies existing records in a table. You can specify which records to update and the new values to assign.
  
- **Delete**: This operation removes records from a table. You can specify conditions to delete specific records rather than removing all.
  
- **Create**: This operation creates a new table or database. You define the structure of the table, including the columns and their data types.

## Code Examples

### Select
```sql
SELECT column1, column2
FROM table_name
WHERE condition
ORDER BY column1 ASC;
```
Example:
```sql
SELECT first_name, last_name 
FROM employees 
WHERE department = 'Sales' 
ORDER BY last_name ASC;
```

### Update
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```
Example:
```sql
UPDATE employees 
SET salary = salary * 1.1 
WHERE department = 'Sales';
```

### Delete
```sql
DELETE FROM table_name
WHERE condition;
```
Example:
```sql
DELETE FROM employees 
WHERE last_name = 'Smith';
```

### Create
```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```
Example:
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

## Keywords and Phrases

- MovingAverage Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This summary provides an overview of SQL operations along with practical examples, making it easier to understand how each command functions in a database context.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/MovingAverage-Input","2024-07-27 12:19:57"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/MovingAverage-Output","text/html;charset=UTF-8","200","","Indexable","","MovingAverage Output - Analytics Database","41","392","Output Table Schema Column Data Type Description partition_column Same as in input table Column by which input data is partitioned. order_column Same as in input table Column by which input table is ordered. target_column Same as in input table Column copied from input table. target_column_typemavg DOUBLE PRECISION Mov...","323","2074","","0","MovingAverage Output - Analytics Database","41","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/MovingAverage-Output","","","","","","210055","13183","13183","4.673","A+","108","42","2.571","24.058","Very Hard","11.178","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.543","","","","","","1.1","## Overview of Analytics Database Functions

The Analytics Database in Teradata Vantage™ provides a robust environment for performing various analytical tasks using SQL-like syntax. The system includes a broad range of analytic functions that facilitate data cleaning, exploration, feature engineering, and model training. Among these functions, the Moving Average functions are particularly valuable for time-series analysis and trend identification.

## Code Example Section

### 1. Create Table

To create a new table in the Analytics Database, use the following SQL command:

```sql
CREATE TABLE sales_data (
    sales_id INT,
    sales_amount DECIMAL(10, 2),
    sales_date DATE
);
```

### 2. Insert Data

You can insert data into the created table with the following command:

```sql
INSERT INTO sales_data (sales_id, sales_amount, sales_date) VALUES
(1, 150.00, '2023-01-01'),
(2, 200.00, '2023-01-02'),
(3, 250.00, '2023-01-03');
```

### 3. Select Data

To retrieve data from the table, use the SELECT statement:

```sql
SELECT * FROM sales_data;
```

### 4. Update Data

To update existing records in the table, the following command can be used:

```sql
UPDATE sales_data
SET sales_amount = sales_amount * 1.10
WHERE sales_date = '2023-01-01';
```

### 5. Delete Data

To remove records from the table, use the DELETE statement:

```sql
DELETE FROM sales_data
WHERE sales_id = 1;
```

## Moving Average Example

To calculate a simple moving average for the sales data, you can use the `MovingAverage` function as follows:

```sql
SELECT sales_date,
       sales_amount,
       MOVINGAVERAGE(sales_amount, 3) AS moving_avg
FROM sales_data
ORDER BY sales_date;
```

This command calculates the 3-day moving average of the sales amounts.

## Summary

The Teradata Analytics Database provides users with powerful analytic functions, including the Moving Average functions, which are essential for time-series analysis. The code examples above demonstrate how to create, read, update, and delete data within an analytical context, allowing for effective data manipulation and analysis.

## Keywords and Phrases

- MovingAverage Output
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Recommendations for Using Analytic Functions
- Examples of Analytic Functions","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/MovingAverage-Output","2024-07-27 11:42:29"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/MovingAverage-Syntax","text/html;charset=UTF-8","200","","Indexable","","MovingAverage Function Syntax | Teradata Vantage - MovingAverage Syntax - Analytics Database","92","869","See the syntax of Analytics Database (SQL Engine) function MovingAverage and read descriptions of its required and optional syntax elements.","140","882","","0","MovingAverage Function Syntax | Teradata Vantage - MovingAverage Syntax - Analytics Database","92","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/MovingAverage-Syntax","","","","","","208759","13090","13090","4.640","A+","141","54","2.611","69.785","Normal","11.340","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.515","","","","","","1.1","### Moving Average Function in Teradata Vantage

The Moving Average function in Teradata Vantage allows users to calculate the moving average of a set of numbers over a specified period. This function is particularly useful in time series analysis and data smoothing.

#### Summary of Moving Average Function Syntax

The syntax for the Moving Average function is as follows:

```sql
MovingAverage (
  ON { table | view | (query) }
     [ PARTITION BY partition_column [,...] ]
     [ ORDER BY order_column [,...] ]
  [ USING
    [ MAvgType ({ 'C' | 'E' | 'M' | 'S' | 'T' | 'W' }) ]
    [ TargetColumns ({'target_column'| 'target_column_range'}[,...])]
    [ Alpha (alpha) ]
    [ StartRows (n) ]
    [ IncludeFirst ({'true'|'t'|'yes'|'y'|'1'|'false'|'f'|'no'|'n'|'0'}) ]
    [ WindowSize (window_size) ]
  ]
)
```

### Code Examples

#### 1. Select - Simple Moving Average

```sql
SELECT 
    date, 
    sales, 
    MovingAverage(ON sales ORDER BY date USING MAvgType('S')) AS simple_moving_avg
FROM 
    sales_data
ORDER BY 
    date;
```

#### 2. Update - Update Table with Moving Average

```sql
UPDATE sales_data
SET moving_avg = MovingAverage(ON sales ORDER BY date USING MAvgType('S'))
WHERE date BETWEEN '2023-01-01' AND '2023-12-31';
```

#### 3. Delete - Remove Rows based on Moving Average Condition

```sql
DELETE FROM sales_data
WHERE sales < MovingAverage(ON sales ORDER BY date USING MAvgType('S'));
```

#### 4. Create - Create a View with Moving Average

```sql
CREATE VIEW sales_moving_avg AS
SELECT 
    date, 
    sales, 
    MovingAverage(ON sales ORDER BY date USING MAvgType('S')) AS simple_moving_avg
FROM 
    sales_data;
```

### Keywords and Phrases

- **MovingAverage Function Syntax**
- **Teradata Vantage - MovingAverage Syntax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product: Teradata Vantage™**
- **Release Number: 17.20**
- **Published: June 2022**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Non-Deterministic Behavior**
- **Recommendations for Using Analytic Functions**
- **Simple Moving Average**
- **Weighted Moving Average**
- **Exponential Moving Average**
- **Modified Moving Average**
- **Cumulative Moving Average**
- **Triangular Moving Average**
- **Window Size** 
- **PARTITION BY**
- **ORDER BY** 

This guide provides a straightforward understanding of the Moving Average function in Teradata Vantage, along with practical examples to facilitate its implementation in various scenarios.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/MovingAverage-Syntax","2024-07-27 11:44:27"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Optional-Syntax-Elements-for-MovingAverage","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for MovingAverage - Analytics Database","63","590","MAvgType Specify one of the following moving average types: Type Description 'C' (Default) Cumulative moving average. 'E' Exponential moving average. 'M' Modified moving average. 'S' Simple moving average. 'T' Triangular moving average. 'W' Weighted moving average. TargetColumns Specify the input column names for which...","323","2030","","0","Optional Syntax Elements for MovingAverage - Analytics Database","63","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Optional-Syntax-Elements-for-MovingAverage","","","","","","211756","13795","13795","4.890","A+","285","88","3.239","49.190","Hard","11.642","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.584","","","","","","1.1","## Summary

In this guide, we cover the essential operations in SQL for managing database records: selecting, updating, deleting, and creating entries. These operations form the foundation of CRUD (Create, Read, Update, Delete) functionality in relational databases. Each operation is demonstrated with a concise code example.

### Code Examples

#### 1. Select
The `SELECT` statement retrieves data from a database. You can specify columns and conditions.

```sql
SELECT first_name, last_name 
FROM employees 
WHERE department = 'Sales';
```

#### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE employees 
SET salary = salary * 1.10 
WHERE performance_rating = 'Excellent';
```

#### 3. Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM employees 
WHERE termination_date < '2022-01-01';
```

#### 4. Create
The `CREATE` statement creates a new table or database.

```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

### Keywords and Phrases

- **Optional Syntax Elements for MovingAverage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This summary and code examples provide a solid foundation for understanding basic SQL operations in the context of an analytics database, particularly using Teradata Vantage.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Optional-Syntax-Elements-for-MovingAverage","2024-07-27 12:22:07"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Required-Syntax-Elements-for-MovingAverage","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for MovingAverage - Analytics Database","63","594","ON clause Accepts the PARTITION BY and ORDER BY clauses. If the ON clause does not include the PARTITION BY and ORDER BY clauses, results are nondeterministic. The ORDER BY clause supports only ASCII collation. The PARTITION BY clause assumes column names are in Normalization Form C (NFC).","290","1889","","0","Required Syntax Elements for MovingAverage - Analytics Database","63","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Required-Syntax-Elements-for-MovingAverage","","","","","","208062","12917","12917","4.579","A+","95","40","2.375","40.568","Hard","11.225","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.664","","","","","","1.1","## Summary

The Analytics Database in Teradata Vantage™ provides advanced analytic functions that enable users to perform complex data analysis tasks efficiently. With capabilities such as data cleaning, feature engineering, model training, and evaluation, the platform supports a wide range of analytics applications. This documentation outlines the required syntax elements for key functions, with a focus on the Moving Average function.

## Code Example

Here are examples of common SQL operations in the context of an Analytics Database:

### SELECT

```sql
SELECT 
    customer_id, 
    AVG(order_amount) AS average_order
FROM 
    orders
GROUP BY 
    customer_id;
```

### UPDATE

```sql
UPDATE 
    customers
SET 
    loyalty_points = loyalty_points + 10
WHERE 
    last_purchase_date > CURRENT_DATE - INTERVAL '30 days';
```

### DELETE

```sql
DELETE FROM 
    sessions
WHERE 
    session_end < CURRENT_DATE - INTERVAL '1 year';
```

### CREATE

```sql
CREATE TABLE new_orders (
    order_id INT PRIMARY KEY,
    customer_id INT NOT NULL,
    order_date DATE,
    order_amount DECIMAL(10, 2)
);
```

## Moving Average Function Syntax

The Moving Average function computes the average of a specified number of data points over time, providing insights into trends and patterns.

### Required Syntax Elements for MovingAverage

- **input_table**: The source table containing the data.
- **window_size**: The number of periods to average.
- **output_column**: The name of the column to store the result.

### Example: Simple Moving Average

```sql
SELECT 
    order_date, 
    MovingAverage(order_amount, 3) AS three_month_average
FROM 
    orders
ORDER BY 
    order_date;
```

### Example: Weighted Moving Average

```sql
SELECT 
    order_date, 
    WeightedMovingAverage(order_amount, 3, weight_column) AS weighted_average
FROM 
    orders
ORDER BY 
    order_date;
```

### Example: Exponential Moving Average

```sql
SELECT 
    order_date, 
    ExponentialMovingAverage(order_amount, 0.2) AS exp_moving_average
FROM 
    orders
ORDER BY 
    order_date;
```

## Keywords and Phrases

- Required Syntax Elements for MovingAverage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Example Usages
- SQL Syntax
- MovingAverage
- Weighted Moving Average
- Simple Moving Average
- Modified Moving Average
- Exponential Moving Average
- Cumulative Moving Average
- TD Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Usage Notes

This structured overview and examples should provide a solid foundation for using analytic functions in Teradata's Analytics Database, particularly focusing on the Moving Average capabilities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Required-Syntax-Elements-for-MovingAverage","2024-07-27 12:53:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Simple-Moving-Average","text/html;charset=UTF-8","200","","Indexable","","Simple Moving Average - Analytics Database","42","398","The simple moving average (SMA) is the most basic type of moving average. It is calculated by taking the sum of a set of data points and dividing by the number of data points in the set. The formula for an SMA is: SMA = (Sum of data over a specified number of periods) / (Number of periods) For example, if you wanted to...","323","1983","","0","Simple Moving Average - Analytics Database","42","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Simple-Moving-Average","","","","","","207976","12952","12952","4.592","A+","134","42","3.190","63.438","Normal","11.303","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","2.377","","","","","","1.1","## Simple Moving Average in Analytics Database

The Simple Moving Average (SMA) is a fundamental analytical tool widely used in data analysis and finance. It smooths out fluctuations in data by creating an average of a specified number of data points, which helps in identifying trends over time.

### How to Calculate SMA

The formula for calculating a Simple Moving Average is:

\[ \text{SMA} = \frac{\text{Sum of data over a specified number of periods}}{\text{Number of periods}} \]

For instance, to calculate a 10-day moving average of a stock's price, you would sum the closing prices of that stock over the past 10 days and then divide the total by 10.

### Code Example

Below is a demonstration of how to perform basic SQL operations such as Select, Update, Delete, and Create in the context of an Analytics Database, which could include calculations for a simple moving average.

```sql
-- Create a table to store stock prices
CREATE TABLE stock_prices (
    stock_id INT,
    price DECIMAL(10, 2),
    price_date DATE
);

-- Insert sample data into stock_prices
INSERT INTO stock_prices (stock_id, price, price_date) VALUES
(1, 100.00, '2023-01-01'),
(1, 101.50, '2023-01-02'),
(1, 102.75, '2023-01-03'),
(1, 103.00, '2023-01-04'),
(1, 102.50, '2023-01-05'),
(1, 104.00, '2023-01-06'),
(1, 105.25, '2023-01-07'),
(1, 106.00, '2023-01-08'),
(1, 107.50, '2023-01-09'),
(1, 108.00, '2023-01-10');

-- Query to select the Simple Moving Average for the last 10 days
SELECT AVG(price) AS simple_moving_average
FROM stock_prices
WHERE stock_id = 1
AND price_date >= DATEADD(DAY, -10, CURRENT_DATE);

-- Update the price for a specific date
UPDATE stock_prices
SET price = 109.00
WHERE stock_id = 1 AND price_date = '2023-01-10';

-- Delete a record for a specific date
DELETE FROM stock_prices
WHERE stock_id = 1 AND price_date = '2023-01-01';
```

### Summary

The Simple Moving Average is a vital analytic function that helps in trend analysis by smoothing out short-term fluctuations in data. This example demonstrates how to create a table, insert data, perform a moving average calculation, and manipulate records using SQL commands in the context of an Analytics Database.

### Keywords and Phrases

- Simple Moving Average
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- Function Syntax Descriptions
- Workload Management Configuration
- Non-Deterministic Behavior
- Data Exploration Functions
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- TD_Histogram
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_ANOVA
- TD_KMeans
- TD_XGBoost

This collection of terms and concepts provides a foundational overview of the analytics capabilities within Teradata Vantage, particularly concerning the Simple Moving Average and related functions.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Simple-Moving-Average","2024-07-27 11:34:44"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Triangular-Moving-Average","text/html;charset=UTF-8","200","","Indexable","","Triangular Moving Average - Analytics Database","46","427","The triangular moving average (TMA) differs from the simple moving average in that it is double-smoothed; that is, averaged twice. It takes an average over Simple Moving Averages. Double-smoothing keeps the triangular moving average from responding to new data points as fast as the simple moving average. If you want an...","323","2022","","0","Triangular Moving Average - Analytics Database","46","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Triangular-Moving-Average","","","","","","209308","13277","13277","4.707","A+","240","60","4.000","67.062","Normal","11.553","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.649","","","","","","1.1","### Summary
The Triangular Moving Average (TMA) is a statistical tool used to smooth time series data by applying a double smoothing technique. Unlike the Simple Moving Average (SMA), which averages a set of values directly, the TMA first computes the SMA for subsets of data and then averages those results. This method results in less sensitivity to fluctuations in the data, providing a clearer trend line, but it responds more slowly to new data compared to simpler averaging methods.

### Code Example

Below are SQL code examples demonstrating the basic operations of selecting, updating, deleting, and creating records within an analytics database that could relate to the Triangular Moving Average.

#### Select
```sql
-- Select the first 10 rows from a dataset
SELECT *
FROM sales_data
LIMIT 10;
```

#### Update
```sql
-- Update the price of a specific product
UPDATE products
SET price = price * 1.10
WHERE product_id = 12345;
```

#### Delete
```sql
-- Delete records of products that are discontinued
DELETE FROM products
WHERE status = 'discontinued';
```

#### Create
```sql
-- Create a new table for storing triangular moving averages
CREATE TABLE triangular_moving_average (
    id SERIAL PRIMARY KEY,
    date DATE,
    tma_value FLOAT
);
```

### Keywords and Phrases
- Triangular Moving Average - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- MovingAverage
- Weighted Moving Average
- Simple Moving Average
- Modified Moving Average
- Exponential Moving Average
- Cumulative Moving Average
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- Antiselect
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer
- TD_FunctionFit
- TD_FunctionTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_PolynomialFeaturesFit
- TD_PolynomialFeaturesTransform
- TD_RandomProjectionFit
- TD_RandomProjectionTransform
- TD_RowNormalizeFit
- TD_RowNormalizeTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_Unpivoting
- TD_FillRowID
- TD_NumApply
- TD_RoundColumns
- TD_StrApply
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_KNN
- TD_OneClassSVM
- TD_SVM
- TD_VectorDistance
- TD_XGBoost
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_OneClassSVMPredict
- TD_SVMPredict
- TD_XGBoostPredict
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- NGramSplitter
- TD_NaiveBayesTextClassifierPredict
- TD_NaiveBayesTextClassifierTrainer
- TD_SentimentExtractor
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Test Components
- Hypothesis Test Types
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Attribution
- nPath
- Sessionize","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Triangular-Moving-Average","2024-07-27 11:52:50"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Weighted-Moving-Average","text/html;charset=UTF-8","200","","Indexable","","Weighted Moving Average - Analytics Database","44","421","Weighted moving average is a type of moving average that assigns different weights to each data point in the time series. This means that the most recent data points have a greater impact on the moving average calculation than older data points. Weighted moving averages are commonly used in finance and economics to smo...","323","2032","","0","Weighted Moving Average - Analytics Database","44","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Weighted-Moving-Average","","","","","","208935","13222","13222","4.687","A+","210","49","4.286","75.182","Fairly Easy","11.476","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.556","","","","","","1.1","### Summary

The Weighted Moving Average (WMA) is a statistical method used to analyze time series data, allowing for the assignment of different weights to each data point. This technique is particularly useful in finance and economics for identifying trends and smoothing out fluctuations. In the context of an analytics database, functions such as `MovingAverage` can be utilized to compute WMA, providing insights into patterns over time by giving more importance to recent data.

### Code Example

Below are examples of SQL commands for creating, selecting, updating, and deleting data in an analytics database that could be used in conjunction with Weighted Moving Averages.

#### Create

```sql
CREATE TABLE SalesData (
    SalesID INT PRIMARY KEY,
    SalesAmount DECIMAL(10, 2),
    SalesDate DATE
);
```

#### Insert

```sql
INSERT INTO SalesData (SalesID, SalesAmount, SalesDate) VALUES (1, 100.00, '2023-01-01');
INSERT INTO SalesData (SalesID, SalesAmount, SalesDate) VALUES (2, 150.00, '2023-01-02');
INSERT INTO SalesData (SalesID, SalesAmount, SalesDate) VALUES (3, 200.00, '2023-01-03');
```

#### Select

```sql
SELECT SalesDate, SalesAmount FROM SalesData ORDER BY SalesDate;
```

#### Update

```sql
UPDATE SalesData
SET SalesAmount = SalesAmount * 1.10
WHERE SalesDate = '2023-01-01';
```

#### Delete

```sql
DELETE FROM SalesData
WHERE SalesID = 1;
```

### Keywords and Phrases

- Weighted Moving Average
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- TD_MovingAverage
- TD_WeightedMovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- Analytics Database Analytic Function Categories
- Pack
- Unpack
- TD_GetRowsWithMissingValues
- TD_Silhouette
- TD_GLMPredict
- TD_XGBoostPredict","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Weighted-Moving-Average","2024-07-27 12:48:00"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary","text/html;charset=UTF-8","200","","Indexable","","TD_CategoricalSummary | CategoricalSummary | Teradata Vantage - TD_CategoricalSummary - Analytics Database","106","1026","This Analytics Database (SQL Engine) data exploration function displays the distinct values and their counts for each specified input table column.","147","900","","0","TD_CategoricalSummary | CategoricalSummary | Teradata Vantage - TD_CategoricalSummary - Analytics Database","106","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary","","","","","","208920","13040","13040","4.623","A+","80","43","1.860","0.000","Very Hard","11.201","1","4","","707","707","0","99.860","715","713","0","","","","","","","","","0.452","","","","","","1.1","### Summary of Teradata Vantage and TD_CategoricalSummary

Teradata Vantage™ is a powerful analytics database that provides a comprehensive suite of analytic functions designed for data exploration, model training, and evaluation, among other capabilities. One of its notable functions is `TD_CategoricalSummary`, which is used to display distinct values and their counts for specified columns in an input table. This function is particularly useful for understanding categorical data distributions.

The `TD_CategoricalSummary` function is part of a broader set of analytic functions available in Teradata Vantage, which also includes capabilities for data cleaning, feature engineering, model training, and more. The following sections provide essential SQL commands for basic database operations.

### Code Example Section

#### Create Table
```sql
CREATE TABLE Employee (
    EmployeeID INT,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Department VARCHAR(50)
);
```

#### Insert Data
```sql
INSERT INTO Employee (EmployeeID, FirstName, LastName, Department) VALUES
(1, 'John', 'Doe', 'Sales'),
(2, 'Jane', 'Smith', 'Marketing'),
(3, 'Emily', 'Davis', 'Sales');
```

#### Select Data
```sql
SELECT * FROM Employee;
```

#### Update Data
```sql
UPDATE Employee
SET Department = 'Human Resources'
WHERE EmployeeID = 1;
```

#### Delete Data
```sql
DELETE FROM Employee
WHERE EmployeeID = 2;
```

### Use of TD_CategoricalSummary
```sql
SELECT * FROM TD_CategoricalSummary(
    TABLE => 'Employee',
    COLUMNS => 'Department'
);
```

This command will return the distinct values in the ""Department"" column along with their counts, providing insight into the distribution of employees across different departments.

### Keywords and Phrases
- TD_CategoricalSummary
- CategoricalSummary
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Language English (United States)
- Last Update 2024-04-06
- Product Category Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Recommendations 
- Examples
- SQL Commands","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary","2024-07-27 12:21:14"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary/Example-How-to-Use-TD_CategoricalSummary","text/html;charset=UTF-8","200","","Indexable","","TD_CategoricalSummary Example | CategoricalSummary - Example: How to Use TD_CategoricalSummary - Analytics Database","115","1126","See an example of the Analytics Database (SQL Engine) data exploration function TD_CategoricalSummary.","102","663","","0","TD_CategoricalSummary Example | CategoricalSummary - Example: How to Use TD_CategoricalSummary - Analytics Database","115","Database Analytic Functions","27","TD_CategoricalSummary InputTable: cat_titanic_train","51","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary/Example-How-to-Use-TD_CategoricalSummary","","","","","","210430","13909","13909","4.931","A+","242","73","3.315","75.172","Fairly Easy","11.785","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.874","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database includes a variety of analytic functions for data manipulation and analysis. This document covers basic SQL operations such as **SELECT**, **UPDATE**, **DELETE**, and **CREATE**. It provides insights into how to utilize the TD_CategoricalSummary function for categorical data analysis, along with other useful analytic functions that Teradata provides.

### Code Examples

Below are examples illustrating the basic SQL operations:

### 1. **SELECT**
The `SELECT` statement retrieves data from a database table.

```sql
SELECT * FROM cat_titanic_train;
```

### 2. **UPDATE**
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE cat_titanic_train
SET fare = fare * 1.10
WHERE gender = 'female';
```

### 3. **DELETE**
The `DELETE` statement removes records from a table.

```sql
DELETE FROM cat_titanic_train
WHERE survived = 0;
```

### 4. **CREATE**
The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE cat_titanic_train (
    passenger_id INT,
    survived INT,
    pclass INT,
    name VARCHAR(100),
    gender VARCHAR(10),
    age FLOAT,
    sibsp INT,
    parch INT,
    ticket VARCHAR(20),
    fare FLOAT,
    cabin VARCHAR(20),
    embarked CHAR(1)
);
```

### 5. **Using TD_CategoricalSummary**
The `TD_CategoricalSummary` function summarizes categorical data.

```sql
SELECT * FROM TD_CategoricalSummary (
  ON cat_titanic_train AS InputTable
  USING
  TargetColumns ('gender')
) AS dt;
```

**Output Example:**

| ColumnName | DistinctValue | DistinctValueCount |
|------------|---------------|---------------------|
| gender     | female        | 1                   |
| gender     | male          | 4                   |

## Keywords and Phrases

- **TD_CategoricalSummary Example**
- **CategoricalSummary - Example**
- **How to Use TD_CategoricalSummary**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Avoid Deadlocks Using Volatile Tables**
- **Example: How to Use TD_CategoricalSummary**
- **TD_GetRowsWithMissingValues**
- **TD_Histogram**
- **TD_OneHotEncodingTransform**
- **NGramSplitter**
- **TD_ANOVA**
- **Sessionize** 

This overview provides a concise introduction to performing basic SQL operations and utilizing analytic functions within the Teradata Vantage™ framework.","26","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary/Example-How-to-Use-TD_CategoricalSummary","2024-07-27 11:56:04"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary/TD_CategoricalSummary-Input","text/html;charset=UTF-8","200","","Indexable","","TD_CategoricalSummary Input - Analytics Database","48","459","InputTable Schema Column Data Type Description target_column CHAR, VARCHAR (CHARACTER SET LATIN or UNICODE) Column to display distinct values and their counts.","159","1067","","0","TD_CategoricalSummary Input - Analytics Database","48","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary/TD_CategoricalSummary-Input","","","","","","208504","13021","13021","4.616","A+","63","38","1.658","1.038","Very Hard","11.132","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.484","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions to facilitate data exploration, cleaning, feature engineering, model training, scoring, and evaluation. This document outlines key functionalities, including the `TD_CategoricalSummary` function, which summarizes categorical data, and other crucial operations such as selecting, updating, deleting, and creating data entries in the database.

### Code Examples

Below are examples of basic SQL operations including `SELECT`, `UPDATE`, `DELETE`, and `CREATE` statements commonly used in the context of an analytics database.

#### Select

```sql
SELECT target_column, COUNT(*) AS value_count
FROM your_table
GROUP BY target_column
ORDER BY value_count DESC;
```

#### Update

```sql
UPDATE your_table
SET target_column = 'New Value'
WHERE condition_column = 'Condition';
```

#### Delete

```sql
DELETE FROM your_table
WHERE condition_column = 'Condition';
```

#### Create

```sql
CREATE TABLE new_table (
    id INT,
    target_column VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Keywords and Phrases

- **TD_CategoricalSummary Input**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published June 2022**
- **Language English (United States)**
- **Last Update 2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

These elements provide a comprehensive overview of the capabilities and configurations related to the Teradata Vantage Analytics Database, guiding users in leveraging analytic functions for data processing and analysis.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary/TD_CategoricalSummary-Input","2024-07-27 12:49:48"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary/TD_CategoricalSummary-Output","text/html;charset=UTF-8","200","","Indexable","","TD_CategoricalSummary Output - Analytics Database","49","475","Output Table Schema Column Data Type Description ColumnName VARCHAR (CHARACTER SET UNICODE) Name of target_column. DistinctValue VARCHAR (CHARACATER SET LATIN or UNICODE depending on input table) Name of distinct value in target_column. Table has one row for each distinct value. DistinctValueCount BIGINT Count of disti...","323","2151","","0","TD_CategoricalSummary Output - Analytics Database","49","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary/TD_CategoricalSummary-Output","","","","","","209526","13160","13160","4.665","A+","97","44","2.205","17.954","Very Hard","11.188","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.828","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database provides a robust framework for performing various analytic functions. It allows users to manipulate and analyze data effectively through SQL commands tailored for data cleaning, exploration, feature engineering, and model training. This document outlines the basic SQL commands—Select, Update, Delete, and Create—along with examples that illustrate their usage within the context of an analytics database.

### Code Example

#### 1. **Select**
The `SELECT` statement is used to query data from one or more tables.

```sql
SELECT 
    ColumnName, 
    DistinctValue, 
    DistinctValueCount 
FROM 
    YourTableName 
WHERE 
    DistinctValueCount > 100;
```

#### 2. **Update**
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE 
    YourTableName 
SET 
    DistinctValueCount = DistinctValueCount + 1 
WHERE 
    DistinctValue = 'some_value';
```

#### 3. **Delete**
The `DELETE` statement removes rows from a table.

```sql
DELETE FROM 
    YourTableName 
WHERE 
    DistinctValueCount < 10;
```

#### 4. **Create**
The `CREATE` statement is used to create a new table.

```sql
CREATE TABLE NewTableName (
    ColumnName VARCHAR(100),
    DistinctValue VARCHAR(100),
    DistinctValueCount BIGINT
);
```

### Keywords and Phrases
- TD_CategoricalSummary Output
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Spool Space Exhaustion for Large Partitions
- Non-Deterministic Behavior
- Workload Management Configuration
- Deadlocks Using Volatile Tables
- Input Table Rows Redistribution

This summary and code examples should provide a foundational understanding of how to interact with the Teradata Analytics Database using standard SQL commands.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary/TD_CategoricalSummary-Output","2024-07-27 11:24:28"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary/TD_CategoricalSummary-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_CategoricalSummary Syntax | CategoricalSummary - TD_CategoricalSummary Syntax - Analytics Database","101","980","See the syntax of the Analytics Database (SQL Engine) function TD_CategoricalSummary and read descriptions of its required and optional syntax elements.","152","962","","0","TD_CategoricalSummary Syntax | CategoricalSummary - TD_CategoricalSummary Syntax - Analytics Database","101","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary/TD_CategoricalSummary-Syntax","","","","","","208086","12891","12891","4.570","A+","92","44","2.091","25.398","Very Hard","11.241","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.610","","","","","","1.1","# TD_CategoricalSummary Overview

The `TD_CategoricalSummary` function in Teradata Vantage™ is designed to provide a summary of categorical data in a specified input table. It aggregates data based on specified target columns, allowing for effective analysis of categorical variables.

## Summary

- **Functionality**: Summarizes categorical data.
- **Input**: Accepts tables, views, or queries as input.
- **Output**: Generates summary statistics for specified target columns.

## Code Examples

### 1. Creating a Summary Table

Here's how to create a summary of a categorical column in a table:

```sql
CREATE TABLE Categorical_Summary AS (
  SELECT * 
  FROM TD_CategoricalSummary (
    ON my_table AS InputTable
    USING
    TargetColumns ('category_column')
  )
) WITH NO DATA;
```

### 2. Selecting from Categorical Summary

You can also use the `TD_CategoricalSummary` function directly in a `SELECT` statement:

```sql
SELECT *
FROM TD_CategoricalSummary (
  ON my_table AS InputTable
  USING
  TargetColumns ('category_column')
);
```

### 3. Updating a Summary Table

To update an existing summary table with new data, you could use:

```sql
INSERT INTO Categorical_Summary
SELECT *
FROM TD_CategoricalSummary (
  ON my_table AS InputTable
  USING
  TargetColumns ('category_column')
);
```

### 4. Deleting from a Summary Table

If you need to delete specific records from a summary table, you can do so with a standard `DELETE` statement:

```sql
DELETE FROM Categorical_Summary
WHERE category = 'UnwantedCategory';
```

## Keywords and Phrases

- **TD_CategoricalSummary Syntax**: Syntax for `TD_CategoricalSummary`.
- **Analytics Database**: Database for analytic functions in Teradata.
- **Deployment**: Process of implementing Teradata Vantage.
- **VantageCloud / VantageCore**: Cloud and core solutions of Teradata Vantage.
- **Enterprise Edition**: Version of Teradata Vantage designed for enterprise usage.
- **IntelliFlex**: Teradata’s flexible architecture for data management.
- **VMware**: Virtualization technology potentially used in Teradata environments.
- **Data Cleaning Functions**: Functions for cleaning data.
- **Data Exploration Functions**: Functions for exploring data.
- **Feature Engineering Functions**: Functions for transforming data features.
- **Model Training Functions**: Functions for training machine learning models.
- **Release Number**: 17.20
- **Published**: June 2022
- **Last Update**: 2024-04-06
- **Product Category**: Teradata Vantage™
- **Hypothesis Testing Functions**: Functions for statistical hypothesis testing.
- **Path and Pattern Analysis Functions**: Functions for analyzing paths and patterns in data.

This structured overview provides a foundational understanding of the `TD_CategoricalSummary` function, its application, and relevant context within the Teradata ecosystem.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary/TD_CategoricalSummary-Syntax","2024-07-27 12:50:44"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary/TD_CategoricalSummary-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","TD_CategoricalSummary Syntax Elements - Analytics Database","58","563","TargetColumns Specify the names of the InputTable columns for which to display the distinct values and their counts.","116","724","","0","TD_CategoricalSummary Syntax Elements - Analytics Database","58","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary/TD_CategoricalSummary-Syntax-Elements","","","","","","207508","12708","12708","4.505","A+","60","36","1.667","9.153","Very Hard","11.169","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.788","","","","","","1.1","## Summary

This document provides an overview of the **Teradata Vantage™** Analytics Database, focusing on its analytic functions and their applications within data processing and analysis. The various functions covered include data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analytics. Each function has specific syntax requirements and examples to aid users in applying them effectively.

### Code Examples

#### 1. **Select**
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```
*Example:* Selecting specific columns from a table based on a condition.

#### 2. **Update**
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```
*Example:* Updating specific values in a table where a condition is met.

#### 3. **Delete**
```sql
DELETE FROM table_name
WHERE condition;
```
*Example:* Deleting rows from a table that meet a specific condition.

#### 4. **Create**
```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```
*Example:* Creating a new table with defined columns and data types.

---

### Keywords and Phrases

- **TD_CategoricalSummary**: Syntax Elements
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**: Enterprise
- **IntelliFlex**
- **VMware**
- **Product**: Analytics Database
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**: gjn1627595495337.ditamap
- **dita:ditavalPath**: ayr1485454803741.ditaval
- **dita:id**: jmh1512506877710
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Input Table Schemas**
- **Maximum Number of Columns in a Database Table**
- **Workload Management Configuration**
- **Recommendations for Using Analytic Functions**
- **Data Cleaning Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Examples for each function**: TD_CategoricalSummary, TD_ColumnSummary, etc.
- **Usage Notes**: How to Read Syntax, Avoid Deadlocks.

This structured overview should serve as a comprehensive guide for users looking to leverage the analytic capabilities of Teradata Vantage™ effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary/TD_CategoricalSummary-Syntax-Elements","2024-07-27 11:29:52"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary","text/html;charset=UTF-8","200","","Indexable","","TD_ColumnSummary Function | TD_ColumnSummary | Teradata Vantage - TD_ColumnSummary - Analytics Database","103","1043","This Analytics Database (SQL Engine) data exploration function displays a summary of each specified input table column.","119","749","","0","TD_ColumnSummary Function | TD_ColumnSummary | Teradata Vantage - TD_ColumnSummary - Analytics Database","103","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary","","","","","","212881","14030","14030","4.974","A+","596","116","5.138","65.352","Normal","12.352","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","0.442","","","","","","1.1","### Summary of TD_ColumnSummary Function

The `TD_ColumnSummary` function in Teradata Vantage is designed to provide a comprehensive summary of the contents of a specified column in a table. This function is particularly useful for data cleaning, exploration, validation, and reporting. By summarizing the data in terms of positive, negative, null, not null, blank, and zero values, users can quickly identify trends, anomalies, and missing data in their datasets.

### Code Example Section

Here are examples of SQL commands for common operations such as Select, Update, Delete, and Create, using the `TD_ColumnSummary` function.

#### 1. **Select**
This example retrieves a summary for a specified column in a table.

```sql
SELECT * 
FROM TD_ColumnSummary('your_table_name', 'your_column_name');
```

#### 2. **Update**
Although `TD_ColumnSummary` is primarily for summarizing data, you might want to update records based on the summary findings. Here’s how you might update records in a table:

```sql
UPDATE your_table_name
SET your_column_name = 'new_value'
WHERE your_column_name IS NULL;
```

#### 3. **Delete**
To delete records based on conditions derived from a summary, you can use:

```sql
DELETE FROM your_table_name
WHERE your_column_name < 0;  -- For example, deleting negative values
```

#### 4. **Create**
You can create a new table based on the summary of an existing table. You might want to store the summary results in a new table for further analysis:

```sql
CREATE TABLE column_summary AS (
    SELECT * 
    FROM TD_ColumnSummary('your_table_name', 'your_column_name')
) WITH NO DATA;
```

### Keywords and Phrases

- **TD_ColumnSummary Function**
- **TD_ColumnSummary**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Function Names with and without TD Prefix**
- **Data Cleaning and Validation**
- **Data Summary for Exploratory Analysis** 

This overview and code examples will aid in understanding the practical applications of the `TD_ColumnSummary` function and its role in data analysis within Teradata Vantage.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary","2024-07-27 12:23:13"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/Example-How-to-Use-TD_ColumnSummary","text/html;charset=UTF-8","200","","Indexable","","TD_ColumnSummary Example | ColumnSummary - Example: How to Use TD_ColumnSummary - Analytics Database","100","1027","See an example of the Analytics Database (SQL Engine) data exploration function TD_ColumnSummary.","97","640","","0","TD_ColumnSummary Example | ColumnSummary - Example: How to Use TD_ColumnSummary - Analytics Database","100","Database Analytic Functions","27","TD_ColumnSummary InputTable: col_titanic_train","46","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/Example-How-to-Use-TD_ColumnSummary","","","","","","211424","14093","14093","4.996","A+","312","91","3.429","78.895","Fairly Easy","12.103","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.579","","","","","","1.1","# Summary

In this guide, we will discuss the basic SQL operations used in Teradata's Analytics Database, specifically focusing on how to **Select**, **Update**, **Delete**, and **Create** data within tables. The examples provided will utilize the `TD_ColumnSummary` function, which allows for detailed analytics on specific columns in a dataset.

## Code Examples

### 1. Select

The `SELECT` statement is used to query data from a database. Here, we use `TD_ColumnSummary` to summarize specific columns from the `col_titanic_train` table.

```sql
SELECT * FROM TD_ColumnSummary (
  ON col_titanic_train AS InputTable
  USING
  TargetColumns ('age', 'pclass', 'embarked', 'cabin')
) AS dt;
```

### 2. Update

The `UPDATE` statement modifies existing records in a table. Below is an example that updates the `age` of a specific passenger.

```sql
UPDATE col_titanic_train
SET age = 30
WHERE passenger = 631;
```

### 3. Delete

The `DELETE` statement removes records from a table. This example deletes a passenger who did not survive.

```sql
DELETE FROM col_titanic_train
WHERE survived = 0 AND passenger = 78;
```

### 4. Create

The `CREATE` statement is used to create a new table in the database. Here’s how to create a new table to store passenger information.

```sql
CREATE TABLE passenger_info (
  passenger_id INTEGER,
  name VARCHAR(100),
  gender VARCHAR(10),
  age INTEGER,
  survived INTEGER
);
```

## Keywords and Phrases

- **TD_ColumnSummary Example**
- **ColumnSummary - Example: How to Use TD_ColumnSummary**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This provides a brief overview of SQL operations and relevant keywords related to Teradata's Analytics Database. For further exploration, consider looking into specific analytic functions and their applications.","27","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/Example-How-to-Use-TD_ColumnSummary","2024-07-27 12:47:04"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/Optional-Syntax-Elements-for-TD_ColumnSummary","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_ColumnSummary - Analytics Database","66","640","All syntax elements are required.","33","200","","0","Optional Syntax Elements for TD_ColumnSummary - Analytics Database","66","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/Optional-Syntax-Elements-for-TD_ColumnSummary","","","","","","207301","12575","12575","4.458","A+","49","34","1.441","0.000","Very Hard","11.144","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.717","","","","","","1.1","### Summary

The **Analytics Database** in Teradata Vantage™ offers a comprehensive suite of analytic functions, allowing users to perform a variety of data operations, including data cleaning, exploration, feature engineering, and modeling. This document covers essential SQL commands such as **SELECT**, **UPDATE**, **DELETE**, and **CREATE**, providing a foundational understanding of how to manipulate data effectively within the Analytics Database.

### Code Example

Below are examples of the basic SQL commands commonly used in an Analytics Database environment.

#### SELECT
The `SELECT` statement is used to query data from a database.

```sql
-- Example: Select all columns from the 'customers' table
SELECT *
FROM customers;
```

#### UPDATE
The `UPDATE` statement is used to modify existing records in a table.

```sql
-- Example: Update the email address of a customer
UPDATE customers
SET email = 'newemail@example.com'
WHERE customer_id = 1;
```

#### DELETE
The `DELETE` statement removes existing records from a table.

```sql
-- Example: Delete a customer from the 'customers' table
DELETE FROM customers
WHERE customer_id = 1;
```

#### CREATE
The `CREATE` statement is used to create a new table in the database.

```sql
-- Example: Create a new table called 'orders'
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2)
);
```

### Keywords and Phrases

- **Optional Syntax Elements for TD_ColumnSummary**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Accumulated Columns Impact on Function Performance**
- **Data Type Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This summary and examples provide a clear overview of how to perform basic data operations in the Teradata Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/Optional-Syntax-Elements-for-TD_ColumnSummary","2024-07-27 11:28:46"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/Required-Syntax-Elements-for-TD_ColumnSummary","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_ColumnSummary - Analytics Database","66","644","ON clause Accept the InputTable clause. TargetColumns Specify the names of the InputTable columns to summarize.","111","721","","0","Required Syntax Elements for TD_ColumnSummary - Analytics Database","66","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/Required-Syntax-Elements-for-TD_ColumnSummary","","","","","","207570","12685","12685","4.497","A+","60","37","1.622","4.969","Very Hard","11.167","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.627","","","","","","1.1","# Teradata Analytics Database Overview

The Teradata Analytics Database offers a range of analytic functions designed to support data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This database is part of the Teradata Vantage™ platform, providing robust capabilities for managing and analyzing large datasets efficiently.

## Summary of Key Features
- Supports various analytic functions categorized into data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analytics.
- Integrates seamlessly with Teradata's enterprise solutions like VantageCloud and VantageCore.
- Offers tools to perform advanced statistical analyses, hypothesis testing, and data transformations.

## Code Example: Basic SQL Operations

### 1. Create a Table
```sql
CREATE TABLE SalesData (
    SaleID INT,
    ProductName VARCHAR(100),
    SaleAmount DECIMAL(10, 2),
    SaleDate DATE
);
```

### 2. Insert Data
```sql
INSERT INTO SalesData (SaleID, ProductName, SaleAmount, SaleDate) 
VALUES (1, 'Widget', 19.99, '2023-01-15'),
       (2, 'Gadget', 29.99, '2023-01-16');
```

### 3. Select Data
```sql
SELECT * FROM SalesData
WHERE SaleAmount > 20.00;
```

### 4. Update Data
```sql
UPDATE SalesData
SET SaleAmount = SaleAmount * 1.10
WHERE SaleDate < '2023-01-20';
```

### 5. Delete Data
```sql
DELETE FROM SalesData
WHERE SaleID = 1;
```

## Keywords and Phrases
- Required Syntax Elements for TD_ColumnSummary
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- Recommendations for Using Analytic Functions
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency

This overview provides a foundational understanding of the Teradata Analytics Database and includes essential SQL commands commonly used for data manipulation.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/Required-Syntax-Elements-for-TD_ColumnSummary","2024-07-27 11:21:18"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/TD_ColumnSummary-Input","text/html;charset=UTF-8","200","","Indexable","","TD_ColumnSummary Input - Analytics Database","43","426","InputTable Schema Column Data Type Description target_column Any Column to display summary.","91","610","","0","TD_ColumnSummary Input - Analytics Database","43","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/TD_ColumnSummary-Input","","","","","","208337","12900","12900","4.573","A+","53","36","1.472","0.000","Very Hard","11.106","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.723","","","","","","1.1","### Summary of Teradata Vantage™ Analytic Functions

Teradata Vantage™ provides a comprehensive suite of analytic functions designed for various data processing tasks, including data cleaning, exploration, feature engineering, model training, scoring, and evaluation. These functions are highly specialized for analytics applications, catering to tasks such as handling missing values, generating statistical summaries, and applying machine learning algorithms. This guide outlines the critical SQL commands used for managing data within the Teradata Analytics Database, focusing on the fundamental operations: SELECT, UPDATE, DELETE, and CREATE.

### Code Example

Here are examples of the basic SQL operations in Teradata:

#### 1. **SELECT**
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT target_column
FROM your_table
WHERE condition;
```

#### 2. **UPDATE**
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE your_table
SET target_column = new_value
WHERE condition;
```

#### 3. **DELETE**
The `DELETE` statement removes records from a table.

```sql
DELETE FROM your_table
WHERE condition;
```

#### 4. **CREATE**
The `CREATE` statement is used to create a new table or other database objects.

```sql
CREATE TABLE your_table (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Keywords and Phrases
- **TD_ColumnSummary**: Input - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**: gjn1627595495337.ditamap
- **dita:ditavalPath**: ayr1485454803741.ditaval
- **dita:id**: jmh1512506877710
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

By familiarizing yourself with these commands and concepts, you can effectively utilize Teradata Vantage™ for data analysis and machine learning tasks.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/TD_ColumnSummary-Input","2024-07-27 12:26:45"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/TD_ColumnSummary-Output","text/html;charset=UTF-8","200","","Indexable","","TD_ColumnSummary Output - Analytics Database","44","442","Output Table Schema Column Data Type Description ColumnName VARCHAR (CHARACTER SET UNICODE) Name of target column. DataType VARCHAR (CHARACTER SET LATIN) Data type of target column. NonNullCount BIGINT Count of non-NULL values in target column. NullCount BIGINT Count of NULL values in target column. BlankCount BIGINT C...","323","2196","","0","TD_ColumnSummary Output - Analytics Database","44","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/TD_ColumnSummary-Output","","","","","","211941","13258","13258","4.700","A+","176","54","3.259","32.404","Hard","11.305","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.705","","","","","","1.1","## Summary

The **Analytics Database** in Teradata Vantage™ is designed to facilitate various analytic functions, providing users with a robust set of tools for data manipulation and analysis. This document covers fundamental SQL operations such as **SELECT**, **UPDATE**, **DELETE**, and **CREATE** within the context of an analytics database. Additionally, it outlines the structure of analytic functions available for data cleaning, exploration, feature engineering, and model training among other categories.

### Code Examples

#### 1. SELECT

The `SELECT` statement is used to query data from a database. Here’s a basic example:

```sql
SELECT ColumnName, DataType, NonNullCount
FROM YourTable
WHERE NonNullCount > 0;
```

#### 2. UPDATE

The `UPDATE` statement modifies existing records in a table. Here’s how you can update a specific column:

```sql
UPDATE YourTable
SET NonNullCount = NonNullCount + 1
WHERE ColumnName = 'SomeColumn';
```

#### 3. DELETE

The `DELETE` statement removes records from a table. Here's an example of deleting records where the `NullCount` is zero:

```sql
DELETE FROM YourTable
WHERE NullCount = 0;
```

#### 4. CREATE

The `CREATE` statement is used to create a new table within the database. Here’s an example of creating a new table:

```sql
CREATE TABLE NewTable (
    ColumnName VARCHAR(255),
    DataType VARCHAR(100),
    NonNullCount BIGINT,
    NullCount BIGINT
);
```

### Keywords and Phrases

- TD_ColumnSummary Output
- Analytics Database
- Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Non-Deterministic Behavior
- Workload Management Configuration
- Avoid Deadlocks Using Volatile Tables
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Data Exploration Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions

This structured overview provides a foundation for utilizing the Teradata Analytics Database effectively, with emphasis on key SQL operations and analytic functionalities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/TD_ColumnSummary-Output","2024-07-27 12:35:07"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/TD_ColumnSummary-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_ColumnSummary Syntax | ColumnSummary - TD_ColumnSummary Syntax - Analytics Database","86","881","See the syntax of the Analytics Database (SQL Engine) function TD_ColumnSummary and read descriptions of its required and optional syntax elements.","147","939","","0","TD_ColumnSummary Syntax | ColumnSummary - TD_ColumnSummary Syntax - Analytics Database","86","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/TD_ColumnSummary-Syntax","","","","","","208110","12888","12888","4.569","A+","92","44","2.091","36.432","Hard","11.230","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.883","","","","","","1.1","# Teradata Vantage™: TD_ColumnSummary Syntax Overview

## Summary
The `TD_ColumnSummary` function in Teradata Vantage provides a way to summarize specific columns of a table or view. This function can be particularly useful in analytics and data exploration tasks, allowing users to quickly gather insights about the data contained in specified columns.

### Syntax
```sql
TD_ColumnSummary (
  ON { table | view | (query) } AS InputTable
  USING
  TargetColumns ({ 'target_column' | target_column_range }[,...])
)
```

### Usage
- You can use `TD_ColumnSummary` in the following contexts:
  - **SELECT Statement**: To retrieve summary statistics for specified columns.
  - **CREATE TABLE Statement**: To create a new table based on column summaries.
  - **CREATE VIEW Statement**: To define a view that includes summaries of specified columns.

## Code Examples

### 1. Select Example
Retrieve summary statistics for specific columns in a table:
```sql
SELECT 
  TD_ColumnSummary(
    ON my_table AS InputTable 
    USING 
    TargetColumns ('column1', 'column2')
  ) AS SummaryStats
FROM DUAL;
```

### 2. Update Example
Assuming you want to update a table with summary statistics:
```sql
UPDATE my_table
SET summary_column = (
  SELECT 
    TD_ColumnSummary(ON my_table USING TargetColumns ('column1')) 
  FROM DUAL
)
WHERE condition_column = 'some_condition';
```

### 3. Delete Example
You can delete entries based on the summary statistics:
```sql
DELETE FROM my_table
WHERE summary_column < (
  SELECT 
    TD_ColumnSummary(ON my_table USING TargetColumns ('column1')) 
  FROM DUAL
);
```

### 4. Create Example
Create a new table based on the column summary of an existing table:
```sql
CREATE TABLE summary_table AS (
  SELECT 
    TD_ColumnSummary(ON my_table USING TargetColumns ('column1', 'column2')) 
  FROM DUAL
) WITH NO DATA;
```

## Keywords and Phrases
- **TD_ColumnSummary Syntax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This overview provides a basic understanding of the `TD_ColumnSummary` function in Teradata Vantage, along with practical examples demonstrating its use in SQL statements.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/TD_ColumnSummary-Syntax","2024-07-27 11:50:48"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues","text/html;charset=UTF-8","200","","Indexable","","TD_GetRowsWithMissingValues | GetRowsWithMissingValues - TD_GetRowsWithMissingValues - Analytics Database","105","1039","This Analytics Database (SQL Engine) data exploration function displays the rows that have NULL values in the specified input table columns.","140","871","","0","TD_GetRowsWithMissingValues | GetRowsWithMissingValues - TD_GetRowsWithMissingValues - Analytics Database","105","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues","","","","","","211932","14021","14021","4.971","A+","413","89","4.640","37.431","Hard","12.071","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.740","","","","","","1.1","### Summary
The `TD_GetRowsWithMissingValues` function is utilized in data analytics to retrieve all rows from a dataset that contain one or more missing or null values. This function plays a crucial role in data cleaning and preprocessing, allowing analysts to identify and manage missing values effectively. Handling missing data is vital for ensuring the accuracy and reliability of analytics outcomes, which can significantly impact decision-making processes.

### Code Examples

Below are SQL code examples demonstrating basic database operations: Select, Update, Delete, and Create.

#### 1. Select
```sql
SELECT *
FROM Customers
WHERE Country = 'USA';
```

#### 2. Update
```sql
UPDATE Customers
SET ContactName = 'Juan Perez'
WHERE CustomerID = 1;
```

#### 3. Delete
```sql
DELETE FROM Customers
WHERE CustomerID = 1;
```

#### 4. Create
```sql
CREATE TABLE Customers (
    CustomerID int,
    ContactName varchar(255),
    Country varchar(100)
);
```

### Keywords and Phrases
- TD_GetRowsWithMissingValues
- GetRowsWithMissingValues
- TD_GetRowsWithMissingValues - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- gjn1627595495337.ditamap
- dita:ditavalPath
- ayr1485454803741.ditaval
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Pack
- Pack Syntax
- Required Syntax Elements for Pack
- Optional Syntax Elements for Pack
- Pack Input
- Pack Output
- Examples: How to Use Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_OutlierFilterTransform
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- Unpack
- Data Exploration Functions
- MovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- Feature Engineering Transform Functions
- Antiselect
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer
- TD_FunctionFit
- TD_FunctionTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_PolynomialFeaturesFit
- TD_PolynomialFeaturesTransform
- TD_RandomProjectionFit
- TD_RowNormalizeFit
- TD_RowNormalizeTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_Unpivoting
- Feature Engineering Utility Functions
- TD_FillRowID
- TD_NumApply
- TD_RoundColumns
- TD_StrApply
- Model Training Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_KNN
- TD_OneClassSVM
- TD_SVM
- TD_XGBoost
- Model Scoring Functions
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_OneClassSVMPredict
- TD_SVMPredict
- TD_XGBoostPredict
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- Text Analytic Functions
- NGramSplitter
- TD_NaiveBayesTextClassifierPredict
- TD_SentimentExtractor
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Testing Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Path and Pattern Analysis Functions
- Attribution
- nPath
- Sessionize","25","2","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues","2024-07-27 12:44:18"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/Example-Using-TD_GetRowsWithMissingValues-to-Find-NULL-Values","text/html;charset=UTF-8","200","","Indexable","","TD_GetRowsWithMissingValues Function Example | Teradata Vantage - Example: Using TD_GetRowsWithMissingValues to Find NULL Values - Analytics Database","149","1441","See an example of the Analytics Database (SQL Engine) data exploration function TD_GetRowsWithMissingValues.","108","707","","0","TD_GetRowsWithMissingValues Function Example | Teradata Vantage - Example: Using TD_GetRowsWithMissingValues to Find NULL Values - Analytics Database","149","Database Analytic Functions","27","TD_GetRowsWithMissingValues InputTable: input_table","51","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/Example-Using-TD_GetRowsWithMissingValues-to-Find-NULL-Values","","","","","","210816","13940","13940","4.942","A+","284","76","3.737","90.143","Very Easy","11.915","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.472","","","","","","1.1","### Summary
The `TD_GetRowsWithMissingValues` function in Teradata Vantage is a powerful tool for identifying rows in a table that contain NULL values in specified target columns. This function is particularly useful in data cleaning and preparation for analysis, allowing users to quickly assess data quality and make informed decisions on how to handle missing data.

### Code Example

#### Select
To retrieve rows with missing values in specific columns, you can use the following SQL command:
```sql
SELECT * FROM TD_GetRowsWithMissingValues (
  ON input_table AS InputTable
  USING
  TargetColumns ('[name:cabin]')
) AS dt;
```

#### Update
To update rows where specific columns have NULL values (for example, replacing NULLs with a default value), you might use:
```sql
UPDATE input_table
SET cabin = 'Unknown'
WHERE cabin IS NULL;
```

#### Delete
To delete rows with missing values in specified columns, the following command can be executed:
```sql
DELETE FROM input_table
WHERE cabin IS NULL OR name IS NULL;
```

#### Create
To create a new table that includes only rows with missing values, you would use:
```sql
CREATE TABLE missing_values AS (
  SELECT * FROM TD_GetRowsWithMissingValues (
    ON input_table AS InputTable
    USING
    TargetColumns ('[name:cabin]')
  )
) WITH NO DATA;
```

### Keywords and Phrases
- **TD_GetRowsWithMissingValues Function Example**
- **Teradata Vantage**
- **Using TD_GetRowsWithMissingValues to Find NULL Values**
- **Analytics Database**
- **Data Cleaning Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware Product**
- **Release Number 17.20**
- **Published June 2022**
- **Last Update April 2024**
- **Data Exploration Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Feature Engineering Transform Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Example: How to Use TD_GetRowsWithMissingValues**
- **Example Output**
- **NULL Values** 
- **Data Quality Assessment**
- **SQL Examples for Select, Update, Delete, Create** 

This structured framework provides a solid foundation for understanding and utilizing the `TD_GetRowsWithMissingValues` function in Teradata Vantage effectively.","26","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/Example-Using-TD_GetRowsWithMissingValues-to-Find-NULL-Values","2024-07-27 12:39:51"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/Optional-Syntax-Elements-for-TD_GetRowsWithMissingValues","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_GetRowsWithMissingValues - Analytics Database","77","736","TargetColumns Specify the target column names to check for NULL values. Default: If omitted, the function considers all columns of the InputTable. Accumulate Specify the input table column names to copy to the output table.","223","1389","","0","Optional Syntax Elements for TD_GetRowsWithMissingValues - Analytics Database","77","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/Optional-Syntax-Elements-for-TD_GetRowsWithMissingValues","","","","","","207870","12818","12818","4.544","A+","79","39","2.026","17.374","Very Hard","11.210","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.576","","","","","","1.1","### Summary

In Teradata Vantage, managing data within an Analytics Database involves various operations such as selecting, updating, deleting, and creating records. These operations are fundamental for manipulating and analyzing data efficiently. This document outlines examples of these basic SQL operations, highlighting their syntax and application. 

### Code Examples

#### 1. **Select**
The `SELECT` statement retrieves data from one or more tables.

```sql
-- Select all columns from the Employees table
SELECT * FROM Employees;

-- Select specific columns from the Employees table
SELECT EmployeeID, FirstName, LastName FROM Employees WHERE Department = 'Sales';
```

#### 2. **Update**
The `UPDATE` statement modifies existing records in a table.

```sql
-- Update the salary of a specific employee
UPDATE Employees
SET Salary = Salary * 1.10
WHERE EmployeeID = 101;

-- Update multiple columns for a specific employee
UPDATE Employees
SET FirstName = 'John', LastName = 'Doe'
WHERE EmployeeID = 102;
```

#### 3. **Delete**
The `DELETE` statement removes records from a table.

```sql
-- Delete an employee from the Employees table
DELETE FROM Employees WHERE EmployeeID = 103;

-- Delete all employees from the Sales department
DELETE FROM Employees WHERE Department = 'Sales';
```

#### 4. **Create**
The `CREATE` statement creates a new table or other database objects.

```sql
-- Create a new table for storing employee information
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Department VARCHAR(50),
    Salary DECIMAL(10, 2)
);

-- Create a new view to summarize employee salaries by department
CREATE VIEW DepartmentSalarySummary AS
SELECT Department, SUM(Salary) AS TotalSalary
FROM Employees
GROUP BY Department;
```

### Keywords and Phrases

- Optional Syntax Elements for TD_GetRowsWithMissingValues
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Language English (United States)
- Last Update April 2024
- Product Category Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Accumulated Columns Impact on Function Performance
- Displaying Online Help for Analytics Database Analytic Functions
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Recommendations for Using Analytic Functions
- TD_GetRowsWithMissingValues
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin

This guide provides a foundational understanding of basic SQL operations along with relevant keywords and phrases for further exploration in the context of Teradata Vantage and its Analytics Database capabilities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/Optional-Syntax-Elements-for-TD_GetRowsWithMissingValues","2024-07-27 12:40:54"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/Required-Syntax-Elements-for-TD_GetRowsWithMissingValues","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_GetRowsWithMissingValues - Analytics Database","77","740","ON clause Accept the InputTable clause.","39","249","","0","Required Syntax Elements for TD_GetRowsWithMissingValues - Analytics Database","77","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/Required-Syntax-Elements-for-TD_GetRowsWithMissingValues","","","","","","207417","12625","12625","4.476","A+","50","35","1.429","0.000","Very Hard","11.146","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.631","","","","","","1.1","### Summary

The Teradata Analytics Database provides robust analytic functions to support data manipulation and exploration. Key functions include those for data cleaning, data exploration, feature engineering, model training, scoring, and evaluation. This guide specifically highlights essential SQL commands for managing data in the context of using the analytics database, such as **Select**, **Update**, **Delete**, and **Create** statements. 

### Code Examples

#### 1. Create a Table
To create a new table in the database:

```sql
CREATE TABLE employee (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    hire_date DATE,
    salary DECIMAL(10, 2)
);
```

#### 2. Select Data
To select data from the table:

```sql
SELECT first_name, last_name, salary 
FROM employee 
WHERE hire_date > '2020-01-01';
```

#### 3. Update Data
To update existing records in the table:

```sql
UPDATE employee 
SET salary = salary * 1.10 
WHERE hire_date < '2015-01-01';
```

#### 4. Delete Data
To delete specific records from the table:

```sql
DELETE FROM employee 
WHERE employee_id = 3;
```

### Keywords and Phrases

- **Required Syntax Elements for TD_GetRowsWithMissingValues** 
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Function Syntax Descriptions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Workload Management Configuration**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This guide serves as an introduction to some fundamental operations within the Teradata Analytics Database, enabling users to efficiently manage and analyze their data.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/Required-Syntax-Elements-for-TD_GetRowsWithMissingValues","2024-07-27 11:27:04"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/TD_GetRowsWithMissingValues-Input","text/html;charset=UTF-8","200","","Indexable","","TD_GetRowsWithMissingValues Input - Analytics Database","54","522","InputTable Schema Column Data Type Description target_column Any Columns for which NULL values are checked. accumulate_column Any The input table column names to copy to the output table.","187","1226","","0","TD_GetRowsWithMissingValues Input - Analytics Database","54","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/TD_GetRowsWithMissingValues-Input","","","","","","208859","13011","13011","4.612","A+","69","38","1.816","6.366","Very Hard","11.129","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.574","","","","","","1.1","Timeout expired while waiting for server response.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/TD_GetRowsWithMissingValues-Input","2024-07-27 11:35:56"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/TD_GetRowsWithMissingValues-Output","text/html;charset=UTF-8","200","","Indexable","","TD_GetRowsWithMissingValues Output - Analytics Database","55","538","Output Table Schema Column Data Type Description target_column Any Columns for which NULL values are checked. accumulate_column Any The input table column names to copy to the output table.","189","1240","","0","TD_GetRowsWithMissingValues Output - Analytics Database","55","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/TD_GetRowsWithMissingValues-Output","","","","","","208938","13008","13008","4.611","A+","70","38","1.842","9.177","Very Hard","11.126","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.691","","","","","","1.1","### Summary

The TD_GetRowsWithMissingValues function is an essential tool in Teradata's Analytics Database for identifying rows with NULL values in specified columns. This function is part of a broader set of analytic functions designed to facilitate data cleaning, exploration, and transformation. Understanding how to use this function effectively can lead to improved data quality and more accurate analytics outcomes.

### Code Examples

Here are examples illustrating the basic SQL operations (Select, Update, Delete, and Create) that are commonly used in a database context, specifically tailored for Teradata.

#### 1. Select
```sql
-- Selecting rows with missing values from a specific table
SELECT *
FROM my_table
WHERE target_column IS NULL;
```

#### 2. Update
```sql
-- Updating rows to replace NULL values with a default value
UPDATE my_table
SET target_column = 'default_value'
WHERE target_column IS NULL;
```

#### 3. Delete
```sql
-- Deleting rows with NULL values in a specific column
DELETE FROM my_table
WHERE target_column IS NULL;
```

#### 4. Create
```sql
-- Creating a new table with a defined schema
CREATE TABLE new_table (
    id INT,
    target_column VARCHAR(255),
    accumulate_column VARCHAR(255)
);
```

### Keywords and Phrases

- TD_GetRowsWithMissingValues Output
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Input Table Rows Redistribution
- Limitations When Using PARTITION BY
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Recommendations for Using Analytic Functions
- Examples: How to Use Pack
- TD_GetRowsWithoutMissingValues
- TD_Histogram
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin

This structured approach to understanding the TD_GetRowsWithMissingValues function, along with the SQL examples provided, should help clarify its use and application within the Teradata environment.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/TD_GetRowsWithMissingValues-Output","2024-07-27 11:39:41"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/TD_GetRowsWithMissingValues-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_GetRowsWithMissingValues Function Syntax | Teradata Vantage - TD_GetRowsWithMissingValues Syntax - Analytics Database","120","1161","See the syntax of the Analytics Database (SQL Engine) function TD_GetRowsWithMissingValues and read descriptions of its required and optional syntax elements.","158","1006","","0","TD_GetRowsWithMissingValues Function Syntax | Teradata Vantage - TD_GetRowsWithMissingValues Syntax - Analytics Database","120","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/TD_GetRowsWithMissingValues-Syntax","","","","","","208491","12964","12964","4.596","A+","112","48","2.333","35.267","Hard","11.295","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.892","","","","","","1.1","## Summary

The `TD_GetRowsWithMissingValues` function in Teradata Vantage is a powerful analytic tool used to identify rows in a dataset that contain missing values. This function is particularly useful in data cleaning and preprocessing stages of data analysis. The syntax allows for flexibility in specifying target columns and accumulation columns, making it adaptable for various analytical needs. By using this function, data scientists and analysts can efficiently pinpoint incomplete records, facilitating better data quality management before further analysis.

## Code Examples

### 1. SELECT Example
To select rows from a table that have missing values in specified columns:

```sql
SELECT *
FROM TD_GetRowsWithMissingValues (
    ON my_table AS InputTable
    USING
        TargetColumns ('column1', 'column2')
);
```

### 2. UPDATE Example
To update rows in a table based on the presence of missing values in specified columns, you would generally first select the rows with missing values and then use an update statement. However, directly updating with this function is not supported. Instead, you can use the identified rows to inform your update logic:

```sql
UPDATE my_table
SET column1 = 'default_value'
WHERE id IN (
    SELECT id
    FROM TD_GetRowsWithMissingValues (
        ON my_table AS InputTable
        USING
            TargetColumns ('column1')
    )
);
```

### 3. DELETE Example
To delete rows with missing values in specific columns, you can use the following:

```sql
DELETE FROM my_table
WHERE id IN (
    SELECT id
    FROM TD_GetRowsWithMissingValues (
        ON my_table AS InputTable
        USING
            TargetColumns ('column1', 'column2')
    )
);
```

### 4. CREATE Example
To create a new table that contains only the rows with missing values, you can use the following syntax:

```sql
CREATE TABLE missing_values_table AS (
    SELECT *
    FROM TD_GetRowsWithMissingValues (
        ON my_table AS InputTable
        USING
            TargetColumns ('column1', 'column2')
    )
) WITH NO DATA;
```

## Keywords and Phrases
- TD_GetRowsWithMissingValues Function Syntax
- Teradata Vantage
- TD_GetRowsWithMissingValues Syntax
- Analytics Database
- Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Function Syntax Descriptions
- Input Table Rows Redistribution
- PARTITION BY
- Spool Space Exhaustion
- Data Quality Management
- Missing Values Identification
- Usage Notes
- Example: Using TD_GetRowsWithMissingValues to Find NULL Values","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/TD_GetRowsWithMissingValues-Syntax","2024-07-27 11:37:41"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram","text/html;charset=UTF-8","200","","Indexable","","TD_Histogram Function | Histogram | Teradata Vantage - TD_Histogram - Analytics Database","88","826","This Analytics Database (SQL Engine) data exploration function calculates the frequency distribution of a data set using your choice of four methods.","149","920","","0","TD_Histogram Function | Histogram | Teradata Vantage - TD_Histogram - Analytics Database","88","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram","","","","","","212765","14344","14344","5.085","A+","616","121","5.091","55.128","Fairly Hard","12.503","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","0.476","","","","","","1.1","### Summary
The `TD_Histogram` function in Teradata Vantage is designed to calculate the frequency distribution of a dataset. It can utilize various methods for creating histograms, such as Sturges, Scott, variable-width, and equal-width bins. Histograms are essential for visualizing the distribution of numerical data and can highlight patterns, central tendencies, and outliers effectively.

### Code Example

#### 1. Create Table
```sql
CREATE TABLE sales_data (
    sale_id INT,
    sale_amount DECIMAL(10, 2)
);
```

#### 2. Insert Sample Data
```sql
INSERT INTO sales_data (sale_id, sale_amount) VALUES
(1, 100.00),
(2, 150.00),
(3, 200.00),
(4, 250.00),
(5, 300.00),
(6, 350.00),
(7, 400.00),
(8, 450.00),
(9, 500.00),
(10, 550.00);
```

#### 3. Select Data
```sql
SELECT * FROM sales_data;
```

#### 4. Create Histogram
```sql
SELECT 
    TD_Histogram(sale_amount) AS histogram
FROM sales_data;
```

#### 5. Update Data
```sql
UPDATE sales_data
SET sale_amount = sale_amount * 1.1
WHERE sale_id = 1;
```

#### 6. Delete Data
```sql
DELETE FROM sales_data
WHERE sale_id = 10;
```

### Keywords and Phrases
- **TD_Histogram Function**
- **Histogram**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Histogram Methods (Sturges, Scott, Variable-width, Equal-width)**
- **Continuous Histograms**
- **Discrete Histograms**
- **Frequency Polygon**
- **Cumulative Histogram**
- **2D Histogram**
- **Kernel Density Estimation Histogram**
- **Advantages of Histograms**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram","2024-07-27 12:39:33"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/Examples-How-to-Use-TD_Histogram","text/html;charset=UTF-8","200","","Indexable","","TD_Histogram Example | Histogram | Teradata Vantage - Examples: How to Use TD_Histogram - Analytics Database","108","1030","See an example of the Analytics Database (SQL Engine) data exploration function TD_Histogram.","93","598","","0","TD_Histogram Example | Histogram | Teradata Vantage - Examples: How to Use TD_Histogram - Analytics Database","108","Database Analytic Functions","27","Input Table cars_hist","21","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/Examples-How-to-Use-TD_Histogram","","","","","","262706","16555","16555","5.869","A+","981","467","2.101","100.000","Very Easy","11.201","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.457","","","","","","1.1","## Summary

The Teradata Vantage™ platform provides powerful analytic functions, including TD_Histogram, which allows users to generate histograms for specified columns in a dataset. This is useful for data exploration and understanding distributions of numerical variables. The TD_Histogram function supports various methods for binning, including Sturges, Scott, Equal-Width, and Variable-Width methods. 

Here, we will provide examples of SQL commands for common database operations—SELECT, UPDATE, DELETE, and CREATE—alongside specific examples of using the TD_Histogram function.

## Code Example

### 1. SELECT

```sql
SELECT * FROM cars_hist WHERE mpg > 20;
```

### 2. UPDATE

```sql
UPDATE cars_hist 
SET hp = hp * 1.1 
WHERE model = 'Mazda RX4';
```

### 3. DELETE

```sql
DELETE FROM cars_hist 
WHERE model = 'Toyota Corona';
```

### 4. CREATE

```sql
CREATE TABLE cars_hist (
    sn INT,
    model VARCHAR(50),
    mpg FLOAT,
    cyl INT,
    disp FLOAT,
    hp FLOAT,
    drat FLOAT,
    wt FLOAT,
    qsec FLOAT,
    vs CHAR(1),
    am VARCHAR(10),
    gear INT,
    carb INT
);
```

### 5. TD_Histogram Example: Using Sturges Method

```sql
SELECT * FROM TD_Histogram(
    ON cars_hist AS InputTable
    USING
    TargetColumn('hp', 'disp')
    MethodType('STURGES')
) AS dt ORDER BY 1, 2, 3, 4, 5, 6;
```

### 6. TD_Histogram Example: Using Scott Method

```sql
SELECT * FROM TD_Histogram(
    ON cars_hist AS InputTable
    USING
    TargetColumn('hp', 'disp')
    MethodType('SCOTT')
) AS dt ORDER BY 1, 2, 3, 4, 5, 6;
```

### 7. TD_Histogram Example: Using Equal-Width Method

```sql
SELECT * FROM TD_Histogram(
    ON cars_hist AS InputTable
    USING
    TargetColumn('hp', 'disp')
    MethodType('Equal-Width')
    Nbins(3, 4)
) AS dt ORDER BY 1, 2, 3, 4, 5, 6;
```

### 8. TD_Histogram Example: Using Variable-Width Method

```sql
SELECT * FROM TD_Histogram(
    ON cars_hist AS InputTable
    USING
    TargetColumn('hp', 'disp')
    MethodType('VARIABLE-WIDTH')
    Nbins(3, 4)
) AS dt ORDER BY 1, 2, 3, 4, 5, 6;
```

## Keywords and Phrases

- TD_Histogram Example
- Histogram
- Teradata Vantage - Examples: How to Use TD_Histogram
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table
- Output
- SQL Script
- Create Table
- Select, Update, Delete, Create Examples
- Histogram Methods: Sturges, Scott, Equal-Width, Variable-Width","29","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/Examples-How-to-Use-TD_Histogram","2024-07-27 11:46:20"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/Optional-Syntax-Elements-for-TD_Histogram","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_Histogram - Analytics Database","62","579","ON clause for Dimension Accept the MinMax table clause. NBins [Required with methods Equal-Width and Variable-Width] Specify the integer value which will specify the number of ranges or bins. If only one value is specified, it is applied to all the target columns. Otherwise, the number of NBins values must be equal to ...","323","1965","","0","Optional Syntax Elements for TD_Histogram - Analytics Database","62","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/Optional-Syntax-Elements-for-TD_Histogram","","","","","","209197","13280","13280","4.708","A+","211","58","3.638","60.806","Normal","11.503","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.555","","","","","","1.1","# Overview of Teradata Vantage™ Analytics Database Functions

Teradata Vantage™ provides a powerful Analytics Database that supports a variety of functions for data manipulation and analysis. This document outlines the essential SQL commands for interacting with data, including `SELECT`, `INSERT`, `UPDATE`, and `DELETE` operations. The Analytics Database also offers rich functions for data cleaning, exploration, feature engineering, model training, and evaluation.

## Summary of Code Examples

### 1. **Select**
The `SELECT` statement is used to query data from one or more tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

### 2. **Insert**
The `INSERT` statement is used to add new rows to a table.

```sql
INSERT INTO table_name (column1, column2)
VALUES (value1, value2);
```

### 3. **Update**
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

### 4. **Delete**
The `DELETE` statement is used to remove rows from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

## Keywords and Phrases

- **Optional Syntax Elements for TD_Histogram**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **AMP Configuration Impact**
- **Limitations When Using PARTITION BY**
- **Accumulated Columns Impact**
- **Non-Deterministic Behavior**
- **Recommendations for Using Analytic Functions**
- **Displaying Online Help for Analytics Functions**

This structured overview provides a clear reference for using SQL commands in Teradata Vantage™ and understanding the analytics functions available within the platform.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/Optional-Syntax-Elements-for-TD_Histogram","2024-07-27 12:08:53"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/Required-Syntax-Elements-for-TD_Histogram","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_Histogram - Analytics Database","62","583","ON clause for InputTable Accept the InputTable clause. MethodType Specify the method for calculating the frequency distribution of the dataset: Available Methods Description Sturges Sturges algorithm performs best if data is normally distributed and n is at least 30. Algorithm for calculating bin width: w = r/(1 + log2...","323","1965","","0","Required Syntax Elements for TD_Histogram - Analytics Database","62","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/Required-Syntax-Elements-for-TD_Histogram","","","","","","214544","14302","14302","5.070","A+","531","114","4.658","71.463","Fairly Easy","12.080","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.715","","","","","","1.1","### Summary

The TD_Histogram function in Teradata Vantage is a powerful analytical tool designed to calculate the frequency distribution of datasets. This function can handle various binning methods, including Sturges, Scott, Variable-Width, and Equal-Width. Users can specify target columns, the number of bins, inclusion criteria for bin boundaries, and grouping columns for binning. The flexibility of the TD_Histogram function allows for extensive data exploration and visual representation of distributions, making it essential for data analysts and scientists.

### Code Example Section

#### 1. Create Table
```sql
CREATE TABLE SalesData (
    SalesID INT,
    Product VARCHAR(100),
    Amount DECIMAL(10, 2),
    SaleDate DATE
);
```

#### 2. Insert Data
```sql
INSERT INTO SalesData (SalesID, Product, Amount, SaleDate) VALUES
(1, 'Widget A', 100.00, '2023-01-01'),
(2, 'Widget B', 150.00, '2023-01-02'),
(3, 'Widget A', 200.00, '2023-01-03'),
(4, 'Widget C', 250.00, '2023-01-04');
```

#### 3. Select Data
```sql
SELECT * FROM SalesData;
```

#### 4. Update Data
```sql
UPDATE SalesData
SET Amount = Amount * 1.10
WHERE Product = 'Widget A';
```

#### 5. Delete Data
```sql
DELETE FROM SalesData
WHERE SalesID = 2;
```

#### 6. Create Histogram
```sql
SELECT * FROM TD_Histogram (
    ON SalesData AS InputTable
    USING 
        TargetColumn('Amount')
        NBins(5)
        MethodType('Equal-Width')
        Inclusion('left')
);
```

### Keywords and Phrases

- **Required Syntax Elements for TD_Histogram**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Accumulated Columns Impact on Function Performance**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **TD_Histogram Syntax**
- **TargetColumn**
- **NBins**
- **GroupByColumns**
- **Inclusion**
- **Equal-Width Method**
- **Variable-Width Method**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/Required-Syntax-Elements-for-TD_Histogram","2024-07-27 11:28:31"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/TD_Histogram-Input","text/html;charset=UTF-8","200","","Indexable","","TD_Histogram Input - Analytics Database","39","365","InputTable Schema Column Data Type Description target_column BYTEINT, SMALLINT, INTEGER, BIGINT, DECIMAL/NUMERIC, FLOAT, REAL, DOUBLE PRECISION Indicates the columns to use with the function. group_column BYTEINT, SMALLINT, INTEGER, BIGINT, CHAR, VARCHAR Character types: Character set can be LATIN or UNICODE. Determine...","323","2182","","0","TD_Histogram Input - Analytics Database","39","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/TD_Histogram-Input","","","","","","214256","13705","13705","4.858","A+","271","76","3.566","32.455","Hard","11.530","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.668","","","","","","1.1","## Summary

This document serves as a comprehensive guide to the functionality of the Teradata Vantage™ Analytics Database, specifically focusing on its analytic functions. It provides an overview of the various categories of functions such as data cleaning, exploration, feature engineering, model training, scoring, and evaluation, along with example use cases. The document also includes essential syntax elements for each function, input and output descriptions, and practical examples to illustrate their application.

## Code Example

Here's a brief overview of SQL commands commonly used in database operations, exemplifying how to create, read, update, and delete data:

### Create
```sql
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    HireDate DATE
);
```

### Select
```sql
SELECT FirstName, LastName 
FROM Employees 
WHERE HireDate > '2022-01-01';
```

### Update
```sql
UPDATE Employees 
SET LastName = 'Smith' 
WHERE EmployeeID = 1;
```

### Delete
```sql
DELETE FROM Employees 
WHERE EmployeeID = 1;
```

## Keywords and Phrases
- TD_Histogram Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/TD_Histogram-Input","2024-07-27 12:43:20"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/TD_Histogram-Output","text/html;charset=UTF-8","200","","Indexable","","TD_Histogram Output - Analytics Database","40","381","Output Table Schema Column Data Type Description group_column_1...n BYTEINT, SMALLINT, INTEGER, BIGINT, CHAR, VARCHAR Character types: Character set can be LATIN or UNICODE. Determines how InputTable data is grouped. The column appears once for each specified group_column. ColumnName VARCHAR (UNICODE) Target column nam...","323","2178","","0","TD_Histogram Output - Analytics Database","40","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/TD_Histogram-Output","","","","","","211004","13402","13402","4.751","A+","142","48","2.958","28.675","Very Hard","11.250","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.884","","","","","","1.1","# Summary of Analytics Database Functions

The Analytics Database in Teradata Vantage™ provides a comprehensive suite of analytic functions designed to support various data processing tasks, including data cleaning, exploration, feature engineering, model training, scoring, and evaluation. These functions enable users to perform complex data transformations, statistical analyses, and machine learning tasks efficiently within the database environment.

## Code Example Section

### 1. **Create**
Creating a new table in the Analytics Database can be accomplished using the `CREATE TABLE` statement. This involves specifying the table name and its schema.

```sql
CREATE TABLE SalesData (
    SaleID BIGINT,
    ProductName VARCHAR(100),
    SaleAmount DECIMAL(10, 2),
    SaleDate DATE
);
```

### 2. **Select**
Selecting data from a table can be done using the `SELECT` statement. This example retrieves all records from the `SalesData` table.

```sql
SELECT * FROM SalesData;
```

### 3. **Update**
Updating existing records in the table can be performed using the `UPDATE` statement. This example updates the `SaleAmount` for a specific `SaleID`.

```sql
UPDATE SalesData
SET SaleAmount = 150.00
WHERE SaleID = 1;
```

### 4. **Delete**
To remove records from the table, the `DELETE` statement is used. The following example deletes a record with a specific `SaleID`.

```sql
DELETE FROM SalesData
WHERE SaleID = 1;
```

## Keywords and Phrases
- TD_Histogram Output
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Workload Management Configuration
- Recommendations for Using Analytic Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/TD_Histogram-Output","2024-07-27 11:56:48"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/TD_Histogram-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_Histogram Syntax | Histogram | Teradata Vantage - TD_Histogram Syntax - Analytics Database","93","874","See the syntax of the Analytics Database (SQL Engine) function TD_Histogram and read descriptions of its required and optional syntax elements.","143","897","","0","TD_Histogram Syntax | Histogram | Teradata Vantage - TD_Histogram Syntax - Analytics Database","93","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/TD_Histogram-Syntax","","","","","","208773","13023","13023","4.617","A+","130","52","2.500","53.319","Fairly Hard","11.333","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.577","","","","","","1.1","### Summary of TD_Histogram Function in Teradata Vantage

The `TD_Histogram` function in Teradata Vantage is an analytic function used to create histograms from specified data columns. It helps in visualizing the distribution of data points across specified bins, making it easier to analyze and interpret data. The function supports various methods for binning data, such as Sturges, Scott, Variable-Width, and Equal-Width, allowing users to customize the histogram based on their analysis needs.

### Code Example

Here's how to use the `TD_Histogram` function along with examples of basic SQL operations: `SELECT`, `UPDATE`, `DELETE`, and `CREATE`.

```sql
-- Create a sample table
CREATE TABLE SalesData (
    SaleID INT,
    SaleAmount DECIMAL(10, 2),
    SaleDate DATE
);

-- Insert sample data
INSERT INTO SalesData (SaleID, SaleAmount, SaleDate) VALUES 
(1, 150.00, '2023-01-01'),
(2, 200.00, '2023-01-02'),
(3, 300.00, '2023-01-03'),
(4, 450.00, '2023-01-04');

-- Select histogram of SaleAmount using TD_Histogram
SELECT * 
FROM TD_Histogram (
    ON SalesData AS InputTable
    USING 
    MethodType ('Sturges')
    TargetColumn ('SaleAmount')
    NBins (5)
);

-- Update a record in SalesData
UPDATE SalesData
SET SaleAmount = 250.00
WHERE SaleID = 2;

-- Delete a record from SalesData
DELETE FROM SalesData
WHERE SaleID = 1;

-- Select all records to verify changes
SELECT * FROM SalesData;
```

### Keywords and Phrases
- TD_Histogram Syntax
- Histogram
- Teradata Vantage - TD_Histogram Syntax
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Language English (United States)
- Last Update 2024-04-06
- Product Category Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- TD_Histogram Input
- TD_Histogram Output
- Group by Columns
- Inclusion Values
- Bin Methods Options: Sturges, Scott, Variable-Width, Equal-Width

This overview provides a foundational understanding of how to utilize the `TD_Histogram` function in Teradata Vantage, along with the necessary SQL operations to manage data effectively.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/TD_Histogram-Syntax","2024-07-27 12:40:38"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm","text/html;charset=UTF-8","200","","Indexable","","TD_QQNorm Function | QQNorm | Teradata Vantage - TD_QQNorm - Analytics Database","79","778","This Analytics Database (SQL Engine) data exploration function lets you see if the values in specified input table columns are normally distributed.","148","896","","0","TD_QQNorm Function | QQNorm | Teradata Vantage - TD_QQNorm - Analytics Database","79","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm","","","","","","213150","14421","14421","5.112","A+","687","123","5.585","59.181","Fairly Hard","12.713","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","0.559","","","","","","1.1","### Overview of TD_QQNorm Function

The **TD_QQNorm** function in Teradata Vantage is a statistical tool used to assess the normality of a dataset by comparing its distribution to a normal distribution. It provides insights into how closely the data aligns with the assumptions of normality, which is crucial for various statistical analyses, including linear regression.

By plotting the quantiles of the input dataset against the expected quantiles from a normal distribution, analysts can visually assess whether the data adheres to a normal distribution. A straight line on the graph indicates normality, while deviations suggest departures from it.

### Key Features

- **Sorting:** The input data is sorted in ascending order.
- **Quantile Calculation:** The function calculates both the quantiles of the dataset and the theoretical quantiles from a normal distribution.
- **Visualization:** Results can be plotted to visually inspect deviations from normality.

### Code Example

Here's a basic example of how to use the TD_QQNorm function in Teradata:

```sql
-- Step 1: Create a sample table with numerical data
CREATE TABLE sample_data (
    id INT,
    value FLOAT
);

-- Step 2: Insert some sample values into the table
INSERT INTO sample_data (id, value) VALUES
(1, 2.4),
(2, 3.1),
(3, 2.9),
(4, 4.2),
(5, 3.5);

-- Step 3: Use TD_QQNorm to assess normality of the 'value' column
SELECT 
    TD_QQNorm(value) AS qq_norm_output
FROM 
    sample_data;
```

### Summary of SQL Operations

Below are examples of basic SQL operations: Select, Update, Delete, and Create.

#### Select
```sql
SELECT * FROM sample_data;
```

#### Update
```sql
UPDATE sample_data
SET value = value * 1.1
WHERE id = 1;
```

#### Delete
```sql
DELETE FROM sample_data
WHERE id = 5;
```

#### Create
```sql
CREATE TABLE new_data (
    id INT PRIMARY KEY,
    description VARCHAR(255)
);
```

### Keywords and Phrases

- TD_QQNorm Function
- QQNorm
- Teradata Vantage - TD_QQNorm
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Quartile Normalization
- Normal Distribution
- Statistical Analysis
- QQ Plot

This structured overview provides a comprehensive understanding of the TD_QQNorm function and related SQL operations, along with relevant keywords for further exploration.","25","1","3","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm","2024-07-27 11:44:33"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/Example-How-to-Use-TD_QQNorm","text/html;charset=UTF-8","200","","Indexable","","TD_QQNorm Example | QQNorm | Teradata Vantage - Example: How to Use TD_QQNorm - Analytics Database","98","972","See an example of the Analytics Database (SQL Engine) data exploration function TD_QQNorm.","90","587","","0","TD_QQNorm Example | QQNorm | Teradata Vantage - Example: How to Use TD_QQNorm - Analytics Database","98","Database Analytic Functions","27","TD_QQNorm Input","15","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/Example-How-to-Use-TD_QQNorm","","","","","","212062","14344","14344","5.085","A+","393","124","3.169","98.998","Very Easy","12.279","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.513","","","","","","1.1","### Summary

The `TD_QQNorm` function in Teradata Vantage is designed for quantile normalization, which is a technique used to make distributions of different datasets more comparable. This function helps in statistical analysis by providing a way to standardize the distribution of data points across multiple columns. The output includes both the original values and their corresponding theoretical quantiles.

### Code Examples

#### 1. **Creating a Rank Table**

First, we create a table that includes age and fare from an input dataset along with their ranks.

```sql
CREATE TABLE RankTable AS (
  SELECT age, fare,
         CAST (ROW_NUMBER() OVER (ORDER BY age ASC NULLS LAST) AS BIGINT) AS rank_age,
         CAST (ROW_NUMBER() OVER (ORDER BY fare ASC NULLS LAST) AS BIGINT) AS rank_fare
  FROM input_table AS dt
) WITH DATA;
```

#### 2. **Using TD_QQNorm with Column Numbers**

You can call the `TD_QQNorm` function using column numbers to specify the target and rank columns.

```sql
SELECT * FROM TD_QQNorm (
  ON RankTable AS InputTable
  USING
  TargetColumns ('[0:1]')
  RankColumns ('[2:3]')
) AS dt;
```

#### 3. **Using TD_QQNorm with Column Names**

Alternatively, you can specify the target and rank columns by their names.

```sql
SELECT * FROM TD_QQNorm (
  ON RankTable AS InputTable
  USING
  TargetColumns ('age', 'fare')
  RankColumns ('rank_age', 'rank_fare')
) AS dt;
```

#### 4. **Using TD_QQNorm with PARTITION BY ANY Clause**

You can also partition the data while performing quantile normalization.

```sql
SELECT * FROM TD_QQNorm (
  ON RankTable AS InputTable
  PARTITION BY ANY
  USING
  TargetColumns ('age', 'fare')
  RankColumns ('rank_age', 'rank_fare')
) AS dt;
```

### Example Output

The output after running the `TD_QQNorm` function will look similar to this:

| age | age_theoretical_quantiles | fare  | fare_theoretical_quantiles |
|-----|----------------------------|-------|-----------------------------|
| 16  | -1.17986882170049         | 86.5  | 1.17986882170049           |
| 33  | -0.496788749686441        | 5     | -1.17986882170049          |
| 58  | -0.000000101006675468085  | 29.7  | -0.496788749686441         |
| 71  | 0.496788749686441         | 34.6542 | 0.496788749686441         |
| 80  | 1.17986882170049          | 30    | -0.000000101006675468085   |

### Keywords and Phrases

- TD_QQNorm Example
- QQNorm
- Teradata Vantage 
- How to Use TD_QQNorm
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Input Table Rows Redistribution
- Example: How to Use TD_QQNorm
- Rank Table
- TargetColumns
- RankColumns
- PARTITION BY ANY","29","1","3","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/Example-How-to-Use-TD_QQNorm","2024-07-27 12:03:34"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/Optional-Syntax-Elements-for-TD_QQNorm","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_QQNorm - Analytics Database","59","563","OutputColumns Specify names for the output table columns that contain the theoretical quantiles of the target columns. Default: target_column_theoretical_quantiles Accumulate Specify the names of the InputTable columns to copy to the output table.","247","1550","","0","Optional Syntax Elements for TD_QQNorm - Analytics Database","59","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/Optional-Syntax-Elements-for-TD_QQNorm","","","","","","207846","12810","12810","4.541","A+","77","40","1.925","11.510","Very Hard","11.214","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.587","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database provides a rich set of tools for performing various data operations, including analytic functions for data cleaning, exploration, feature engineering, modeling, scoring, and evaluation. This database supports a wide array of functions and syntax elements designed to facilitate data analysis and manipulation. In this guide, we provide foundational SQL operations: Select, Update, Delete, and Create, alongside their corresponding code examples to illustrate their usage.

### Code Examples

#### 1. Select

The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE country = 'USA';
```

#### 2. Update

The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE customers
SET last_name = 'Smith'
WHERE customer_id = 1;
```

#### 3. Delete

The `DELETE` statement removes records from a table.

```sql
DELETE FROM customers
WHERE customer_id = 2;
```

#### 4. Create

The `CREATE` statement creates a new table in the database.

```sql
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2)
);
```

### Keywords and Phrases

- **Optional Syntax Elements for TD_QQNorm**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product Category**
- **Release Number 17.20**
- **Published June 2022**
- **Language: English (United States)**
- **Last Update April 2024**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration**
- **Limitations with PARTITION BY**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions**
- **Recommendations for Using Analytic Functions**

This summary provides an overview of essential SQL operations and key terms related to the Teradata Vantage™ Analytics Database, offering a foundational understanding for users working with this powerful analytics platform.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/Optional-Syntax-Elements-for-TD_QQNorm","2024-07-27 11:25:02"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/Required-Syntax-Elements-for-TD_QQNorm","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_QQNorm - Analytics Database","59","567","ON clause Accept the InputTable clause. TargetColumns Specify the names of the numeric InputTable columns to check for normal distribution. RankColumns Specify the names of the InputTable columns that contain the ranks for the target columns.","242","1539","","0","Required Syntax Elements for TD_QQNorm - Analytics Database","59","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/Required-Syntax-Elements-for-TD_QQNorm","","","","","","207857","12781","12781","4.531","A+","80","41","1.951","26.137","Very Hard","11.211","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.633","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a powerful suite of analytic functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This allows data scientists and analysts to perform complex analyses efficiently and effectively. Important functions include TD_QQNorm for quantile normalization and various statistical functions for hypothesis testing, model training, and scoring.

### Code Examples

Below are SQL code examples demonstrating the basic operations: Select, Update, Delete, and Create.

#### Select
```sql
SELECT customer_id, customer_name, order_amount
FROM orders
WHERE order_date >= '2023-01-01';
```

#### Update
```sql
UPDATE customers
SET customer_status = 'active'
WHERE last_purchase_date >= '2023-01-01';
```

#### Delete
```sql
DELETE FROM orders
WHERE order_date < '2022-01-01';
```

#### Create
```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    sign_up_date DATE
);
```

### Keywords and Phrases

- **Required Syntax Elements for TD_QQNorm**
- **Analytics Database**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **Product Category**: Teradata Vantage™
- **Function Categories**: Data Cleaning, Data Exploration, Feature Engineering, Model Training, Model Scoring, Model Evaluation, Text Analytic, Hypothesis Testing
- **Usage Notes**
- **How to Read Syntax**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact on Function Execution**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Displaying Online Help for Analytics Functions**
- **Example Syntax Elements for Analytic Functions** 

These aspects collectively enhance the understanding and utilization of the Teradata Vantage™ Analytics Database's capabilities, making it a robust choice for advanced analytics.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/Required-Syntax-Elements-for-TD_QQNorm","2024-07-27 11:56:22"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/TD_QQNorm-Input","text/html;charset=UTF-8","200","","Indexable","","TD_QQNorm Input - Analytics Database","36","349","InputTable Schema Column Data Type Description target_column BYTEINT, SMALLINT,INTEGER, BIGINT, DECIMAL/NUMERIC, FLOAT, REAL, DOUBLE PRECISION Column to check for normal distribution. rank_column BYTEINT, SMALLINT, INTEGER, or BIGINT Ranks for target column. accumulate_column Any Column to copy to output table.","312","2106","","0","TD_QQNorm Input - Analytics Database","36","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/TD_QQNorm-Input","","","","","","209320","13172","13172","4.670","A+","80","39","2.051","3.828","Very Hard","11.156","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.990","","","","","","1.1","## Summary

The Analytics Database in Teradata Vantage™ offers a robust suite of analytic functions designed to facilitate various data operations, including data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This guide provides SQL code examples covering basic operations such as SELECT, UPDATE, DELETE, and CREATE, along with insights into specific analytic functions like TD_QQNorm, which is used for checking the normality of a dataset.

## Code Examples

### 1. SELECT
The SELECT statement is used to query data from a database. Below is an example of how to use it in the context of the Analytics Database.

```sql
SELECT target_column, rank_column 
FROM analytics_table 
WHERE target_column IS NOT NULL;
```

### 2. UPDATE
The UPDATE statement modifies existing records in a table. Here’s how to update records in the Analytics Database.

```sql
UPDATE analytics_table 
SET target_column = target_column * 1.1 
WHERE rank_column < 5;
```

### 3. DELETE
The DELETE statement removes records from a table. The example below demonstrates its usage.

```sql
DELETE FROM analytics_table 
WHERE rank_column IS NULL;
```

### 4. CREATE
The CREATE statement is used to create new tables or other database objects. Here’s how to create a new table in the Analytics Database.

```sql
CREATE TABLE new_analytics_table (
    target_column INTEGER,
    rank_column INTEGER,
    accumulate_column FLOAT
);
```

## Keywords and Phrases

- **TD_QQNorm Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Recommendations for Using Analytic Functions**
- **Examples: How to Use TD_QQNorm**
- **Input Table Schema**
- **Column Data Type**
- **Back to home page** 

This comprehensive overview and code examples provide a foundational understanding of performing basic SQL operations and leveraging specific analytic functions in Teradata's Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/TD_QQNorm-Input","2024-07-27 12:05:24"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/TD_QQNorm-Output","text/html;charset=UTF-8","200","","Indexable","","TD_QQNorm Output - Analytics Database","37","365","Output Table Schema Column Data Type Description accumulate_column Any Column copied from InputTable. target_column DOUBLE PRECISION Column checked for normal distribution. output_column if specified, otherwise target_column_theoretical_quantiles DOUBLE PRECISION Theoretical quantile values for target column.","310","2029","","0","TD_QQNorm Output - Analytics Database","37","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/TD_QQNorm-Output","","","","","","209320","13123","13123","4.652","A+","75","39","1.923","0.000","Very Hard","11.155","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.527","","","","","","1.1","# Summary
The use of analytic functions in databases such as Teradata Vantage™ allows users to perform advanced data analyses, including data cleaning, feature engineering, model training, and more. These functions enable efficient manipulation and evaluation of data, providing insights that are crucial for decision-making processes.

In this guide, we will cover basic SQL operations such as selecting, updating, deleting, and creating records in a database. These operations form the foundation of database management and are essential for working with any relational database.

### Code Example

#### Select
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

#### Update
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

#### Delete
```sql
DELETE FROM table_name
WHERE condition;
```

#### Create
```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Keywords and Phrases
- **TD_QQNorm Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Data Exploration Functions**
- **Analytic Functions** 
- **Non-Deterministic Behavior** 
- **Workload Management Configuration**
- **Deadlocks Using Volatile Tables**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions**
- **Recommendations for Using Analytic Functions** 

This structure provides a clear and concise overview of basic SQL operations alongside relevant keywords that are essential for understanding the context of analytic functions in databases.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/TD_QQNorm-Output","2024-07-27 11:22:14"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/TD_QQNorm-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_QQNorm Syntax | QQNorm | Teradata Vantage - TD_QQNorm Syntax - Analytics Database","84","826","See the syntax of the Analytics Database (SQL Engine) function TD_QQNorm and read descriptions of its required and optional syntax elements.","140","886","","0","TD_QQNorm Syntax | QQNorm | Teradata Vantage - TD_QQNorm Syntax - Analytics Database","84","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/TD_QQNorm-Syntax","","","","","","208579","12988","12988","4.604","A+","121","51","2.373","48.511","Hard","11.313","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.529","","","","","","1.1","## Summary of TD_QQNorm in Teradata Vantage

The `TD_QQNorm` function in Teradata Vantage is used to perform quantile-quantile normalization on specified target columns in a dataset. This function allows for the transformation of data to achieve a normal distribution, which can be particularly useful in statistical analysis and modeling. The syntax provides flexibility for partitioning, ordering, and selecting output columns, making it a powerful tool for data preprocessing in analytics.

### Code Examples

#### 1. Select
To utilize the `TD_QQNorm` function in a `SELECT` statement, you can use the following example:

```sql
SELECT
  TD_QQNorm(ON my_table AS InputTable
    USING
      TargetColumns ('column1', 'column2')
      RankColumns ('rank_column')
      OutputColumns ('norm_column1', 'norm_column2'))
FROM my_table;
```

#### 2. Update
While `TD_QQNorm` isn't directly used in an `UPDATE` statement, you can first create a new table with normalized values and then update existing records:

```sql
CREATE TABLE my_normalized_table AS (
  SELECT
    TD_QQNorm(ON my_table AS InputTable
      USING
        TargetColumns ('column1', 'column2')
        RankColumns ('rank_column')
        OutputColumns ('norm_column1', 'norm_column2'))
  FROM my_table
) WITH NO DATA;

INSERT INTO my_normalized_table
SELECT * FROM my_table;
```

#### 3. Delete
You may choose to delete records from a table before applying normalization based on certain criteria:

```sql
DELETE FROM my_table
WHERE condition_column IS NULL;
```

#### 4. Create
You can create a table and normalize columns using `TD_QQNorm` during the creation process:

```sql
CREATE TABLE normalized_data AS (
  SELECT
    TD_QQNorm(ON my_table AS InputTable
      USING
        TargetColumns ('column1', 'column2')
        RankColumns ('rank_column')
        OutputColumns ('norm_column1', 'norm_column2'))
  FROM my_table
) WITH DATA;
```

### Keywords and Phrases
- TD_QQNorm Syntax
- QQNorm
- Teradata Vantage - TD_QQNorm Syntax - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- Recommendations for Using Analytic Functions
- Accumulated Columns Impact on Function Performance
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Data Normalization Techniques
- Statistical Analysis Functions

This concise overview and example code provide a clear understanding of how to work with the `TD_QQNorm` function within the Teradata Vantage environment.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/TD_QQNorm-Syntax","2024-07-27 11:23:31"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics","text/html;charset=UTF-8","200","","Indexable","","TD_UnivariateStatistics | UnivariateStatistics | Teradata Vantage - TD_UnivariateStatistics - Analytics Database","112","987","This Analytics Database (SQL Engine) data exploration function displays descriptive statistics for each specified numeric input table column.","141","864","","0","TD_UnivariateStatistics | UnivariateStatistics | Teradata Vantage - TD_UnivariateStatistics - Analytics Database","112","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics","","","","","","209287","13142","13142","4.659","A+","100","45","2.222","0.000","Very Hard","11.261","1","4","","707","707","0","99.860","715","713","0","","","","","","","","","0.749","","","","","","1.1","## Summary

In Teradata Vantage, the `TD_UnivariateStatistics` function is used to compute descriptive statistics for specified numeric columns in input tables. This function can provide various statistical measures such as the mean, median, mode, and more, helping in data analysis and exploration. 

When using this function, it's important to note that the results may vary slightly across different runs due to precision differences in decimal and number columns.

## Code Examples

### 1. Create a Table

```sql
CREATE TABLE sales_data (
    sale_id INT,
    amount DECIMAL(10, 2),
    sale_date DATE
);
```

### 2. Insert Data Into the Table

```sql
INSERT INTO sales_data (sale_id, amount, sale_date) VALUES (1, 100.00, '2023-01-01');
INSERT INTO sales_data (sale_id, amount, sale_date) VALUES (2, 150.50, '2023-01-02');
INSERT INTO sales_data (sale_id, amount, sale_date) VALUES (3, 200.75, '2023-01-03');
```

### 3. Select Data From the Table

```sql
SELECT * FROM sales_data;
```

### 4. Update Data in the Table

```sql
UPDATE sales_data
SET amount = amount + 50
WHERE sale_id = 1;
```

### 5. Delete Data From the Table

```sql
DELETE FROM sales_data
WHERE sale_id = 3;
```

### 6. Use TD_UnivariateStatistics to Analyze Data

```sql
SELECT *
FROM TD_UnivariateStatistics(
    ON sales_data
    COLUMN amount
);
```

## Keywords and Phrases

- TD_UnivariateStatistics
- UnivariateStatistics
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- jmh1512506877710
- Product Category
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This guide provides a structured overview and practical code snippets for using the `TD_UnivariateStatistics` function, along with relevant keywords to facilitate further exploration of the topic.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics","2024-07-27 11:44:02"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics/Example-Using-TD_UnivariateStatistics-to-Determine-Mean-Median-and-Mode","text/html;charset=UTF-8","200","","Indexable","","TD_UnivariateStatistics Example | UnivariateStatistics - Example: Using TD_UnivariateStatistics to Determine Mean, Median, and Mode - Analytics Database","152","1384","See an example of the Analytics Database (SQL Engine) data exploration function TD_UnivariateStatistics.","104","653","","0","TD_UnivariateStatistics Example | UnivariateStatistics - Example: Using TD_UnivariateStatistics to Determine Mean, Median, and Mode - Analytics Database","152","Database Analytic Functions","27","TD_UnivariateStatistics InputTable: titanic_train","49","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics/Example-Using-TD_UnivariateStatistics-to-Determine-Mean-Median-and-Mode","","","","","","210420","13890","13890","4.924","A+","220","83","2.651","60.325","Normal","11.733","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","1.473","","","","","","1.1","## Summary

In this document, we explore the Teradata Vantage™ Analytics Database and its various analytic functions, specifically focusing on the TD_UnivariateStatistics function. This function allows users to compute statistical measures such as mean, median, and mode for specified target columns in a dataset. The examples provided illustrate how to implement SQL queries for creating, updating, and deleting records, as well as selecting specific data.

## Code Example

### Create

To create a table for storing passenger data from the Titanic dataset:

```sql
CREATE TABLE titanic_train (
    passenger INT,
    survived INT,
    name VARCHAR(100),
    gender VARCHAR(10),
    age FLOAT,
    fare FLOAT
);
```

### Insert

To insert records into the `titanic_train` table:

```sql
INSERT INTO titanic_train (passenger, survived, name, gender, age, fare) VALUES
(97, 0, 'Goldschmidt; Mr. George B', 'male', 71, 34.6542),
(488, 0, 'Kent; Mr. Edward Austin', 'male', 58, 29.7),
(505, 1, 'Maioni; Miss. Roberta', 'female', 16, 86.5),
(631, 1, 'Barkworth; Mr. Algernon Henry Wilson', 'male', 80, 30),
(873, 0, 'Carlsson; Mr. Frans Olof', 'male', 33, 5);
```

### Select

To select statistics for specific columns using TD_UnivariateStatistics:

```sql
SELECT * FROM TD_UnivariateStatistics (
  ON titanic_train AS InputTable
  USING
  TargetColumns ('age', 'fare')
  Stats ('MEAN', 'MEDIAN', 'MODE')
) AS dt;
```

### Update

To update a record in the `titanic_train` table:

```sql
UPDATE titanic_train
SET fare = 50.0
WHERE passenger = 873;
```

### Delete

To delete a record from the `titanic_train` table:

```sql
DELETE FROM titanic_train
WHERE passenger = 488;
```

## Keywords and Phrases

- **TD_UnivariateStatistics Example**
- **UnivariateStatistics - Example: Using TD_UnivariateStatistics to Determine Mean, Median, and Mode**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Accumulated Columns Impact on Function Performance**
- **Example: Using TD_OutlierFilterFit with Percentile Method**
- **Example: Using TD_SimpleImputeFit**
- **TD_UnivariateStatistics InputTable: titanic_train**
- **Example: Using TD_UnivariateStatistics to Determine Mean, Median, and Mode**","26","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics/Example-Using-TD_UnivariateStatistics-to-Determine-Mean-Median-and-Mode","2024-07-27 11:32:28"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics/TD_UnivariateStatistics-Input","text/html;charset=UTF-8","200","","Indexable","","TD_UnivariateStatistics Input - Analytics Database","50","446","InputTable Schema Column Data Type Description target_column NUMERIC Column to calculate statistics. partition_column Any Partition for statistics calculation.","159","1005","","0","TD_UnivariateStatistics Input - Analytics Database","50","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics/TD_UnivariateStatistics-Input","","","","","","208787","12974","12974","4.599","A+","59","37","1.595","0.000","Very Hard","11.117","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.569","","","","","","1.1","# Teradata Vantage Analytics Database: SQL Operations for Univariate Statistics

This document provides a concise overview of basic SQL operations (Select, Update, Delete, Create) tailored for Teradata Vantage's Analytics Database, particularly focusing on univariate statistical functions. Additionally, it includes an example of how to use the `TD_UnivariateStatistics` function to analyze a dataset.

## SQL Operations Summary

### 1. **Create**
Creating a new table to store data for analysis.

```sql
CREATE TABLE sales_data (
    sale_id INT,
    product_name VARCHAR(50),
    sale_amount DECIMAL(10, 2),
    sale_date DATE
);
```

### 2. **Select**
Selecting data from the table to analyze sales.

```sql
SELECT product_name, sale_amount
FROM sales_data
WHERE sale_date BETWEEN '2023-01-01' AND '2023-12-31';
```

### 3. **Update**
Updating a record in the table.

```sql
UPDATE sales_data
SET sale_amount = sale_amount * 1.10
WHERE sale_date < '2023-01-01';
```

### 4. **Delete**
Deleting records from the table.

```sql
DELETE FROM sales_data
WHERE sale_date < '2022-01-01';
```

## Code Example: Using `TD_UnivariateStatistics`

This function calculates basic statistics such as mean, median, and mode for a specified column in the dataset.

### Example Usage

```sql
SELECT *
FROM TD_UnivariateStatistics(
    ON sales_data
    USING
    target_column(sale_amount)
    partition_column(product_name)
) AS statistics_results;
```

In this example:
- `sales_data` is the input table.
- `sale_amount` is the column for which we want to calculate statistics.
- `product_name` is used as the partitioning column.

### Output
The output will include various statistical metrics for the `sale_amount` column, grouped by each `product_name`.

## Keywords and Phrases

- TD_UnivariateStatistics Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Limitations When Using PARTITION BY
- Input Table Schemas
- Example: Using TD_UnivariateStatistics to Determine Mean, Median, and Mode

This structured approach ensures clarity and accessibility for users looking to leverage Teradata's powerful analytical capabilities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics/TD_UnivariateStatistics-Input","2024-07-27 12:21:07"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics/TD_UnivariateStatistics-Output","text/html;charset=UTF-8","200","","Indexable","","TD_UnivariateStatistics Output - Analytics Database","51","462","Output Table Schema Column Data Type Description partition_column Any Column copied from input table. Defines a partition for statistics calculation. Attribute VARCHAR Target column for function calculated statistics. StatsName VARCHAR [Column appears once for each specified statistic.] Statistic. StatsValue DOUBLE PRE...","323","2038","","0","TD_UnivariateStatistics Output - Analytics Database","51","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics/TD_UnivariateStatistics-Output","","","","","","209863","13208","13208","4.682","A+","92","45","2.044","7.973","Very Hard","11.173","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.678","","","","","","1.1","### Summary
This document outlines a comprehensive overview of the Teradata Vantage Analytics Database, specifically focusing on various analytic functions and their applications. These functions are categorized into data cleaning, data exploration, feature engineering, model training, scoring, and evaluation, among others. The keywords and phrases provided are essential for understanding the context of the analytics database and its functionalities.

### Code Examples

#### 1. **Create**
Creating a table in Teradata to store analytics data.
```sql
CREATE TABLE analytics_data (
    id INT,
    attribute VARCHAR(100),
    value DOUBLE PRECISION
);
```

#### 2. **Select**
Selecting data from the analytics table.
```sql
SELECT id, attribute, value 
FROM analytics_data 
WHERE value > 50;
```

#### 3. **Update**
Updating a specific record in the analytics table.
```sql
UPDATE analytics_data 
SET value = value * 1.10 
WHERE attribute = 'Sales';
```

#### 4. **Delete**
Deleting records from the analytics table that meet a specific condition.
```sql
DELETE FROM analytics_data 
WHERE value < 10;
```

### Keywords and Phrases
- **TD_UnivariateStatistics Output**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This structured approach facilitates a clear understanding of the capabilities and features of the Teradata Vantage Analytics Database, aiding in effective data analysis and interpretation.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics/TD_UnivariateStatistics-Output","2024-07-27 12:41:51"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics/TD_UnivariateStatistics-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_UnivariateStatistics Syntax | UnivariateStatistics - TD_UnivariateStatistics Syntax - Analytics Database","107","941","See the syntax of the Analytics Database (SQL Engine) function TD_UnivariateStatistics and read descriptions of its required and optional syntax elements.","154","952","","0","TD_UnivariateStatistics Syntax | UnivariateStatistics - TD_UnivariateStatistics Syntax - Analytics Database","107","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics/TD_UnivariateStatistics-Syntax","","","","","","208550","12988","12988","4.604","A+","116","52","2.231","31.724","Hard","11.313","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.037","","","","","","1.1","### Summary

The `TD_UnivariateStatistics` function in Teradata Vantage™ is designed to compute various statistical measures for numeric columns in a dataset. This function provides a powerful means to analyze data by extracting statistics such as mean, median, mode, percentiles, and trimmed percentiles. It can be applied directly to tables or views, allowing for flexible data exploration and analysis.

### Code Example

Here are common SQL operations using Teradata, including `SELECT`, `UPDATE`, `DELETE`, and `CREATE` statements.

#### SELECT Example

To retrieve univariate statistics for specific target columns:

```sql
SELECT * 
FROM TD_UnivariateStatistics (
    ON my_table AS InputTable
    USING TargetColumns ('column1', 'column2')
);
```

#### UPDATE Example

To update a record in a table:

```sql
UPDATE my_table 
SET column1 = 'new_value' 
WHERE column2 = 'condition_value';
```

#### DELETE Example

To delete records that meet a certain condition:

```sql
DELETE FROM my_table 
WHERE column1 < 10;
```

#### CREATE Example

To create a new table to store results from the univariate statistics:

```sql
CREATE TABLE univariate_results AS (
    SELECT * 
    FROM TD_UnivariateStatistics (
        ON my_table AS InputTable
        USING TargetColumns ('column1', 'column2')
    )
) WITH DATA;
```

### Keywords and Phrases

- **TD_UnivariateStatistics Syntax**
- **UnivariateStatistics - TD_UnivariateStatistics Syntax - Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Data Exploration Functions**
- **MovingAverage**
- **TD_CategoricalSummary**
- **TD_ColumnSummary**
- **TD_Histogram**
- **TD_QQNorm**
- **TD_WhichMax**
- **TD_WhichMin**
- **Feature Engineering Transform Functions**
- **Antiselect**
- **TD_BinCodeFit**
- **TD_BinCodeTransform**
- **Model Training Functions**
- **TD_DecisionForest**
- **TD_GLM**
- **TD_KMeans**
- **TD_KNN**
- **Model Scoring Functions**
- **TD_DecisionForestPredict**
- **TD_GLMPredict**
- **TD_KMeansPredict**
- **Text Analytic Functions**
- **TD_TFIDF**
- **Hypothesis Testing Functions**
- **TD_ANOVA**
- **TD_ChiSq**
- **Path and Pattern Analysis Functions**
- **nPath**
- **Sessionize**","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics/TD_UnivariateStatistics-Syntax","2024-07-27 11:53:52"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics/TD_UnivariateStatistics-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","TD_UnivariateStatistics Syntax Elements - Analytics Database","60","550","TargetColumns Specify the names of the numeric InputTable columns for which to compute statistics. PartitionColumns [Optional] Specify the names of the InputTable columns on which to partition the input. The function copies these columns to the output table. Default behavior: The function treats all rows as a single pa...","323","1997","","0","TD_UnivariateStatistics Syntax Elements - Analytics Database","60","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics/TD_UnivariateStatistics-Syntax-Elements","","","","","","210304","13559","13559","4.807","A+","321","95","3.379","73.475","Fairly Easy","11.701","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.817","","","","","","1.1","## Summary of Teradata Vantage™ Analytics Database Functions

The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions designed to facilitate data analysis and modeling. These functions cover a wide range of tasks, including data cleaning, exploration, feature engineering, model training, and evaluation. The database supports a variety of statistical computations, data transformations, and machine learning capabilities, making it suitable for a diverse set of analytical tasks.

### Code Examples

Below are examples demonstrating basic SQL operations—Select, Update, Delete, and Create—within the context of the Teradata Vantage™ Analytics Database.

#### 1. SELECT
The SELECT statement is used to query data from a table.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```
**Example:**
```sql
SELECT employee_id, employee_name
FROM employees
WHERE department = 'Sales';
```

#### 2. UPDATE
The UPDATE statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```
**Example:**
```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department = 'Sales';
```

#### 3. DELETE
The DELETE statement removes records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```
**Example:**
```sql
DELETE FROM employees
WHERE employee_id = 10;
```

#### 4. CREATE
The CREATE statement is used to create a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```
**Example:**
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    employee_name VARCHAR(100),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

### Keywords and Phrases

- **TD_UnivariateStatistics Syntax Elements**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number 17.20**
- **Published June 2022**
- **Language English (United States)**
- **Last Update 2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Accumulated Columns Impact on Function Performance**
- **Recommendations for Using Analytic Functions**
- **Statistical Functions: SUM, COUNT, MAX, MIN, MEAN, etc.**
- **Centiles and Trimmed Percentiles**
- **Teradata Links and Related Documentation** 

These keywords represent critical concepts and functionalities within the Teradata Vantage™ Analytics Database, facilitating efficient data analysis and modeling.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics/TD_UnivariateStatistics-Syntax-Elements","2024-07-27 12:49:17"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax","text/html;charset=UTF-8","200","","Indexable","","TD_WhichMax Function | WhichMax | Teradata Vantage - TD_WhichMax - Analytics Database","85","823","This Analytics Database (SQL Engine) data exploration function displays all rows that have the maximum value in a specified input table column.","143","889","","0","TD_WhichMax Function | WhichMax | Teradata Vantage - TD_WhichMax - Analytics Database","85","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax","","","","","","211335","13973","13973","4.953","A+","419","85","4.929","57.668","Fairly Hard","12.020","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","0.928","","","","","","1.1","## Overview of TD_WhichMax Function in Teradata Vantage

The `TD_WhichMax` function in Teradata Vantage is an analytic function that identifies and displays all rows that have the maximum value in a specified column of an input table. This function is particularly useful for data analysis tasks where understanding extremes in data can lead to insights about outliers, performance benchmarks, or safety standards.

### Importance of Maximum Value Identification
Finding maximum values in a dataset is critical for several reasons:
- **Identification of Outliers**: Maximum values may indicate outliers that could skew analyses.
- **Understanding Value Ranges**: Knowing the maximum helps in understanding the spread and accuracy of data.
- **Establishing Performance Benchmarks**: Maximums can serve as benchmarks for future performance in various fields (e.g., sports, finance).
- **Safety Considerations**: Max values help define safety standards in engineering and construction.

## Code Examples

Here's how you can use SQL commands in Teradata Vantage to perform basic operations: Select, Update, Delete, and Create.

### 1. Create a Table
```sql
CREATE TABLE SalesData (
    SaleID INT,
    ProductName VARCHAR(100),
    SaleAmount DECIMAL(10, 2),
    SaleDate DATE
);
```

### 2. Insert Data
```sql
INSERT INTO SalesData (SaleID, ProductName, SaleAmount, SaleDate)
VALUES (1, 'Widget', 200.00, '2023-01-01'),
       (2, 'Gadget', 150.00, '2023-01-02'),
       (3, 'Thingamajig', 300.00, '2023-01-03');
```

### 3. Select Data
```sql
SELECT * FROM SalesData;
```

### 4. Update Data
```sql
UPDATE SalesData
SET SaleAmount = SaleAmount * 1.10
WHERE ProductName = 'Gadget';
```

### 5. Delete Data
```sql
DELETE FROM SalesData
WHERE SaleID = 1;
```

### 6. Using TD_WhichMax
To find the rows with the maximum SaleAmount:
```sql
SELECT * FROM SalesData
WHERE SaleAmount = TD_WhichMax(SaleAmount);
```

## Summary
The `TD_WhichMax` function is an essential tool for identifying maximum values in datasets, aiding in the understanding of data distributions, and establishing benchmarks. The provided SQL code examples demonstrate how to create and manipulate data within Teradata Vantage, including the use of analytic functions like `TD_WhichMax`.

## Keywords and Phrases
- **TD_WhichMax Function**
- **WhichMax**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product: Analytics Database**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Hypothesis Testing Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Workload Management Configuration**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns**
- **Spool Space Exhaustion**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax","2024-07-27 12:04:37"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/Optional-Syntax-Elements-for-TD_WhichMax","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_WhichMax - Analytics Database","61","578","PARTITION BY ANY Accept the order_by_column clause.","51","346","","0","Optional Syntax Elements for TD_WhichMax - Analytics Database","61","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/Optional-Syntax-Elements-for-TD_WhichMax","","","","","","207377","12655","12655","4.486","A+","51","35","1.457","0.000","Very Hard","11.146","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.606","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database offers a range of analytic functions designed to facilitate data exploration, cleaning, feature engineering, modeling, and evaluation. This guide focuses on some essential SQL operations, including Select, Update, Delete, and Create commands, which are fundamental for managing and manipulating data within the database.

### Code Examples

#### 1. SELECT
The `SELECT` statement is used to query data from a database table.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

**Example:**
```sql
SELECT employee_id, first_name, last_name
FROM employees
WHERE department_id = 10;
```

#### 2. UPDATE
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example:**
```sql
UPDATE employees
SET salary = salary * 1.1
WHERE department_id = 10;
```

#### 3. DELETE
The `DELETE` statement removes records from a table based on a condition.

```sql
DELETE FROM table_name
WHERE condition;
```

**Example:**
```sql
DELETE FROM employees
WHERE employee_id = 123;
```

#### 4. CREATE
The `CREATE` statement is used to create a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example:**
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department_id INT,
    salary DECIMAL(10, 2)
);
```

### Keywords and Phrases

- **Optional Syntax Elements for TD_WhichMax**
- **Analytics Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Product Category: Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Function Names with TD Prefix**
- **Non-Deterministic Behavior**
- **Recommendations for Using Analytic Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Maximum Number of Columns in a Database Table**

This summary and the examples provided should give a solid foundation for understanding basic SQL operations within the Teradata Vantage™ Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/Optional-Syntax-Elements-for-TD_WhichMax","2024-07-27 12:06:25"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/Required-Syntax-Elements-for-TD_WhichMax","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_WhichMax - Analytics Database","61","582","ON clause Accept the InputTable clause. TargetColumn Specify the target column names to determine maximum values.","113","740","","0","Required Syntax Elements for TD_WhichMax - Analytics Database","61","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/Required-Syntax-Elements-for-TD_WhichMax","","","","","","207554","12705","12705","4.504","A+","60","37","1.622","7.789","Very Hard","11.167","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.852","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database offers a range of analytic functions that assist with data cleaning, exploration, feature engineering, model training, and evaluation. Among its capabilities are functions like `TD_WhichMax`, which identifies the row corresponding to the maximum value in a specified target column. This functionality is part of a broader suite of tools available for data scientists and analysts working with large datasets in Teradata environments, including VantageCloud and VantageCore editions.

### Code Example: Basic SQL Operations

Below are examples of basic SQL operations such as SELECT, UPDATE, DELETE, and CREATE tailored for the Analytics Database environment:

#### SELECT
```sql
SELECT *
FROM sales_data
WHERE region = 'North America';
```

#### UPDATE
```sql
UPDATE sales_data
SET revenue = revenue * 1.10
WHERE region = 'North America';
```

#### DELETE
```sql
DELETE FROM sales_data
WHERE sales_date < '2020-01-01';
```

#### CREATE
```sql
CREATE TABLE sales_data (
    sales_id INT PRIMARY KEY,
    region VARCHAR(50),
    revenue DECIMAL(10, 2),
    sales_date DATE
);
```

### Keywords and Phrases

- **Required Syntax Elements for TD_WhichMax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

These elements collectively contribute to the effective use and understanding of the Teradata Vantage™ Analytics Database, particularly in the context of analytic functions and SQL operations.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/Required-Syntax-Elements-for-TD_WhichMax","2024-07-27 12:50:01"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/TD_WhichMax-Example","text/html;charset=UTF-8","200","","Indexable","","TD_WhichMax Example | WhichMax | Teradata Vantage - TD_WhichMax Example - Analytics Database","92","905","See an example of the Analytics Database (SQL Engine) data exploration function TD_WhichMax.","92","597","","0","TD_WhichMax Example | WhichMax | Teradata Vantage - TD_WhichMax Example - Analytics Database","92","Database Analytic Functions","27","TD_WhichMax InputTable: titanic_dataset","39","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/TD_WhichMax-Example","","","","","","210037","13692","13692","4.854","A+","231","69","3.348","91.369","Very Easy","11.650","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","1.664","","","","","","1.1","## Overview of Teradata Vantage SQL Operations

In Teradata Vantage, SQL operations can be categorized into four primary actions: Select, Update, Delete, and Create. Understanding these operations is essential for managing data effectively within the database. Below is a summary of each operation along with a code example for each.

### Code Examples

#### Select
The `SELECT` statement is used to query data from a database. It allows you to specify which columns to retrieve and apply various filtering conditions.

```sql
SELECT passenger, survived, fare
FROM titanic_dataset
WHERE survived = 1;
```

#### Update
The `UPDATE` statement is used to modify existing records in a table. You can specify which rows to update and the new values to assign.

```sql
UPDATE titanic_dataset
SET fare = fare * 1.1
WHERE pclass = 3;
```

#### Delete
The `DELETE` statement is used to remove records from a table. You can specify conditions to determine which rows to delete.

```sql
DELETE FROM titanic_dataset
WHERE age IS NULL;
```

#### Create
The `CREATE` statement is used to create a new table. You define the table structure, including column names and data types.

```sql
CREATE TABLE new_passenger_data (
    passenger_id INT,
    name VARCHAR(100),
    age INT,
    survived CHAR(1)
);
```

### Summary
In summary, the core SQL operations in Teradata Vantage—Select, Update, Delete, and Create—are essential for interacting with and managing data. Mastering these commands allows users to effectively retrieve, modify, and organize data stored within the Teradata database.

### Keywords and Phrases
- TD_WhichMax Example
- WhichMax
- Teradata Vantage - TD_WhichMax Example
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Exploration Functions
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMin
- Feature Engineering Utility Functions
- Model Training Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_XGBoost
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- Text Analytic Functions
- NGramSplitter
- Hypothesis Testing Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Path and Pattern Analysis Functions
- nPath
- Sessionize
- TD_WhichMax InputTable: titanic_dataset

These terms encapsulate the features and functionalities available in Teradata Vantage, allowing users to perform complex analytics and data management tasks.","26","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/TD_WhichMax-Example","2024-07-27 11:22:35"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/TD_WhichMax-Input","text/html;charset=UTF-8","200","","Indexable","","TD_WhichMax Input - Analytics Database","38","364","InputTable Schema Column Data Type Description target_column Any except BLOB and CLOB and UDT. Columns for which maximum values are checked.","140","947","","0","TD_WhichMax Input - Analytics Database","38","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/TD_WhichMax-Input","","","","","","208433","12980","12980","4.601","A+","62","38","1.632","12.782","Very Hard","11.122","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.480","","","","","","1.1","## Summary

In the realm of database management, performing operations such as selecting, updating, deleting, and creating records is fundamental. Below, we provide a brief overview of these operations along with code examples tailored for the Teradata Analytics Database. This guide is particularly relevant for users working with Teradata Vantage, especially in the context of analytics and data manipulation.

### Code Examples

#### 1. SELECT
The `SELECT` statement is used to query data from a database. Here’s an example of how to use it:

```sql
SELECT target_column
FROM your_table
WHERE condition;
```

#### 2. UPDATE
The `UPDATE` statement modifies existing records in a table. Here’s how it can be executed:

```sql
UPDATE your_table
SET target_column = new_value
WHERE condition;
```

#### 3. DELETE
The `DELETE` statement removes records from a table based on a specified condition:

```sql
DELETE FROM your_table
WHERE condition;
```

#### 4. CREATE
The `CREATE` statement is used to create a new table or database. Below is an example for creating a new table:

```sql
CREATE TABLE new_table (
    column1 DataType,
    column2 DataType,
    target_column DataType
);
```

### Keywords and Phrases

- **TD_WhichMax Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**: gjn1627595495337.ditamap
- **dita:ditavalPath**: ayr1485454803741.ditaval
- **dita:id**: jmh1512506877710
- **Product Category**: Teradata Vantage™
- **Functions**: Data Cleaning, Data Exploration, Feature Engineering, Model Training, Model Scoring, Model Evaluation, Text Analytic, Path and Pattern Analysis, Hypothesis Testing
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Examples of Functions**: TD_ConvertTo, TD_GetRowsWithoutMissingValues, TD_OutlierFilterFit, TD_SimpleImputeFit, TD_CategoricalSummary, TD_Histogram, TD_Silhouette, TD_TrainTestSplit, TD_TFIDF, etc. 

This guide provides a foundational understanding of basic SQL commands in the context of Teradata Vantage while emphasizing the importance of analytic functions and their applications.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/TD_WhichMax-Input","2024-07-27 11:57:07"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/TD_WhichMax-Output","text/html;charset=UTF-8","200","","Indexable","","TD_WhichMax Output - Analytics Database","39","380","Output Table Schema Column Data Type Description target_column Any except BLOB and CLOB and UDT. Columns for which maximum values are checked.","142","961","","0","TD_WhichMax Output - Analytics Database","39","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/TD_WhichMax-Output","","","","","","208441","12974","12974","4.599","A+","63","38","1.658","15.809","Very Hard","11.123","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.576","","","","","","1.1","# Introduction to Teradata Analytics Database Functions

The Teradata Analytics Database provides a range of analytic functions to facilitate data analysis, feature engineering, model training, scoring, and evaluation. This guide covers basic SQL operations, along with specific examples for creating, selecting, updating, and deleting data in a Teradata database.

## Summary of SQL Operations

### 1. Create
To create a new table in the Teradata database, you can use the `CREATE TABLE` statement. This allows you to define the structure of your table, including its columns and data types.

```sql
CREATE TABLE Employee (
    EmployeeID INT,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    HireDate DATE,
    Salary DECIMAL(10, 2)
);
```

### 2. Select
The `SELECT` statement is used to retrieve data from one or more tables. You can specify which columns to return and apply filters using the `WHERE` clause.

```sql
SELECT FirstName, LastName, Salary
FROM Employee
WHERE Salary > 50000;
```

### 3. Update
To modify existing records in a table, use the `UPDATE` statement. You can set new values for specific columns based on a condition.

```sql
UPDATE Employee
SET Salary = Salary * 1.10
WHERE HireDate < '2020-01-01';
```

### 4. Delete
The `DELETE` statement removes records from a table. You can specify which records to delete using a `WHERE` clause.

```sql
DELETE FROM Employee
WHERE EmployeeID = 5;
```

## Code Example Section

### Creating a Table
```sql
CREATE TABLE Sales (
    SaleID INT,
    ProductName VARCHAR(100),
    SaleAmount DECIMAL(10, 2),
    SaleDate DATE
);
```

### Selecting Data
```sql
SELECT ProductName, SUM(SaleAmount) AS TotalSales
FROM Sales
GROUP BY ProductName;
```

### Updating Data
```sql
UPDATE Sales
SET SaleAmount = SaleAmount * 0.95
WHERE SaleDate < '2023-01-01';
```

### Deleting Data
```sql
DELETE FROM Sales
WHERE SaleID = 10;
```

## Keywords and Phrases

- TD_WhichMax Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Workload Management Configuration
- Non-Deterministic Behavior
- Data Exploration Functions
- Moving Average Functions
- Sessionize Functions
- Output Table Schema

This guide provides a foundational understanding of SQL operations within Teradata's Analytics Database context, emphasizing the importance of data manipulation in analytics and data science workflows.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/TD_WhichMax-Output","2024-07-27 11:40:03"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/TD_WhichMax-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_WhichMax Syntax | WhichMax | Teradata Vantage - TD_WhichMax Syntax - Analytics Database","90","871","See the syntax of the Analytics Database (SQL Engine) function TD_WhichMax and read descriptions of its required and optional syntax elements.","142","896","","0","TD_WhichMax Syntax | WhichMax | Teradata Vantage - TD_WhichMax Syntax - Analytics Database","90","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/TD_WhichMax-Syntax","","","","","","208118","12908","12908","4.576","A+","100","44","2.273","47.172","Hard","11.239","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.468","","","","","","1.1","### Summary

Teradata Vantage provides a rich set of analytic functions for data manipulation and analysis. Among these functions, `TD_WhichMax` is particularly useful for identifying the row(s) that contain the maximum value of a specified target column within a given partition of data. This function can be employed in various contexts, such as within SELECT, CREATE TABLE, and CREATE VIEW statements. 

The following sections will outline the basic SQL operations: SELECT, UPDATE, DELETE, and CREATE, along with examples demonstrating how to use `TD_WhichMax` in conjunction with these operations.

### Code Example

#### 1. SELECT

```sql
SELECT * 
FROM (
    SELECT *,
           TD_WhichMax(ON my_table AS InputTable USING TargetColumn('value'))
    ) AS derived_table
WHERE some_condition;
```

#### 2. UPDATE

```sql
UPDATE my_table
SET column_name = new_value
WHERE id IN (
    SELECT id 
    FROM (
        SELECT id, 
               TD_WhichMax(ON my_table AS InputTable USING TargetColumn('value'))
        ) AS derived_table
    );
```

#### 3. DELETE

```sql
DELETE FROM my_table
WHERE id IN (
    SELECT id
    FROM (
        SELECT id, 
               TD_WhichMax(ON my_table AS InputTable USING TargetColumn('value'))
        ) AS derived_table
    );
```

#### 4. CREATE

```sql
CREATE TABLE my_new_table AS (
    SELECT *
    FROM (
        SELECT *,
               TD_WhichMax(ON my_table AS InputTable USING TargetColumn('value'))
        ) AS derived_table
    )
WITH NO DATA;
```

### Keywords and Phrases

- TD_WhichMax Syntax
- WhichMax
- Teradata Vantage - TD_WhichMax Syntax
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published June 2022
- Language English (United States)
- Last Update 2024-04-06
- Product Category Teradata Vantage™
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Example: Using TD_WhichMax
- How to Read Syntax
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table

The above examples and keywords provide a foundational understanding of how to utilize Teradata's analytic functions, particularly focusing on `TD_WhichMax`, within various SQL operations.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/TD_WhichMax-Syntax","2024-07-27 12:35:24"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin","text/html;charset=UTF-8","200","","Indexable","","TD_WhichMin Function | WhichMin | Teradata Vantage - TD_WhichMin - Analytics Database","85","808","This Analytics Database (SQL Engine) data exploration function displays all rows that have the minimum value in a specified input table column.","143","885","","0","TD_WhichMin Function | WhichMin | Teradata Vantage - TD_WhichMin - Analytics Database","85","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin","","","","","","210844","13844","13844","4.908","A+","348","77","4.519","55.656","Fairly Hard","11.804","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","1.388","","","","","","1.1","## Summary

The `TD_WhichMin` function in Teradata Vantage is used to identify all rows in a specified input table that contain the minimum value for a given column. This function is particularly useful in scenarios where you need to find the lowest value in a dataset and can have applications in quality control, data normalization, analysis, and machine learning.

### Code Example

Here are examples of basic SQL operations including `SELECT`, `UPDATE`, `DELETE`, and `CREATE`. These examples will provide a foundation for interacting with a database in Teradata.

#### 1. SELECT
```sql
SELECT *
FROM Employees
WHERE Salary = (SELECT MIN(Salary) FROM Employees);
```
This query retrieves all employee records that have the minimum salary.

#### 2. UPDATE
```sql
UPDATE Employees
SET Salary = Salary * 1.10
WHERE Department = 'Sales';
```
This updates the salary of all employees in the Sales department by increasing it by 10%.

#### 3. DELETE
```sql
DELETE FROM Employees
WHERE HireDate < '2020-01-01';
```
This deletes all employee records who were hired before January 1, 2020.

#### 4. CREATE
```sql
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    HireDate DATE,
    Salary DECIMAL(10, 2),
    Department VARCHAR(50)
);
```
This command creates a new table named `Employees` with various columns related to employee information.

### Keywords and Phrases
- **TD_WhichMin Function**
- **WhichMin**
- **Teradata Vantage - TD_WhichMin**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Recommendations for Using Analytic Functions**
- **Minimum Value Identification**
- **Data Quality Control**
- **Data Normalization**
- **Outlier Detection**
- **Machine Learning Data Preparation** 

These keywords and phrases encapsulate the essential aspects of the `TD_WhichMin` function and its context within Teradata Vantage's suite of analytic database functions.","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin","2024-07-27 12:11:42"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/Optional-Syntax-Elements-for-TD_WhichMin","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_WhichMin - Analytics Database","61","573","PARTITION BY ANY Accept the order_by_column clause.","51","346","","0","Optional Syntax Elements for TD_WhichMin - Analytics Database","61","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/Optional-Syntax-Elements-for-TD_WhichMin","","","","","","207377","12658","12658","4.487","A+","51","35","1.457","0.000","Very Hard","11.146","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.457","","","","","","1.1","## Summary

This document provides an overview of the optional syntax elements for analytic functions in Teradata's Analytics Database, specifically highlighting the functions related to data cleaning, exploration, feature engineering, model training, scoring, and evaluation, among others. The focus is on the functionalities available in the Teradata Vantage™ Analytics Database, which aims to facilitate advanced analytic operations.

The following sections will cover practical SQL code examples for the basic operations of selecting, updating, deleting, and creating records in an SQL database. 

## Code Example

### 1. Select
```sql
SELECT first_name, last_name, email
FROM employees
WHERE department = 'Sales';
```

### 2. Update
```sql
UPDATE employees
SET email = 'new_email@example.com'
WHERE employee_id = 12345;
```

### 3. Delete
```sql
DELETE FROM employees
WHERE employee_id = 12345;
```

### 4. Create
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    department VARCHAR(50)
);
```

## Keywords and Phrases
- **Optional Syntax Elements for TD_WhichMin**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Function Categories**: Data Cleaning, Data Exploration, Feature Engineering, Model Training, Model Scoring, Model Evaluation, Text Analytics
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact**
- **Limitations with PARTITION BY**
- **Functions Ignore Disallowed Syntax**
- **Input Table Schemas**
- **Function Names with/without TD Prefix**
- **Accumulated Columns Performance**
- **Datatype Change in Accumulated Columns**
- **Online Help for Analytics Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions** 

This concise guide serves as a useful reference for those working with Teradata's Analytics Database and its various analytic functions, as well as for performing basic SQL operations.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/Optional-Syntax-Elements-for-TD_WhichMin","2024-07-27 11:48:02"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/Required-Syntax-Elements-for-TD_WhichMin","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_WhichMin - Analytics Database","61","577","ON clause Accept the InputTable clause. TargetColumn Specify the target column names to check for minimum values.","113","731","","0","Required Syntax Elements for TD_WhichMin - Analytics Database","61","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/Required-Syntax-Elements-for-TD_WhichMin","","","","","","207554","12708","12708","4.505","A+","61","37","1.649","12.385","Very Hard","11.167","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.609","","","","","","1.1","# Summary of Teradata Vantage™ Analytics Database Functions

The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions designed to facilitate data manipulation and analysis. This includes functions for data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analysis. By leveraging these functions, users can efficiently process large datasets and derive insights for decision-making.

## Code Examples

### 1. Select
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

### 2. Update
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

### 3. Delete
```sql
DELETE FROM table_name
WHERE condition;
```

### 4. Create
```sql
CREATE TABLE new_table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Keywords and Phrases

- **Required Syntax Elements for TD_WhichMin**
- **Analytics Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Categories of Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions**
- **Examples of Usage**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/Required-Syntax-Elements-for-TD_WhichMin","2024-07-27 12:53:49"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/TD_WhichMin-Example","text/html;charset=UTF-8","200","","Indexable","","TD_WhichMin Example | WhichMin | Teradata Vantage - TD_WhichMin Example - Analytics Database","92","890","See an example of the Analytics Database (SQL Engine) data exploration function TD_WhichMin.","92","593","","0","TD_WhichMin Example | WhichMin | Teradata Vantage - TD_WhichMin Example - Analytics Database","92","Database Analytic Functions","27","TD_WhichMin InputTable: titanic_dataset","39","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/TD_WhichMin-Example","","","","","","210127","13737","13737","4.870","A+","245","70","3.500","93.130","Very Easy","11.679","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.766","","","","","","1.1","## Teradata Vantage™ - TD_WhichMin Example

### Summary
The `TD_WhichMin` function in Teradata Vantage is an analytic function used to identify the row with the minimum value in a specified column from a dataset. This function is particularly useful in scenarios where you need to find the specific record associated with the lowest value of a particular attribute, such as fare prices or scores.

### Code Example

Below are the SQL statements demonstrating the basic operations of **Select**, **Update**, **Delete**, and **Create** in Teradata, followed by an example of using `TD_WhichMin`.

#### 1. Select
```sql
SELECT * FROM titanic_dataset;
```

#### 2. Update
```sql
UPDATE titanic_dataset
SET fare = fare * 1.1
WHERE gender = 'female';
```

#### 3. Delete
```sql
DELETE FROM titanic_dataset
WHERE survived = 0;
```

#### 4. Create
```sql
CREATE TABLE titanic_dataset (
    passenger INT,
    survived INT,
    pclass INT,
    gender VARCHAR(10),
    age INT,
    sibsp INT,
    parch INT,
    fare DECIMAL(10, 2),
    cabin VARCHAR(10),
    embarked CHAR(1)
);
```

### TD_WhichMin Example
To find the row with the minimum fare from the `titanic_dataset`, the following SQL statement can be executed:

```sql
SELECT * FROM TD_WhichMin (
  ON titanic_dataset AS InputTable
  USING
  TargetColumn ('fare')
) AS dt;
```

#### TD_WhichMin Output for Minimum Fare
The result of the above query will return the following row, which contains the minimum fare:

```
 passenger | survived | pclass | gender | age | sibsp | parch | fare | cabin | embarked
-----------|----------|--------|--------|-----|-------|-------|------|-------|---------
        1  |        0 |      3 | male   |  22 |     1 |     0 | 7.25 | null  | S
```

### Keywords and Phrases
- **TD_WhichMin Example**
- **WhichMin**
- **Teradata Vantage - TD_WhichMin Example**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Function Names with and without TD Prefix**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**","26","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/TD_WhichMin-Example","2024-07-27 12:33:23"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/TD_WhichMin-Input","text/html;charset=UTF-8","200","","Indexable","","TD_WhichMin Input - Analytics Database","38","359","InputTable Schema Column Data Type Description target_column Any except BLOB and CLOB and UDT. Columns for which minimum values are checked.","140","943","","0","TD_WhichMin Input - Analytics Database","38","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/TD_WhichMin-Input","","","","","","208433","12982","12982","4.602","A+","62","38","1.632","12.782","Very Hard","11.122","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.635","","","","","","1.1","### Introduction to Analytics Database Analytic Functions

The Analytics Database in Teradata Vantage™ offers a rich set of analytic functions that enable users to perform complex data analyses efficiently. These functions facilitate data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This guide provides an overview of the key functions related to analytics and showcases how to perform fundamental database operations such as selecting, updating, deleting, and creating data entries.

### Summary of Basic SQL Operations

- **Select**: Retrieve data from a database.
- **Insert**: Add new data entries.
- **Update**: Modify existing data entries.
- **Delete**: Remove data entries from a database.

### Code Example

Below are examples of how to use SQL commands for basic operations in a Teradata database.

#### 1. Select
```sql
SELECT target_column, another_column
FROM your_table
WHERE condition_column = 'some_value';
```

#### 2. Insert
```sql
INSERT INTO your_table (target_column, another_column)
VALUES ('new_value', 'another_new_value');
```

#### 3. Update
```sql
UPDATE your_table
SET target_column = 'updated_value'
WHERE condition_column = 'some_value';
```

#### 4. Delete
```sql
DELETE FROM your_table
WHERE condition_column = 'some_value';
```

### Keywords and Phrases

- **TD_WhichMin Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/TD_WhichMin-Input","2024-07-27 12:39:03"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/TD_WhichMin-Output","text/html;charset=UTF-8","200","","Indexable","","TD_WhichMin Output - Analytics Database","39","375","Output Table Schema Column Data Type Description target_column Any except BLOB and CLOB and UDT. Columns for which minimum values are checked.","142","957","","0","TD_WhichMin Output - Analytics Database","39","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/TD_WhichMin-Output","","","","","","208449","12992","12992","4.606","A+","63","38","1.658","15.809","Very Hard","11.122","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.543","","","","","","1.1","# Overview of Teradata Vantage™ Analytics Database Functions

The Teradata Vantage™ Analytics Database provides a comprehensive set of analytic functions that enable users to perform a wide range of data analysis tasks. These functions are categorized into various types, including data cleaning, data exploration, feature engineering, model training, scoring, and evaluation, among others. This guide will cover the fundamental SQL operations—Select, Update, Delete, and Create—along with examples for each operation.

## SQL Operations

### 1. Select
The `SELECT` statement retrieves data from one or more tables.

```sql
-- Example: Select all columns from the Employees table
SELECT * FROM Employees;

-- Example: Select specific columns
SELECT EmployeeID, FirstName, LastName FROM Employees WHERE Department = 'Sales';
```

### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
-- Example: Update salary for a specific employee
UPDATE Employees
SET Salary = Salary * 1.10
WHERE EmployeeID = 101;
```

### 3. Delete
The `DELETE` statement removes records from a table.

```sql
-- Example: Delete an employee record
DELETE FROM Employees WHERE EmployeeID = 105;
```

### 4. Create
The `CREATE` statement creates a new table or database.

```sql
-- Example: Create a new table for storing employee data
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Salary DECIMAL(10, 2),
    Department VARCHAR(50)
);
```

## Summary
The Teradata Vantage™ Analytics Database provides robust functions for conducting various types of data analyses. The above SQL operations—Select, Update, Delete, and Create—are fundamental for interacting with the database, enabling users to retrieve, modify, and manage data efficiently.

## Keywords and Phrases
- TD_WhichMin Output
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Workload Management Configuration
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Recommendations for Using Analytic Functions
- Example Usage
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion
- Accumulated Columns Impact
- Datatype Change in Accumulated Columns
- Displaying Online Help for Functions
- Analytics Database Analytic Function Categories","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/TD_WhichMin-Output","2024-07-27 11:48:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/TD_WhichMin-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_WhichMin Syntax | WhichMin | Teradata Vantage - TD_WhichMin Syntax - Analytics Database","90","856","See the syntax of the Analytics Database (SQL Engine) function TD_WhichMin and read descriptions of its required and optional syntax elements.","142","892","","0","TD_WhichMin Syntax | WhichMin | Teradata Vantage - TD_WhichMin Syntax - Analytics Database","90","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/TD_WhichMin-Syntax","","","","","","208118","12909","12909","4.576","A+","100","44","2.273","47.172","Hard","11.239","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.996","","","","","","1.1","## Summary

The `TD_WhichMin` function in Teradata Vantage is a useful analytic function that helps in determining the row number of the minimum value within a specified partition. This function is commonly used in analytics databases to facilitate data exploration and feature engineering. The function syntax allows you to specify the input table, the target column for which to find the minimum value, and options for partitioning the data.

## Code Example

### 1. SELECT

```sql
SELECT 
    TD_WhichMin(ON my_table AS InputTable USING TargetColumn('value_column')) AS min_row_number
FROM my_table;
```

### 2. UPDATE

```sql
UPDATE my_table
SET value_column = value_column + 10
WHERE TD_WhichMin(ON my_table AS InputTable USING TargetColumn('value_column')) = row_id;
```

### 3. DELETE

```sql
DELETE FROM my_table
WHERE row_id = TD_WhichMin(ON my_table AS InputTable USING TargetColumn('value_column'));
```

### 4. CREATE

```sql
CREATE TABLE new_table AS
(
    SELECT 
        *,
        TD_WhichMin(ON my_table AS InputTable USING TargetColumn('value_column')) AS min_row_number
    FROM my_table
) WITH DATA;
```

## Keywords and Phrases
- **TD_WhichMin Syntax**
- **WhichMin**
- **Teradata Vantage**
- **TD_WhichMin Syntax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This structured overview provides a clear understanding of how to utilize the `TD_WhichMin` function in various SQL operations within Teradata Vantage.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/TD_WhichMin-Syntax","2024-07-27 12:33:56"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect","text/html;charset=UTF-8","200","","Indexable","","Antiselect Function | Teradata Vantage - Antiselect - Analytics Database","72","641","This Analytics Database (SQL Engine) function returns all columns except those specified in the Exclude syntax element.","119","738","","0","Antiselect Function | Teradata Vantage - Antiselect - Analytics Database","72","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect","","","","","","209027","13077","13077","4.636","A+","87","42","2.071","16.084","Very Hard","11.171","1","4","","707","707","0","99.860","715","713","0","","","","","","","","","0.605","","","","","","1.1","### Summary

The **Antiselect function** in Teradata Vantage is designed to return all columns from a table except those specified in the `EXCLUDE` syntax element. This function is particularly useful when working with large datasets where you want to exclude only a few columns without having to specify all the others explicitly. It simplifies the process of data extraction and allows for more efficient querying.

### Code Examples

Below are examples of basic SQL operations including **Select**, **Update**, **Delete**, and **Create** statements, as well as an example of using the **Antiselect** function.

#### 1. Select
```sql
SELECT * FROM employees;
```

#### 2. Update
```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department = 'Sales';
```

#### 3. Delete
```sql
DELETE FROM employees
WHERE hire_date < '2020-01-01';
```

#### 4. Create
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    hire_date DATE,
    salary DECIMAL(10, 2),
    department VARCHAR(50)
);
```

#### 5. Antiselect
```sql
SELECT Antiselect(* EXCLUDE (salary, department)) FROM employees;
```

### Keywords and Phrases
- **Antiselect Function**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Analytics Database Release Number**
- **Analytics Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Antiselect Syntax**
- **Antiselect Input**
- **Antiselect Output**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Accumulated Columns Impact on Function Performance**
- **Input Table Rows Redistribution**
- **Displaying Online Help for Analytics Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Spool Space Exhaustion for Large Partitions** 

This guide provides a foundational understanding of how to use the Antiselect function alongside standard SQL operations in Teradata Vantage.","38","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect","2024-07-27 11:25:10"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Examples","text/html;charset=UTF-8","200","","Indexable","","Antiselect Function Example | Teradata Vantage - Antiselect Examples - Analytics Database","89","815","See examples of the Analytics Database (SQL Engine) function Antiselect that returns all columns but excludes the columns in the Exclude syntax element.","152","948","","0","Antiselect Function Example | Teradata Vantage - Antiselect Examples - Analytics Database","89","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Examples","","","","","","209220","13466","13466","4.774","A+","112","47","2.383","35.972","Hard","11.251","1","5","","707","707","0","99.860","713","710","0","","","","","","","","","0.593","","","","","","1.1","# Overview of Teradata Vantage Analytic Functions

Teradata Vantage™ offers powerful analytic functions that facilitate data processing and analysis in large-scale databases. Among these functions is the **Antiselect** function, which is crucial for data exploration and manipulation. This document serves as an introduction to some key SQL operations in Teradata, specifically focusing on the **Antiselect** function, along with fundamental SQL operations like **Select**, **Update**, **Delete**, and **Create**.

## SQL Operations

### Select
The `SELECT` statement is used to query data from a database. It allows you to specify exactly which data you want to retrieve.

**Example:**
```sql
SELECT first_name, last_name 
FROM employees 
WHERE department = 'Sales';
```

### Update
The `UPDATE` statement is used to modify existing records in a table.

**Example:**
```sql
UPDATE employees 
SET salary = salary * 1.10 
WHERE performance_rating = 'Excellent';
```

### Delete
The `DELETE` statement is used to remove records from a table.

**Example:**
```sql
DELETE FROM employees 
WHERE termination_date < '2022-01-01';
```

### Create
The `CREATE` statement is used to create a new table or database.

**Example:**
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

## Antiselect Function

The **Antiselect** function in Teradata is designed to exclude specified columns or ranges of columns from a dataset, making it an essential tool for data preparation and cleaning.

### Antiselect Example: No Column Ranges
To illustrate the use of the Antiselect function without specifying column ranges:

```sql
SELECT Antiselect(column1, column2, column3)
FROM my_table;
```

### Antiselect Example: Column Range
In this example, we specify a range of columns to exclude:

```sql
SELECT Antiselect(column1 TO column5)
FROM my_table;
```

## Summary
The Teradata Vantage™ platform provides a robust set of SQL functions to manage and analyze data effectively. The `SELECT`, `UPDATE`, `DELETE`, and `CREATE` commands form the backbone of SQL operations, while the `Antiselect` function allows for targeted data exclusion during analysis.

### Keywords and Phrases
- **Antiselect Function Example**
- **Teradata Vantage**
- **Antiselect Examples**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions** 

This document serves as a foundational resource for leveraging Teradata Vantage’s analytic capabilities effectively.","36","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Examples","2024-07-27 11:58:50"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Examples/Antiselect-Example-Column-Range","text/html;charset=UTF-8","200","","Indexable","","Antiselect Function Example | Teradata Vantage - Antiselect Example: Column Range - Analytics Database","102","945","See example of Analytics Database (SQL Engine) function Antiselect that uses column ranges.","91","579","","0","Antiselect Function Example | Teradata Vantage - Antiselect Example: Column Range - Analytics Database","102","Database Analytic Functions","27","Antiselect Input","16","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Examples/Antiselect-Example-Column-Range","","","","","","212643","13479","13479","4.778","A+","147","69","2.130","70.003","Fairly Easy","11.166","1","6","","707","707","0","99.860","711","709","0","","","","","","","","","0.553","","","","","","1.1","# Teradata Vantage: Overview of Common SQL Operations

Teradata Vantage provides powerful SQL capabilities for data manipulation and analysis. Below is a summary of essential SQL operations—`SELECT`, `UPDATE`, `DELETE`, and `CREATE`—that are commonly used when working with Teradata.

## Summary of SQL Operations

1. **SELECT**: Retrieves data from one or more tables.
2. **UPDATE**: Modifies existing records in a table.
3. **DELETE**: Removes records from a table based on specific conditions.
4. **CREATE**: Establishes new database objects, such as tables.

## Code Examples

### 1. SELECT

```sql
SELECT *
FROM customers
WHERE country = 'USA';
```

### 2. UPDATE

```sql
UPDATE customers
SET city = 'Los Angeles'
WHERE customer_id = 1001;
```

### 3. DELETE

```sql
DELETE FROM orders
WHERE order_date < '2023-01-01';
```

### 4. CREATE

```sql
CREATE TABLE sales (
    sale_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    quantity INT,
    price DECIMAL(10, 2)
);
```

## Keywords and Phrases

- **Antiselect Function Example**
- **Teradata Vantage - Antiselect Example: Column Range**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This overview provides foundational SQL operations and relevant terminology for users working with Teradata Vantage, especially in the context of analytics and data manipulation.","42","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Examples/Antiselect-Example-Column-Range","2024-07-27 12:12:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Examples/Antiselect-Example-No-Column-Ranges","text/html;charset=UTF-8","200","","Indexable","","Antiselect Function Example | Teradata Vantage - Antiselect Example: No Column Ranges - Analytics Database","106","985","See example of Analytics Database (SQL Engine) function Antiselect that uses no column ranges.","94","598","","0","Antiselect Function Example | Teradata Vantage - Antiselect Example: No Column Ranges - Analytics Database","106","Database Analytic Functions","27","Antiselect Input with No Column Ranges","38","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Examples/Antiselect-Example-No-Column-Ranges","","","","","","226026","14183","14183","5.028","A+","329","111","2.964","66.255","Normal","11.075","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.628","","","","","","1.1","## Summary of Teradata Vantage's Antiselect Function

The **Antiselect** function in Teradata Vantage allows users to exclude specified columns from a dataset, making it easier to focus on relevant data for analysis. This function is particularly useful when dealing with large tables with numerous columns, enabling users to streamline their queries and improve readability.

The syntax for the Antiselect function includes specifying the input table and the columns to exclude. The function can be utilized with or without column ranges, depending on the user's requirements.

### Code Examples

#### 1. Create Table

```sql
CREATE TABLE antiselect_test (
    sno INT,
    id INT,
    orderdate TIMESTAMP,
    priority VARCHAR(20),
    qty INT,
    sales DECIMAL(10,2),
    disct DECIMAL(5,2),
    dmode VARCHAR(20),
    custname VARCHAR(50),
    province VARCHAR(20),
    region VARCHAR(20),
    custsegment VARCHAR(20),
    prodcat VARCHAR(20)
);
```

#### 2. Insert Data

```sql
INSERT INTO antiselect_test (sno, id, orderdate, priority, qty, sales, disct, dmode, custname, province, region, custsegment, prodcat)
VALUES 
(1, 3, '2010-10-13 00:00:00', 'Low', 6, 261.54, 0.04, 'Regular Air', 'Muhammed MacIntyre', 'Nunavut', 'Nunavut', 'Small Business', 'Office Supplies'),
(49, 293, '2012-10-01 00:00:00', 'High', 49, 10123, 0.07, 'Delivery Truck', 'Barry French', 'Nunavut', 'Nunavut', 'Consumer', 'Office Supplies'),
(50, 293, '2012-10-01 00:00:00', 'High', 27, 244.57, 0.01, 'Regular Air', 'Barry French', 'Nunavut', 'Nunavut', 'Consumer', 'Office Supplies'),
(80, 483, '2011-07-10 00:00:00', 'High', 30, 4965.76, 0.08, 'Regular Air', 'Clay Rozendal', 'Nunavut', 'Nunavut', 'Corporate', 'Technology'),
(85, 515, '2010-08-28 00:00:00', 'Not specified', 19, 394.27, 0.08, 'Regular Air', 'Carlos Soltero', 'Nunavut', 'Nunavut', 'Consumer', 'Office Supplies'),
(86, 515, '2010-08-28 00:00:00', 'Not specified', 21, 146.69, 0.05, 'Regular Air', 'Carlos Soltero', 'Nunavut', 'Nunavut', 'Consumer', 'Furniture'),
(97, 613, '2011-06-17 00:00:00', 'High', 12, 93.54, 0.03, 'Regular Air', 'Carl Jackson', 'Nunavut', 'Nunavut', 'Corporate', 'Office Supplies');
```

#### 3. Select with Antiselect (No Column Ranges)

```sql
SELECT * FROM Antiselect (
    ON antiselect_test
    USING
    Exclude ('id', 'orderdate', 'disct', 'province', 'custsegment')
) AS dt ORDER BY 1, 4;
```

#### Output (AntiselectOutput with No Column Ranges)

```
sno | priority      | qty | sales         | dmode        | custname            | region  | prodcat       
----|---------------|-----|---------------|--------------|---------------------|---------|----------------
 1  | Low           |  6  | 261.54       | Regular Air  | Muhammed MacIntyre  | Nunavut | Office Supplies 
49  | High          | 49  | 10123.00     | Delivery Truck| Barry French        | Nunavut | Office Supplies 
50  | High          | 27  | 244.57       | Regular Air  | Barry French        | Nunavut | Office Supplies 
80  | High          | 30  | 4965.76      | Regular Air  | Clay Rozendal       | Nunavut | Technology      
85  | Not specified | 19  | 394.27       | Regular Air  | Carlos Soltero      | Nunavut | Office Supplies 
86  | Not specified | 21  | 146.69       | Regular Air  | Carlos Soltero      | Nunavut | Furniture       
97  | High          | 12  | 93.54        | Regular Air  | Carl Jackson        | Nunavut | Office Supplies 
```

### Keywords and Phrases

- Antiselect Function Example
- Teradata Vantage
- Antiselect Example: No Column Ranges
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Antiselect Input
- Antiselect Output
- Exclude Columns
- SQL Query Examples
- Data Manipulation Functions
- Function Syntax Descriptions
- Input Table Rows Redistribution
- Limitations When Using PARTITION BY
- Recommendations for Using Analytic Functions
- Input Table Schemas
- Example Outputs
- Data Exploration Functions
- Model Training Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions","41","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Examples/Antiselect-Example-No-Column-Ranges","2024-07-27 11:25:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Input","text/html;charset=UTF-8","200","","Indexable","","Antiselect Input - Analytics Database","37","327","The input table can have any schema.","36","233","","0","Antiselect Input - Analytics Database","37","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Input","","","","","","207224","12581","12581","4.460","A+","48","34","1.412","4.477","Very Hard","11.136","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.559","","","","","","1.1","# Summary of Teradata Vantage™ Analytics Database Functions

Teradata Vantage™ provides a comprehensive suite of analytic functions designed for data analysis, machine learning, and statistical processing. This includes functions for data cleaning, exploration, feature engineering, model training, and evaluation, as well as specific analytic functions for text analysis and hypothesis testing.

The following is a guide to common SQL operations (Select, Update, Delete, Create) along with examples relevant to the Analytics Database.

## Code Example

### 1. Select
```sql
SELECT 
    customer_id, 
    customer_name, 
    purchase_amount 
FROM 
    sales_data 
WHERE 
    purchase_date >= '2023-01-01';
```

### 2. Update
```sql
UPDATE 
    sales_data 
SET 
    purchase_amount = purchase_amount * 1.1 
WHERE 
    purchase_date >= '2023-01-01';
```

### 3. Delete
```sql
DELETE FROM 
    sales_data 
WHERE 
    purchase_date < '2022-01-01';
```

### 4. Create
```sql
CREATE TABLE sales_data (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    purchase_amount DECIMAL(10, 2),
    purchase_date DATE
);
```

## Keywords and Phrases
- Antiselect Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This guide serves as a starting point for understanding the core functionalities of Teradata Vantage™ Analytics Database. For more in-depth information, consult the official documentation or user guides.","29","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Input","2024-07-27 11:56:50"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Output","text/html;charset=UTF-8","200","","Indexable","","Antiselect Output - Analytics Database","38","343","The output table has all input table columns except those specified by the Exclude syntax element.","98","603","","0","Antiselect Output - Analytics Database","38","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Output","","","","","","207351","12649","12649","4.484","A+","57","35","1.629","13.719","Very Hard","11.159","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.513","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a comprehensive set of analytic functions designed to facilitate data exploration, feature engineering, model training, scoring, and evaluation. Users can leverage these functions for tasks such as data cleaning, hypothesis testing, and text analytics, among others. This guide outlines key SQL operations relevant to manipulating data within the analytics database, specifically focusing on the essential actions: select, update, delete, and create.

## Code Examples

### 1. SELECT

The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE active = 'Y';
```

### 2. UPDATE

The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE customers
SET last_name = 'Smith'
WHERE customer_id = 1234;
```

### 3. DELETE

The `DELETE` statement removes records from a table.

```sql
DELETE FROM customers
WHERE last_name = 'Doe';
```

### 4. CREATE

The `CREATE TABLE` statement creates a new table in the database.

```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100)
);
```

## Keywords and Phrases

- Antiselect Output
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions","29","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Output","2024-07-27 11:37:37"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Syntax","text/html;charset=UTF-8","200","","Indexable","","Antiselect Function Syntax | Teradata Vantage - Antiselect Syntax - Analytics Database","86","771","See the syntax of Analytics Database (SQL Engine) function Antiselect and read descriptions of its required and optional syntax elements.","137","846","","0","Antiselect Function Syntax | Teradata Vantage - Antiselect Syntax - Analytics Database","86","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Syntax","","","","","","208082","12888","12888","4.569","A+","92","44","2.091","41.030","Hard","11.220","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.827","","","","","","1.1","## Overview of Teradata Vantage - Antiselect Function

The `Antiselect` function in Teradata Vantage is designed to allow users to exclude specific columns from a dataset. This is particularly useful in data processing and analytics, where certain columns may not be needed for a particular operation or analysis. The `Antiselect` function can be used in various contexts, such as within `SELECT`, `CREATE TABLE`, and `CREATE VIEW` statements.

### Code Example Section

Below are examples demonstrating how to use the `Antiselect` function along with fundamental SQL operations such as `SELECT`, `UPDATE`, `DELETE`, and `CREATE`.

#### Select Example
To select all columns from a table while excluding certain columns, you can use:
```sql
SELECT *
FROM Antiselect (
    ON my_table
    USING Exclude ('unwanted_column1', 'unwanted_column2')
);
```

#### Update Example
While the `Antiselect` function is not directly used in update statements, you can create a temporary table without the excluded columns and then update based on that:
```sql
CREATE TABLE temp_table AS (
    SELECT *
    FROM Antiselect (
        ON my_table
        USING Exclude ('unwanted_column')
    )
) WITH NO DATA;

UPDATE temp_table
SET column_to_update = 'new_value'
WHERE condition;
```

#### Delete Example
Similar to updates, you can use `Antiselect` to create a filtered view and then perform deletions:
```sql
DELETE FROM my_table
WHERE id IN (
    SELECT id
    FROM Antiselect (
        ON my_table
        USING Exclude ('unwanted_column')
    )
    WHERE some_condition
);
```

#### Create Example
To create a new table excluding certain columns:
```sql
CREATE TABLE new_table AS (
    SELECT *
    FROM Antiselect (
        ON my_table
        USING Exclude ('unwanted_column1', 'unwanted_column2')
    )
) WITH NO DATA;
```

### Summary
The `Antiselect` function is a powerful tool in Teradata Vantage that allows users to exclude specific columns from their queries, enhancing data management and analysis capabilities. It can be effectively integrated into various SQL operations, making it a versatile addition to any data analyst's toolkit.

### Keywords and Phrases
- Antiselect Function Syntax
- Teradata Vantage
- Antiselect Syntax
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Workload Management
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Accumulated Columns Impact on Function Performance
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency

This structured approach to using the `Antiselect` function and understanding its context will help streamline data operations in Teradata Vantage.","34","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Syntax","2024-07-27 11:33:31"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","Antiselect Syntax Elements - Analytics Database","47","431","Exclude Specify the names of the input table columns to exclude from the output table. Column names must be valid object names, which are defined in Teradata Vantage™ - SQL Fundamentals, B035-1141. The exclude_column is a column name. This is the syntax of exclude_column_range: 'start_column:end_column' [, '-exclude_in...","323","2040","","0","Antiselect Syntax Elements - Analytics Database","47","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Syntax-Elements","","","","","","210202","13568","13568","4.810","A+","276","77","3.584","57.599","Fairly Hard","11.682","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.557","","","","","","1.1","## Summary

The Analytics Database in Teradata Vantage™ provides a robust set of analytic functions that facilitate advanced data manipulation, exploration, and modeling. This document outlines key operations such as selecting, updating, deleting, and creating data within the context of the Analytics Database. Understanding these operations is essential for leveraging the full capabilities of Teradata Vantage™.

### Code Example

#### 1. Select
The SELECT statement retrieves data from a database table.
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

#### 2. Update
The UPDATE statement modifies existing records in a table.
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 3. Delete
The DELETE statement removes records from a table.
```sql
DELETE FROM table_name
WHERE condition;
```

#### 4. Create
The CREATE statement creates a new table in the database.
```sql
CREATE TABLE new_table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Keywords and Phrases

- **Antiselect Syntax Elements**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Workload Management Configuration**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This guide serves as a foundational reference for working with the Analytics Database and its analytic functions, empowering users to effectively manage and analyze their data.","29","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Syntax-Elements","2024-07-27 12:48:13"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit","text/html;charset=UTF-8","200","","Indexable","","TD_BinCodeFit Function | BinCodeFit | Teradata Vantage - TD_BinCodeFit - Analytics Database","91","835","This Analytics Database (SQL Engine) feature engineering transform function outputs a table of information to input to TD_BinCodeTransform.","139","881","","0","TD_BinCodeFit Function | BinCodeFit | Teradata Vantage - TD_BinCodeFit - Analytics Database","91","Database Analytic Functions","27","Equal-width Bin Coding","22","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit","","","","","","214558","14763","14763","5.234","A+","822","146","5.630","81.322","Easy","12.794","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.809","","","","","","1.1","### Summary of TD_BinCodeFit Function

The `TD_BinCodeFit` function is part of the Teradata Vantage™ analytics database, specifically designed for binning continuous data into discrete categories. This process, known as bin coding or bucketing, simplifies complex data and enhances analysis by grouping similar values. Binning can help reduce noise, identify trends, and make data more manageable for statistical analysis and machine learning models. 

The function supports various binning methodologies, including equal-width binning, equal-frequency binning, and manual binning, allowing users to tailor the approach to their specific data needs.

### Code Examples

Here are basic SQL examples demonstrating the `SELECT`, `INSERT`, `UPDATE`, and `DELETE` operations in Teradata alongside the usage of the `TD_BinCodeFit` function.

#### 1. Create a Table

```sql
CREATE TABLE SalesData (
    SalesID INT,
    Amount DECIMAL(10, 2),
    Region VARCHAR(50)
);
```

#### 2. Insert Data

```sql
INSERT INTO SalesData (SalesID, Amount, Region) VALUES
(1, 150.00, 'North'),
(2, 250.00, 'South'),
(3, 350.00, 'East'),
(4, 450.00, 'West'),
(5, 550.00, 'North');
```

#### 3. Select Data

```sql
SELECT * FROM SalesData;
```

#### 4. Update Data

```sql
UPDATE SalesData
SET Amount = Amount * 1.10
WHERE Region = 'North';
```

#### 5. Delete Data

```sql
DELETE FROM SalesData
WHERE SalesID = 2;
```

#### 6. Using TD_BinCodeFit

```sql
SELECT TD_BinCodeFit(Amount, 5) AS BinnedAmount
FROM SalesData;
```

This example demonstrates how to apply the `TD_BinCodeFit` function to the `Amount` column in the `SalesData` table, binning the amounts into 5 intervals.

### Keywords and Phrases

- TD_BinCodeFit Function
- BinCodeFit
- Teradata Vantage
- TD_BinCodeFit
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Equal-width binning
- Equal-frequency binning
- Manual binning
- Binning Techniques
- Reduce noise
- Identify trends
- Simplify complex data
- Bin width calculation
- Bin assignments","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit","2024-07-27 12:35:07"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/Example-How-To-Use-TD_BinCodeFit","text/html;charset=UTF-8","200","","Indexable","","TD_BinCodeFit Example | BinCodeFit | Teradata Vantage - Example: How To Use TD_BinCodeFit - Analytics Database","110","1034","See an example of the Analytics Database (SQL Engine) feature engineering transform function TD_BinCodeFit.","107","684","","0","TD_BinCodeFit Example | BinCodeFit | Teradata Vantage - Example: How To Use TD_BinCodeFit - Analytics Database","110","Database Analytic Functions","27","TD_BinCodeFit InputTable: bin_titanic_train","43","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/Example-How-To-Use-TD_BinCodeFit","","","","","","212231","14256","14256","5.054","A+","372","118","3.153","71.959","Fairly Easy","12.362","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.449","","","","","","1.1","## Summary

The `TD_BinCodeFit` function in Teradata Vantage is used for binning continuous data into discrete categories based on specified ranges. This is especially useful in analytics and predictive modeling where dividing data into bins can enhance the interpretability of results and improve model performance. The function allows users to define bins through a separate input table that specifies the minimum and maximum values for each bin, along with their corresponding labels.

## Code Examples

### 1. Create Table
To create tables for input and output:

```sql
CREATE TABLE bin_titanic_train (
    passenger INT,
    survived INT,
    pclass INT,
    name VARCHAR(100),
    gender VARCHAR(10),
    age FLOAT,
    sibsp INT,
    parch INT,
    ticket VARCHAR(20),
    fare FLOAT,
    cabin VARCHAR(10),
    embarked CHAR(1)
);

CREATE TABLE FitInputTable (
    ColumnName VARCHAR(50),
    MinValue FLOAT,
    MaxValue FLOAT,
    Label VARCHAR(50)
);
```

### 2. Insert Data
Insert sample data into the `FitInputTable`:

```sql
INSERT INTO FitInputTable (ColumnName, MinValue, MaxValue, Label) VALUES
('age', 0.00, 20.00, 'Young Age'),
('age', 21.00, 45.00, 'Middle Age'),
('age', 46.00, 90.00, 'Old Age');
```

### 3. Select
Select the data from the `FitInputTable` to verify the inserted values:

```sql
SELECT * FROM FitInputTable;
```

### 4. TD_BinCodeFit Example
Using `TD_BinCodeFit` to categorize ages in the `bin_titanic_train` table:

```sql
CREATE TABLE FitOutputTable AS (
    SELECT * FROM TD_BinCodeFit (
        ON bin_titanic_train AS InputTable
        ON FitInputTable AS FitInput DIMENSION
        USING
        TargetColumns ('age')
        MethodType ('Variable-Width')
        MinValueColumn ('MinValue')
        MaxValueColumn ('MaxValue')
        LabelColumn ('Label')
        TargetColNames ('ColumnName')
    ) AS dt
) WITH DATA;
```

### 5. Update
To update any values in the `FitInputTable`, you could use:

```sql
UPDATE FitInputTable
SET Label = 'Senior' 
WHERE ColumnName = 'age' AND MinValue = 46.00;
```

### 6. Delete
To delete a specific row from `FitInputTable`:

```sql
DELETE FROM FitInputTable
WHERE ColumnName = 'age' AND MinValue = 0.00 AND MaxValue = 20.00;
```

### 7. Output Verification
Finally, check the output of the binning:

```sql
SELECT * FROM FitOutputTable;
```

## Keywords and Phrases
- **TD_BinCodeFit Example**
- **BinCodeFit**
- **Teradata Vantage**
- **How To Use TD_BinCodeFit**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Function Names with and without TD Prefix**
- **Workload Management Configuration**
- **Data Exploration Functions**","27","1","3","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/Example-How-To-Use-TD_BinCodeFit","2024-07-27 12:29:15"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/Optional-Syntax-Elements-for-TD_BinCodeFit","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_BinCodeFit - Analytics Database","63","582","OUT clause Accept the OutputTable clause for equal-width bins with generated labels. OutputTable [MethodType ('equal-width') only.] Specify a name for the secondary output table which contains the actual bins used by the TD_BinCodeTransform function. LabelPrefix [MethodType ('equal-width') only.] Specify either a prefi...","323","2002","","0","Optional Syntax Elements for TD_BinCodeFit - Analytics Database","63","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/Optional-Syntax-Elements-for-TD_BinCodeFit","","","","","","212960","13780","13780","4.885","A+","239","74","3.230","49.224","Hard","11.457","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.562","","","","","","1.1","## Summary
The **TD_BinCodeFit** function is part of the Teradata Vantage™ Analytics Database, designed to facilitate the binning of numerical data into discrete intervals or categories. This process is often essential for data preprocessing, particularly in machine learning and statistical analysis. The function can create bins of equal width or variable width based on specified parameters, making it flexible for different data distributions and analysis needs.

### Code Examples
Below are examples of various SQL commands that demonstrate the use of `Select`, `Update`, `Delete`, and `Create` statements in the context of the Teradata Vantage database.

#### 1. Create
To create a new table to store binned data:
```sql
CREATE TABLE BinnedData (
    ID INT,
    BinLabel VARCHAR(50),
    BinMinValue DECIMAL(10, 2),
    BinMaxValue DECIMAL(10, 2)
);
```

#### 2. Insert
To insert some sample data into a newly created table:
```sql
INSERT INTO BinnedData (ID, BinLabel, BinMinValue, BinMaxValue) VALUES
(1, 'Bin1', 0.00, 10.00),
(2, 'Bin2', 10.01, 20.00),
(3, 'Bin3', 20.01, 30.00);
```

#### 3. Select
To retrieve data from the binned table:
```sql
SELECT * FROM BinnedData WHERE BinMinValue >= 10.00;
```

#### 4. Update
To update a bin's label based on its ID:
```sql
UPDATE BinnedData
SET BinLabel = 'UpdatedBin'
WHERE ID = 2;
```

#### 5. Delete
To delete a specific bin from the table:
```sql
DELETE FROM BinnedData WHERE ID = 3;
```

## Keywords and Phrases
- TD_BinCodeFit
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- Recommendations for Using Analytic Functions
- OutputTable
- LabelPrefix
- MinValueColumn
- MaxValueColumn
- LabelColumn
- TargetColNames","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/Optional-Syntax-Elements-for-TD_BinCodeFit","2024-07-27 12:34:50"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/Required-Syntax-Elements-for-TD_BinCodeFit","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_BinCodeFit - Analytics Database","63","586","ON clause Accept the InputTable clause for equal-width bins with generated labels. Accept the InputTable and FitInput clauses for variable-width bins with specified labels. TargetColumns Specify the names of the InputTable columns to bin-code. The maximum number of target columns is 2018. MethodType Specify the bin-cod...","323","2026","","0","Required Syntax Elements for TD_BinCodeFit - Analytics Database","63","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/Required-Syntax-Elements-for-TD_BinCodeFit","","","","","","210090","13497","13497","4.785","A+","182","57","3.193","48.339","Hard","11.404","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.677","","","","","","1.1","### Summary
The Teradata Vantage™ Analytics Database provides a rich set of analytic functions and features for data manipulation and processing. These functions allow users to effectively analyze, train models, and evaluate data with various statistical methods. This section covers the basic SQL commands—Select, Update, Delete, and Create—along with examples specific to the context of the Analytics Database.

### Code Example

#### 1. **Select**
The `SELECT` statement is used to retrieve data from a database.

```sql
SELECT column1, column2 
FROM your_table 
WHERE condition;
```
**Example:**
```sql
SELECT customer_id, order_total 
FROM orders 
WHERE order_date >= '2024-01-01';
```

#### 2. **Update**
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE your_table 
SET column1 = value1, column2 = value2 
WHERE condition;
```
**Example:**
```sql
UPDATE customers 
SET loyalty_points = loyalty_points + 100 
WHERE customer_id = 123;
```

#### 3. **Delete**
The `DELETE` statement removes existing records from a table.

```sql
DELETE FROM your_table 
WHERE condition;
```
**Example:**
```sql
DELETE FROM orders 
WHERE order_date < '2023-01-01';
```

#### 4. **Create**
The `CREATE` statement is used to create a new table.

```sql
CREATE TABLE your_table (
    column1 datatype,
    column2 datatype,
    ...
);
```
**Example:**
```sql
CREATE TABLE customer_feedback (
    feedback_id INT PRIMARY KEY,
    customer_id INT,
    feedback_text VARCHAR(255),
    feedback_date DATE
);
```

### Keywords and Phrases
- **Required Syntax Elements for TD_BinCodeFit**
- **Analytics Database**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions** 
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Non-Deterministic Behavior**
- **Example: Using TD_GetRowsWithMissingValues to Find NULL Values**
- **Example: How to Use TD_BinCodeTransform**
- **Example: How to Use TD_OneHotEncodingFit**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/Required-Syntax-Elements-for-TD_BinCodeFit","2024-07-27 11:38:11"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/TD_BinCodeFit-Input","text/html;charset=UTF-8","200","","Indexable","","TD_BinCodeFit Input - Analytics Database","40","368","InputTable Schema Column Data Type Description target_column BYTEINT,SMALLINT,INTEGER,BIGINT, DECIMAL/NUMERIC, FLOAT, REAL, DOUBLE PRECISION Column to bin-code. FitTable Schema Required with specify MethodType ('variable-width'), ignored otherwise. Column Data Type Description target_names_column CHAR, VARCHAR (CHARACT...","323","2192","","0","TD_BinCodeFit Input - Analytics Database","40","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/TD_BinCodeFit-Input","","","","","","211159","13363","13363","4.737","A+","115","50","2.300","0.000","Very Hard","11.234","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.659","","","","","","1.1","## Summary
The Teradata Vantage™ Analytics Database includes a suite of analytic functions designed to facilitate data manipulation and analysis. These functions cater to a variety of tasks such as data cleaning, feature engineering, model training, and scoring, supporting both statistical analyses and machine learning applications. The database is structured to handle large datasets efficiently and includes several functions specifically for hypothesis testing, text analytics, and path analysis. 

This guide provides a concise overview of basic SQL operations, including examples of `SELECT`, `UPDATE`, `DELETE`, and `CREATE` statements, which are foundational for interacting with any database, including Teradata Vantage.

## Code Example

### 1. SELECT
The `SELECT` statement is used to query data from a database.

```sql
SELECT target_column, minvalue_column, maxvalue_column
FROM FitTable
WHERE target_column IS NOT NULL;
```

### 2. UPDATE
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE FitTable
SET label_column = 'New Label'
WHERE target_names_column = 'Old Label';
```

### 3. DELETE
The `DELETE` statement removes records from a table.

```sql
DELETE FROM FitTable
WHERE minvalue_column < 0;
```

### 4. CREATE
The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE FitTable (
    target_names_column CHAR(50),
    minvalue_column DECIMAL(10,2),
    maxvalue_column DECIMAL(10,2),
    label_column CHAR(50)
);
```

## Keywords and Phrases
- TD_BinCodeFit Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_OutlierFilterTransform
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- Unpack
- Data Exploration Functions
- MovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- Feature Engineering Transform Functions
- Antiselect
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer
- TD_FunctionFit
- TD_FunctionTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_PolynomialFeaturesFit
- TD_PolynomialFeaturesTransform
- TD_RandomProjectionFit
- TD_RandomProjectionTransform
- TD_RowNormalizeFit
- TD_RowNormalizeTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_Unpivoting
- Feature Engineering Utility Functions
- TD_FillRowID
- TD_NumApply
- TD_RoundColumns
- TD_StrApply
- Model Training Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_KNN
- TD_OneClassSVM
- TD_SVM
- TD_VectorDistance
- TD_XGBoost
- Model Scoring Functions
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_OneClassSVMPredict
- TD_SVMPredict
- TD_XGBoostPredict
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- Text Analytic Functions
- NGramSplitter
- TD_NaiveBayesTextClassifierPredict
- TD_NaiveBayesTextClassifierTrainer
- TD_SentimentExtractor
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Testing Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Path and Pattern Analysis Functions
- Attribution
- nPath
- Sessionize
- InputTable Schema
- FitTable Schema

This comprehensive overview serves as a starting point for utilizing Teradata Vantage™ for advanced analytics and database management.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/TD_BinCodeFit-Input","2024-07-27 12:47:37"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/TD_BinCodeFit-Output","text/html;charset=UTF-8","200","","Indexable","","TD_BinCodeFit Output - Analytics Database","41","384","Output Table Schema Column Data Type Description TD_ColumnName_BINFIT VARCHAR (CHARACTER SET UNICODE) Bin column name. TD_MinValue_BINFIT DOUBLE PRECISION Minimum value of the bin. TD_MaxValue_BINFIT DOUBLE PRECISION Maximum value of the bin. TD_LabelPrefix_BINFIT VARCHAR (CHARACTER SET UNICODE) [Column appears only wi...","323","2266","","0","TD_BinCodeFit Output - Analytics Database","41","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/TD_BinCodeFit-Output","","","","","","213900","13495","13495","4.784","A+","179","64","2.797","14.946","Very Hard","11.283","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.597","","","","","","1.1","## Summary

This document provides an overview of various analytic functions available in Teradata Vantage™ Analytics Database, specifically focusing on data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analytics. The functions are designed to facilitate data manipulation and analysis, enabling users to derive insights from data efficiently. These functions cover a wide range of tasks such as cleaning data, transforming features, training models, and evaluating performance.

### Code Example

Here are examples of basic SQL operations (Select, Update, Delete, Create) that can be performed in the context of the Teradata Vantage database.

#### Select
```sql
SELECT 
    TD_ColumnName_BINFIT, TD_MinValue_BINFIT, TD_MaxValue_BINFIT 
FROM 
    your_table_name 
WHERE 
    TD_Bins_BINFIT > 5;
```

#### Update
```sql
UPDATE 
    your_table_name 
SET 
    TD_MaxValue_BINFIT = TD_MaxValue_BINFIT + 10 
WHERE 
    TD_Bins_BINFIT < 3;
```

#### Delete
```sql
DELETE FROM 
    your_table_name 
WHERE 
    TD_MinValue_BINFIT IS NULL;
```

#### Create
```sql
CREATE TABLE your_new_table AS 
(
    SELECT 
        TD_ColumnName_BINFIT, TD_MinValue_BINFIT, TD_MaxValue_BINFIT 
    FROM 
        your_table_name 
) WITH NO DATA;
```

### Keywords and Phrases
- TD_BinCodeFit Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Recommendations for Using Analytic Functions
- Examples: How to Use Functions
- Output Table Schema
- Column Data Types
- Secondary Output Table
- Function Syntax Descriptions
- Usage Notes
- Limitations When Using PARTITION BY
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table

This summary, examples, and keywords serve as a quick reference for users looking to understand and utilize the capabilities of the Teradata Vantage Analytics Database effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/TD_BinCodeFit-Output","2024-07-27 12:41:23"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/TD_BinCodeFit-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_BinCodeFit Syntax | BinCodeFit | Teradata Vantage - TD_BinCodeFit Syntax - Analytics Database","96","883","See the syntax of the Analytics Database (SQL Engine) function TD_BinCodeFit and read descriptions of its required and optional syntax elements.","144","899","","0","TD_BinCodeFit Syntax | BinCodeFit | Teradata Vantage - TD_BinCodeFit Syntax - Analytics Database","96","Database Analytic Functions","27","For Equal-Width Bins with Generated Labels","42","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/TD_BinCodeFit-Syntax","","","","","","209737","13170","13170","4.669","A+","177","62","2.855","37.127","Hard","11.499","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.510","","","","","","1.1","### Summary
TD_BinCodeFit is a function in Teradata Vantage that is used for binning continuous variables into discrete intervals. This function is particularly useful in data preprocessing and feature engineering, especially for model training and analysis. It supports both equal-width and variable-width binning methods, allowing for flexibility in how data is categorized.

### Code Examples

#### 1. SELECT
To use the `TD_BinCodeFit` function within a SELECT statement, you can call it directly on your input data:

```sql
SELECT *
FROM TD_BinCodeFit (
  ON my_table AS InputTable
  USING
  TargetColumns ('age')
  MethodType ('equal-width')
  NBins ('5')
) AS BinnedData;
```

#### 2. UPDATE
While `TD_BinCodeFit` does not directly support an UPDATE statement, you can apply binning first and then use the results to update another table.

```sql
UPDATE my_table
FROM (
  SELECT *
  FROM TD_BinCodeFit (
    ON my_table AS InputTable
    USING
    TargetColumns ('age')
    MethodType ('equal-width')
    NBins ('5')
  ) AS BinnedData
) AS Temp
SET my_table.age_bin = Temp.age_bin
WHERE my_table.id = Temp.id;
```

#### 3. DELETE
You can use the results from `TD_BinCodeFit` to filter out records from a table. Here's how you might delete records based on binning:

```sql
DELETE FROM my_table
WHERE age NOT IN (
  SELECT DISTINCT age
  FROM TD_BinCodeFit (
    ON my_table AS InputTable
    USING
    TargetColumns ('age')
    MethodType ('equal-width')
    NBins ('5')
  ) AS BinnedData
);
```

#### 4. CREATE
You can create a new table based on the binned results:

```sql
CREATE TABLE Binned_Age AS
(
  SELECT *
  FROM TD_BinCodeFit (
    ON my_table AS InputTable
    USING
    TargetColumns ('age')
    MethodType ('equal-width')
    NBins ('5')
  )
) WITH NO DATA;
```

### Keywords and Phrases
- **TD_BinCodeFit Syntax**
- **BinCodeFit**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Data Cleaning Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Recommendations for Using Analytic Functions**
- **Function Syntax Descriptions**
- **AMP Configuration Impact**
- **Function Names with and without TD Prefix**
- **Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/TD_BinCodeFit-Syntax","2024-07-27 11:53:24"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform","text/html;charset=UTF-8","200","","Indexable","","TD_BinCodeTransform Function | BinCodeTransform - TD_BinCodeTransform - Analytics Database","90","872","This Analytics Database (SQL Engine) feature engineering transform function bin-codes input table columns.","106","669","","0","TD_BinCodeTransform Function | BinCodeTransform - TD_BinCodeTransform - Analytics Database","90","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform","","","","","","210884","13505","13505","4.788","A+","205","63","3.254","30.618","Hard","11.472","1","4","","707","707","0","99.860","719","716","0","","","","","","","","","1.044","","","","","","1.1","## Summary

The **TD_BinCodeTransform** function in Teradata is an essential tool for transforming continuous numerical data into categorical data by binning it into defined intervals. This process not only simplifies the data but also enhances its usability for analysis and modeling. The function works in tandem with **TD_BinCodeFit**, which prepares the necessary information for the binning process.

### Code Examples

Below are SQL examples demonstrating how to use basic SQL operations (Select, Update, Delete, Create) relevant to data manipulation in Teradata. 

#### Select
```sql
SELECT column1, column2
FROM your_table
WHERE condition;
```

#### Update
```sql
UPDATE your_table
SET column1 = value1, column2 = value2
WHERE condition;
```

#### Delete
```sql
DELETE FROM your_table
WHERE condition;
```

#### Create
```sql
CREATE TABLE your_table (
    column1 datatype,
    column2 datatype,
    ...
);
```

### TD_BinCodeTransform Example
```sql
-- Assume we have a table named 'sales_data' with a column 'sale_amount'
-- We want to bin the 'sale_amount' into categories.

-- Step 1: Fit the binning model
CALL TD_BinCodeFit('sales_data', 'sale_amount', 'output_model');

-- Step 2: Transform the data using the fitted model
CALL TD_BinCodeTransform('sales_data', 'output_model', 'binned_sales_data');
```

### Keywords and Phrases
- **TD_BinCodeTransform Function**
- **BinCodeTransform**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Maximum Number of Columns in a Database Table**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Non-Deterministic Behavior**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This summary encapsulates the essentials of the **TD_BinCodeTransform** function and provides operational examples for basic SQL commands relevant in a Teradata context.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform","2024-07-27 12:02:36"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/Example-How-to-Use-TD_BinCodeTransform","text/html;charset=UTF-8","200","","Indexable","","TD_BinCodeTransform Example | BinCodeTransform - Example: How to Use TD_BinCodeTransform - Analytics Database","109","1066","See an example of the Analytics Database (SQL Engine) feature engineering transform function TD_BinCodeTransform.","113","734","","0","TD_BinCodeTransform Example | BinCodeTransform - Example: How to Use TD_BinCodeTransform - Analytics Database","109","Database Analytic Functions","27","TD_BinCodeTransform SQL Call","28","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/Example-How-to-Use-TD_BinCodeTransform","","","","","","208851","13033","13033","4.620","A+","112","56","2.000","28.807","Very Hard","11.311","1","5","","707","707","0","99.860","712","709","0","","","","","","","","","0.579","","","","","","1.1","## Summary

This document provides an overview of the TD_BinCodeTransform function in Teradata Vantage™, particularly focusing on its use in the Analytics Database. The function is designed to transform input data based on predefined binning criteria, which can be particularly useful in data analytics and machine learning contexts. The examples illustrate how to utilize the TD_BinCodeTransform function effectively, demonstrating its syntax and providing practical SQL calls.

## Code Example

### 1. Select
To retrieve data using the TD_BinCodeTransform function, you can use the following SQL code:

```sql
SELECT * FROM TD_BinCodeTransform (
  ON bin_titanic_train AS InputTable
  ON FitOutputTable AS FitTable DIMENSION
  USING
  Accumulate ('passenger')
) AS dt;
```

### 2. Update
Updating records in Teradata typically involves using the `UPDATE` statement. Here’s a hypothetical example (note that TD_BinCodeTransform is not directly used in updates):

```sql
UPDATE bin_titanic_train
SET age_group = 'Middle Age'
WHERE passenger_id = 123;
```

### 3. Delete
To delete specific records from a table, you can use the following SQL statement:

```sql
DELETE FROM bin_titanic_train
WHERE age_group = 'Old Age' AND passenger_id = 456;
```

### 4. Create
Creating a new table based on transformed data can be accomplished with a `CREATE TABLE AS` statement:

```sql
CREATE TABLE transformed_titanic_data AS (
  SELECT * FROM TD_BinCodeTransform (
    ON bin_titanic_train AS InputTable
    ON FitOutputTable AS FitTable DIMENSION
    USING
    Accumulate ('passenger')
  )
) WITH NO DATA;
```

## Keywords and Phrases

- **TD_BinCodeTransform Example**
- **BinCodeTransform - Example: How to Use**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Data Exploration Functions**
- **TD_BinCodeFit**
- **TD_BinCodeTransform Syntax**
- **Input Table Rows Redistribution**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Usage Notes for Analytics Functions**
- **Example: How to Use TD_BinCodeTransform**
- **FitTable**
- **InputTable**
- **Accumulate Function**
- **SQL Call Examples**
- **Analytics Database Release Number 17.20** 
- **Published June 2022**
- **Last Update April 2024** 

This structured approach to the TD_BinCodeTransform function ensures that users can effectively understand and apply it in their data analysis workflows within Teradata environments.","26","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/Example-How-to-Use-TD_BinCodeTransform","2024-07-27 11:30:50"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/Optional-Syntax-Elements-for-TD_BinCodeTransform","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_BinCodeTransform - Analytics Database","69","653","Accumulate Names of InputTable columns to copy to the output table.","67","434","","0","Optional Syntax Elements for TD_BinCodeTransform - Analytics Database","69","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/Optional-Syntax-Elements-for-TD_BinCodeTransform","","","","","","207455","12659","12659","4.488","A+","55","35","1.571","0.662","Very Hard","11.154","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.687","","","","","","1.1","## Summary
The Teradata Vantage™ Analytics Database provides a range of robust analytic functions designed to facilitate data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This document focuses on the different SQL commands used for managing data in the database, including `SELECT`, `INSERT`, `UPDATE`, and `DELETE`. Additionally, we will cover the `CREATE` command to establish new tables and their structures.

## Code Examples

### 1. SELECT
The `SELECT` statement is used to query data from the database.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

**Example:**
```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

### 2. INSERT
The `INSERT` statement is used to add new records to a table.

```sql
INSERT INTO table_name (column1, column2)
VALUES (value1, value2);
```

**Example:**
```sql
INSERT INTO employees (first_name, last_name, department)
VALUES ('John', 'Doe', 'Marketing');
```

### 3. UPDATE
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example:**
```sql
UPDATE employees
SET department = 'HR'
WHERE last_name = 'Doe';
```

### 4. DELETE
The `DELETE` statement removes records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

**Example:**
```sql
DELETE FROM employees
WHERE last_name = 'Doe';
```

### 5. CREATE
The `CREATE` statement is used to create a new table.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example:**
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50)
);
```

## Keywords and Phrases
- Optional Syntax Elements for TD_BinCodeTransform
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- English (United States)
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Recommendations for Using Analytic Functions
- Workload Management Configuration
- Non-Deterministic Behavior
- Maximum Number of Columns
- Spool Space Exhaustion
- Deadlocks Using Volatile Tables
- Function Names with TD Prefix

This guide serves as a reference for SQL operations within the Teradata Vantage™ Analytics Database, focusing on fundamental commands essential for data management.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/Optional-Syntax-Elements-for-TD_BinCodeTransform","2024-07-27 12:33:13"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/Required-Syntax-Elements-for-TD_BinCodeTransform","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_BinCodeTransform - Analytics Database","69","657","ON clause Accepts the InputTable and FitTable ON clauses.","57","366","","0","Required Syntax Elements for TD_BinCodeTransform - Analytics Database","69","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/Required-Syntax-Elements-for-TD_BinCodeTransform","","","","","","207434","12629","12629","4.477","A+","53","35","1.514","4.173","Very Hard","11.150","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.718","","","","","","1.1","## Summary

This document provides an overview of the **Teradata Vantage™** Analytics Database, focusing on its various analytic functions, syntax requirements, and practical examples. Key functions include data cleaning, exploration, feature engineering, model training, scoring, and evaluation. The document also outlines the structure and usage of the **TD_BinCodeTransform** function, among others, emphasizing the necessary syntax elements and examples for effective application.

## Code Examples

### Create
To create a new table in Teradata using the SQL `CREATE` statement:

```sql
CREATE TABLE sales_data (
    sale_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    sale_date DATE,
    amount DECIMAL(10, 2)
);
```

### Select
To select data from a table:

```sql
SELECT product_name, amount
FROM sales_data
WHERE sale_date >= '2023-01-01';
```

### Update
To update existing records in a table:

```sql
UPDATE sales_data
SET amount = amount * 1.1
WHERE sale_date < '2023-01-01';
```

### Delete
To delete records from a table:

```sql
DELETE FROM sales_data
WHERE sale_date < '2022-01-01';
```

### Example: TD_BinCodeTransform

The `TD_BinCodeTransform` function is used for transforming data into bins based on specified criteria.

```sql
SELECT TD_BinCodeTransform(
    input_column,
    bin_definition
) AS binned_output
FROM input_table;
```

### Example: Using TD_BinCodeTransform
```sql
SELECT TD_BinCodeTransform(
    amount,
    'BIN(0, 100, 200, 300, 400)'
) AS binned_sales
FROM sales_data;
```

## Keywords and Phrases
- **Required Syntax Elements for TD_BinCodeTransform**
- **Analytics Database**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Input Table Schemas**
- **Accumulated Columns Impact on Function Performance**
- **Datatypes and Column Transformations**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/Required-Syntax-Elements-for-TD_BinCodeTransform","2024-07-27 12:10:44"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/TD_BinCodeTransform-Input","text/html;charset=UTF-8","200","","Indexable","","TD_BinCodeTransform Input - Analytics Database","46","439","InputTable Schema See TD_BinCodeFit Input. FitTable Schema See TD_BinCodeFit Output.","84","555","","0","TD_BinCodeTransform Input - Analytics Database","46","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/TD_BinCodeTransform-Input","","","","","","207822","12720","12720","4.509","A+","51","37","1.378","0.000","Very Hard","11.131","1","5","","707","707","0","99.860","712","710","0","","","","","","","","","1.122","","","","","","1.1","# Overview of Teradata Vantage™ Analytics Database Functions

Teradata Vantage™ provides a robust set of analytic functions designed for data manipulation, cleaning, exploration, and modeling. Below, we summarize key functionalities such as data selection, updating, deletion, and creation, along with examples of their usage.

## Code Example

### 1. **Select**
To retrieve data from a table, the `SELECT` statement is utilized.

```sql
SELECT customer_id, order_amount
FROM orders
WHERE order_date >= '2023-01-01';
```

### 2. **Update**
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE customers
SET loyalty_points = loyalty_points + 100
WHERE customer_id = 12345;
```

### 3. **Delete**
To remove records from a table, the `DELETE` statement is used.

```sql
DELETE FROM orders
WHERE order_status = 'Cancelled';
```

### 4. **Create**
The `CREATE TABLE` statement is used to create a new table in the database.

```sql
CREATE TABLE sales_summary (
    sales_id INT PRIMARY KEY,
    total_sales DECIMAL(10, 2),
    sales_date DATE
);
```

## Keywords and Phrases

- **TD_BinCodeTransform Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This summary encapsulates key functionalities and examples relevant to managing and manipulating data within the Teradata Vantage™ Analytics Database, facilitating a comprehensive understanding for users engaging with the platform.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/TD_BinCodeTransform-Input","2024-07-27 12:17:02"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/TD_BinCodeTransform-Output","text/html;charset=UTF-8","200","","Indexable","","TD_BinCodeTransform Output - Analytics Database","47","455","Output Table Schema Column Data Type Description accumulate_column Same as in InputTable. Column copied from InputTable. target_column VARCHAR (CHARACTER SET UNICODE) [Column appears once for each specified target_column.] Bin labels.","234","1561","","0","TD_BinCodeTransform Output - Analytics Database","47","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/TD_BinCodeTransform-Output","","","","","","209062","13114","13114","4.649","A+","71","41","1.732","1.322","Very Hard","11.137","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.539","","","","","","1.1","# Overview of Teradata Vantage™ Analytics Database Functions

Teradata Vantage™ offers a comprehensive suite of analytic functions designed for advanced data analytics, data cleaning, and feature engineering. The functionalities are categorized into several sections, each targeting specific tasks such as model training, scoring, and evaluation. This guide focuses on basic SQL operations: SELECT, UPDATE, DELETE, and CREATE, and provides examples of each.

## SQL Operations

### 1. SELECT
The SELECT statement retrieves data from one or more tables.

**Example:**
```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE status = 'active';
```

### 2. UPDATE
The UPDATE statement modifies existing records in a table.

**Example:**
```sql
UPDATE customers
SET status = 'inactive'
WHERE last_purchase_date < '2023-01-01';
```

### 3. DELETE
The DELETE statement removes records from a table.

**Example:**
```sql
DELETE FROM customers
WHERE status = 'inactive' AND last_purchase_date < '2022-01-01';
```

### 4. CREATE
The CREATE statement creates a new table in the database.

**Example:**
```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    registration_date DATE
);
```

## Summary

Teradata Vantage™ provides an extensive range of analytic functions that support complex data operations like model training and evaluation, along with essential SQL capabilities for managing data. The examples above demonstrate fundamental SQL operations necessary for data manipulation within the Teradata ecosystem.

### Keywords and Phrases
- TD_BinCodeTransform Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- AMP Configuration Impact on Function Execution
- Data Cleaning Functions
- Model Evaluation Functions
- Feature Engineering Utility Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Sessionize
- NGramSplitter
- TD_DecisionForest
- TD_GLMPredict
- TD_XGBoost
- TD_Silhouette
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest

These keywords and phrases provide a comprehensive overview of the capabilities and details related to the Analytics Database and its functions within the Teradata Vantage™ platform.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/TD_BinCodeTransform-Output","2024-07-27 12:23:42"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/TD_BinCodeTransform-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_BinCodeTransform Syntax | BinCodeTransform - TD_BinCodeTransform Syntax - Analytics Database","95","920","See the syntax of the Analytics Database (SQL Engine) function TD_BinCodeTransform and read descriptions of its required and optional syntax elements.","150","949","","0","TD_BinCodeTransform Syntax | BinCodeTransform - TD_BinCodeTransform Syntax - Analytics Database","95","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/TD_BinCodeTransform-Syntax","","","","","","208399","12916","12916","4.579","A+","103","45","2.289","38.597","Hard","11.251","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.627","","","","","","1.1","## Summary

The Teradata Vantage Analytics Database provides a robust set of analytic functions that are crucial for data manipulation and transformation. Among these functions, `TD_BinCodeTransform` is pivotal for transforming data into bin codes, which is often used in feature engineering for machine learning models. This document will cover the basic SQL operations such as Select, Update, Delete, and Create, along with a detailed syntax for `TD_BinCodeTransform`.

## Code Examples

### 1. Select
```sql
SELECT *
FROM my_table
WHERE column_name = 'value';
```

### 2. Update
```sql
UPDATE my_table
SET column_name = 'new_value'
WHERE condition_column = 'condition';
```

### 3. Delete
```sql
DELETE FROM my_table
WHERE condition_column = 'condition';
```

### 4. Create
```sql
CREATE TABLE new_table (
    column1 INT,
    column2 VARCHAR(50),
    column3 DATE
);
```

### 5. TD_BinCodeTransform
```sql
SELECT *
FROM TD_BinCodeTransform (
    ON my_input_table AS InputTable
    ON my_fit_table AS FitTable DIMENSION
    USING
    [ Accumulate ( 'column1', 'column2' ) ]
);
```

## Keywords and Phrases

- TD_BinCodeTransform Syntax
- BinCodeTransform - TD_BinCodeTransform Syntax
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Displaying Online Help for Analytics Database Analytic Functions

This concise guide captures essential SQL operations and the specific syntax required for `TD_BinCodeTransform`, equipping users with foundational knowledge for effective data manipulation within the Teradata Vantage environment.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/TD_BinCodeTransform-Syntax","2024-07-27 12:22:49"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/TD_BinCodeTransform-Usage-Notes","text/html;charset=UTF-8","200","","Indexable","","TD_BinCodeTransform Usage Notes | BinCodeTransform - TD_BinCodeTransform Usage Notes - Analytics Database","105","1028","Learn about the process in using the Analytics Database (SQL Engine) feature engineering transform function TD_BinCodeTransform.","128","824","","0","TD_BinCodeTransform Usage Notes | BinCodeTransform - TD_BinCodeTransform Usage Notes - Analytics Database","105","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/TD_BinCodeTransform-Usage-Notes","","","","","","209440","13462","13462","4.772","A+","362","71","5.099","58.401","Fairly Hard","11.941","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.606","","","","","","1.1","### TD_BinCodeTransform Overview

The `TD_BinCodeTransform` function is part of the Teradata Vantage™ analytics database, specifically designed for transforming numerical data into categorical data through the process of binning. This function allows users to categorize continuous variables into discrete bins, facilitating easier analysis and visualization. Binning can help in reducing complexity, addressing overfitting in machine learning models, and generating insights through categorical distributions.

### How TD_BinCodeTransform Works

1. **Determine Bin Size and Count**: The first step is to decide the number and size of the bins. This can be uniform (equal width) or variable, depending on the data characteristics.

2. **Assign Data to Bins**: The data points are assigned to corresponding bins based on their values. For example, an age of 37 would fall into the bin representing ages 30-39.

3. **Transform to Categorical Data**: Each bin is then assigned a categorical label, which may be auto-generated or specified by the user. This transformation allows for easier analysis and modeling.

### Example Usage of TD_BinCodeTransform

Here's a basic example to illustrate how to use the `TD_BinCodeTransform` function:

```sql
-- Example of using TD_BinCodeTransform
SELECT 
    Age,
    TD_BinCodeTransform(Age, '0-9', '10-19', '20-29', '30-39', '40-49', '50-59', '60-69', '70-79', '80-89', '90-100') AS AgeGroup
FROM 
    Users
WHERE 
    Age IS NOT NULL;
```

In this example, ages are binned into 10-year groups, and the output will show which age group each user falls into.

### Code Examples

#### 1. **Select**
```sql
SELECT * FROM Users WHERE Age IS NOT NULL;
```

#### 2. **Update**
```sql
UPDATE Users SET Age = 30 WHERE UserID = 1;
```

#### 3. **Delete**
```sql
DELETE FROM Users WHERE Age < 18;
```

#### 4. **Create**
```sql
CREATE TABLE Users (
    UserID INT PRIMARY KEY,
    Age INT,
    Name VARCHAR(100)
);
```

### Keywords and Phrases

- **TD_BinCodeTransform Usage Notes**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware Product**
- **Release Number 17.20**
- **Published June 2022**
- **Language English (United States)**
- **Last Update 2024-04-06**
- **Data Cleaning Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Binning Advantages**
- **Binning Limitations**
- **Categorical Data for Analysis**
- **Frequency Distribution Visualization**
- **Overfitting Mitigation**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution** 

This summary provides an overview of the TD_BinCodeTransform function, including its utility in data transformation, examples of SQL commands, and key concepts relevant to its use in the Teradata Vantage™ environment.","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/TD_BinCodeTransform-Usage-Notes","2024-07-27 11:24:07"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer","text/html;charset=UTF-8","200","","Indexable","","TD_ColumnTransformer Function | ColumnTransformer - TD_ColumnTransformer - Analytics Database","93","911","This Analytics Database (SQL Engine) function transforms a dataset in one operation.","84","530","","0","TD_ColumnTransformer Function | ColumnTransformer - TD_ColumnTransformer - Analytics Database","93","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer","","","","","","210140","13416","13416","4.756","A+","207","64","3.234","37.213","Hard","11.550","1","4","","707","707","0","99.860","715","713","0","","","","","","","","","0.718","","","","","","1.1","### Summary of TD_ColumnTransformer Function

The `TD_ColumnTransformer` function in Teradata Vantage™ is designed to apply multiple transformations to the columns of an input table in a single operation. This function streamlines the transformation process by allowing users to fit and apply various operations such as scaling, encoding, and outlier filtering without needing to execute these steps individually. This is particularly advantageous for efficient data preprocessing in analytics workflows.

#### Key Transformations Supported:
- TD_Scale Transform
- TD_Bincode Transform
- TD_Function Transform
- TD_NonLinearCombine Transform
- TD_OutlierFilter Transform
- TD_PolynomialFeatures Transform
- TD_RowNormalize Transform
- TD_OrdinalEncoding Transform
- TD_OneHotEncoding Transform
- TD_SimpleImpute Transform

### Code Example

Here is a generic example illustrating how to use the `TD_ColumnTransformer` function along with basic SQL operations such as SELECT, UPDATE, DELETE, and CREATE.

```sql
-- Create a sample table
CREATE TABLE sample_data (
    id INT,
    feature1 FLOAT,
    feature2 FLOAT,
    category VARCHAR(20)
);

-- Insert sample data
INSERT INTO sample_data (id, feature1, feature2, category) VALUES
(1, 10.5, 20.1, 'A'),
(2, 15.0, 25.5, 'B'),
(3, 8.3, 24.0, 'A'),
(4, 12.7, 22.3, 'C');

-- Select data from the table
SELECT * FROM sample_data;

-- Update a specific record
UPDATE sample_data
SET feature1 = feature1 * 1.1
WHERE category = 'A';

-- Delete a record
DELETE FROM sample_data
WHERE id = 4;

-- Prepare FIT tables for transformations
CREATE TABLE scale_fit AS (
    SELECT * FROM sample_data
) WITH DATA;

-- Example of using TD_ColumnTransformer
SELECT TD_ColumnTransformer(
    'scale_fit',
    'bincode_fit',
    'function_fit'
) AS transformed_data
FROM sample_data;
```

### Keywords and Phrases

- **TD_ColumnTransformer Function**
- **ColumnTransformer**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact**
- **Limitations When Using PARTITION BY**
- **Accumulated Columns Impact on Function Performance**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Spool Space Exhaustion for Large Partitions**
- **Recommendations for Using Analytic Functions**
- **Fit Tables**
- **Transformations**","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer","2024-07-27 12:09:54"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer/TD_ColumnTransformer-Example","text/html;charset=UTF-8","200","","Indexable","","TD_ColumnTransformer Example | ColumnTransformer - TD_ColumnTransformer Example - Analytics Database","100","993","See an example of the Analytics Database (SQL Engine) feature engineering transform function TD_ColumnTransformer.","114","742","","0","TD_ColumnTransformer Example | ColumnTransformer - TD_ColumnTransformer Example - Analytics Database","100","Database Analytic Functions","27","TD_ColumnTransformer Input Table: titanic_train","47","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer/TD_ColumnTransformer-Example","","","","","","218500","14320","14320","5.077","A+","392","111","3.532","90.379","Very Easy","12.043","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.062","","","","","","1.1","### Summary
The `TD_ColumnTransformer` is a powerful function in Teradata Vantage that allows for the transformation of input data by applying various preprocessing techniques in a single call. It can handle multiple transformations, such as imputation, encoding, and scaling, enabling efficient data preparation for analytics and machine learning tasks. The use of `TD_ColumnTransformer` significantly reduces the processing time compared to serial processing of individual functions.

### Code Example

Here's a comprehensive example covering the basic SQL operations: Select, Update, Delete, and Create in the context of using the `TD_ColumnTransformer`.

#### 1. Create Table
```sql
CREATE MULTISET TABLE titanic_train (
    PassengerID INT,
    Pclass INT,
    Name VARCHAR(100),
    Gender CHAR(1),
    Age FLOAT,
    SibSp INT,
    Parch INT,
    Fare FLOAT,
    Cabin VARCHAR(10),
    Embarked CHAR(1)
);
```

#### 2. Insert Data
```sql
INSERT INTO titanic_train (PassengerID, Pclass, Name, Gender, Age, SibSp, Parch, Fare, Cabin, Embarked)
VALUES 
(1, 1, 'John Doe', 'M', 22, 1, 0, 100.0, 'C85', 'S'),
(2, 3, 'Jane Smith', 'F', 30, 0, 0, 7.25, '', 'C');
```

#### 3. Select Data
```sql
SELECT * FROM titanic_train WHERE Pclass = 1;
```

#### 4. Update Data
```sql
UPDATE titanic_train 
SET Fare = Fare * 1.1 
WHERE Gender = 'F';
```

#### 5. Delete Data
```sql
DELETE FROM titanic_train 
WHERE Age IS NULL;
```

#### 6. Use TD_ColumnTransformer
```sql
SELECT * FROM TD_ColumnTransformer(
    ON titanic_train AS inputtable
    ON SimpleImputeFit AS imputeFitTable dimension
    ON OrdinalEncodingFit AS ordinalFitTable dimension
    ON OneHotEncodingFit AS onehotfittable dimension
    ON ScaleFit AS scaleFitTable dimension
) AS dt ORDER BY PassengerID;
```

### Keywords and Phrases
- **TD_ColumnTransformer Example**
- **ColumnTransformer - TD_ColumnTransformer Example**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This structured overview provides clarity on how to implement SQL operations and use advanced analytic functions effectively within the Teradata Vantage environment.","28","1","3","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer/TD_ColumnTransformer-Example","2024-07-27 12:47:43"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer/TD_ColumnTransformer-Input","text/html;charset=UTF-8","200","","Indexable","","TD_ColumnTransformer Input - Analytics Database","47","452","Column Data Type Description TargetColumn CHAR or VARCHAR for categorical columns INTEGER, REAL, DECIMAL, or NUMBER for numeric columns The input table columns that requires transformation based on the FIT table. Functions with categorical columns: TD_OrdinalEncoding Fit TD_OneHotEncoding Fit Functions with numeric col...","323","2106","","0","TD_ColumnTransformer Input - Analytics Database","47","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer/TD_ColumnTransformer-Input","","","","","","209320","13224","13224","4.688","A+","112","50","2.240","27.808","Very Hard","11.241","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.569","","","","","","1.1","# Overview of SQL Operations for Teradata Analytics Database

In the context of the Teradata Analytics Database, SQL operations for data manipulation can be categorized into four primary types: **Select**, **Update**, **Delete**, and **Create**. Below is a brief summary and examples for each operation.

## Summary of SQL Operations

1. **Select**: Retrieves data from one or more tables.
2. **Update**: Modifies existing records in a table.
3. **Delete**: Removes records from a table.
4. **Create**: Adds new tables or objects to the database.

## Code Examples

### Select

The SELECT statement is used to query data from a database. You can select specific columns, apply filters, and order the results.

```sql
SELECT column1, column2
FROM table_name
WHERE condition
ORDER BY column1;
```

**Example**:
```sql
SELECT customer_id, customer_name
FROM customers
WHERE country = 'USA'
ORDER BY customer_name;
```

### Update

The UPDATE statement modifies existing records in a table based on specified conditions.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example**:
```sql
UPDATE customers
SET customer_name = 'John Doe'
WHERE customer_id = 123;
```

### Delete

The DELETE statement removes records from a table. Ensure you specify a condition to avoid deleting all records.

```sql
DELETE FROM table_name
WHERE condition;
```

**Example**:
```sql
DELETE FROM customers
WHERE customer_id = 123;
```

### Create

The CREATE statement is used to create new tables or databases.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example**:
```sql
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2)
);
```

## Keywords and Phrases

- TD_ColumnTransformer Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- dita:mapPath: gjn1627595495337.ditamap
- dita:ditavalPath: ayr1485454803741.ditaval
- dita:id: jmh1512506877710
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Workload Management Configuration
- Non-Deterministic Behavior
- Spool Space Exhaustion
- Recommendations for Using Analytic Functions

This summary provides an introductory overview of basic SQL operations relevant to the Teradata Analytics Database environment, along with additional context and important terms related to its functionality and structure.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer/TD_ColumnTransformer-Input","2024-07-27 12:16:32"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer/TD_ColumnTransformer-Output","text/html;charset=UTF-8","200","","Indexable","","TD_ColumnTransformer Output - Analytics Database","48","468","TD_ColumnTransformer Output Column Data Type Description TargetColumn CHAR or VARCHAR for categorical columns INTEGER, REAL, DECIMAL, or NUMBER for numeric columns The columns transformed using the ColumnTransformer function. otherColumns CHAR or VARCHAR for categorical columns INTEGER, REAL, DECIMAL, or NUMBER for num...","323","2206","","0","TD_ColumnTransformer Output - Analytics Database","48","Database Analytic Functions","27","TD_ColumnTransformer Output","27","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer/TD_ColumnTransformer-Output","","","","","","210149","13238","13238","4.693","A+","140","53","2.642","25.285","Very Hard","11.301","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.558","","","","","","1.1","## Teradata Vantage™ Analytics Database Overview

The Teradata Vantage™ Analytics Database provides a comprehensive set of analytic functions designed to support data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This guide focuses on the essential SQL commands for interacting with the database, including how to create, select, update, and delete records.

### Summary of Key SQL Operations

1. **Create**: Use to add new tables or data into the database.
2. **Select**: Retrieve data from the database.
3. **Update**: Modify existing records in the database.
4. **Delete**: Remove records from the database.

### Code Examples

#### 1. Create Table

```sql
CREATE TABLE Employee (
    EmployeeID INTEGER PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    HireDate DATE,
    Salary DECIMAL(10, 2)
);
```

#### 2. Select Data

```sql
SELECT FirstName, LastName, Salary
FROM Employee
WHERE Salary > 50000
ORDER BY Salary DESC;
```

#### 3. Update Data

```sql
UPDATE Employee
SET Salary = Salary * 1.10
WHERE HireDate < '2020-01-01';
```

#### 4. Delete Data

```sql
DELETE FROM Employee
WHERE HireDate < '2010-01-01';
```

### Keywords and Phrases

- **TD_ColumnTransformer Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**: gjn1627595495337.ditamap
- **dita:ditavalPath**: ayr1485454803741.ditaval
- **dita:id**: jmh1512506877710
- **Product Category**: Teradata Vantage™

### Analytic Functions Overview

- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**

This guide provides a foundation for working with the Teradata Vantage Analytics Database's SQL capabilities, allowing users to manage and analyze their data effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer/TD_ColumnTransformer-Output","2024-07-27 12:31:54"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer/TD_ColumnTransformer-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_ColumnTransformer Syntax | ColumnTransformer - TD_ColumnTransformer Syntax - Analytics Database","98","959","See the syntax of the Analytics Database (SQL Engine) function TD_ColumnTransformer and read descriptions of its required and optional syntax elements.","151","957","","0","TD_ColumnTransformer Syntax | ColumnTransformer - TD_ColumnTransformer Syntax - Analytics Database","98","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer/TD_ColumnTransformer-Syntax","","","","","","209863","12988","12988","4.604","A+","198","53","3.736","49.652","Hard","11.456","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.518","","","","","","1.1","## Overview of Teradata Vantage™ Analytics Database Functions

The Teradata Vantage™ platform provides robust capabilities for analytics, including various functions designed for data manipulation, feature engineering, and model training. Among these functions, the `TD_ColumnTransformer` is a versatile tool that allows users to apply multiple transformations to columns within a dataset. This summary presents essential SQL commands for managing data and demonstrates how to interact with the `TD_ColumnTransformer`.

### SQL Commands Summary

1. **SELECT**: Retrieve data from a table.
2. **INSERT**: Add new records into a table.
3. **UPDATE**: Modify existing records in a table.
4. **DELETE**: Remove records from a table.
5. **CREATE**: Create new tables or views.

### Code Examples

#### 1. SELECT
```sql
SELECT *
FROM my_table
WHERE column_name = 'value';
```

#### 2. INSERT
```sql
INSERT INTO my_table (column1, column2)
VALUES ('value1', 'value2');
```

#### 3. UPDATE
```sql
UPDATE my_table
SET column1 = 'new_value'
WHERE column2 = 'condition_value';
```

#### 4. DELETE
```sql
DELETE FROM my_table
WHERE column_name = 'value_to_delete';
```

#### 5. CREATE
```sql
CREATE TABLE new_table (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### TD_ColumnTransformer Syntax Example
The `TD_ColumnTransformer` allows for various transformations in analytics workflows. Here’s an example of its syntax:

```sql
SELECT *
FROM TD_ColumnTransformer (
    ON my_input_table AS InputTable
    USING
    [FillRowIDColumnName('row_id')]
);
```

### Keywords and Phrases

- **TD_ColumnTransformer Syntax**
- **ColumnTransformer - TD_ColumnTransformer Syntax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Analytics Database**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Product Category: Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**

This summary provides a foundational understanding of how to work with Teradata Vantage™ analytic functions, particularly focusing on the `TD_ColumnTransformer`. For more detailed operations and specific use cases, refer to the official documentation.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer/TD_ColumnTransformer-Syntax","2024-07-27 12:27:18"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer/TD_ColumnTransformer-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","TD_ColumnTransformer Syntax Elements - Analytics Database","57","556","FillRowIdColumnName [Optional] Name for the output column in which unique identifiers for each row are populated. It adds a column to the data.","143","902","","0","TD_ColumnTransformer Syntax Elements - Analytics Database","57","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer/TD_ColumnTransformer-Syntax-Elements","","","","","","207568","12742","12742","4.517","A+","65","37","1.757","13.726","Very Hard","11.178","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.197","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a comprehensive set of analytic functions that can be used for a variety of purposes including data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This guide will cover the basic SQL commands commonly used in database management: Select, Update, Delete, and Create. These commands are essential for manipulating data within the Analytics Database and can be combined with analytic functions for advanced data processing.

## Code Examples

### 1. Select
The `SELECT` statement is used to retrieve data from one or more tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

**Example:**
```sql
SELECT employee_id, employee_name
FROM employees
WHERE department = 'Sales';
```

### 2. Update
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example:**
```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department = 'Sales';
```

### 3. Delete
The `DELETE` statement is used to remove existing records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

**Example:**
```sql
DELETE FROM employees
WHERE employee_id = 1001;
```

### 4. Create
The `CREATE` statement is used to create a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example:**
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    employee_name VARCHAR(100),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

## Keywords and Phrases

- **TD_ColumnTransformer Syntax Elements**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact**
- **Limitations When Using PARTITION BY**
- **Accumulated Columns Impact**
- **Displaying Online Help for Functions**
- **Workload Management Configuration**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions**
- **Recommendations for Using Analytic Functions**
- **Hypothesis Test Types**
- **Path and Pattern Analysis Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer/TD_ColumnTransformer-Syntax-Elements","2024-07-27 12:51:56"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionFit","text/html;charset=UTF-8","200","","Indexable","","TD_FunctionFit Function | FunctionFit | Teradata Vantage - TD_FunctionFit - Analytics Database","94","844","This Analytics Database (SQL Engine) feature engineering transform function outputs a table to input to TD_FunctionFitTransform.","128","808","","0","TD_FunctionFit Function | FunctionFit | Teradata Vantage - TD_FunctionFit - Analytics Database","94","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionFit","","","","","","209567","13205","13205","4.681","A+","92","45","2.044","15.329","Very Hard","11.194","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","0.542","","","","","","1.1","## Summary

Teradata Vantage™ offers a range of analytic functions designed to facilitate data cleaning, exploration, feature engineering, model training, scoring, and evaluation. The `TD_FunctionFit` function is particularly useful as it determines whether specific numeric transformations can be applied to specified input columns. This function outputs a table that can be used as input for `TD_FunctionTransform`, which then applies the transformations.

## Code Example

### SELECT
```sql
SELECT CustomerID, OrderAmount
FROM Orders
WHERE OrderDate >= '2023-01-01';
```

### UPDATE
```sql
UPDATE Customers
SET LastPurchaseDate = CURRENT_DATE
WHERE CustomerID = 12345;
```

### DELETE
```sql
DELETE FROM Orders
WHERE OrderID = 67890;
```

### CREATE
```sql
CREATE TABLE NewCustomers (
    CustomerID INT,
    CustomerName VARCHAR(100),
    SignupDate DATE
);
```

## Keywords and Phrases
- TD_FunctionFit Function
- FunctionFit
- Teradata Vantage - TD_FunctionFit
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Last Update 2024-04-06
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Limitations When Using PARTITION BY
- Usage Notes
- Function Syntax Descriptions
- Displaying Online Help for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This summary and examples provide a foundational understanding of how to utilize Teradata Vantage's analytic functions, particularly in the context of data transformations and management.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionFit","2024-07-27 11:51:41"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionFit/TD_FunctionFit-Example","text/html;charset=UTF-8","200","","Indexable","","TD_FunctionFit Example | FunctionFit | Teradata Vantage - TD_FunctionFit Example - Analytics Database","101","926","See an example of the Analytics Database (SQL Engine) feature engineering transform function TD_FunctionFit.","108","687","","0","TD_FunctionFit Example | FunctionFit | Teradata Vantage - TD_FunctionFit Example - Analytics Database","101","Database Analytic Functions","27","TD_FunctionFit Input","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionFit/TD_FunctionFit-Example","","","","","","210571","13996","13996","4.962","A+","256","80","3.200","83.627","Easy","11.889","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.659","","","","","","1.1","## Summary

In Teradata Vantage, various SQL commands allow users to manage and manipulate data within their databases. This document provides a concise overview of the fundamental SQL operations: `SELECT`, `UPDATE`, `DELETE`, and `CREATE`. Each of these operations is crucial for effective data management and is often used in conjunction with analytic functions available in Teradata's Analytics Database.

### Code Examples

#### 1. Select

The `SELECT` statement is used to query data from a database. The basic syntax is as follows:

```sql
SELECT column1, column2, ...
FROM table_name
WHERE condition;
```

**Example:**
```sql
SELECT name, age, fare
FROM function_input_table
WHERE survived = 1;
```

#### 2. Update

The `UPDATE` statement modifies existing records in a table. The syntax is:

```sql
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;
```

**Example:**
```sql
UPDATE function_input_table
SET fare = fare * 1.10
WHERE gender = 'female';
```

#### 3. Delete

The `DELETE` statement removes existing records from a table. The syntax is:

```sql
DELETE FROM table_name
WHERE condition;
```

**Example:**
```sql
DELETE FROM function_input_table
WHERE survived = 0 AND age < 18;
```

#### 4. Create

The `CREATE` statement is used to create a new table or database. The syntax is:

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example:**
```sql
CREATE TABLE fit_out AS (
  SELECT * FROM TD_FunctionFit (
    ON function_input_table AS InputTable
    ON transformations AS TransformationTable DIMENSION
  ) AS dt
) WITH DATA;
```

### Keywords and Phrases

- **TD_FunctionFit Example**
- **FunctionFit**
- **Teradata Vantage - TD_FunctionFit Example**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Examples: How to Use TD_FunctionFit**","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionFit/TD_FunctionFit-Example","2024-07-27 12:10:10"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionFit/TD_FunctionFit-Input","text/html;charset=UTF-8","200","","Indexable","","TD_FunctionFit Input - Analytics Database","41","371","InputTable Schema Column Data Type Description input_column VARCHAR (CHARACTER SET LATIN or UNICODE) or NUMERIC Column whose name can appear as TargetColumn in TransformationTable. TransformationTable Schema Column Data Type Description TargetColumn VARCHAR (CHARACTER SET LATIN or UNICODE) Name of InputTable column to ...","323","2236","","0","TD_FunctionFit Input - Analytics Database","41","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionFit/TD_FunctionFit-Input","","","","","","216041","13831","13831","4.903","A+","244","78","3.128","40.701","Hard","11.307","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.539","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions aimed at improving data processing and analytics tasks. The functions are categorized into various types, including data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analysis functions. The database supports SQL-like syntax and is designed to work seamlessly within the Teradata ecosystem, including on platforms like VantageCloud and VantageCore.

### Code Example Section

Here are code examples for basic SQL operations: **SELECT**, **UPDATE**, **DELETE**, and **CREATE**.

#### SELECT Example
```sql
SELECT customer_id, customer_name, purchase_amount
FROM customers
WHERE purchase_date >= '2023-01-01'
ORDER BY purchase_amount DESC;
```

#### UPDATE Example
```sql
UPDATE customers
SET purchase_amount = purchase_amount * 1.1
WHERE customer_id IN (SELECT customer_id FROM rewards WHERE tier = 'Gold');
```

#### DELETE Example
```sql
DELETE FROM customers
WHERE purchase_amount < 50 AND purchase_date < '2022-01-01';
```

#### CREATE Example
```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    purchase_amount DECIMAL(10, 2),
    purchase_date DATE
);
```

### Keywords and Phrases
- TD_FunctionFit Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This structured overview provides essential insights into the capabilities and functionalities of the Teradata Vantage™ Analytics Database, along with practical SQL code examples.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionFit/TD_FunctionFit-Input","2024-07-27 11:30:02"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionFit/TD_FunctionFit-Output","text/html;charset=UTF-8","200","","Indexable","","TD_FunctionFit Output - Analytics Database","42","387","Output Table Schema Same as TransformationTable schema (see TD_FunctionFit Input).","82","548","","0","TD_FunctionFit Output - Analytics Database","42","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionFit/TD_FunctionFit-Output","","","","","","207522","12711","12711","4.506","A+","51","35","1.457","0.000","Very Hard","11.144","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.525","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions that enable users to perform a wide range of data manipulation and analysis tasks. This includes capabilities for data cleaning, exploration, feature engineering, model training, and evaluation, among others. The functions are designed to handle various data types and analysis needs, ensuring that users can efficiently derive insights from their datasets.

### Code Examples

Here are examples of basic SQL operations such as `SELECT`, `UPDATE`, `DELETE`, and `CREATE` in the context of the Teradata Analytics Database.

#### 1. SELECT
The `SELECT` statement is used to query data from a database table.

```sql
SELECT column1, column2
FROM your_table
WHERE condition;
```

#### 2. UPDATE
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE your_table
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 3. DELETE
The `DELETE` statement removes records from a table.

```sql
DELETE FROM your_table
WHERE condition;
```

#### 4. CREATE
The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE your_new_table (
    column1 datatype,
    column2 datatype,
    column3 datatype
);
```

### Keywords and Phrases

- **TD_FunctionFit Output**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Product Category: Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact on Function Execution**
- **Recommendations for Using Analytic Functions**
- **Examples**
- **Syntax Elements**
- **Input and Output**
- **Function Names with/without TD Prefix**

This summary and the examples provided should give you a solid foundation to begin working with the Teradata Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionFit/TD_FunctionFit-Output","2024-07-27 12:32:52"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionFit/TD_FunctionFit-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_FunctionFit Syntax | FunctionFit | Teradata Vantage - TD_FunctionFit Syntax - Analytics Database","99","892","See the syntax of the Analytics Database (SQL Engine) function TD_FunctionFit and read descriptions of its required and optional syntax elements.","145","902","","0","TD_FunctionFit Syntax | FunctionFit | Teradata Vantage - TD_FunctionFit Syntax - Analytics Database","99","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionFit/TD_FunctionFit-Syntax","","","","","","208275","12873","12873","4.564","A+","105","44","2.386","48.910","Hard","11.247","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.602","","","","","","1.1","## Summary

Teradata Vantage provides a powerful set of analytic functions tailored for data analysis and manipulation. This includes capabilities for creating, reading, updating, and deleting data within your analytics database. Below are examples of common SQL operations: Select, Update, Delete, and Create, specifically utilizing the Teradata Vantage analytic functions.

### Code Example

#### 1. SELECT
```sql
SELECT *
FROM my_table
WHERE condition = 'value';
```

#### 2. UPDATE
```sql
UPDATE my_table
SET column_name = 'new_value'
WHERE condition = 'value';
```

#### 3. DELETE
```sql
DELETE FROM my_table
WHERE condition = 'value';
```

#### 4. CREATE
```sql
CREATE TABLE new_table AS (
  SELECT *
  FROM existing_table
  WHERE condition = 'value'
) WITH DATA;
```

### Keywords and Phrases
- TD_FunctionFit Syntax
- FunctionFit
- Teradata Vantage - TD_FunctionFit Syntax
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Language English (United States)
- Last Update 2024-04-06
- Product Category Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Examples of various analytic functions such as Pack, StringSimilarity, TD_ConvertTo, etc. 

These functions and their capabilities are essential for data handling and analysis within the Teradata environment, providing users with robust tools for their analytic needs.","26","1","3","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionFit/TD_FunctionFit-Syntax","2024-07-27 11:54:10"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform","text/html;charset=UTF-8","200","","Indexable","","TD_FunctionTransform Function | FunctionTransform - TD_FunctionTransform - Analytics Database","93","881","This Analytics Database (SQL Engine) feature engineering transform function applies numeric transformations to input columns.","125","793","","0","TD_FunctionTransform Function | FunctionTransform - TD_FunctionTransform - Analytics Database","93","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform","","","","","","211620","13973","13973","4.953","A+","391","86","4.547","39.728","Hard","12.054","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","0.529","","","","","","1.1","## Summary

The **TD_FunctionTransform** function in Teradata's Vantage platform is used to apply numeric transformations to input columns based on the output of the **TD_FunctionFit** function. This capability is essential for feature engineering in data analytics and machine learning, allowing practitioners to enhance their datasets by transforming variables to better capture relationships and improve model accuracy.

### Code Examples

Here are examples of basic SQL operations including `SELECT`, `UPDATE`, `DELETE`, and `CREATE`, which are fundamental to interacting with databases, including Teradata's Analytics Database:

#### 1. SELECT
The `SELECT` statement is used to query data from a database.

```sql
SELECT column1, column2
FROM your_table
WHERE condition;
```

#### 2. UPDATE
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE your_table
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 3. DELETE
The `DELETE` statement removes records from a table.

```sql
DELETE FROM your_table
WHERE condition;
```

#### 4. CREATE
The `CREATE` statement creates a new table in the database.

```sql
CREATE TABLE new_table (
    column1 datatype,
    column2 datatype,
    column3 datatype
);
```

### Keywords and Phrases

- **TD_FunctionTransform Function**
- **FunctionTransform**
- **TD_FunctionTransform**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Limitations When Using PARTITION BY**
- **Recommendations for Using Analytic Functions**
- **Usage Notes**
- **Examples**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Spool Space Exhaustion**
- **Non-Deterministic Behavior**
- **Data Normalization**
- **Handling Non-Linear Relationships**
- **Mitigating Skewness**
- **Addressing Heteroscedasticity**","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform","2024-07-27 12:04:15"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform/TD_FunctionTransform-Example","text/html;charset=UTF-8","200","","Indexable","","TD_FunctionTransform Example | FunctionTransform - TD_FunctionTransform Example - Analytics Database","100","963","See an example of the Analytics Database (SQL Engine) feature engineering transform function TD_FunctionTransform.","114","737","","0","TD_FunctionTransform Example | FunctionTransform - TD_FunctionTransform Example - Analytics Database","100","Database Analytic Functions","27","TD_FunctionTransform Input","26","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform/TD_FunctionTransform-Example","","","","","","210382","13473","13473","4.776","A+","195","72","2.708","84.345","Easy","11.955","1","5","","707","707","0","99.860","712","709","0","","","","","","","","","1.379","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a robust set of analytic functions and utilities for data transformation, cleaning, and analysis. It supports a variety of functions that can be utilized for model training, scoring, and evaluation across different domains. Below are SQL code examples for common database operations: Select, Update, Delete, and Create.

## Code Examples

### 1. SELECT
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT passenger, survived, pclass, name, age
FROM titanic_data
WHERE survived = 1;
```

### 2. UPDATE
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE titanic_data
SET fare = fare * 1.10
WHERE class = 2;
```

### 3. DELETE
The `DELETE` statement removes existing records from a table.

```sql
DELETE FROM titanic_data
WHERE survived = 0 AND age > 60;
```

### 4. CREATE
The `CREATE` statement creates a new table in the database.

```sql
CREATE TABLE survivors (
    passenger_id INT,
    name VARCHAR(255),
    age DECIMAL(3, 1),
    class INT
);
```

## Keywords and Phrases
- TD_FunctionTransform Example
- FunctionTransform
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- TD_ConvertTo
- TD_GetRowsWithoutMissingValues
- TD_OneHotEncodingTransform
- TD_SimpleImputeTransform
- TD_FunctionFit
- TD_FunctionTransform
- Data Overview
- Function Execution
- Performance
- Input Table Rows Redistribution
- Recommendations for Using Analytic Functions
- Workload Management Configuration
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion
- Avoid Deadlocks Using Volatile Tables","26","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform/TD_FunctionTransform-Example","2024-07-27 11:33:50"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform/TD_FunctionTransform-Input","text/html;charset=UTF-8","200","","Indexable","","TD_FunctionTransform Input - Analytics Database","47","442","InputTable Schema See TD_FunctionFit Input. FitTable Schema See TD_FunctionFit Output.","86","561","","0","TD_FunctionTransform Input - Analytics Database","47","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform/TD_FunctionTransform-Input","","","","","","207830","12720","12720","4.509","A+","51","37","1.378","0.000","Very Hard","11.132","1","5","","707","707","0","99.860","712","710","0","","","","","","","","","0.482","","","","","","1.1","# Introduction to Teradata Vantage™ Analytics Database Functions

Teradata Vantage™ offers a robust platform for analytics that provides a comprehensive suite of functions for data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analytics. This document serves as an overview, detailing key functions within the Analytics Database, including their syntax, required elements, and usage examples. 

## Code Example Section

### 1. Create
To create a new table in the database:
```sql
CREATE TABLE sales_data (
    transaction_id INT,
    customer_id INT,
    sale_amount DECIMAL(10, 2),
    sale_date DATE
);
```

### 2. Select
To retrieve data from the `sales_data` table:
```sql
SELECT transaction_id, customer_id, sale_amount
FROM sales_data
WHERE sale_date >= '2023-01-01';
```

### 3. Update
To update existing records in the `sales_data` table:
```sql
UPDATE sales_data
SET sale_amount = sale_amount * 1.05
WHERE sale_date < '2023-01-01';
```

### 4. Delete
To delete records from the `sales_data` table:
```sql
DELETE FROM sales_data
WHERE sale_date < '2022-01-01';
```

## Summary
Teradata Vantage™ provides a powerful set of analytic functions designed to enhance the capabilities of data management and analysis. The functions cover a wide range of applications including data cleaning, feature engineering, and various statistical analyses, enabling organizations to extract meaningful insights from their data.

---

### Keywords and Phrases
- TD_FunctionTransform Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Examples for Function Usage
- Sessionize
- nPath
- TD_FunctionFit
- TD_OneHotEncodingFit
- TD_SVM","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform/TD_FunctionTransform-Input","2024-07-27 11:58:05"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform/TD_FunctionTransform-Output","text/html;charset=UTF-8","200","","Indexable","","TD_FunctionTransform Output - Analytics Database","48","458","Output Table Schema Column Data Type Description input_column If NUMERIC in TD_FunctionFit InputTable: DOUBLE PRECISION Otherwise: Same as in TD_FunctionFit InputTable Transformed values.","187","1238","","0","TD_FunctionTransform Output - Analytics Database","48","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform/TD_FunctionTransform-Output","","","","","","208618","13042","13042","4.623","A+","64","40","1.600","0.000","Very Hard","11.139","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.525","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database provides a rich set of analytic functions designed for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. These functions enable users to efficiently manipulate and analyze large datasets. The following sections highlight the core SQL operations — **Select, Update, Delete, and Create** — using Teradata syntax, illustrating how to interact with data in an Analytics Database.

### Code Examples

#### 1. Select
The `SELECT` statement retrieves data from a table.
```sql
SELECT column1, column2
FROM your_table
WHERE condition;
```
*Example:*
```sql
SELECT name, age
FROM users
WHERE age > 18;
```

#### 2. Update
The `UPDATE` statement modifies existing records in a table.
```sql
UPDATE your_table
SET column1 = value1, column2 = value2
WHERE condition;
```
*Example:*
```sql
UPDATE users
SET age = age + 1
WHERE birthday = CURRENT_DATE;
```

#### 3. Delete
The `DELETE` statement removes records from a table.
```sql
DELETE FROM your_table
WHERE condition;
```
*Example:*
```sql
DELETE FROM users
WHERE last_login < '2022-01-01';
```

#### 4. Create
The `CREATE` statement generates a new table or database.
```sql
CREATE TABLE your_table (
    column1 datatype,
    column2 datatype,
    ...
);
```
*Example:*
```sql
CREATE TABLE users (
    user_id INT PRIMARY KEY,
    name VARCHAR(100),
    age INT,
    last_login DATE
);
```

### Keywords and Phrases
- **TD_FunctionTransform Output**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions** 
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Function Names with and without TD Prefix**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration**
- **Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Spool Space Exhaustion for Large Partitions**
- **Recommendations for Using Analytic Functions** 

This structured approach will help you effectively utilize the Analytics Database's capabilities for your data-driven tasks.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform/TD_FunctionTransform-Output","2024-07-27 12:44:05"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform/TD_FunctionTransform-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_FunctionTransform Syntax | FunctionTransform - TD_FunctionTransform Syntax - Analytics Database","98","929","See the syntax of the Analytics Database (SQL Engine) function TD_FunctionTransform and read descriptions of its required and optional syntax elements.","151","952","","0","TD_FunctionTransform Syntax | FunctionTransform - TD_FunctionTransform Syntax - Analytics Database","98","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform/TD_FunctionTransform-Syntax","","","","","","208343","12902","12902","4.574","A+","102","45","2.267","47.776","Hard","11.247","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.527","","","","","","1.1","### Summary

The `TD_FunctionTransform` is a versatile function in Teradata Vantage that allows users to transform data by applying various analytic functions to input tables. This function is part of a broader set of analytic functions designed for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. 

In this section, we will cover essential SQL operations such as `SELECT`, `UPDATE`, `DELETE`, and `CREATE` in the context of using `TD_FunctionTransform` effectively within Teradata's analytics database.

### Code Example

#### 1. SELECT
Using `TD_FunctionTransform` within a `SELECT` statement to transform data from an input table.

```sql
SELECT *
FROM TD_FunctionTransform(
    ON my_input_table AS InputTable
    ON my_fit_table AS FitTable DIMENSION
    USING IDColumns ('customer_id')
) AS transformed_data;
```

#### 2. UPDATE
Updating records in a table based on the results from a transformation.

```sql
UPDATE my_table
SET my_column = (SELECT new_value
                 FROM TD_FunctionTransform(
                     ON my_input_table AS InputTable
                     ON my_fit_table AS FitTable DIMENSION
                     USING IDColumns ('customer_id')
                 ) AS transformed
                 WHERE transformed.customer_id = my_table.customer_id);
```

#### 3. DELETE
Deleting records from a table where a transformation results in a specific condition.

```sql
DELETE FROM my_table
WHERE customer_id IN (
    SELECT customer_id
    FROM TD_FunctionTransform(
        ON my_input_table AS InputTable
        ON my_fit_table AS FitTable DIMENSION
        USING IDColumns ('customer_id')
    ) AS transformed
    WHERE transformed.some_column < threshold_value
);
```

#### 4. CREATE
Creating a new table based on transformed data.

```sql
CREATE TABLE new_transformed_table AS (
    SELECT *
    FROM TD_FunctionTransform(
        ON my_input_table AS InputTable
        ON my_fit_table AS FitTable DIMENSION
        USING IDColumns ('customer_id')
    )
) WITH NO DATA;  -- Use WITH DATA to include the data
```

### Keywords and Phrases
- **TD_FunctionTransform Syntax**
- **FunctionTransform**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **TD_GetFutileColumns**
- **TD_SimpleImputeFit**
- **TD_Histogram**
- **TD_ANOVA**
- **nPath**
- **LAG and LEAD Expressions**
- **Sessionize** 

This guide highlights essential SQL operations while leveraging the powerful `TD_FunctionTransform` for data analytics in Teradata Vantage.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform/TD_FunctionTransform-Syntax","2024-07-27 11:53:57"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform/TD_FunctionTransform-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","TD_FunctionTransform Syntax Elements - Analytics Database","57","546","IDColumns [Optional] Specify the names of the InputTable columns with NUMERIC datatypes to exclude from transformations. The columns with VARCHAR datatypes are automatically excluded. No id_column can be a target_column in the TransformationTable for the TD_FunctionFit call that output FitTable.","296","1902","","0","TD_FunctionTransform Syntax Elements - Analytics Database","57","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform/TD_FunctionTransform-Syntax-Elements","","","","","","207983","12899","12899","4.573","A+","82","40","2.050","10.793","Very Hard","11.230","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.518","","","","","","1.1","# Overview of Teradata Vantage Analytics Database Functions

Teradata Vantage provides a robust platform for performing advanced analytics, leveraging a variety of functions designed for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. The following sections summarize key functionalities along with SQL code examples for basic operations: Select, Update, Delete, and Create.

## Code Examples

### 1. Select
The `SELECT` statement is used to query data from a table.

```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE status = 'active';
```

### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE customers
SET status = 'inactive'
WHERE last_order_date < '2022-01-01';
```

### 3. Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM customers
WHERE last_order_date < '2021-01-01';
```

### 4. Create
The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## Summary
The Teradata Vantage Analytics Database provides a comprehensive suite of analytic functions categorized into data cleaning, exploration, feature engineering, model training, scoring, evaluation, and more. It supports various SQL operations to manage and manipulate data effectively.

## Keywords and Phrases
- **TD_FunctionTransform** 
- **Syntax Elements**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **Product Category**: Teradata Vantage™
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Recommendations for Using Analytic Functions**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Functions**

This structured overview provides a foundational understanding of the Teradata Vantage Analytics Database and its capabilities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform/TD_FunctionTransform-Syntax-Elements","2024-07-27 12:41:09"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit","text/html;charset=UTF-8","200","","Indexable","","TD_NonLinearCombineFit Function | NonLinearCombineFit - TD_NonLinearCombineFit - Analytics Database","99","953","This Analytics Database (SQL Engine) function transforms non-linear combination.","80","511","","0","TD_NonLinearCombineFit Function | NonLinearCombineFit - TD_NonLinearCombineFit - Analytics Database","99","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit","","","","","","210380","13455","13455","4.770","A+","254","64","3.969","22.948","Very Hard","11.695","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","0.514","","","","","","1.1","### Summary

The `TD_NonLinearCombineFit` function in Teradata's Analytics Database is a powerful tool for feature engineering, allowing users to create new features by combining existing ones in a non-linear fashion. This technique can enhance the performance of machine learning models by capturing complex relationships between features and the target variable. By leveraging non-linear combinations, it helps simplify models, mitigate overfitting, and improve interpretability.

### Code Example

This section provides examples of basic SQL operations: `SELECT`, `UPDATE`, `DELETE`, and `CREATE`. These examples will not directly involve `TD_NonLinearCombineFit`, but they set a foundational understanding of SQL operations.

#### 1. SELECT

```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE country = 'USA';
```

#### 2. UPDATE

```sql
UPDATE customers
SET last_name = 'Smith'
WHERE customer_id = 12345;
```

#### 3. DELETE

```sql
DELETE FROM customers
WHERE customer_id = 12345;
```

#### 4. CREATE

```sql
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    country VARCHAR(50)
);
```

### Keywords and Phrases

- **TD_NonLinearCombineFit Function**
- **NonLinearCombineFit**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Product Category: Teradata Vantage™**
- **Feature Engineering**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Recommendations for Using Analytic Functions**
- **Examples: How to Use TD_NonLinearCombineFit** 

This list encapsulates key information about the `TD_NonLinearCombineFit` function and its context within the Teradata environment.","25","1","3","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit","2024-07-27 11:22:45"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/Example-How-to-Use-TD_NonLinearCombineFit","text/html;charset=UTF-8","200","","Indexable","","TD_NonLinearCombineFit Example | NonLinearCombineFit - Example: How to Use TD_NonLinearCombineFit - Analytics Database","118","1147","See an example of the Analytics Database (SQL Engine) feature engineering transform function TD_NonLinearCombineFit.","116","752","","0","TD_NonLinearCombineFit Example | NonLinearCombineFit - Example: How to Use TD_NonLinearCombineFit - Analytics Database","118","Database Analytic Functions","27","TD_NonLinearCombineFit Input table","34","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/Example-How-to-Use-TD_NonLinearCombineFit","","","","","","209177","13128","13128","4.654","A+","170","62","2.742","60.730","Normal","11.640","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.551","","","","","","1.1","## Summary

The **TD_NonLinearCombineFit** function in Teradata Vantage is used for performing nonlinear regression analysis. It allows you to create a model based on a specified formula that combines various input columns to predict a target variable. This is particularly useful when the relationship between the variables is not linear. 

### Code Examples

Here are examples of SQL commands demonstrating how to **Select**, **Update**, **Delete**, and **Create** tables in Teradata, specifically in the context of using the `TD_NonLinearCombineFit` function.

#### Create Table Example

```sql
CREATE TABLE nonLinearCombineFit_input (
    passenger INT,
    survived INT,
    pclass VARCHAR(10),
    gender VARCHAR(10),
    age FLOAT,
    sibsp INT,
    parch INT,
    fare FLOAT,
    cabin VARCHAR(10),
    embarked VARCHAR(10)
);
```

#### Insert Data Example

```sql
INSERT INTO nonLinearCombineFit_input (passenger, survived, pclass, gender, age, sibsp, parch, fare, cabin, embarked)
VALUES
(1, 0, 'General', 'male', 22, 1, 0, 7.25, NULL, 'S'),
(2, 1, 'Deluxe', 'female', 38, 1, 1, 71.28, 'C85', 'C'),
(3, 1, 'General', 'female', 26, 0, 0, 7.93, NULL, 'S'),
(4, 1, 'Deluxe', 'female', 35, 1, 0, 53.1, 'C123', 'S'),
(5, 0, 'General', 'male', 35, 0, 1, 8.05, NULL, 'S');
```

#### Select Example

```sql
SELECT * FROM nonLinearCombineFit_input;
```

#### Update Example

```sql
UPDATE nonLinearCombineFit_input
SET fare = fare * 1.1
WHERE pclass = 'General';
```

#### Delete Example

```sql
DELETE FROM nonLinearCombineFit_input
WHERE passenger = 5;
```

#### Non-Linear Combine Fit Example

```sql
SELECT * FROM TD_NonLinearCombineFit (
    ON nonLinearCombineFit_input AS InputTable
    OUT TABLE FitTable (nonLinearCombineFit_output)
    USING
    TargetColumns ('SibSp', 'Parch', 'Fare')
    Formula ('Y=(X0+X1+1)*X2')
    ResultColumn ('TotalCost')
) as dt ORDER BY 1;
```

### Code Output Example

```plaintext
 total_cost     sibsp parch fare 
 ----------     ----- ----- ----
 Y=(X0+X1+1)*X2  null  null null
```

### Keywords and Phrases

- TD_NonLinearCombineFit Example
- NonLinearCombineFit - Example: How to Use TD_NonLinearCombineFit
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Non-Deterministic Behavior
- Deadlocks Using Volatile Tables
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Maximum Number of Columns in a Database Table
- TD_ConvertTo
- TD_GetRowsWithoutMissingValues
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- Example: How to Use TD_NonLinearCombineFit
- Example: How to Use TD_OneHotEncodingFit
- Example: Using TD_FillRowID to Generate Row Identifiers
- Example: How to Use TD_GLMPredict
- Example: How to Use TD_KMeans
- Example: How to Use TD_XGBoostPredict
- Example: How to Use TD_DecisionForestPredict
- Example: Using TD_ANOVA to Determine Difference of Insect Sprays
- Example: How to Use TD_TextParser
- Example: How to Use TD_FTest
- Example: How to Use TD_ZTest

This overview provides a foundational understanding of how to use the `TD_NonLinearCombineFit` function along with standard SQL operations within Teradata Vantage.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/Example-How-to-Use-TD_NonLinearCombineFit","2024-07-27 12:13:12"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/Optional-Syntax-Elements-for-TD_NonLinearCombineFit","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_NonLinearCombineFit - Analytics Database","72","680","OUT clause Accepts the OutputTable clause. ResultColumn Specifies the new feature column name generated by the Transform function. The Fit function saves the specified formula in this column. Default: TD_CombinedValue.","218","1388","","0","Optional Syntax Elements for TD_NonLinearCombineFit - Analytics Database","72","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/Optional-Syntax-Elements-for-TD_NonLinearCombineFit","","","","","","207865","12844","12844","4.553","A+","74","41","1.805","15.225","Very Hard","11.206","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.321","","","","","","1.1","### Summary

The **Teradata Vantage™** Analytics Database offers a wide range of analytic functions for various tasks such as data cleaning, feature engineering, model training, and evaluation. This guide covers essential SQL operations—**Select, Update, Delete, and Create**—along with examples tailored for the Analytics Database context. Understanding these operations is crucial for effective data manipulation within the Teradata environment.

### Code Examples

#### 1. Select
The **SELECT** statement is used to query data from a database. Here’s a basic example:

```sql
SELECT * 
FROM SalesData 
WHERE SalesAmount > 1000;
```

#### 2. Update
The **UPDATE** statement modifies existing records in a table. Below is an example:

```sql
UPDATE SalesData 
SET SalesAmount = SalesAmount * 1.10 
WHERE SalesRegion = 'North';
```

#### 3. Delete
The **DELETE** statement removes records from a table. Here’s how to do it:

```sql
DELETE FROM SalesData 
WHERE SalesDate < '2023-01-01';
```

#### 4. Create
The **CREATE** statement is used to create a new table. Below is an example to create a SalesData table:

```sql
CREATE TABLE SalesData (
    SalesID INT PRIMARY KEY,
    SalesDate DATE,
    SalesAmount DECIMAL(10, 2),
    SalesRegion VARCHAR(50)
);
```

### Keywords and Phrases

- **Optional Syntax Elements for TD_NonLinearCombineFit**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Data Exploration Functions**
- **Model Evaluation Functions**
- **TD_NonLinearCombineFit**
- **TD_OneHotEncodingFit**
- **TD_FillRowID**
- **TD_Silhouette**
- **TD_XGBoost**
- **Hypothesis Test Types**
- **NGramSplitter Syntax**
- **Sessionize Syntax**
- **OUT clause**
- **ResultColumn**

This overview provides a foundation for understanding how to interact with the Teradata Analytics Database using SQL operations, alongside relevant keywords that may assist in further exploring the database's capabilities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/Optional-Syntax-Elements-for-TD_NonLinearCombineFit","2024-07-27 12:26:04"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/Required-Syntax-Elements-for-TD_NonLinearCombineFit","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_NonLinearCombineFit - Analytics Database","72","684","ON clause Specifies the table name, view name or query as an InputTable. TargetColumns Specifies the input table column names to run the non-linear combination. Formula Specifies the formula. See ""Arithmetic, Trigonometric, Hyperbolic Operators/Functions"" in Teradata Vantage™ - SQL Functions, Expressions, and Predicate...","323","2025","","0","Required Syntax Elements for TD_NonLinearCombineFit - Analytics Database","72","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/Required-Syntax-Elements-for-TD_NonLinearCombineFit","","","","","","208164","12977","12977","4.600","A+","88","42","2.095","8.590","Very Hard","11.245","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.462","","","","","","1.1","## Summary

The **Teradata Vantage Analytics Database** provides a powerful set of analytic functions that support various tasks such as data cleaning, feature engineering, model training, and evaluation. With its robust capabilities, users can efficiently manage large datasets, apply complex statistical models, and derive meaningful insights.

This guide covers the essential SQL commands typical in relational databases (Select, Update, Delete, Create) alongside an overview of required syntax elements for the `TD_NonLinearCombineFit` function in the Teradata Analytics Database.

## Code Examples

### 1. Select
To retrieve data from a table, use the SELECT statement:
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

### 2. Update
To modify existing records in a table, use the UPDATE statement:
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

### 3. Delete
To remove records from a table, use the DELETE statement:
```sql
DELETE FROM table_name
WHERE condition;
```

### 4. Create
To create a new table, use the CREATE statement:
```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Required Syntax Elements for TD_NonLinearCombineFit - Analytics Database

- **Input Table**: Specifies the table name containing the input data.
- **TargetColumns**: Specifies the input table column names to run the non-linear combination.
- **Formula**: Specifies the formula using arithmetic, trigonometric, and hyperbolic operators/functions.

## Keywords and Phrases

- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Feature Engineering Utility Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Usage Notes**
- **Limitations When Using PARTITION BY**
- **Recommendations for Using Analytic Functions**
- **Displaying Online Help for Analytics Database Analytic Functions** 

This summary encapsulates the fundamental SQL operations and highlights critical aspects of the Teradata Vantage Analytics Database. By understanding these elements, users can effectively harness the power of the database for their analytic needs.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/Required-Syntax-Elements-for-TD_NonLinearCombineFit","2024-07-27 12:20:22"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/TD_NonLinearCombineFit-Input","text/html;charset=UTF-8","200","","Indexable","","TD_NonLinearCombineFit Input - Analytics Database","49","466","Input Table Schema Column Data Type Description TargetColumns BYTEINT,SMALLINT,INTEGER,BIGINT,DECIMAL,NUMERIC,FLOAT,REAL, DOUBLE PRECISION The input table column names to use in the non-linear combination.","205","1407","","0","TD_NonLinearCombineFit Input - Analytics Database","49","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/TD_NonLinearCombineFit-Input","","","","","","208599","13084","13084","4.638","A+","63","38","1.658","0.000","Very Hard","11.149","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.694","","","","","","1.1","## Summary

This guide provides an overview of the Teradata Vantage™ Analytics Database and its analytic functions, including how to perform basic SQL operations such as Select, Update, Delete, and Create. The Analytics Database is designed to support advanced analytical capabilities, enabling users to perform data manipulation and complex analyses efficiently.

### Code Examples

#### 1. **Select**
The `SELECT` statement is used to query data from a database.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

*Example:*
```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE country = 'USA';
```

#### 2. **Update**
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

*Example:*
```sql
UPDATE customers
SET last_name = 'Smith'
WHERE customer_id = 1;
```

#### 3. **Delete**
The `DELETE` statement removes records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

*Example:*
```sql
DELETE FROM customers
WHERE customer_id = 1;
```

#### 4. **Create**
The `CREATE` statement creates a new table in the database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

*Example:*
```sql
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    country VARCHAR(50)
);
```

### Keywords and Phrases
- TD_NonLinearCombineFit Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Pack
- Pack Syntax
- Required Syntax Elements for Pack
- Optional Syntax Elements for Pack
- Pack Input
- Pack Output
- Examples: How to Use Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_OutlierFilterTransform
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- Unpack
- Data Exploration Functions
- MovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- Feature Engineering Transform Functions
- Antiselect
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer
- TD_FunctionFit
- TD_FunctionTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_PolynomialFeaturesFit
- TD_PolynomialFeaturesTransform
- TD_RandomProjectionFit
- TD_RandomProjectionTransform
- TD_RowNormalizeFit
- TD_RowNormalizeTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_Unpivoting
- Feature Engineering Utility Functions
- TD_FillRowID
- TD_NumApply
- TD_RoundColumns
- TD_StrApply
- Model Training Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_KNN
- TD_OneClassSVM
- TD_SVM
- TD_XGBoost
- Model Scoring Functions
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_OneClassSVMPredict
- TD_SVMPredict
- TD_XGBoostPredict
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- Text Analytic Functions
- NGramSplitter
- TD_NaiveBayesTextClassifierPredict
- TD_NaiveBayesTextClassifierTrainer
- TD_SentimentExtractor
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Testing Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Path and Pattern Analysis Functions
- Attribution
- nPath
- Sessionize
- Input Table Schema
- Column Data Types
- Description","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/TD_NonLinearCombineFit-Input","2024-07-27 12:40:52"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/TD_NonLinearCombineFit-Output","text/html;charset=UTF-8","200","","Indexable","","TD_NonLinearCombineFit Output - Analytics Database","50","482","Output Table Schema Column Data Type Description ResultColumn VARCHAR CHARACTER SET UNICODE The Formula element displays in this column. TargetColumns BYTEINT,SMALLINT,INTEGER,BIGINT,DECIMAL,NUMERIC,FLOAT,REAL,DOUBLE PRECISION The specified target columns displayed as NULL values.","281","1953","","0","TD_NonLinearCombineFit Output - Analytics Database","50","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/TD_NonLinearCombineFit-Output","","","","","","209058","13225","13225","4.688","A+","71","40","1.775","0.000","Very Hard","11.161","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.678","","","","","","1.1","## Overview of Teradata Analytics Database Functions

Teradata's Analytics Database is designed to support various analytic functions that help in data processing, exploration, and modeling. This document provides a brief overview of how to perform basic SQL operations—Select, Update, Delete, and Create—along with examples. 

### SQL Operations

#### 1. Select
The **SELECT** statement is used to query data from a database. You can specify the columns you wish to retrieve and filter results using conditions.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

**Example:**
```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

#### 2. Update
The **UPDATE** statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example:**
```sql
UPDATE employees
SET salary = salary * 1.05
WHERE department = 'Sales';
```

#### 3. Delete
The **DELETE** statement removes records from a table based on a condition.

```sql
DELETE FROM table_name
WHERE condition;
```

**Example:**
```sql
DELETE FROM employees
WHERE last_name = 'Doe';
```

#### 4. Create
The **CREATE** statement is used to create a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example:**
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

### Summary
This guide provides an introduction to basic SQL operations within the Teradata Analytics Database, which can be utilized alongside its advanced analytic functions for data processing and analysis.

### Keywords and Phrases
- **TD_NonLinearCombineFit Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Hypothesis Testing Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Recommendations for Using Analytic Functions**
- **TD_ConvertTo**
- **TD_GetRowsWithoutMissingValues**
- **TD_OutlierFilterFit**
- **TD_SimpleImputeFit**
- **TD_OneHotEncodingFit**
- **TD_XGBoost**
- **TD_Silhouette**
- **TD_ClassificationEvaluator**
- **TD_RegressionEvaluator** 

This content is designed to help users navigate and utilize the Teradata Analytics Database effectively for their data analysis needs.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/TD_NonLinearCombineFit-Output","2024-07-27 12:08:11"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/TD_NonLinearCombineFit-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_NonLinearCombineFit Syntax | NonLinearCombineFit | Teradata Vantage - TD_NonLinearCombineFit Syntax - Analytics Database","123","1177","See the syntax of the Analytics Database (SQL Engine) function TD_NonLinearCombineFit and read descriptions of its required and optional syntax elements.","153","967","","0","TD_NonLinearCombineFit Syntax | NonLinearCombineFit | Teradata Vantage - TD_NonLinearCombineFit Syntax - Analytics Database","123","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/TD_NonLinearCombineFit-Syntax","","","","","","208500","13007","13007","4.611","A+","109","47","2.319","23.639","Very Hard","11.300","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.747","","","","","","1.1","### Summary of TD_NonLinearCombineFit in Teradata Vantage

The `TD_NonLinearCombineFit` function in Teradata Vantage is an analytic function used for model training in scenarios where non-linear relationships between variables need to be captured. This function allows users to specify a target variable and a formula for the model, enabling advanced statistical analysis and predictions. 

This function can be executed in various ways, including as part of a SELECT statement, or within CREATE TABLE or CREATE VIEW statements. 

### Code Examples

Here are examples of how to use SQL commands in Teradata, specifically focusing on SELECT, UPDATE, DELETE, and CREATE statements.

#### 1. SELECT

```sql
SELECT 
    customer_id, 
    purchase_amount 
FROM 
    sales 
WHERE 
    purchase_date >= '2023-01-01';
```

#### 2. UPDATE

```sql
UPDATE 
    customers 
SET 
    status = 'active' 
WHERE 
    last_purchase_date >= CURRENT_DATE - INTERVAL '1 YEAR';
```

#### 3. DELETE

```sql
DELETE FROM 
    sales 
WHERE 
    purchase_date < '2022-01-01';
```

#### 4. CREATE

```sql
CREATE TABLE new_sales (
    sale_id INT PRIMARY KEY,
    customer_id INT,
    purchase_amount DECIMAL(10, 2),
    purchase_date DATE
);
```

### Keywords and Phrases

- **TD_NonLinearCombineFit Syntax**
- **NonLinearCombineFit**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number 17.20**
- **Published June 2022**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Usage Notes**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Examples of Usage**","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/TD_NonLinearCombineFit-Syntax","2024-07-27 12:34:29"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform","text/html;charset=UTF-8","200","","Indexable","","TD_NonLinearCombineTransform | NonLinearCombineTransform - TD_NonLinearCombineTransform - Analytics Database","108","1084","This Analytics Database (SQL Engine) transform function returns the result in the new feature column.","101","630","","0","TD_NonLinearCombineTransform | NonLinearCombineTransform - TD_NonLinearCombineTransform - Analytics Database","108","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform","","","","","","210350","13422","13422","4.758","A+","229","61","3.754","8.334","Very Hard","11.659","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","1.230","","","","","","1.1","### Summary

The `TD_NonLinearCombineTransform` function is part of the Teradata Vantage™ Analytics Database and is designed to generate output feature values through non-linear combinations of input variables. Non-linear transformations are essential in capturing complex relationships in data that linear models may overlook. This functionality is crucial in machine learning applications where the relationships between features and targets are not straightforward.

### Code Examples

Below are examples of SQL statements for common database operations: `SELECT`, `UPDATE`, `DELETE`, and `CREATE`.

#### 1. SELECT
```sql
SELECT
    column1, column2
FROM
    table_name
WHERE
    condition;
```

#### 2. UPDATE
```sql
UPDATE
    table_name
SET
    column1 = value1,
    column2 = value2
WHERE
    condition;
```

#### 3. DELETE
```sql
DELETE FROM
    table_name
WHERE
    condition;
```

#### 4. CREATE
```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype
);
```

### Keywords and Phrases
- **TD_NonLinearCombineTransform**
- **NonLinearCombineTransform**
- **TD_NonLinearCombineTransform**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language English (United States)**
- **Last Update 2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform","2024-07-27 11:43:47"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/Example-How-to-Use-TD_NonLinearCombineTransform","text/html;charset=UTF-8","200","","Indexable","","TD_NonLinearCombineTransform Function Example | Teradata Vantage - Example: How to Use TD_NonLinearCombineTransform - Analytics Database","136","1337","See an example of the Analytics Database (SQL Engine) feature engineering transform function TD_NonLinearCombineTransform.","122","802","","0","TD_NonLinearCombineTransform Function Example | Teradata Vantage - Example: How to Use TD_NonLinearCombineTransform - Analytics Database","136","Database Analytic Functions","27","TD_NonLinearCombineFit InputTable","33","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/Example-How-to-Use-TD_NonLinearCombineTransform","","","","","","209311","13121","13121","4.651","A+","178","72","2.472","66.494","Normal","11.673","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.621","","","","","","1.1","## Summary

The `TD_NonLinearCombineTransform` function in Teradata Vantage is used to apply a non-linear combination transformation based on a previously fitted model. This function is particularly useful in analytics and data science applications where complex relationships between variables need to be modeled and evaluated. It allows users to leverage previously defined transformations to derive new insights from input data.

## Code Examples

### 1. **Select**
This SQL statement retrieves data from the `TD_NonLinearCombineTransform` function, applying the transformation to the `nonLinearCombineFit_input` table and storing the results in `FitTable`.

```sql
SELECT * 
FROM TD_NonLinearCombineTransform (
    ON nonLinearCombineFit_input AS InputTable
    ON nonLinearCombineFit_output AS FitTable DIMENSION
    USING
    Accumulate('Passenger')
) AS dt 
ORDER BY 1;
```

### 2. **Update**
To update a record in a table, you might use a statement like this:

```sql
UPDATE nonLinearCombineFit_output
SET TotalCost = TotalCost * 1.1
WHERE passenger = 1;
```

### 3. **Delete**
This command deletes records from a table based on a condition:

```sql
DELETE FROM nonLinearCombineFit_output
WHERE TotalCost < 10.00;
```

### 4. **Create**
To create a new table that stores transformed data, you can use this statement:

```sql
CREATE TABLE nonLinearCombineFit_output AS (
    SELECT passenger, TotalCost 
    FROM TD_NonLinearCombineTransform (
        ON nonLinearCombineFit_input AS InputTable
        ON nonLinearCombineFit_output AS FitTable DIMENSION
        USING
        Accumulate('Passenger')
    )
) WITH NO DATA;
```

## Keywords and Phrases

- **TD_NonLinearCombineTransform Function Example**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product Category**
- **Release Number**
- **Published Date**
- **Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Recommendations for Using Analytic Functions**
- **TD_NonLinearCombineFit**
- **TD_NonLinearCombineTransform SQL Call**
- **Accumulate Function**
- **Input and Output Tables** 

These keywords and phrases can serve as a guide for further exploration and understanding of the TD_NonLinearCombineTransform function and its context within Teradata Vantage.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/Example-How-to-Use-TD_NonLinearCombineTransform","2024-07-27 12:49:32"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/Optional-Syntax-Elements-for-TD_NonLinearCombineTransform","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_NonLinearCombineTransform - Analytics Database","78","751","Accumulate Specify the input table column names to copy to the output table.","76","479","","0","Optional Syntax Elements for TD_NonLinearCombineTransform - Analytics Database","78","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/Optional-Syntax-Elements-for-TD_NonLinearCombineTransform","","","","","","207508","12673","12673","4.493","A+","57","35","1.629","0.361","Very Hard","11.159","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.163","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database offers a rich set of analytic functions for a variety of applications including data cleaning, exploration, feature engineering, model training, and scoring. This document outlines the key components and examples of SQL operations such as Select, Update, Delete, and Create that are commonly used when working with these functions. 

In the context of the Analytics Database, understanding the syntax and application of these SQL commands is essential for effectively manipulating data and utilizing the powerful analytic functions available in Teradata Vantage.

## Code Examples

### 1. **Select**
Used to retrieve data from one or more tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

**Example:**
```sql
SELECT customer_id, customer_name
FROM customers
WHERE country = 'USA';
```

### 2. **Update**
Used to modify existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example:**
```sql
UPDATE customers
SET contact_name = 'John Doe'
WHERE customer_id = 1;
```

### 3. **Delete**
Used to remove records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

**Example:**
```sql
DELETE FROM customers
WHERE customer_id = 1;
```

### 4. **Create**
Used to create a new table in the database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example:**
```sql
CREATE TABLE new_customers (
    customer_id INT,
    customer_name VARCHAR(100),
    country VARCHAR(50)
);
```

## Keywords and Phrases
- Optional Syntax Elements for TD_NonLinearCombineTransform
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Feature Engineering Functions
- Model Training Functions
- Model Evaluation Functions
- Hypothesis Testing Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Workload Management Configuration
- Non-Deterministic Behavior
- Spool Space Exhaustion
- Recommendations for Using Analytic Functions
- TD_ConvertTo
- TD_SimpleImputeTransform
- TD_OneHotEncodingFit
- TD_KMeans
- TD_XGBoost
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_TextParser

This summary provides a foundational reference to Teradata's analytic capabilities and SQL operations that can enhance data analysis and decision-making processes.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/Optional-Syntax-Elements-for-TD_NonLinearCombineTransform","2024-07-27 11:49:59"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/Required-Syntax-Elements-for-TD_NonLinearCombineTransform","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_NonLinearCombineTransform - Analytics Database","78","755","ON clause Accept the Input Table and FitTable clauses.","54","339","","0","Required Syntax Elements for TD_NonLinearCombineTransform - Analytics Database","78","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/Required-Syntax-Elements-for-TD_NonLinearCombineTransform","","","","","","207464","12637","12637","4.480","A+","53","35","1.514","0.981","Very Hard","11.151","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.143","","","","","","1.1","## Summary

The Teradata Analytics Database provides a robust set of analytic functions designed to facilitate data manipulation, exploration, and modeling. This guide covers the essential SQL operations—SELECT, UPDATE, DELETE, and CREATE—commonly used in analytics databases, along with relevant code examples. Understanding these operations is critical for effectively managing and analyzing data within the Teradata environment.

## Code Examples

### 1. SELECT
The SELECT statement is used to query data from a database.

```sql
SELECT 
    employee_id, 
    first_name, 
    last_name 
FROM 
    employees 
WHERE 
    department = 'Sales';
```

### 2. UPDATE
The UPDATE statement modifies existing records in a table.

```sql
UPDATE 
    employees 
SET 
    salary = salary * 1.10 
WHERE 
    department = 'Sales';
```

### 3. DELETE
The DELETE statement removes records from a table.

```sql
DELETE FROM 
    employees 
WHERE 
    last_name = 'Doe';
```

### 4. CREATE
The CREATE statement creates a new table in the database.

```sql
CREATE TABLE new_employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

## Keywords and Phrases

- **Required Syntax Elements for TD_NonLinearCombineTransform**
- **Analytics Database**
- **Database Analytic Functions**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Release Number 17.20**
- **Published June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Product Category: Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact**
- **Limitations with PARTITION BY**
- **Functions and Disallowed Syntax Elements**
- **Displaying Online Help for Functions**
- **Workload Management Configuration**
- **Avoiding Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions**

These elements are essential for navigating the Teradata environment and optimizing your analytics processes. Understanding them will enhance efficiency and effectiveness in data management and analysis.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/Required-Syntax-Elements-for-TD_NonLinearCombineTransform","2024-07-27 12:04:48"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/TD_NonLinearCombineTransform-Input","text/html;charset=UTF-8","200","","Indexable","","TD_NonLinearCombineTransform Input - Analytics Database","55","537","Input Table Schema Column Data Type Description TargetColumns BYTEINT, SMALLINT,INTEGER, BIGINT, DECIMAL/NUMERIC, FLOAT, REAL, DOUBLE PRECISION The input table column names to use in the non-linear combination. AccumulateColumns ANY The input table column names to copy to the output table.","290","1947","","0","TD_NonLinearCombineTransform Input - Analytics Database","55","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/TD_NonLinearCombineTransform-Input","","","","","","209076","13144","13144","4.660","A+","81","40","2.025","5.291","Very Hard","11.167","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.533","","","","","","1.1","# Overview of Basic SQL Operations

In any relational database, four fundamental operations are performed: **Select**, **Insert**, **Update**, and **Delete**. These operations allow users to manipulate and retrieve data from databases effectively.

## Code Examples

### 1. Select
The `SELECT` statement is used to query data from a database. 

```sql
SELECT first_name, last_name 
FROM employees 
WHERE department = 'Sales';
```

### 2. Insert
The `INSERT` statement is used to add new rows to a table.

```sql
INSERT INTO employees (first_name, last_name, department, hire_date) 
VALUES ('John', 'Doe', 'Sales', '2023-01-15');
```

### 3. Update
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE employees 
SET department = 'Marketing' 
WHERE last_name = 'Doe';
```

### 4. Delete
The `DELETE` statement removes existing records from a table.

```sql
DELETE FROM employees 
WHERE last_name = 'Doe';
```

## Summary
The examples above demonstrate basic SQL operations for managing data in a relational database. Each operation plays a crucial role in maintaining and retrieving data as needed for various applications.

### Keywords and Phrases
- TD_NonLinearCombineTransform Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Examples: How to Use Pack
- Data Exploration Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- Usage Notes
- Workload Management Configuration
- Non-Deterministic Behavior
- Recommendations for Using Analytic Functions
- Example: How to Use TD_NonLinearCombineTransform
- Syntax Elements
- Required Syntax Elements
- Optional Syntax Elements
- Input and Output Descriptions","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/TD_NonLinearCombineTransform-Input","2024-07-27 12:28:56"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/TD_NonLinearCombineTransform-Output","text/html;charset=UTF-8","200","","Indexable","","TD_NonLinearCombineTransform Output - Analytics Database","56","553","Output Table Schema Column Data Type Description AccumulateColumns BYTEINT, SMALLINT,INTEGER, BIGINT, DECIMAL/NUMERIC, FLOAT, REAL, DOUBLE PRECISION The specified column names in the Accumulate element copied to the output table. ResultColumn REAL The values calculated using the specified formula are displayed.","312","2084","","0","TD_NonLinearCombineTransform Output - Analytics Database","56","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/TD_NonLinearCombineTransform-Output","","","","","","209129","13210","13210","4.683","A+","81","40","2.025","5.291","Very Hard","11.175","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.529","","","","","","1.1","## Summary

The **Analytics Database** within the Teradata Vantage™ ecosystem provides a robust framework for handling various analytical tasks. It includes a comprehensive range of analytic functions designed for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This guide covers fundamental SQL operations—Select, Update, Delete, and Create—alongside examples relevant to these operations in the context of an analytics database.

## Code Example

### 1. Select
The SELECT statement is used to query data from the database.

```sql
SELECT column1, column2
FROM your_table
WHERE condition;
```

### 2. Update
The UPDATE statement is used to modify existing records in a table.

```sql
UPDATE your_table
SET column1 = value1, column2 = value2
WHERE condition;
```

### 3. Delete
The DELETE statement is used to remove records from a table.

```sql
DELETE FROM your_table
WHERE condition;
```

### 4. Create
The CREATE statement is used to create a new table in the database.

```sql
CREATE TABLE your_table (
    column1 data_type,
    column2 data_type,
    ...
);
```

## Keywords and Phrases

- **TD_NonLinearCombineTransform Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This summary and code examples provide a foundational understanding of the SQL operations relevant to the Teradata Vantage™ Analytics Database, along with essential keywords that may aid in further exploration of its capabilities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/TD_NonLinearCombineTransform-Output","2024-07-27 12:05:34"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/TD_NonLinearCombineTransform-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_NonLinearCombineTransform Function Syntax | Teradata Vantage - TD_NonLinearCombineTransform Syntax - Analytics Database","122","1191","See the syntax of the Analytics Database (SQL Engine) function TD_NonLinearCombineTransform and read descriptions of its required and optional syntax elements.","159","1017","","0","TD_NonLinearCombineTransform Function Syntax | Teradata Vantage - TD_NonLinearCombineTransform Syntax - Analytics Database","122","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/TD_NonLinearCombineTransform-Syntax","","","","","","208331","12910","12910","4.577","A+","103","45","2.289","27.920","Very Hard","11.274","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.545","","","","","","1.1","## Summary

The `TD_NonLinearCombineTransform` function in Teradata Vantage is part of the Analytics Database analytic functions that allow users to perform complex transformations on data. This function is designed to facilitate the combination of multiple features in a non-linear manner, which can be particularly useful in machine learning and data analysis contexts.

This function can be utilized in various scenarios, including data preprocessing for model training and scoring. It works by taking input data from specified tables or views and applying transformations based on the defined parameters.

### Code Example

Below are examples of how to perform basic SQL operations such as `SELECT`, `UPDATE`, `DELETE`, and `CREATE` in Teradata:

#### SELECT
```sql
SELECT *
FROM your_table
WHERE condition_column = 'some_value';
```

#### UPDATE
```sql
UPDATE your_table
SET column_to_update = 'new_value'
WHERE condition_column = 'some_value';
```

#### DELETE
```sql
DELETE FROM your_table
WHERE condition_column = 'some_value';
```

#### CREATE
```sql
CREATE TABLE new_table (
    column1 INT,
    column2 VARCHAR(100),
    column3 DATE
);
```

### Keywords and Phrases
- **TD_NonLinearCombineTransform Function Syntax**
- **Teradata Vantage**
- **TD_NonLinearCombineTransform Syntax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Product Category: Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This summary provides a foundational overview of the `TD_NonLinearCombineTransform` function, its usage in SQL operations, and relevant keywords that can guide further exploration in the Teradata Vantage environment.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/TD_NonLinearCombineTransform-Syntax","2024-07-27 12:54:34"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit","text/html;charset=UTF-8","200","","Indexable","","TD_OneHotEncodingFit | OneHotEncodingFit | Teradata Vantage - TD_OneHotEncodingFit - Analytics Database","103","978","This Analytics Database (SQL Engine) function outputs a table of attributes and categorical values to input to TD_OneHotEncodingTransform.","138","876","","0","TD_OneHotEncodingFit | OneHotEncodingFit | Teradata Vantage - TD_OneHotEncodingFit - Analytics Database","103","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit","","","","","","210333","13381","13381","4.744","A+","160","54","2.963","8.719","Very Hard","11.371","1","4","","707","707","0","99.860","718","716","0","","","","","","","","","0.554","","","","","","1.1","## Summary

In Teradata Vantage, analytic functions play a significant role in data manipulation and analysis. The **TD_OneHotEncodingFit** function is a specific utility for preparing categorical data for machine learning models by converting categorical variables into a format that can be provided to ML algorithms. This process involves generating a one-hot encoding schema that can be applied with the **TD_OneHotEncodingTransform** function. 

This guide will provide a brief overview of the primary SQL operations (Select, Update, Delete, Create) alongside the specific usage of the **TD_OneHotEncodingFit** function.

## Code Example

### SELECT
Retrieve a subset of data from a table.

```sql
SELECT column1, column2
FROM your_table
WHERE condition;
```

### INSERT
Add new records to a table.

```sql
INSERT INTO your_table (column1, column2)
VALUES (value1, value2);
```

### UPDATE
Modify existing records in a table.

```sql
UPDATE your_table
SET column1 = value1
WHERE condition;
```

### DELETE
Remove records from a table.

```sql
DELETE FROM your_table
WHERE condition;
```

### Create Table
Create a new table in the database.

```sql
CREATE TABLE new_table (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Using TD_OneHotEncodingFit
Below is an example of how to use the **TD_OneHotEncodingFit** function to prepare categorical data for machine learning.

```sql
-- Step 1: Fit the one-hot encoding model
CALL TD_OneHotEncodingFit (
    TABLE your_table,
    INPUT_COLUMN 'your_categorical_column',
    OUTPUT_TABLE 'your_output_table'
);

-- Step 2: Use TD_OneHotEncodingTransform to apply the one-hot encoding
CALL TD_OneHotEncodingTransform (
    INPUT_TABLE 'your_input_table',
    OUTPUT_TABLE 'your_transformed_table',
    FIT_TABLE 'your_output_table'
);
```

## Keywords and Phrases
- TD_OneHotEncodingFit
- OneHotEncodingFit
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Maximum Number of Columns in a Database Table
- Recommendations for Using Analytic Functions
- One-Hot Encoding
- Categorical Data
- Machine Learning
- SQL Operations: Select, Update, Delete, Create","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit","2024-07-27 12:39:40"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/Example-How-to-Use-TD_OneHotEncodingFit","text/html;charset=UTF-8","200","","Indexable","","TD_OneHotEncodingFit Example | OneHotEncodingFit - Example: How to Use TD_OneHotEncodingFit - Analytics Database","112","1078","See an example of the Analytics Database (SQL Engine) feature engineering transform function TD_OneHotEncodingFit.","114","738","","0","TD_OneHotEncodingFit Example | OneHotEncodingFit - Example: How to Use TD_OneHotEncodingFit - Analytics Database","112","Database Analytic Functions","27","TD_OneHotEncodingFit Input","26","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/Example-How-to-Use-TD_OneHotEncodingFit","","","","","","236168","15801","15801","5.602","A+","721","190","3.795","11.489","Very Hard","12.177","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.532","","","","","","1.1","# Teradata Vantage™: TD_OneHotEncodingFit Overview and Examples

## Summary
The `TD_OneHotEncodingFit` function in Teradata Vantage™ is used for one-hot encoding categorical variables in datasets, which transforms these variables into a form that is suitable for machine learning algorithms. This encoding technique creates binary columns for each category in the categorical variable, enabling models to interpret these features correctly. The function supports both dense and sparse input formats, and it provides options for specifying target columns, category counts, and input characteristics.

## Code Examples

### 1. Create Table
```sql
DROP TABLE onehot_titanic_dataset;

CREATE SET TABLE onehot_titanic_dataset(
    Passenger_id INTEGER,
    Survived INTEGER,
    Pclass VARCHAR(5) CHARACTER SET LATIN NOT CASESPECIFIC,
    Name VARCHAR(20) CHARACTER SET LATIN NOT CASESPECIFIC,
    Age INTEGER,
    Gender VARCHAR(10) CHARACTER SET LATIN NOT CASESPECIFIC,
    City VARCHAR(5) CHARACTER SET LATIN NOT CASESPECIFIC,
    Cabin VARCHAR(5) CHARACTER SET LATIN NOT CASESPECIFIC
);
```

### 2. Insert Data
```sql
INSERT INTO onehot_titanic_dataset VALUES (1, 0, 'A', 'Mr. Owen Harris', 22, 'male', 'Pune', 'a');
INSERT INTO onehot_titanic_dataset VALUES (2, 1, 'B', 'Mrs. John Bradley', 38, 'female', 'Hyd', 'a');
INSERT INTO onehot_titanic_dataset VALUES (3, 1, 'C', 'Mrs. Laina', 26, 'female', 'Pune', 'b');
INSERT INTO onehot_titanic_dataset VALUES (4, 0, 'B', 'Mrs. Jacques Heath', 25, 'female', 'Hyd', 'c');
INSERT INTO onehot_titanic_dataset VALUES (5, 1, 'D', 'Mr. John Doe', 27, 'male', 'Del', 'a');
INSERT INTO onehot_titanic_dataset VALUES (6, 1, 'E', 'Mr. Ben Tennison', 22, 'male', 'Hyd', 'b');
```

### 3. One-Hot Encoding with Dense Input
```sql
SELECT * FROM TD_OneHotEncodingFit(
    ON onehot_titanic_dataset AS INPUTTABLE
    USING
        TargetColumn('Gender', 'Cabin', 'City')
        OtherColumnName('other')
        IsInputDense('true')
        CategoryCounts(2, 3, 3)
        Approach('Auto')
) AS dt;
```

### 4. Create Category Table
```sql
CREATE TABLE categoryTable (column_name VARCHAR(20) CHARACTER SET Latin NOT CASESPECIFIC,
    category VARCHAR(20) CHARACTER SET Latin NOT CASESPECIFIC);

INSERT INTO categoryTable VALUES ('Gender', 'Male');
INSERT INTO categoryTable VALUES ('Gender', 'Female');
INSERT INTO categoryTable VALUES ('Cabin', 'a');
INSERT INTO categoryTable VALUES ('Cabin', 'b');
INSERT INTO categoryTable VALUES ('Cabin', 'c');
INSERT INTO categoryTable VALUES ('City', 'Del');
INSERT INTO categoryTable VALUES ('City', 'Hyd');
```

### 5. One-Hot Encoding with List Approach
```sql
SELECT * FROM TD_OneHotEncodingFit(
    ON onehot_titanic_dataset AS INPUTTABLE
    ON categoryTable AS categoryTable Dimension
    USING
        TargetColumn('Gender', 'Cabin', 'City')
        CategoryCounts(2, 3, 2)
        TargetColumnNames('column_name')
        CategoriesColumn('category')
        OtherColumnName('other')
        IsInputDense('true')
        Approach('List')
) AS dt;
```

### 6. One-Hot Encoding with Sparse Input
```sql
DROP TABLE onehot_sparse_input;

CREATE TABLE onehot_sparse_input (id INTEGER, attribute_column VARCHAR(20), value_column VARCHAR(20));

INSERT INTO onehot_sparse_input VALUES (1, 'Survived', 0);
INSERT INTO onehot_sparse_input VALUES (2, 'Survived', 1);
INSERT INTO onehot_sparse_input VALUES (3, 'Survived', 1);
INSERT INTO onehot_sparse_input VALUES (1, 'Pclass', 'A');
INSERT INTO onehot_sparse_input VALUES (2, 'Pclass', 'B');
INSERT INTO onehot_sparse_input VALUES (3, 'Pclass', 'C');
INSERT INTO onehot_sparse_input VALUES (1, 'Name', 'Mr. Owen Harris');
INSERT INTO onehot_sparse_input VALUES (2, 'Name', 'Mrs. John Bradley');
INSERT INTO onehot_sparse_input VALUES (3, 'Name', 'Mrs. Laina');
INSERT INTO onehot_sparse_input VALUES (1, 'Age', 22);
INSERT INTO onehot_sparse_input VALUES (2, 'Age', 38);
INSERT INTO onehot_sparse_input VALUES (3, 'Age', 26);
INSERT INTO onehot_sparse_input VALUES (1, 'Gender', 'male');
INSERT INTO onehot_sparse_input VALUES (2, 'Gender', 'female');
INSERT INTO onehot_sparse_input VALUES (3, 'Gender', 'female');
INSERT INTO onehot_sparse_input VALUES (1, 'City', 'Del');
INSERT INTO onehot_sparse_input VALUES (2, 'City', 'Hyd');
INSERT INTO onehot_sparse_input VALUES (3, 'City', 'Pune');
INSERT INTO onehot_sparse_input VALUES (1, 'Cabin', 'a');
INSERT INTO onehot_sparse_input VALUES (2, 'Cabin', 'a');
INSERT INTO onehot_sparse_input VALUES (3, 'Cabin', 'b');

SELECT * FROM TD_OneHotEncodingFit(
    ON onehot_sparse_input AS InputTable PARTITION BY attribute_column
    USING
        IsInputDense('false')
        TargetAttributes('Gender', 'Cabin', 'City')
        AttributeColumn('attribute_column')
        ValueColumn('value_column')
) AS dt ORDER BY 1, 2;
```

## Keywords and Phrases
- **TD_OneHotEncodingFit Example**
- **OneHotEncodingFit - Example: How to Use**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Function Names with and without TD Prefix**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Recommendations for Using Analytic Functions**","28","1","4","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/Example-How-to-Use-TD_OneHotEncodingFit","2024-07-27 12:35:22"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/Optional-Syntax-Elements-for-TD_OneHotEncodingFit","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_OneHotEncodingFit - Analytics Database","70","657","ON clause Accept the CategoryTable clause. Applicable for dense input format only. IsInputDense Specify whether the input is dense or sparse. CategoryTable is meant for dense input format and not for sparse format. TargetColumnNames Specify the CategoryTable column which contains the name of the target columns. Categor...","323","2050","","0","Optional Syntax Elements for TD_OneHotEncodingFit - Analytics Database","70","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/Optional-Syntax-Elements-for-TD_OneHotEncodingFit","","","","","","210581","13521","13521","4.793","A+","298","78","3.821","28.931","Very Hard","11.823","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.885","","","","","","1.1","### Summary
The **Analytics Database** in Teradata Vantage™ provides various analytic functions for data exploration, modeling, and evaluation. Functionality such as **One Hot Encoding**, data cleaning, feature engineering, and model training are essential for preparing data for analysis and building predictive models. This guide will focus on the SQL operations of **Select**, **Update**, **Delete**, and **Create**, along with an example of how to use the `TD_OneHotEncodingFit` function.

### Code Examples

#### 1. Select
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT column1, column2
FROM my_table
WHERE condition;
```

#### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE my_table
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 3. Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM my_table
WHERE condition;
```

#### 4. Create
The `CREATE` statement is used to create a new table or database.

```sql
CREATE TABLE new_table (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Example: TD_OneHotEncodingFit
The `TD_OneHotEncodingFit` function is used to transform categorical variables into a format suitable for machine learning algorithms.

```sql
SELECT TD_OneHotEncodingFit(
    ON my_table,
    TargetColumnNames => 'category_column',
    OtherColumnName => 'other_column',
    IsInputDense => 'true'
) AS OneHotEncodedOutput
FROM my_table;
```

### Keywords and Phrases
- **Optional Syntax Elements for TD_OneHotEncodingFit**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **English (United States)**
- **Last Update**
- **Data Cleaning Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Input Table Schemas**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Recommendations for Using Analytic Functions**
- **Examples of Functions**
- **TD_OneHotEncodingTransform** 
- **OtherColumnName**
- **TargetColumnNames**
- **CategoriesColumn**
- **CategoryCounts**
- **Approach**
- **OtherAttributeNames**

This structured overview provides a solid foundation for understanding how to perform basic SQL operations and utilize analytic functions in Teradata Vantage™.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/Optional-Syntax-Elements-for-TD_OneHotEncodingFit","2024-07-27 12:42:27"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/Required-Syntax-Elements-for-TD_OneHotEncodingFit","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_OneHotEncodingFit - Analytics Database","70","661","ON clause Accept the InputTable clause. Applicable for dense and sparse input format. IsInputDense Specify whether the input is dense or sparse. TargetColumn [Required with IsInputDense ('true'), disallowed otherwise.] Specify the InputTable categorical columns to be encoded. The maximum number of unique columns in the...","323","2023","","0","Required Syntax Elements for TD_OneHotEncodingFit - Analytics Database","70","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/Required-Syntax-Elements-for-TD_OneHotEncodingFit","","","","","","210324","13493","13493","4.783","A+","301","79","3.810","36.859","Hard","11.823","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.537","","","","","","1.1","### Summary

The Teradata Vantage Analytics Database offers a suite of analytic functions that aid in various data processing tasks, including data cleaning, exploration, feature engineering, model training, scoring, and evaluation. The `TD_OneHotEncodingFit` function is a specific utility for transforming categorical data into a numerical format suitable for machine learning models, employing one-hot encoding techniques. This function is particularly useful in scenarios where categorical variables need to be converted into a binary matrix representation.

### Code Example

Here’s a quick reference for basic SQL operations, including `SELECT`, `UPDATE`, `DELETE`, and `CREATE` statements relevant to the `TD_OneHotEncodingFit` context.

#### SELECT
```sql
SELECT *
FROM your_table
WHERE condition;
```

#### UPDATE
```sql
UPDATE your_table
SET column_name = new_value
WHERE condition;
```

#### DELETE
```sql
DELETE FROM your_table
WHERE condition;
```

#### CREATE
```sql
CREATE TABLE your_table (
    column1 datatype,
    column2 datatype,
    ...
);
```

### TD_OneHotEncodingFit Example

Here’s an example of how to use the `TD_OneHotEncodingFit` function:

```sql
SELECT TD_OneHotEncodingFit(
    InputTable => 'your_table',
    TargetColumn => 'category_column',
    IsInputDense => 'true',
    TargetAttributes => ('attribute1', 'attribute2'),
    CategoryCounts => (count1, count2)
) AS encoded_output
FROM your_table;
```

### Keywords and Phrases

- **Required Syntax Elements for TD_OneHotEncodingFit**
- **Analytics Database**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **How to Read Syntax**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Recommendations for Using Analytic Functions**
- **Example Usage Notes** 

By following the guidelines and examples provided, users can effectively utilize the `TD_OneHotEncodingFit` function in their data processing tasks within the Teradata Vantage environment.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/Required-Syntax-Elements-for-TD_OneHotEncodingFit","2024-07-27 11:45:28"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/TD_OneHotEncodingFit-Input","text/html;charset=UTF-8","200","","Indexable","","TD_OneHotEncodingFit Input - Analytics Database","47","443","InputTable Schema for Dense Input Column Data Type Description target_column CHAR or VARCHAR (CHARACTER SET LATIN or UNICODE) Columns from the InputTable to be encoded. InputTable Schema for Sparse Input Column Data Type Description attribute_column CHAR or VARCHAR (CHARACTER SET LATIN or UNICODE) Column from the Input...","323","2185","","0","TD_OneHotEncodingFit Input - Analytics Database","47","Database Analytic Functions","27","InputTable Schema for Dense Input","33","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/TD_OneHotEncodingFit-Input","","","","","","212379","13329","13329","4.725","A+","162","56","2.893","24.254","Very Hard","11.251","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.706","","","","","","1.1","## Summary

This document provides an overview of the Teradata Vantage™ Analytics Database and its analytic functions. It outlines various categories of functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation, among others. The document also covers syntax, examples of usage, and various input/output requirements for different functions. 

The following sections provide a concise ""Code Example"" segment showcasing basic SQL operations: Select, Update, Delete, and Create. 

## Code Example

### 1. Select

```sql
SELECT first_name, last_name, email 
FROM customers 
WHERE status = 'active';
```

### 2. Update

```sql
UPDATE customers 
SET status = 'inactive' 
WHERE last_purchase_date < '2022-01-01';
```

### 3. Delete

```sql
DELETE FROM customers 
WHERE status = 'inactive' 
AND last_purchase_date < '2020-01-01';
```

### 4. Create

```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## Keywords and Phrases

- **TD_OneHotEncodingFit Input**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/TD_OneHotEncodingFit-Input","2024-07-27 12:48:54"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/TD_OneHotEncodingFit-Output","text/html;charset=UTF-8","200","","Indexable","","TD_OneHotEncodingFit Output - Analytics Database","48","459","Output Table Schema for Dense Input Column Data Type Description targetColumn_name INTEGER Used to identify TargetColumns in the Transform function. Contains TargetColumn names. <targetColumn>_<cat_value> VARCHAR (CHARACTER SET UNICODE) Preserves the column definition for the Transform function. Contains NULL values. <...","323","1968","","0","TD_OneHotEncodingFit Output - Analytics Database","48","Database Analytic Functions","27","Output Table Schema for Dense Input","35","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/TD_OneHotEncodingFit-Output","","","","","","212238","13431","13431","4.761","A+","150","63","2.381","0.000","Very Hard","11.299","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.554","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a variety of functions for data manipulation and analysis, including capabilities for creating, selecting, updating, and deleting data. This guide will cover basic SQL commands used in database operations, along with specific Teradata functions related to the Analytics Database.

### Code Example

#### 1. **Create**
To create a new table within the database, you can use the following SQL command:

```sql
CREATE TABLE employees (
    employee_id INTEGER PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

#### 2. **Select**
To select data from a table, you can use the following SQL statement:

```sql
SELECT first_name, last_name, salary
FROM employees
WHERE department = 'Sales';
```

#### 3. **Update**
To update existing records in a table, use the following SQL command:

```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department = 'Sales';
```

#### 4. **Delete**
To delete records from a table, you can use the following SQL command:

```sql
DELETE FROM employees
WHERE employee_id = 1001;
```

### Keywords and Phrases

- **TD_OneHotEncodingFit Output**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Recommendations for Using Analytic Functions**

This summary and code examples serve as a foundational understanding of basic SQL operations and the specific functionalities provided by the Teradata Vantage Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/TD_OneHotEncodingFit-Output","2024-07-27 11:21:45"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/TD_OneHotEncodingFit-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_OneHotEncodingFit Syntax | OneHotEncodingFit - TD_OneHotEncodingFit Syntax - Analytics Database","98","932","See the syntax of the Analytics Database (SQL Engine) function TD_OneHotEncodingFit and read descriptions of its required and optional syntax elements.","151","953","","0","TD_OneHotEncodingFit Syntax | OneHotEncodingFit - TD_OneHotEncodingFit Syntax - Analytics Database","98","Database Analytic Functions","27","TD_OneHotEncodingFit Syntax for Dense Input","43","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/TD_OneHotEncodingFit-Syntax","","","","","","210084","13234","13234","4.692","A+","187","75","2.493","15.198","Very Hard","11.592","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.576","","","","","","1.1","### Summary
In this section, we will cover the basic SQL operations of Select, Update, Delete, and Create, which are fundamental for managing and manipulating data within a database. Each operation allows users to interact with the data in different ways, and we'll explore the syntax and examples for each.

### Code Examples

#### 1. SELECT
The `SELECT` statement is used to retrieve data from one or more tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

**Example:**
```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

#### 2. UPDATE
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example:**
```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department = 'Sales';
```

#### 3. DELETE
The `DELETE` statement is used to remove records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

**Example:**
```sql
DELETE FROM employees
WHERE last_name = 'Smith';
```

#### 4. CREATE
The `CREATE` statement is used to create a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example:**
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    hire_date DATE,
    salary DECIMAL(10, 2)
);
```

### Keywords and Phrases
- TD_OneHotEncodingFit Syntax
- OneHotEncodingFit - TD_OneHotEncodingFit Syntax
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- gjn1627595495337.ditamap
- dita:ditavalPath
- ayr1485454803741.ditaval
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Exploration Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Feature Engineering Utility Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_Unpivoting
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/TD_OneHotEncodingFit-Syntax","2024-07-27 11:24:23"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/TD_OneHotEncodingFit-Usage-Notes","text/html;charset=UTF-8","200","","Indexable","","TD_OneHotEncodingFit Usage Notes | OneHotEncodingFit - TD_OneHotEncodingFit Usage Notes - Analytics Database","108","1040","Learn about the technique with using the Analytics Database (SQL Engine) feature engineering transform function TD_OneHotEncodingFit.","133","856","","0","TD_OneHotEncodingFit Usage Notes | OneHotEncodingFit - TD_OneHotEncodingFit Usage Notes - Analytics Database","108","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/TD_OneHotEncodingFit-Usage-Notes","","","","","","213858","14016","14016","4.969","A+","449","87","5.161","68.950","Normal","11.843","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.818","","","","","","1.1","# Overview of One Hot Encoding in Teradata Vantage

One hot encoding is a widely used technique for converting categorical variables into a numerical format suitable for machine learning algorithms. In Teradata Vantage, the `TD_OneHotEncodingFit` function allows users to fit one hot encoding to a dataset, and `TD_OneHotEncodingTransform` is used to apply this transformation to new data.

## Key Features of One Hot Encoding
- Each category in the original variable is represented as a binary vector.
- The length of the vector equals the number of unique categories.
- A value of 1 indicates the presence of a category, while 0 indicates its absence.

## Example Data
Let's assume we have a dataset containing fruits and their prices:

| Fruit  | Categorical Value | Price |
|--------|-------------------|-------|
| apple  | 1                 | 5     |
| mango  | 2                 | 10    |
| apple  | 1                 | 15    |
| orange | 3                 | 20    |

## Result of One Hot Encoding
After applying one hot encoding to the `Fruit` column, we would get the following result:

| apple | mango | orange | price |
|-------|-------|--------|-------|
| 1     | 0     | 0      | 5     |
| 0     | 1     | 0      | 10    |
| 1     | 0     | 0      | 15    |
| 0     | 0     | 1      | 20    |

## Code Example

### 1. Create a Table
```sql
CREATE TABLE FruitPrices (
    Fruit VARCHAR(20),
    CategoricalValue INT,
    Price DECIMAL(10, 2)
);
```

### 2. Insert Data
```sql
INSERT INTO FruitPrices (Fruit, CategoricalValue, Price) VALUES ('apple', 1, 5);
INSERT INTO FruitPrices (Fruit, CategoricalValue, Price) VALUES ('mango', 2, 10);
INSERT INTO FruitPrices (Fruit, CategoricalValue, Price) VALUES ('apple', 1, 15);
INSERT INTO FruitPrices (Fruit, CategoricalValue, Price) VALUES ('orange', 3, 20);
```

### 3. Fit One Hot Encoding
```sql
CALL TD_OneHotEncodingFit('FruitPrices', 'Fruit', 'Fruit_Encoded');
```

### 4. Transform Data
```sql
CALL TD_OneHotEncodingTransform('Fruit_Encoded', 'FruitPrices', 'TransformedFruitPrices');
```

### 5. Resulting Table
The resulting table `TransformedFruitPrices` will have the one hot encoded columns.

## Keywords and Phrases
- **TD_OneHotEncodingFit Usage Notes**
- **OneHotEncodingFit - TD_OneHotEncodingFit Usage Notes**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **One Hot Encoding**
- **Categorical Variables**
- **Machine Learning Algorithms**
- **Teradata Functions**
- **Binary Vectors**
- **Numerical Format** 

This summary provides a comprehensive overview of one hot encoding in Teradata Vantage, along with practical code examples and relevant keywords for further exploration.","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/TD_OneHotEncodingFit-Usage-Notes","2024-07-27 11:54:26"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform","text/html;charset=UTF-8","200","","Indexable","","TD_OneHotEncodingTransform | OneHotEncodingTransform - TD_OneHotEncodingTransform - Analytics Database","102","1015","This Analytics Database (SQL Engine) feature engineering transform function encodes specified attributes and categorical values as one-hot numeric vectors.","155","971","","0","TD_OneHotEncodingTransform | OneHotEncodingTransform - TD_OneHotEncodingTransform - Analytics Database","102","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform","","","","","","210412","13381","13381","4.744","A+","146","56","2.607","0.000","Very Hard","11.399","1","4","","707","707","0","99.860","718","716","0","","","","","","","","","0.472","","","","","","1.1","### Summary

The **Teradata Vantage™** platform offers a powerful **Analytics Database** that includes a variety of analytic functions for tasks such as data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Among these functions, the **TD_OneHotEncodingTransform** function is used to convert categorical variables into a format that can be provided to machine learning algorithms to improve predictions. This function leverages the output from the **TD_OneHotEncodingFit** function to apply the one-hot encoding transformation to the specified data.

### Code Examples

#### 1. Create
To create a new table in Teradata Vantage:
```sql
CREATE TABLE my_table (
    id INT,
    category VARCHAR(100),
    value DECIMAL(10, 2)
);
```

#### 2. Select
To select all records from the table:
```sql
SELECT * FROM my_table;
```

#### 3. Update
To update a specific record in the table:
```sql
UPDATE my_table
SET value = value * 1.1
WHERE category = 'electronics';
```

#### 4. Delete
To delete records from the table based on a condition:
```sql
DELETE FROM my_table
WHERE id < 10;
```

#### 5. One-Hot Encoding Example
Using the **TD_OneHotEncodingTransform** function:
```sql
-- Assume that the TD_OneHotEncodingFit has been executed and fitted previously
SELECT *
FROM TD_OneHotEncodingTransform(
    ON my_table
    USING
    TD_OneHotEncodingFit_output
) AS encoded_table;
```

### Keywords and Phrases
- **TD_OneHotEncodingTransform**
- **OneHotEncodingTransform**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Recommendations for Using Analytic Functions**","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform","2024-07-27 11:55:26"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/Example-How-to-Use-TD_OneHotEncodingTransform","text/html;charset=UTF-8","200","","Indexable","","TD_OneHotEncodingTransform Example | OneHotEncodingTransform - Example: How to Use TD_OneHotEncodingTransform - Analytics Database","130","1291","See an example of the Analytics Database (SQL Engine) feature engineering transform function TD_OneHotEncodingTransform.","120","788","","0","TD_OneHotEncodingTransform Example | OneHotEncodingTransform - Example: How to Use TD_OneHotEncodingTransform - Analytics Database","130","Database Analytic Functions","27","Dense InputTable: onehot_titanic_dataset","40","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/Example-How-to-Use-TD_OneHotEncodingTransform","","","","","","257689","15695","15695","5.564","A+","830","233","3.562","60.113","Normal","10.940","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.524","","","","","","1.1","### Summary

This document provides an overview of the Teradata Vantage™ Analytics Database analytic functions, focusing on data transformation techniques, particularly one-hot encoding. One-hot encoding is a common preprocessing step in machine learning that converts categorical variables into a format that can be provided to machine learning algorithms to improve predictions. The functions `TD_OneHotEncodingFit` and `TD_OneHotEncodingTransform` are used to fit and transform data for this purpose.

### Code Example

Here are SQL examples demonstrating the basic operations of **Select**, **Update**, **Delete**, and **Create** related to the `TD_OneHotEncodingTransform` function.

#### Create Table
```sql
CREATE TABLE onehot_titanic_dataset (
    Passenger_id INTEGER,
    Survived INTEGER,
    Pclass CHAR(1),
    Name VARCHAR(100),
    Age INTEGER,
    Gender CHAR(6),
    City CHAR(3),
    Cabin CHAR(1)
);
```

#### Insert Data
```sql
INSERT INTO onehot_titanic_dataset VALUES
(1, 0, 'A', 'Mr. Owen Harris', 22, 'male', 'Del', 'a'),
(2, 1, 'B', 'Mrs. John Bradley', 38, 'female', 'Hyd', 'a'),
(3, 1, 'C', 'Mrs. Laina', 26, 'female', 'Pune', 'b');
```

#### Select Data
```sql
SELECT * FROM onehot_titanic_dataset WHERE Survived = 1;
```

#### Update Data
```sql
UPDATE onehot_titanic_dataset 
SET Gender = 'non-binary' 
WHERE Passenger_id = 1;
```

#### Delete Data
```sql
DELETE FROM onehot_titanic_dataset 
WHERE Passenger_id = 3;
```

#### One-Hot Encoding Example
To perform one-hot encoding using the `TD_OneHotEncodingTransform`, you would typically first fit the model and then apply the transformation:

```sql
CREATE TABLE onehot_titanic_fit_output AS (
    SELECT * FROM TD_OneHotEncodingFit(
        ON onehot_titanic_dataset AS InputTable
        USING
        TargetColumn('Gender','Cabin','City')
        OtherColumnName('other')
        IsInputDense('true')
        CategoryCounts(2,3,3)
        Approach('Auto')
    ) AS dt 
) WITH DATA;

SELECT * FROM TD_OneHotEncodingTransform (
    ON onehot_titanic_dataset AS InputTable
    ON onehot_titanic_fit_output AS FitTable Dimension
    USING
    IsInputDense('True')
) AS dt ORDER BY 1;
```

### Keywords and Phrases
- TD_OneHotEncodingTransform Example
- OneHotEncodingTransform - Example: How to Use TD_OneHotEncodingTransform
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Hypothesis Testing Functions
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Spool Space Exhaustion
- Recommendations for Using Analytic Functions
- Dense Input
- Sparse Input
- FitTable Output
- SQL Call
- Example of One-Hot Encoding
- Input Data for One-Hot Encoding","29","1","3","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/Example-How-to-Use-TD_OneHotEncodingTransform","2024-07-27 12:29:21"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/Optional-Syntax-Elements-for-TD_OneHotEncodingTransform","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_OneHotEncodingTransform - Analytics Database","76","728","All syntax elements are required.","33","200","","0","Optional Syntax Elements for TD_OneHotEncodingTransform - Analytics Database","76","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/Optional-Syntax-Elements-for-TD_OneHotEncodingTransform","","","","","","207351","12586","12586","4.462","A+","49","34","1.441","0.000","Very Hard","11.146","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.526","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a suite of analytic functions designed for data exploration, feature engineering, model training, and evaluation. These functions allow users to perform complex data manipulations and analyses efficiently. Among these, the `TD_OneHotEncodingTransform` function is utilized for transforming categorical variables into a format that can be provided to ML algorithms to do a better job in prediction.

### Code Examples

Here are examples of basic SQL operations: `SELECT`, `INSERT`, `UPDATE`, and `DELETE`, which are fundamental in managing data within the Teradata database.

#### 1. SELECT
The `SELECT` statement is used to query data from a database.

```sql
SELECT customer_id, customer_name, purchase_amount
FROM customers
WHERE purchase_amount > 100;
```

#### 2. INSERT
The `INSERT` statement is used to add new records into a table.

```sql
INSERT INTO customers (customer_id, customer_name, purchase_amount)
VALUES (1001, 'John Doe', 150.75);
```

#### 3. UPDATE
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE customers
SET purchase_amount = purchase_amount * 1.1
WHERE customer_id = 1001;
```

#### 4. DELETE
The `DELETE` statement is used to remove records from a table.

```sql
DELETE FROM customers
WHERE customer_id = 1001;
```

### Keywords and Phrases

- **Teradata Vantage™**
- **Analytics Database Analytic Functions**
- **TD_OneHotEncodingTransform**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Release Number: 17.20**
- **Published: June 2022**
- **Last Update: 2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Maximum Number of Columns in a Database Table**
- **Avoid Deadlocks Using Volatile Tables**
- **Data Exploration Functions**
- **Model Scoring Functions**
- **Analytics Database**
- **TD_OneHotEncodingFit**
- **TD_OrdinalEncodingFit**
- **TD_Pivoting**
- **TD_Unpivoting**
- **Feature Engineering Utility Functions**
- **TD_NumApply**
- **TD_RoundColumns**
- **TD_StrApply**
- **TD_DecisionForest**
- **TD_GLM**
- **TD_KMeans** 
- **TD_XGBoost**
- **TD_ROC**
- **Data Manipulation Language (DML)**

This structured overview provides clarity on the various functionalities available within the Teradata Analytics Database, especially focusing on the essential SQL operations useful for data manipulation.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/Optional-Syntax-Elements-for-TD_OneHotEncodingTransform","2024-07-27 12:18:23"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/Required-Syntax-Elements-for-TD_OneHotEncodingTransform","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_OneHotEncodingTransform - Analytics Database","76","732","ON clause Accepts the InputTable and FitTable ON clauses. IsInputDense Specifies whether the input is dense or sparse.","118","739","","0","Required Syntax Elements for TD_OneHotEncodingTransform - Analytics Database","76","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/Required-Syntax-Elements-for-TD_OneHotEncodingTransform","","","","","","207637","12714","12714","4.507","A+","62","37","1.676","7.279","Very Hard","11.172","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.838","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a robust set of analytic functions for data manipulation and transformation. These functions include capabilities for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Each function has specific syntax requirements, which are crucial for effective usage. In this overview, we will focus on the four basic SQL operations: Select, Update, Delete, and Create.

## Code Example

### 1. Select
The `SELECT` statement is used to query data from a database. You can specify which columns to retrieve and from which tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

### 3. Delete
The `DELETE` statement removes existing records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

### 4. Create
The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Keywords and Phrases
- **Required Syntax Elements for TD_OneHotEncodingTransform**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Product Category: Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Input Table Schemas**
- **Accumulated Columns Impact on Function Performance**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This structured overview provides a clear understanding of the core SQL operations and relevant terms related to the Teradata Vantage™ Analytics Database, setting a foundation for further exploration of its analytic capabilities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/Required-Syntax-Elements-for-TD_OneHotEncodingTransform","2024-07-27 11:58:05"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/TD_OneHotEncodingTransform-Input","text/html;charset=UTF-8","200","","Indexable","","TD_OneHotEncodingTransform Input - Analytics Database","53","514","InputTable Schema See TD_OneHotEncodingFit Input. FitTable Schema See TD_OneHotEncodingFit Output.","98","663","","0","TD_OneHotEncodingTransform Input - Analytics Database","53","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/TD_OneHotEncodingTransform-Input","","","","","","207883","12742","12742","4.517","A+","51","37","1.378","0.000","Very Hard","11.138","1","5","","707","707","0","99.860","712","710","0","","","","","","","","","0.559","","","","","","1.1","## Summary

This document provides insights into the Teradata Vantage™ Analytics Database, focusing on its analytic functions, particularly the TD_OneHotEncodingTransform function. It covers various aspects of the database, including function categories, usage notes, and specific examples, allowing users to effectively leverage analytic functions for data manipulation and analysis. Key operations such as selection, updating, deletion, and creation in a database are also discussed.

## Code Examples

### 1. Select
To retrieve data from a table, you can use the SELECT statement:
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

### 2. Update
To modify existing records in a table:
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

### 3. Delete
To remove records from a table:
```sql
DELETE FROM table_name
WHERE condition;
```

### 4. Create
To create a new table:
```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Keywords and Phrases
- TD_OneHotEncodingTransform Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Workload Management Configuration
- Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns
- Spool Space Exhaustion
- Recommendations for Using Analytic Functions
- Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_SimpleImputeFit
- Unpack
- MovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- Feature Engineering Utility Functions
- TD_FillRowID
- TD_NumApply
- TD_RoundColumns
- TD_StrApply
- Model Training Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_SVM
- TD_XGBoost
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- Text Analytic Functions
- NGramSplitter
- TD_NaiveBayesTextClassifier
- Hypothesis Testing Functions
- TD_ANOVA
- Path and Pattern Analysis Functions
- Attribution
- nPath
- Sessionize

These keywords and phrases encompass the major themes and functionalities discussed in the document, showcasing the capabilities of Teradata Vantage™ Analytics Database and its analytic functions.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/TD_OneHotEncodingTransform-Input","2024-07-27 12:27:01"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/TD_OneHotEncodingTransform-Output","text/html;charset=UTF-8","200","","Indexable","","TD_OneHotEncodingTransform Output - Analytics Database","54","530","Output Table Schema for Dense Input Column Data Type Description input_table_column Same as in InputTable Column copied from InputTable. targetColumns_values INTEGER One-hot-encoded representation of categorical values for each target column. Output Table Schema for Sparse Input Column Data Type Description input_table...","323","2087","","0","TD_OneHotEncodingTransform Output - Analytics Database","54","Database Analytic Functions","27","Output Table Schema for Dense Input","35","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/TD_OneHotEncodingTransform-Output","","","","","","211275","13287","13287","4.710","A+","117","47","2.489","3.293","Very Hard","11.194","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.783","","","","","","1.1","## Summary
The Teradata Vantage™ Analytics Database provides a comprehensive set of analytic functions designed for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. With numerous utility functions and transformations, it supports a range of applications in data analytics, machine learning, and business intelligence. This documentation outlines the essential SQL commands for manipulating data within the database—specifically, the operations for creating, selecting, updating, and deleting records.

## Code Example

### 1. Create
To create a new table in the Analytics Database:
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    hire_date DATE,
    salary DECIMAL(10, 2)
);
```

### 2. Select
To retrieve data from the `employees` table:
```sql
SELECT employee_id, first_name, last_name, salary
FROM employees
WHERE salary > 50000
ORDER BY salary DESC;
```

### 3. Update
To update the salary of a specific employee:
```sql
UPDATE employees
SET salary = salary * 1.10
WHERE employee_id = 1;
```

### 4. Delete
To remove an employee from the `employees` table:
```sql
DELETE FROM employees
WHERE employee_id = 2;
```

## Keywords and Phrases
- TD_OneHotEncodingTransform Output
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published June 2022
- Language English (United States)
- Last Update 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- jmh1512506877710
- Product Category Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Recommendations for Using Analytic Functions
- Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_SimpleImputeFit
- Unpack
- MovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- Antiselect
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer
- TD_FunctionFit
- TD_FunctionTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_PolynomialFeaturesFit
- TD_PolynomialFeaturesTransform
- TD_RandomProjectionFit
- TD_RandomProjectionTransform
- TD_RowNormalizeFit
- TD_RowNormalizeTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_Unpivoting
- TD_FillRowID
- TD_NumApply
- TD_RoundColumns
- TD_StrApply
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_KNN
- TD_OneClassSVM
- TD_SVM
- TD_XGBoost
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_OneClassSVMPredict
- TD_SVMPredict
- TD_XGBoostPredict
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- NGramSplitter
- TD_NaiveBayesTextClassifierPredict
- TD_SentimentExtractor
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Attribution
- nPath
- Sessionize

This comprehensive overview and example suite should serve as a foundational reference for working with the Teradata Vantage Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/TD_OneHotEncodingTransform-Output","2024-07-27 11:31:06"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/TD_OneHotEncodingTransform-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_OneHotEncodingTransform Syntax | OneHotEncodingTransform - TD_OneHotEncodingTransform Syntax - Analytics Database","116","1145","See the syntax of the Analytics Database (SQL Engine) function TD_OneHotEncodingTransform and read descriptions of its required and optional syntax elements.","157","1003","","0","TD_OneHotEncodingTransform Syntax | OneHotEncodingTransform - TD_OneHotEncodingTransform Syntax - Analytics Database","116","Database Analytic Functions","27","TD_OneHotEncodingTransform Syntax for Dense Input","49","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/TD_OneHotEncodingTransform-Syntax","","","","","","209451","12999","12999","4.608","A+","157","52","3.019","42.114","Hard","11.393","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.449","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a robust environment for performing various data operations, including selection, updating, deletion, and creation of data structures. It features a wide array of analytic functions designed for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This guide includes fundamental SQL commands that are commonly used in Teradata environments, along with examples illustrating their usage.

## Code Examples

### SELECT

To retrieve data from a specified table, you can use the `SELECT` statement.

```sql
SELECT column1, column2
FROM my_table
WHERE condition;
```

### UPDATE

To modify existing records in a table, the `UPDATE` statement is utilized.

```sql
UPDATE my_table
SET column1 = value1, column2 = value2
WHERE condition;
```

### DELETE

To remove records from a table, the `DELETE` statement is used.

```sql
DELETE FROM my_table
WHERE condition;
```

### CREATE

To create a new table, the `CREATE TABLE` statement is employed.

```sql
CREATE TABLE new_table (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Keywords and Phrases

- **TD_OneHotEncodingTransform Syntax**
- **OneHotEncodingTransform**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions**
- **Data Cleaning Functions**
- **Pack Examples**
- **StringSimilarity Examples**
- **TD_ConvertTo Examples**
- **TD_GetRowsWithMissingValues Example**
- **Unpack Examples**
- **MovingAverage Examples**
- **TD_CategoricalSummary Example**
- **TD_ColumnSummary Example**
- **Feature Engineering Utility Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **TD_OneHotEncodingTransform Syntax for Dense Input**
- **TD_OneHotEncodingTransform Syntax for Sparse Input**

This guide should provide a good foundation for working with Teradata Vantage™ and performing basic SQL operations in the Analytics Database context.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/TD_OneHotEncodingTransform-Syntax","2024-07-27 11:19:43"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit","text/html;charset=UTF-8","200","","Indexable","","TD_OrdinalEncodingFit Function | OrdinalEncodingFit - TD_OrdinalEncodingFit - Analytics Database","96","872","This Analytics Database (SQL Engine) feature engineering transform function replaces categorical values with ordinal values.","124","770","","0","TD_OrdinalEncodingFit Function | OrdinalEncodingFit - TD_OrdinalEncodingFit - Analytics Database","96","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit","","","","","","210240","13450","13450","4.768","A+","193","56","3.446","10.466","Very Hard","11.493","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","5.685","","","","","","1.1","# Overview of TD_OrdinalEncodingFit Function

The `TD_OrdinalEncodingFit` function in Teradata Vantage™ is an analytic function used to convert categorical variables into numerical format by assigning ordinal values to distinct categories found within a specified input table or user-defined list. This is particularly beneficial for preparing categorical data for machine learning algorithms and statistical analysis, enabling mathematical operations on what would otherwise be non-numeric data.

### Key Features:
- **Maximum Unique Categories**: The function can handle up to 4000 unique categories.
- **Maximum Category Length**: Each category can be up to 128 characters long.
- **NULL Handling**: NULL categories are not encoded, ensuring that missing values do not interfere with the encoding process.

## Code Examples

### SELECT Statement
Retrieve distinct categories and their ordinal values from a dataset.
```sql
SELECT * 
FROM TD_OrdinalEncodingFit(
    'my_table',
    'category_column'
);
```

### UPDATE Statement
Update a table with the newly created ordinal values from the encoding function.
```sql
UPDATE my_table 
SET ordinal_value = TD_OrdinalEncodingFit('my_table', 'category_column').ordinal_value 
WHERE category_column IS NOT NULL;
```

### DELETE Statement
Remove entries from a dataset that do not meet certain criteria after encoding.
```sql
DELETE FROM my_table 
WHERE ordinal_value IS NULL;
```

### CREATE Statement
Create a new table that stores the output of the ordinal encoding.
```sql
CREATE TABLE encoded_table AS (
    SELECT category_column, 
           TD_OrdinalEncodingFit('my_table', 'category_column') AS encoded_values
    FROM my_table
) WITH NO DATA;
```

## Keywords and Phrases
- TD_OrdinalEncodingFit Function
- OrdinalEncodingFit
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Recommendations for Using Analytic Functions

This summary provides a concise understanding of the `TD_OrdinalEncodingFit` function and its usage in the context of Teradata Vantage™, along with practical SQL examples and relevant keywords.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit","2024-07-27 12:24:49"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/Example-How-to-Use-TD_OrdinalEncodingFit","text/html;charset=UTF-8","200","","Indexable","","TD_OrdinalEncodingFit Example | OrdinalEncodingFit - Example: How to Use TD_OrdinalEncodingFit - Analytics Database","115","1066","See an example of Analytics Database (SQL Engine) transform function TD_OrdinalEncodingFit.","91","589","","0","TD_OrdinalEncodingFit Example | OrdinalEncodingFit - Example: How to Use TD_OrdinalEncodingFit - Analytics Database","115","Database Analytic Functions","27","TD_OrdinalEncodingFit InputTable: OrdEnc_titanic_train","54","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/Example-How-to-Use-TD_OrdinalEncodingFit","","","","","","295260","16087","16087","5.703","A+","1013","203","4.990","95.039","Very Easy","9.688","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.653","","","","","","1.1","### Summary

The `TD_OrdinalEncodingFit` function in Teradata Vantage™ is used to convert categorical data into a numerical format suitable for machine learning models. This is particularly useful for features that are ordinal in nature. The function can handle multiple columns and allows different approaches for encoding, including automatic and manual (list-based) methods.

### Code Example

The following SQL code snippets demonstrate how to use the `TD_OrdinalEncodingFit` function for both automatic and list approaches.

#### 1. Automatic Approach

This example shows how to use the `TD_OrdinalEncodingFit` function to automatically determine the ordinal values for the specified target columns in the dataset.

```sql
SELECT * FROM TD_OrdinalEncodingFit (
    ON ordinal_titanic_dataset AS InputTable
    USING
        TargetColumn('name', 'gender', 'ticket', 'cabin', 'embarked')
        Approach ('AUTO')
        StartValue (5, 10, 15, 0, -5)
        DefaultValue (-1, -10, -15, 20, 0)
) AS dt 
ORDER BY 1, 3;
```

#### 2. List Approach

In this example, the encoding is based on a predefined list of categories and their corresponding ordinal values.

```sql
SELECT * FROM TD_OrdinalEncodingFit (
    ON ordinal_titanic_dataset AS InputTable
    ON catTable AS CategoryTable Dimension
    USING
        TargetColumn('name', 'gender', 'ticket', 'cabin', 'embarked')
        Approach ('LIST')
        TargetColumnNames('ColumnName')
        CategoriesColumn('Category')
        OrdinalValuesColumn ('ordinalValue')
        DefaultValue (-1, -10, -15, 20, 0)
) AS dt 
ORDER BY 1, 3;
```

### Keywords and Phrases

- TD_OrdinalEncodingFit Example
- OrdinalEncodingFit - Example: How to Use TD_OrdinalEncodingFit
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Hypothesis Testing Functions
- TD_OrdinalEncodingFit InputTable
- TargetColumn
- Approach
- StartValue
- DefaultValue
- CategoryTable
- List Approach
- Multiple column support
- Ordinal values
- Categorical data conversion","27","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/Example-How-to-Use-TD_OrdinalEncodingFit","2024-07-27 11:57:05"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/Optional-Syntax-Elements-for-TD_OrdinalEncodingFit","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_OrdinalEncodingFit - Analytics Database","71","653","ON clause Accepts the CategoryTable clause. OUT clause Accepts the OutputTable clause. OrdinalValuesColumn [When using CategoryTable] Specifies the CategoryTable column which contains the ordinal values. If omitted, ordinal values are generated based on the StartValue argument. Approach Specifies AUTO to obtain categor...","323","2056","","0","Optional Syntax Elements for TD_OrdinalEncodingFit - Analytics Database","71","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/Optional-Syntax-Elements-for-TD_OrdinalEncodingFit","","","","","","211616","13723","13723","4.865","A+","507","101","5.020","56.902","Fairly Hard","12.304","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.636","","","","","","1.1","## Summary of TD_OrdinalEncodingFit and Related Functions

The `TD_OrdinalEncodingFit` function in Teradata Vantage™ is used for encoding categorical variables as ordinal integers, which helps in preparing data for machine learning models. This function creates a mapping of categorical values to ordinal values based on specified arguments. The function is often paired with `TD_OrdinalEncodingTransform`, which applies the mapping to new data.

### Code Examples

#### 1. Create Table
```sql
CREATE TABLE customer_data (
    customer_id INT,
    customer_type VARCHAR(20),
    purchase_amount DECIMAL(10, 2)
);
```

#### 2. Insert Data
```sql
INSERT INTO customer_data (customer_id, customer_type, purchase_amount)
VALUES (1, 'Regular', 100.00),
       (2, 'Premium', 150.00),
       (3, 'VIP', 200.00);
```

#### 3. Select Data
```sql
SELECT * FROM customer_data;
```

#### 4. Update Data
```sql
UPDATE customer_data
SET purchase_amount = purchase_amount * 1.1
WHERE customer_type = 'Regular';
```

#### 5. Delete Data
```sql
DELETE FROM customer_data
WHERE customer_type = 'VIP';
```

#### 6. Use TD_OrdinalEncodingFit
```sql
CALL TD_OrdinalEncodingFit(
    'customer_data',
    'customer_type',
    'category_table' -- This table should hold the ordinal mappings
);
```

#### 7. Use TD_OrdinalEncodingTransform
```sql
CALL TD_OrdinalEncodingTransform(
    'new_customer_data',
    'customer_type',
    'category_table'
);
```

### Keywords and Phrases

- Optional Syntax Elements for TD_OrdinalEncodingFit
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- TD_OrdinalEncodingFit Syntax
- Required Syntax Elements for TD_OrdinalEncodingFit
- Optional Syntax Elements for TD_OrdinalEncodingFit
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Accumulated Columns Impact on Function Performance
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency

This overview provides a concise understanding of the `TD_OrdinalEncodingFit` function, its usage, and related SQL operations within Teradata's analytics framework.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/Optional-Syntax-Elements-for-TD_OrdinalEncodingFit","2024-07-27 12:03:51"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/Required-Syntax-Elements-for-TD_OrdinalEncodingFit","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_OrdinalEncodingFit - Analytics Database","71","657","ON clause Accepts the InputTable clause. TargetColumn Specifies the InputTable categorical columns to be encoded. The maximum number of unique columns in the TargetColumn argument is 2018. TargetColumnNames [When using CategoryTable] Specifies the CategoryTable column which contains the names of the target columns. Cat...","323","2104","","0","Required Syntax Elements for TD_OrdinalEncodingFit - Analytics Database","71","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/Required-Syntax-Elements-for-TD_OrdinalEncodingFit","","","","","","209149","13181","13181","4.673","A+","173","54","3.204","26.070","Very Hard","11.468","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.507","","","","","","1.1","### Summary of Teradata Vantage Analytics Database

Teradata Vantage™ Analytics Database provides a suite of analytic functions designed for various data processing needs, including data cleaning, exploration, feature engineering, model training, scoring, and evaluation. The system is built to support both enterprise-level data analytics and machine learning workflows, with a focus on performance and scalability across Teradata's cloud offerings.

### Code Example Section

The following examples demonstrate basic SQL operations within the Teradata Vantage environment such as Select, Update, Delete, and Create.

#### 1. Select
```sql
SELECT *
FROM my_table
WHERE column_name = 'value';
```
This query retrieves all columns from `my_table` where `column_name` matches 'value'.

#### 2. Update
```sql
UPDATE my_table
SET column_name = 'new_value'
WHERE condition_column = 'condition_value';
```
This command updates `column_name` in `my_table` to 'new_value' for rows that meet the specified condition.

#### 3. Delete
```sql
DELETE FROM my_table
WHERE condition_column = 'condition_value';
```
This statement removes rows from `my_table` where `condition_column` matches 'condition_value'.

#### 4. Create
```sql
CREATE TABLE my_table (
    id INT,
    name VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```
This command creates a new table named `my_table` with three columns: `id`, `name`, and `created_at`.

### Keywords and Phrases

- Required Syntax Elements for TD_OrdinalEncodingFit
- Analytics Database
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- TD_OrdinalEncodingFit Syntax
- TD_FunctionFit
- TD_FunctionTransform
- TD_GetRowsWithMissingValues
- TD_Silhouette
- TD_RegressionEvaluator
- SQL Operations
- Select, Update, Delete, Create
- Data Processing
- Cloud Analytics
- Machine Learning Workflows","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/Required-Syntax-Elements-for-TD_OrdinalEncodingFit","2024-07-27 11:30:53"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/TD_OrdinalEncodingFit-Input","text/html;charset=UTF-8","200","","Indexable","","TD_OrdinalEncodingFit Input - Analytics Database","48","439","InputTable Schema Column Data Type Description TargetColumn CHAR or VARCHAR CHARACTER SET LATIN/UNICODE Columns to be encoded. CategoryTable Schema Column Data Type Description ColumnName CHAR or VARCHAR CHARACTER SET LATIN/UNICODE Column which contains the names of the target columns. CategoryValue CHAR or VARCHAR CHA...","323","2276","","0","TD_OrdinalEncodingFit Input - Analytics Database","48","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/TD_OrdinalEncodingFit-Input","","","","","","210717","13190","13190","4.676","A+","103","45","2.289","9.028","Very Hard","11.162","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.504","","","","","","1.1","### Summary

Teradata Vantage™ offers a robust analytics database that includes various analytic functions for data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analysis. This platform enables users to perform complex queries and manipulations efficiently, leveraging features like partitioning, encoding, and statistical analysis. Understanding how to perform basic SQL operations such as SELECT, UPDATE, DELETE, and CREATE is crucial for effective data management within this environment.

### Code Examples

#### 1. Select

```sql
SELECT 
    TargetColumn,
    COUNT(*) AS Count
FROM 
    YourTable
WHERE 
    SomeCondition = 'Value'
GROUP BY 
    TargetColumn
ORDER BY 
    Count DESC;
```

#### 2. Update

```sql
UPDATE 
    YourTable
SET 
    TargetColumn = 'NewValue'
WHERE 
    SomeCondition = 'Value';
```

#### 3. Delete

```sql
DELETE FROM 
    YourTable
WHERE 
    SomeCondition = 'Value';
```

#### 4. Create

```sql
CREATE TABLE NewTable (
    Column1 CHAR(20),
    Column2 INTEGER,
    Column3 DATE
);
```

### Keywords and Phrases

- TD_OrdinalEncodingFit Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Examples and Syntax for Functions like TD_CategoricalSummary, TD_Histogram, TD_OneHotEncodingFit, etc. 
- InputTable Schema
- CategoryTable Schema

This summary and the accompanying code examples provide a foundational understanding of performing basic SQL operations in the context of Teradata Vantage™ and its various analytic functions.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/TD_OrdinalEncodingFit-Input","2024-07-27 11:47:16"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/TD_OrdinalEncodingFit-Output","text/html;charset=UTF-8","200","","Indexable","","TD_OrdinalEncodingFit Output - Analytics Database","49","455","Output Table Schema Column Data Type Description TD_ColumnName_ORDFIT VARCHAR CHARACTER SET UNICODE Column which contains the names of the target columns. TD_Category_ORDFIT VARCHAR CHARACTER SET UNICODE Column which contains the category values along with TD_CategoryCount and TD_OtherCategory for each of the target co...","323","2230","","0","TD_OrdinalEncodingFit Output - Analytics Database","49","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/TD_OrdinalEncodingFit-Output","","","","","","210272","13238","13238","4.693","A+","124","48","2.583","20.685","Very Hard","11.260","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.593","","","","","","1.1","## Summary

In the context of database management, performing basic operations like selecting, updating, deleting, and creating records is crucial. These operations form the backbone of any database interaction, allowing users to manipulate data efficiently. Below, we present code examples for each of these operations using SQL syntax commonly used in relational databases.

### Code Example

#### Select
To retrieve data from a database table, the `SELECT` statement is used.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```
*Example:*
```sql
SELECT name, age
FROM employees
WHERE department = 'Sales';
```

#### Update
To modify existing records in a table, you use the `UPDATE` statement.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```
*Example:*
```sql
UPDATE employees
SET age = 30
WHERE name = 'John Doe';
```

#### Delete
To remove records from a table, the `DELETE` statement is utilized.

```sql
DELETE FROM table_name
WHERE condition;
```
*Example:*
```sql
DELETE FROM employees
WHERE age < 25;
```

#### Create
To create a new table in the database, you use the `CREATE TABLE` statement.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype
);
```
*Example:*
```sql
CREATE TABLE employees (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    age INT,
    department VARCHAR(50)
);
```

### Keywords and Phrases
- TD_OrdinalEncodingFit Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- gjn1627595495337.ditamap
- dita:ditavalPath
- ayr1485454803741.ditaval
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_OutlierFilterTransform
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- Unpack
- Data Exploration Functions
- MovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- Feature Engineering Transform Functions
- Antiselect
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer
- TD_FunctionFit
- TD_FunctionTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_PolynomialFeaturesFit
- TD_PolynomialFeaturesTransform
- TD_RandomProjectionFit
- TD_RandomProjectionTransform
- TD_RowNormalizeFit
- TD_RowNormalizeTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_Unpivoting
- Feature Engineering Utility Functions
- TD_FillRowID
- TD_NumApply
- TD_RoundColumns
- TD_StrApply
- Model Training Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_KNN
- TD_OneClassSVM
- TD_SVM
- TD_VectorDistance
- TD_XGBoost
- Model Scoring Functions
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_OneClassSVMPredict
- TD_SVMPredict
- TD_XGBoostPredict
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- Text Analytic Functions
- NGramSplitter
- TD_NaiveBayesTextClassifierPredict
- TD_NaiveBayesTextClassifierTrainer
- TD_SentimentExtractor
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Testing Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Path and Pattern Analysis Functions
- Attribution
- nPath
- Sessionize","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/TD_OrdinalEncodingFit-Output","2024-07-27 11:50:10"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/TD_OrdinalEncodingFit-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_OrdinalEncodingFit Syntax | OrdinalEncodingFit - TD_OrdinalEncodingFit Syntax - Analytics Database","101","920","See the syntax of Analytics Database (SQL Engine) transform function TD_OrdinalEncodingFit and read descriptions of its required and optional syntax elements.","158","993","","0","TD_OrdinalEncodingFit Syntax | OrdinalEncodingFit - TD_OrdinalEncodingFit Syntax - Analytics Database","101","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/TD_OrdinalEncodingFit-Syntax","","","","","","209125","13149","13149","4.661","A+","149","65","2.292","27.927","Very Hard","11.456","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.850","","","","","","1.1","### Summary

This document covers the **TD_OrdinalEncodingFit** function syntax and its usage within the Teradata Vantage™ Analytics Database. The **TD_OrdinalEncodingFit** function is primarily used for converting categorical variables into a format that can be provided to machine learning algorithms to improve model performance. This is achieved by transforming categorical data into ordinal representation, which is especially useful for tree-based algorithms.

Below, you'll find examples of common SQL operations related to data manipulation, including `SELECT`, `UPDATE`, `DELETE`, and `CREATE`, along with a detailed explanation of the **TD_OrdinalEncodingFit** function syntax.

### Code Examples

#### 1. SELECT

```sql
SELECT *
FROM my_table
WHERE condition_column = 'value';
```

#### 2. UPDATE

```sql
UPDATE my_table
SET column_name = 'new_value'
WHERE condition_column = 'value';
```

#### 3. DELETE

```sql
DELETE FROM my_table
WHERE condition_column = 'value';
```

#### 4. CREATE

```sql
CREATE TABLE my_table (
    id INT,
    name VARCHAR(100),
    category VARCHAR(50)
);
```

### TD_OrdinalEncodingFit Syntax

```sql
TD_OrdinalEncodingFit (
    ON { table | view | (query) } AS InputTable
    [ ON { table | view | (query) } AS CategoryTable Dimension ]
    [ OUT [ PERMANENT | VOLATILE ] TABLE OutputTable (output_table_name) ]
    USING
    TargetColumn ({'target_column' | 'target_column_range'}[,...])
    [{
        Approach ('LIST')
        {
            Categories ('category'[,...])
            [ OrdinalValues (ordinal_value[,...]) ]
        |
            TargetColumnNames ('targetcolnames_column')
            CategoriesColumn ('category_column')
            [ OrdinalValuesColumn ('ordinalvalue_column') ]
        }
        |
        Approach ('AUTO')
    }]
    [ StartValue ({ start_value | start_value_i, ... }) ]
    [ DefaultValue ({ default_value | default_value_i, ... }) ]
)
```

### Keywords and Phrases

- **TD_OrdinalEncodingFit Syntax**
- **OrdinalEncodingFit - TD_OrdinalEncodingFit Syntax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Example: How to Use TD_OrdinalEncodingFit**
- **Example: How to Use TD_OrdinalEncodingTransform**

This summary and code examples aim to provide a clear understanding of the SQL syntax and the specific function within the Teradata Vantage™ environment.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/TD_OrdinalEncodingFit-Syntax","2024-07-27 11:42:41"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform","text/html;charset=UTF-8","200","","Indexable","","TD_OrdinalEncodingTransform | OrdinalEncodingTransform - TD_OrdinalEncodingTransform - Analytics Database","105","1003","This Analytics Database (SQL Engine) transform function replaces categorical values with ordinal values.","104","647","","0","TD_OrdinalEncodingTransform | OrdinalEncodingTransform - TD_OrdinalEncodingTransform - Analytics Database","105","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform","","","","","","209850","13220","13220","4.687","A+","123","52","2.365","0.000","Very Hard","11.351","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.809","","","","","","1.1","### Summary

The `TD_OrdinalEncodingTransform` function is a powerful tool within Teradata's Analytics Database that allows users to transform categorical data into ordinal values. This transformation is essential for preparing data for various analytical procedures, especially in machine learning models where algorithms require numerical input rather than categorical data.

To use the `TD_OrdinalEncodingTransform`, one typically begins by fitting a model using `TD_OrdinalEncodingFit`, which establishes a mapping of categorical values to ordinal integers. Subsequently, the `TD_OrdinalEncodingTransform` function is employed to apply this mapping to the dataset, which effectively encodes the categorical feature into a numerical representation suitable for further analysis.

Here is a concise overview of the basic SQL operations—Select, Update, Delete, and Create—that can be performed in Teradata:

### Code Example

#### 1. Select
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

#### 2. Update
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 3. Delete
```sql
DELETE FROM table_name
WHERE condition;
```

#### 4. Create
```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Keywords and Phrases
- **TD_OrdinalEncodingTransform**
- **OrdinalEncodingTransform**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category: Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Examples: How to Use Pack**
- **Examples: How to Use TD_OrdinalEncodingTransform**","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform","2024-07-27 11:26:46"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/Example-How-to-Use-TD_OrdinalEncodingTransform","text/html;charset=UTF-8","200","","Indexable","","TD_OrdinalEncodingTransform Function Example | Teradata Vantage - Example: How to Use TD_OrdinalEncodingTransform - Analytics Database","134","1283","See an example of Analytics Database (SQL Engine) transform function TD_OrdinalEncodingTransform.","97","639","","0","TD_OrdinalEncodingTransform Function Example | Teradata Vantage - Example: How to Use TD_OrdinalEncodingTransform - Analytics Database","134","Database Analytic Functions","27","TD_OrdinalEncodingFit InputTable: OrdEnc_titanic_train","54","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/Example-How-to-Use-TD_OrdinalEncodingTransform","","","","","","249199","14878","14878","5.274","A+","637","135","4.719","92.212","Very Easy","10.717","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.834","","","","","","1.1","## Summary

In Teradata Vantage, the `TD_OrdinalEncodingTransform` function is used to transform categorical data into ordinal format based on a pre-fitted model. This is particularly useful in machine learning and data analytics, as it allows numerical representations of categorical variables, enabling algorithms to process them effectively. The function relies on a fit table produced by `TD_OrdinalEncodingFit`, which includes the necessary mappings between original categories and their encoded values.

### Code Example

Here are examples of basic SQL operations (Select, Update, Delete, Create) in Teradata Vantage, along with specific examples for using the `TD_OrdinalEncodingTransform` function.

#### Select

```sql
SELECT *
FROM ordinal_titanic_dataset;
```

#### Update

```sql
UPDATE ordinal_titanic_dataset
SET age = 30
WHERE passenger_id = 1000;
```

#### Delete

```sql
DELETE FROM ordinal_titanic_dataset
WHERE passenger_id = 631;
```

#### Create

```sql
CREATE TABLE ordinal_titanic_dataset (
    passenger_id INT,
    name VARCHAR(100),
    gender VARCHAR(10),
    age INT,
    ticket VARCHAR(20),
    cabin VARCHAR(10),
    embarked VARCHAR(1)
);
```

### TD_OrdinalEncodingTransform Function Example

#### Example: TD_OrdinalEncodingFit SQL Call Using Auto Approach

```sql
SELECT * FROM TD_OrdinalEncodingFit (
 ON ordinal_titanic_dataset AS InputTable
 OUT PERMANENT TABLE OutputTable (ordinal_titanic_fit_output)
 USING
 TargetColumn('name','gender','ticket','cabin','embarked')
 Approach ('AUTO')
 StartValue (5, 10, 15, 0, -5)
 DefaultValue (-1, -10, -15, 20, 0)
) AS dt ORDER BY 1,3;
```

#### Example: TD_OrdinalEncodingTransform SQL Call Using Output from TD_OrdinalEncodingFit

```sql
SELECT * FROM TD_OrdinalEncodingTransform (
 ON ordinal_titanic_dataset AS InputTable
 ON ordinal_titanic_fit_output as FitTable Dimension
 USING
 Accumulate ('passenger')
) AS dt ORDER BY 1;
```

### Output Table Example

**TD_OrdinalEncodingTransform Output:**

| passenger | name | gender | ticket | cabin | embarked |
|-----------|------|--------|--------|-------|----------|
| 97        | 8    | 12     | 20     | 2     | -4       |
| 488       | 9    | 12     | 17     | 3     | -4       |
| 505       | 10   | 11     | 16     | 5     | -3       |
| 631       | 6    | 12     | 18     | 1     | -3       |
| 873       | 7    | 12     | 19     | 4     | -3       |
| 1000      | 5    | 10     | 15     | 0     | -5       |

### Keywords and Phrases

- TD_OrdinalEncodingTransform Function Example
- Teradata Vantage
- Example: How to Use TD_OrdinalEncodingTransform
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Language English (United States)
- Last Update 2024-04-06
- Data Cleaning Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- SQL Call Example
- Accumulate
- TargetColumn
- Approach
- StartValue
- DefaultValue
- Output Table","27","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/Example-How-to-Use-TD_OrdinalEncodingTransform","2024-07-27 12:48:28"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/Optional-Syntax-Elements-for-TD_OrdinalEncodingTransform","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_OrdinalEncodingTransform - Analytics Database","77","724","Accumulate Specifies the InputTable column names to copy to the Output table.","77","492","","0","Optional Syntax Elements for TD_OrdinalEncodingTransform - Analytics Database","77","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/Optional-Syntax-Elements-for-TD_OrdinalEncodingTransform","","","","","","207530","12689","12689","4.498","A+","56","35","1.600","0.000","Very Hard","11.158","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.538","","","","","","1.1","## Summary

The Teradata Analytics Database provides a rich set of analytic functions that allow users to perform various data manipulation and exploration tasks. This includes functionality for creating, updating, selecting, and deleting data, which can be essential for data preprocessing, transformation, and analysis. Below, we provide examples of SQL commands for these operations, specifically in the context of using the Teradata Analytics Database.

## Code Example

### 1. Create
To create a new table in the database:

```sql
CREATE TABLE Employee (
    EmployeeID INT,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    HireDate DATE
);
```

### 2. Select
To retrieve data from the `Employee` table:

```sql
SELECT EmployeeID, FirstName, LastName 
FROM Employee 
WHERE HireDate > '2020-01-01';
```

### 3. Update
To update an existing record in the `Employee` table:

```sql
UPDATE Employee 
SET LastName = 'Smith' 
WHERE EmployeeID = 1;
```

### 4. Delete
To delete a record from the `Employee` table:

```sql
DELETE FROM Employee 
WHERE EmployeeID = 1;
```

## Keywords and Phrases

- **Optional Syntax Elements for TD_OrdinalEncodingTransform** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Example Syntax for Various Analytic Functions** (e.g., `TD_OrdinalEncodingTransform`, `TD_CategoricalSummary`, etc.)
- **Data Types and Schema Management** 

This comprehensive overview encapsulates the essence of working with the Teradata Analytics Database, especially focusing on the manipulation of data through standard SQL operations.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/Optional-Syntax-Elements-for-TD_OrdinalEncodingTransform","2024-07-27 11:46:33"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/Required-Syntax-Elements-for-TD_OrdinalEncodingTransform","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_OrdinalEncodingTransform - Analytics Database","77","728","ON clause Accepts the the InputTable and FitTable clauses.","58","366","","0","Required Syntax Elements for TD_OrdinalEncodingTransform - Analytics Database","77","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/Required-Syntax-Elements-for-TD_OrdinalEncodingTransform","","","","","","207468","12646","12646","4.483","A+","53","35","1.514","0.981","Very Hard","11.152","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.432","","","","","","1.1","## Summary of Teradata Vantage™ Analytics Database Functions

Teradata Vantage™ offers a comprehensive set of analytics database functions that facilitate data science and analytics processes. The functions are categorized into various areas such as data cleaning, feature engineering, model training, scoring, evaluation, and text analytics. This allows users to perform complex analytics tasks efficiently while leveraging the powerful processing capabilities of Teradata.

### Code Example Section

Below are examples of basic SQL operations such as `SELECT`, `UPDATE`, `DELETE`, and `CREATE` that can be used in the context of Teradata Vantage™.

#### SELECT
```sql
SELECT 
    customer_id, 
    first_name, 
    last_name 
FROM 
    customers 
WHERE 
    account_status = 'Active';
```

#### UPDATE
```sql
UPDATE 
    customers 
SET 
    account_status = 'Inactive' 
WHERE 
    last_login < CURRENT_DATE - INTERVAL '1 YEAR';
```

#### DELETE
```sql
DELETE FROM 
    customers 
WHERE 
    account_status = 'Inactive' 
AND 
    last_login < CURRENT_DATE - INTERVAL '6 MONTHS';
```

#### CREATE
```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    account_status VARCHAR(20)
);
```

### Keywords and Phrases
- Required Syntax Elements for TD_OrdinalEncodingTransform
- Analytics Database
- Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Workload Management Configuration
- Non-Deterministic Behavior
- Recommendations for Using Analytic Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Avoid Deadlocks Using Volatile Tables
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- TD Functions
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Sessionize
- nPath
- TD_WordEmbeddings
- TD_TFIDF
- TD_NaiveBayesTextClassifierTrainer
- TD_NaiveBayesTextClassifierPredict

These elements are crucial for understanding and utilizing Teradata's analytics capabilities effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/Required-Syntax-Elements-for-TD_OrdinalEncodingTransform","2024-07-27 12:49:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/TD_OrdinalEncodingTransform-Input","text/html;charset=UTF-8","200","","Indexable","","TD_OrdinalEncodingTransform Input - Analytics Database","54","510","InputTable Schema Column Data Type Description target_column CHAR or VARCHAR CHARACTER SET LATIN/UNICODE Columns to be encoded. FitTable Schema Column Data Type Description TD_ColumnName_ORDFIT VARCHAR CHARACTER SET UNICODE Column which contains the names of the target columns. TD_Category_ORDFIT VARCHAR CHARACTER SET ...","323","2280","","0","TD_OrdinalEncodingTransform Input - Analytics Database","54","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/TD_OrdinalEncodingTransform-Input","","","","","","211503","13317","13317","4.721","A+","140","52","2.692","19.191","Very Hard","11.255","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.578","","","","","","1.1","## Summary

This document provides an overview of Teradata Vantage's Analytics Database, focusing on its analytic functions for data transformation and machine learning. Key features include data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analytics. The document also addresses various analytic function categories, syntax elements, examples of usage, and some limitations to be aware of when using these functions.

---

## Code Examples

### 1. **Create**
To create a new table in Teradata:

```sql
CREATE TABLE analytics_data (
    id INT,
    name VARCHAR(100),
    value FLOAT
);
```

### 2. **Select**
To retrieve data from a table:

```sql
SELECT id, name, value
FROM analytics_data
WHERE value > 50;
```

### 3. **Update**
To update existing records in a table:

```sql
UPDATE analytics_data
SET value = value * 1.1
WHERE name = 'example';
```

### 4. **Delete**
To remove records from a table:

```sql
DELETE FROM analytics_data
WHERE id = 10;
```

---

## Keywords and Phrases

- **TD_OrdinalEncodingTransform Input**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Maximum Number of Columns in a Database Table**
- **Recommendations for Using Analytic Functions**
- **Examples of Functions like TD_ConvertTo, TD_GetRowsWithoutMissingValues, etc.** 

This structured overview and code examples will assist users in understanding how to interact with the Teradata Analytics Database using SQL commands effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/TD_OrdinalEncodingTransform-Input","2024-07-27 11:48:59"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/TD_OrdinalEncodingTransform-Output","text/html;charset=UTF-8","200","","Indexable","","TD_OrdinalEncodingTransform Output - Analytics Database","55","526","Output Table Schema Column Data Type Description Accumulate_column Any Column copied from the InputTable to the Output table. target_column INTEGER Target columns with encoded ordinal values.","191","1257","","0","TD_OrdinalEncodingTransform Output - Analytics Database","55","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/TD_OrdinalEncodingTransform-Output","","","","","","208880","13016","13016","4.614","A+","67","37","1.811","0.000","Very Hard","11.130","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.580","","","","","","1.1","### Summary

The **Analytics Database** from Teradata Vantage™ provides a robust platform for handling various analytical tasks, including data exploration, feature engineering, model training, and evaluation functions. In this guide, we will cover basic SQL operations such as **Select**, **Update**, **Delete**, and **Create** to manipulate data effectively within an Analytics Database context.

### Code Example

#### 1. Select
To retrieve data from a table, use the `SELECT` statement. This allows you to specify which columns to retrieve and the conditions under which to retrieve them.

```sql
SELECT column1, column2
FROM your_table
WHERE condition;
```

#### 2. Update
To modify existing records in a table, use the `UPDATE` statement. This statement allows you to specify which records to update based on certain conditions.

```sql
UPDATE your_table
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 3. Delete
To remove records from a table, use the `DELETE` statement. It's crucial to use a `WHERE` clause to prevent deleting all records.

```sql
DELETE FROM your_table
WHERE condition;
```

#### 4. Create
To create a new table, use the `CREATE TABLE` statement. This includes defining the structure of the new table.

```sql
CREATE TABLE new_table (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Keywords and Phrases
- **TD_OrdinalEncodingTransform Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**: gjn1627595495337.ditamap
- **dita:ditavalPath**: ayr1485454803741.ditaval
- **dita:id**: jmh1512506877710
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This overview provides a foundational understanding of SQL operations within the context of Teradata's Analytics Database. For further exploration, refer to the specific analytical functions and their usage within the Vantage platform.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/TD_OrdinalEncodingTransform-Output","2024-07-27 12:35:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/TD_OrdinalEncodingTransform-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_OrdinalEncodingTransform Function Syntax | Teradata Vantage - TD_OrdinalEncodingTransform Syntax - Analytics Database","120","1137","See the syntax of Analytics Database (SQL Engine) function TD_OrdinalEncodingTransform and read descriptions of its required and optional syntax elements.","154","977","","0","TD_OrdinalEncodingTransform Function Syntax | Teradata Vantage - TD_OrdinalEncodingTransform Syntax - Analytics Database","120","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/TD_OrdinalEncodingTransform-Syntax","","","","","","208385","12917","12917","4.579","A+","103","45","2.289","27.920","Very Hard","11.266","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.592","","","","","","1.1","# Summary

The `TD_OrdinalEncodingTransform` function in Teradata Vantage is used for transforming ordinal categorical data into a format suitable for machine learning models. Ordinal encoding involves converting each unique category into an integer value, which maintains the order of the categories. This function can be particularly useful in feature engineering, where categorical variables need to be numerically represented.

## Code Example

### SELECT
To use the `TD_OrdinalEncodingTransform` function in a SELECT statement, you can write:

```sql
SELECT 
    TD_OrdinalEncodingTransform(
        ON (SELECT * FROM input_table) AS InputTable
        ON (SELECT * FROM fit_table) AS FitTable DIMENSION
        USING
        Accumulate ('column1', 'column2')
    ) AS EncodedOutput
FROM your_table;
```

### UPDATE
While `TD_OrdinalEncodingTransform` is not used directly in an UPDATE statement, you could update a table with the transformed values:

```sql
UPDATE target_table
SET encoded_column = 
    TD_OrdinalEncodingTransform(
        ON (SELECT * FROM input_table) AS InputTable
        ON (SELECT * FROM fit_table) AS FitTable DIMENSION
        USING
        Accumulate ('column1', 'column2')
    )
WHERE condition;
```

### DELETE
A DELETE statement does not directly involve `TD_OrdinalEncodingTransform`, but you can conditionally delete based on encoded values:

```sql
DELETE FROM target_table
WHERE encoded_column IS NULL;
```

### CREATE
To create a new table using the transformed data, you can use:

```sql
CREATE TABLE new_table AS
(
    SELECT 
        TD_OrdinalEncodingTransform(
            ON (SELECT * FROM input_table) AS InputTable
            ON (SELECT * FROM fit_table) AS FitTable DIMENSION
            USING
            Accumulate ('column1', 'column2')
        ) AS EncodedOutput
    FROM source_table
) WITH NO DATA;
```

## Keywords and Phrases
- **TD_OrdinalEncodingTransform Function Syntax**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product Category: Teradata Vantage™**
- **Function Syntax Descriptions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Names with and without TD Prefix**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **How to Read Syntax**
- **Accumulate Columns Impact on Function Performance**
- **Example: How to Use TD_OrdinalEncodingTransform** 

This structured overview provides a foundational understanding of using `TD_OrdinalEncodingTransform` within Teradata Vantage, along with practical examples and supporting keywords for further study.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/TD_OrdinalEncodingTransform-Syntax","2024-07-27 11:57:35"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting","text/html;charset=UTF-8","200","","Indexable","","TD_Pivoting Function | Pivoting | Teradata Vantage - TD_Pivoting - Analytics Database","85","763","Analytics Database (SQL Engine) feature engineering transformation function changes data from sparse to dense format.","117","752","","0","TD_Pivoting Function | Pivoting | Teradata Vantage - TD_Pivoting - Analytics Database","85","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting","","","","","","209634","13225","13225","4.688","A+","160","58","2.759","48.054","Hard","11.347","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","0.541","","","","","","1.1","## Summary

The **TD_Pivoting** function in Teradata Vantage™ is designed to transform data from a sparse format to a dense format by pivoting the data. This function is particularly beneficial for data analysis and reporting, allowing users to easily reorganize their datasets for better insights. It is typically used alongside other in-database analytic functions to enhance functionality and streamline processes.

The **TD_Unpivoting** function complements this by allowing users to convert data back from dense to sparse format, making it easier to manipulate datasets as needed.

### Code Example

Here are examples of how to use SQL statements for common database operations: Select, Update, Delete, and Create.

#### Select
```sql
SELECT 
    column1, column2, 
    TD_Pivoting(column_to_pivot, value_column) AS pivoted_data
FROM 
    example_table
WHERE 
    condition;
```

#### Update
```sql
UPDATE example_table
SET column1 = new_value
WHERE condition;
```

#### Delete
```sql
DELETE FROM example_table
WHERE condition;
```

#### Create
```sql
CREATE TABLE example_table (
    id INT PRIMARY KEY,
    column1 VARCHAR(100),
    column2 INT
);
```

### Keywords and Phrases
- **TD_Pivoting Function**
- **Pivoting**
- **Teradata Vantage - TD_Pivoting**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting","2024-07-27 11:43:04"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Example-How-to-Use-TD_Pivoting","text/html;charset=UTF-8","200","","Indexable","","Example: How to Use TD_Pivoting - Analytics Database","52","488","See examples of the TD_Pivoting function.","41","259","","0","Example: How to Use TD_Pivoting - Analytics Database","52","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Example-How-to-Use-TD_Pivoting","","","","","","209274","13446","13446","4.767","A+","109","47","2.319","39.938","Hard","11.233","1","5","","707","707","0","99.860","715","712","0","","","","","","","","","0.542","","","","","","1.1","# Teradata Vantage™ Analytics Database: SQL Operations Overview

The Teradata Vantage Analytics Database provides a robust platform for executing various SQL operations, including selecting, updating, deleting, and creating records. This section presents a summary of these operations along with code examples.

## Summary of SQL Operations

1. **Select**: Retrieves data from one or more tables.
2. **Update**: Modifies existing records in a table.
3. **Delete**: Removes records from a table.
4. **Create**: Establishes new tables or databases.

### Code Examples

#### Select Example
```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE country = 'USA';
```

#### Update Example
```sql
UPDATE customers
SET email = 'new_email@example.com'
WHERE customer_id = 12345;
```

#### Delete Example
```sql
DELETE FROM customers
WHERE customer_id = 12345;
```

#### Create Example
```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    country VARCHAR(50)
);
```

### Keywords and Phrases
- **How to Use TD_Pivoting** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This overview provides a foundational understanding of how to perform basic SQL operations within the Teradata Vantage Analytics Database environment. For more detailed operations and analytics functions, refer to the comprehensive documentation provided by Teradata.","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Example-How-to-Use-TD_Pivoting","2024-07-27 12:27:31"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Example-How-to-Use-TD_Pivoting/Aggregation-Only","text/html;charset=UTF-8","200","","Indexable","","Aggregation Only - Analytics Database","37","340","The following example assumes the star1 table exists. Calling TD_Pivoting with Aggregation Only SELECT * FROM TD_Pivoting (
  ON star1 AS InputTable PARTITION BY country Order By state
  USING
  PartitionColumns ('country')
  TargetColumns ('sales', 'cogs', 'state ','rating')
  Accumulate('yr')
  Aggregation('sales:SUM...","323","1934","","0","Aggregation Only - Analytics Database","37","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Example-How-to-Use-TD_Pivoting/Aggregation-Only","","","","","","208491","13146","13146","4.660","A+","121","56","2.161","29.848","Very Hard","11.419","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.803","","","","","","1.1","## Summary

This document provides an overview of SQL operations within an Analytics Database, specifically focusing on Teradata Vantage™. It covers essential SQL commands such as Select, Update, Delete, and Create, along with examples of their usage. Additionally, it outlines key concepts and functionalities related to analytics database analytic functions, as well as other features of the Teradata Vantage platform, including deployment strategies and analytic capabilities.

## Code Examples

### Select
The `SELECT` statement retrieves data from a database. 

```sql
SELECT country, SUM(sales) AS total_sales
FROM star1
GROUP BY country
ORDER BY total_sales DESC;
```

### Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE star1
SET sales = sales * 1.1
WHERE country = 'USA';
```

### Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM star1
WHERE year < 2000;
```

### Create
The `CREATE` statement creates a new table in the database.

```sql
CREATE TABLE sales_summary (
    country VARCHAR(50),
    total_sales DECIMAL(10, 2),
    year INT
);
```

## Keywords and Phrases

- Aggregation Only - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- gjn1627595495337.ditamap
- dita:ditavalPath
- ayr1485454803741.ditaval
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This structured overview provides a foundation for understanding how to work with an Analytics Database and Teradata Vantage's analytic functions effectively.","27","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Example-How-to-Use-TD_Pivoting/Aggregation-Only","2024-07-27 12:02:04"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Example-How-to-Use-TD_Pivoting/Aggregation-with-PivotColumn","text/html;charset=UTF-8","200","","Indexable","","Aggregation with PivotColumn - Analytics Database","49","459","The following example assumes the star1 table exists: CREATE MULTISET TABLE star1(country VARCHAR(20),state VARCHAR(10), yr INTEGER, qtr VARCHAR(3), sales INTEGER, cogs INTEGER, rating varchar(10));
insert into star1 values('USA',    'CA', 2001  ,'Q1',  30,  15, 'A');
insert into star1 values('Canada', 'ON', 2001  ,'Q2...","323","1970","","0","Aggregation with PivotColumn - Analytics Database","49","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Example-How-to-Use-TD_Pivoting/Aggregation-with-PivotColumn","","","","","","209798","13486","13486","4.781","A+","255","83","3.072","80.632","Easy","11.837","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.528","","","","","","1.1","## Summary
The Teradata Vantage™ Analytics Database offers a robust set of analytic functions that enable efficient data manipulation and analysis. The core operations include Select, Update, Delete, and Create commands, which form the foundation for handling data within the database. This document provides an overview of these operations along with examples on how to implement them effectively in SQL.

## Code Examples

### 1. Create
To create a new table in the database, you can use the `CREATE` statement. Here’s an example of creating a table named `star1`:

```sql
CREATE MULTISET TABLE star1 (
    country VARCHAR(20),
    state VARCHAR(10),
    yr INTEGER,
    qtr VARCHAR(3),
    sales INTEGER,
    cogs INTEGER,
    rating VARCHAR(10)
);
```

### 2. Insert
After creating a table, you can insert data into it using the `INSERT` statement. Here are some examples of data inserts:

```sql
INSERT INTO star1 VALUES ('USA', 'CA', 2001, 'Q1', 30, 15, 'A');
INSERT INTO star1 VALUES ('Canada', 'ON', 2001, 'Q2', 10, 0, 'B');
INSERT INTO star1 VALUES ('Canada', 'BC', 2001, 'Q3', 15, 0, 'A');
```

### 3. Select
To retrieve data from the table, the `SELECT` statement can be employed. Here’s how to select all records from `star1`:

```sql
SELECT * FROM star1;
```

### 4. Update
To modify existing records in the table, you can use the `UPDATE` statement. Below is an example of updating the sales for a specific entry:

```sql
UPDATE star1
SET sales = 35
WHERE country = 'USA' AND state = 'CA' AND yr = 2001 AND qtr = 'Q1';
```

### 5. Delete
If you need to remove records from a table, the `DELETE` statement is used. Below is an example of deleting a specific record:

```sql
DELETE FROM star1
WHERE country = 'Canada' AND state = 'ON' AND yr = 2001 AND qtr = 'Q2';
```

## Keywords and Phrases
- Aggregation with PivotColumn
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Workload Management Configuration
- Avoid Deadlocks
- Non-Deterministic Behavior
- Maximum Number of Columns
- Spool Space Exhaustion
- Recommendations for Using Analytic Functions
- TD_Pivoting
- Accumulate
- PivotKeys
- Aggregation
- Delimiters
- CombinedColumnSizes

This structured approach to database operations provides a clear framework for managing and analyzing data within Teradata's powerful analytics environment.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Example-How-to-Use-TD_Pivoting/Aggregation-with-PivotColumn","2024-07-27 11:58:21"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Example-How-to-Use-TD_Pivoting/PivotColumn","text/html;charset=UTF-8","200","","Indexable","","PivotColumn - Analytics Database","32","302","The following example assumes the titanic dataset table exists. Calling TD_Pivoting with PivotColumn SELECT * FROM TD_Pivoting (
  ON titanic_dataset_unpivoted AS InputTable PARTITION BY passenger
  USING
  PartitionColumns ('passenger')
  TargetColumns ('AttributeValue')
  Accumulate ('survived')
  PivotColumn('Attrib...","323","1979","","0","PivotColumn - Analytics Database","32","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Example-How-to-Use-TD_Pivoting/PivotColumn","","","","","","208707","13082","13082","4.638","A+","126","57","2.211","34.048","Hard","11.537","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.648","","","","","","1.1","# Teradata Vantage™ Analytics Database: SQL Operations Overview

The Teradata Vantage™ Analytics Database provides powerful analytic functions for data processing and analysis. This document introduces basic SQL operations, including Select, Update, Delete, and Create statements, and how they can be applied in the context of the Analytics Database.

## SQL Operations Summary

1. **Select**: Retrieve data from one or more tables.
2. **Update**: Modify existing data within a table.
3. **Delete**: Remove data from a table.
4. **Create**: Generate new tables or views in the database.

## Code Examples

### 1. Select

To retrieve data from the `titanic_dataset` table:

```sql
SELECT passenger, pclass, survived 
FROM titanic_dataset 
WHERE survived = 1;
```

### 2. Update

To update the `survived` status of a passenger:

```sql
UPDATE titanic_dataset 
SET survived = 0 
WHERE passenger = 2;
```

### 3. Delete

To remove a passenger's record from the dataset:

```sql
DELETE FROM titanic_dataset 
WHERE passenger = 4;
```

### 4. Create

To create a new table for storing summarized passenger data:

```sql
CREATE TABLE passenger_summary AS 
(
  SELECT pclass, COUNT(*) AS count, AVG(age) AS average_age 
  FROM titanic_dataset 
  GROUP BY pclass
);
```

## Example of Using TD_Pivoting with PivotColumn

The following example demonstrates how to use the `TD_Pivoting` function with a `PivotColumn` to reshape the `titanic_dataset_unpivoted` table.

```sql
SELECT * FROM TD_Pivoting (
  ON titanic_dataset_unpivoted AS InputTable PARTITION BY passenger
  USING
  PartitionColumns ('passenger')
  TargetColumns ('AttributeValue')
  Accumulate ('survived')
  PivotColumn('AttributeName')
  PivotKeys('pclass','sex')
) AS dt 
ORDER BY passenger;
```

### TD_Pivoting Output

The output of the above query might look like this:

| passenger | AttributeValue_pclass | AttributeValue_gender | survived |
|-----------|-----------------------|-----------------------|----------|
| 2         | 1                     | female                | 1        |
| 4         | 1                     | female                | 1        |
| 7         | 1                     | male                  | 0        |
| 10        | 2                     | female                | 1        |
| 16        | 2                     | female                | 1        |
| 21        | 2                     | male                  | 0        |
| 40        | 3                     | female                | 1        |
| 61        | 3                     | male                  | 0        |
| 1000      | 3                     | ?                     | 1        |

## Keywords and Phrases

- PivotColumn
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This guide provides a foundation to work with Teradata Vantage™ and highlights critical SQL operations that are essential for data manipulation and analysis.","27","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Example-How-to-Use-TD_Pivoting/PivotColumn","2024-07-27 12:46:13"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Example-How-to-Use-TD_Pivoting/RowsPerPartition","text/html;charset=UTF-8","200","","Indexable","","RowsPerPartition - Analytics Database","37","343","The following example assumes the titanic dataset table exists: DROP TABLE titanic_dataset_unpivoted;
CREATE MULTISET TABLE titanic_dataset_unpivoted (
      passenger INTEGER,
      AttributeName VARCHAR(128) CHARACTER SET UNICODE NOT CASESPECIFIC,
      AttributeValue VARCHAR(20) CHARACTER SET UNICODE NOT CASESPECIFI...","323","2097","","0","RowsPerPartition - Analytics Database","37","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Example-How-to-Use-TD_Pivoting/RowsPerPartition","","","","","","210329","13337","13337","4.728","A+","269","81","3.321","2.500","Very Hard","12.106","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.755","","","","","","1.1","# Summary

The Teradata Vantage™ Analytics Database provides robust capabilities for data manipulation and analysis. This includes a variety of functions tailored to enhance data exploration, cleaning, feature engineering, and model training. The following examples illustrate the fundamental SQL operations: Select, Update, Delete, and Create, particularly in the context of an analytics database.

## Code Examples

### 1. Create Table

```sql
DROP TABLE IF EXISTS titanic_dataset_unpivoted;

CREATE MULTISET TABLE titanic_dataset_unpivoted (
      passenger INTEGER,
      AttributeName VARCHAR(128) CHARACTER SET UNICODE NOT CASESPECIFIC,
      AttributeValue VARCHAR(20) CHARACTER SET UNICODE NOT CASESPECIFIC,
      survived INTEGER
) PRIMARY INDEX (passenger);
```

### 2. Insert Data

```sql
INSERT INTO titanic_dataset_unpivoted (passenger, AttributeName, AttributeValue, survived) VALUES (2, 'pclass', '1', 1);
INSERT INTO titanic_dataset_unpivoted (passenger, AttributeName, AttributeValue, survived) VALUES (2, 'gender', 'female', 1);
INSERT INTO titanic_dataset_unpivoted (passenger, AttributeName, AttributeValue, survived) VALUES (4, 'pclass', '1', 1);
-- Add more insert statements as needed
```

### 3. Select Data

```sql
SELECT * 
FROM titanic_dataset_unpivoted 
WHERE survived = 1;
```

### 4. Update Data

```sql
UPDATE titanic_dataset_unpivoted 
SET survived = 0 
WHERE passenger = 1000 AND AttributeName = 'gender';
```

### 5. Delete Data

```sql
DELETE FROM titanic_dataset_unpivoted 
WHERE passenger = 4;
```

## Keywords and Phrases

- RowsPerPartition - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This structured overview provides a foundational understanding of SQL operations within the context of Teradata Vantage™, while also highlighting the comprehensive functionalities available for data analytics.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Example-How-to-Use-TD_Pivoting/RowsPerPartition","2024-07-27 12:44:05"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Optional-Syntax-Elements-for-TD_Pivoting","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_Pivoting - Analytics Database","61","558","Accumulate Specifies the copied columns to the output columns. Accumulate Column values from the last row of the partition will be copied to the output. RowsPerPartition Use RowsPerPartition when no column contains pivot keys, but you can specify a maximum number of rows in any partition. The function pivots the input ...","323","2024","","0","Optional Syntax Elements for TD_Pivoting - Analytics Database","61","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Optional-Syntax-Elements-for-TD_Pivoting","","","","","","214613","14350","14350","5.087","A+","695","145","4.793","50.542","Fairly Hard","12.774","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.446","","","","","","1.1","### Summary
The Teradata Vantage™ Analytics Database provides a range of analytic functions for data cleaning, exploration, feature engineering, model training, scoring, evaluation, and various other analytical tasks. These functions are designed to help users manage and analyze large datasets effectively. This guide covers basic SQL operations such as Select, Update, Delete, and Create, as well as providing an overview of analytic functions related to TD_Pivoting.

### Code Examples

#### Select
To retrieve data from a table:
```sql
SELECT column1, column2
FROM your_table
WHERE condition;
```

#### Update
To update existing records in a table:
```sql
UPDATE your_table
SET column1 = value1, column2 = value2
WHERE condition;
```

#### Delete
To delete records from a table:
```sql
DELETE FROM your_table
WHERE condition;
```

#### Create
To create a new table:
```sql
CREATE TABLE new_table (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Example: Using TD_Pivoting
The `TD_Pivoting` function is useful for transforming rows into columns based on specified keys and aggregations. Here is an example of using this function:

```sql
SELECT * 
FROM TD_Pivoting(
    your_input_table,
    PivotColumn => 'Category',
    RowsPerPartition => 10,
    Aggregation => 'Sales:SUM',
    DefaultPivotValues => '0'
);
```

### Keywords and Phrases
- **Optional Syntax Elements for TD_Pivoting**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Recommendations for Using Analytic Functions**
- **General SQL Syntax**
- **Create, Update, Delete, Select operations** 

This summary, along with the examples and keywords, serves as a foundational guide for users working with Teradata Vantage™ and its analytic capabilities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Optional-Syntax-Elements-for-TD_Pivoting","2024-07-27 12:29:32"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Required-Syntax-Elements-for-TD_Pivoting","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_Pivoting - Analytics Database","61","562","ON clause Specifies the table name, view name or query as an InputTable. PartitionColumns Specifies the same columns from the InputTable which are specified in the PARTITION BY clause. TargetColumns Specifies the columns from the InputTable which needs to be pivoted.","267","1693","","0","Required Syntax Elements for TD_Pivoting - Analytics Database","61","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Required-Syntax-Elements-for-TD_Pivoting","","","","","","207923","12796","12796","4.536","A+","85","40","2.125","29.506","Very Hard","11.221","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.639","","","","","","1.1","# Summary of Teradata Analytics Database Functions

The Teradata Analytics Database provides a suite of analytic functions designed to perform various tasks including data cleaning, exploration, feature engineering, model training, and evaluation. This database allows users to efficiently analyze large datasets and extract meaningful insights through a range of functions tailored for specific analytical needs.

## Code Examples

### 1. Select
The `SELECT` statement is used to query data from a database. 

```sql
SELECT column1, column2 
FROM table_name 
WHERE condition;
```

### 2. Update
The `UPDATE` statement is used to modify existing data within a table.

```sql
UPDATE table_name 
SET column1 = value1, column2 = value2 
WHERE condition;
```

### 3. Delete
The `DELETE` statement is used to remove existing records from a table.

```sql
DELETE FROM table_name 
WHERE condition;
```

### 4. Create
The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Required Syntax Elements for TD_Pivoting - Analytics Database

- **InputTable**: Specifies the table or view from which to pivot data.
- **PivotColumn**: The column whose unique values will become column headers in the output.
- **Aggregation with PivotColumn**: Defines how to aggregate data across the pivoted column.
- **Aggregation Only**: Specifies an aggregation function to apply to the data.

## Keywords and Phrases

- Required Syntax Elements for TD_Pivoting
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions

This summary encapsulates the essential features and functionalities of the Teradata Analytics Database, providing a foundation for further exploration and utilization of its powerful analytic functions.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Required-Syntax-Elements-for-TD_Pivoting","2024-07-27 12:32:44"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/TD_Pivoting-Input","text/html;charset=UTF-8","200","","Indexable","","TD_Pivoting Input - Analytics Database","38","344","InputTable Schema Column Data Type Description partition_column Any allowed by PARTITION BY clause [Column appears one time for each specified partition_column.] Column to which to partition input data. target_column CHAR,VARCHAR,BYTE,VARBYTE,BYTEINT,SMALLINT,INTEGER,BIGINT,FLOAT,REAL,DOUBLE PRECISION,DECIMAL,NUMBER,DA...","323","2197","","0","TD_Pivoting Input - Analytics Database","38","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/TD_Pivoting-Input","","","","","","209823","13350","13350","4.733","A+","128","48","2.667","0.000","Very Hard","11.358","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.618","","","","","","1.1","## Overview of Teradata Vantage™ Analytics Database Functions

Teradata Vantage™ offers a powerful suite of analytic functions designed to facilitate data cleaning, exploration, feature engineering, modeling, and evaluation within an analytics database environment. This guide summarizes the primary SQL commands used in managing data (Select, Update, Delete, and Create) along with a brief overview of analytic functions available in Teradata.

### SQL Commands

#### 1. **Select**
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT column1, column2 
FROM table_name 
WHERE condition;
```

#### 2. **Update**
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name 
SET column1 = value1, column2 = value2 
WHERE condition;
```

#### 3. **Delete**
The `DELETE` statement removes records from a table based on the specified condition.

```sql
DELETE FROM table_name 
WHERE condition;
```

#### 4. **Create**
The `CREATE` statement is used to create a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Summary of Analytic Functions

Teradata's analytics database supports a variety of functions categorized into several groups:

- **Data Cleaning Functions:** Functions for identifying and handling missing or anomalous data.
- **Data Exploration Functions:** Functions for summarizing and analyzing data distributions and relationships.
- **Feature Engineering Functions:** Functions for transforming data for use in machine learning models.
- **Model Training and Evaluation Functions:** Functions for training various machine learning models and evaluating their performance.

### Code Example

Here are some examples demonstrating the use of analytic functions in Teradata:

#### Example of Data Cleaning Function: `TD_GetRowsWithoutMissingValues`

```sql
SELECT * 
FROM TD_GetRowsWithoutMissingValues('input_table');
```

#### Example of Feature Engineering Function: `TD_OneHotEncodingTransform`

```sql
SELECT * 
FROM TD_OneHotEncodingTransform('input_table', 'categorical_column');
```

#### Example of Model Training Function: `TD_DecisionForest`

```sql
SELECT * 
FROM TD_DecisionForest('input_table', 'target_column');
```

#### Example of Model Evaluation Function: `TD_ClassificationEvaluator`

```sql
SELECT * 
FROM TD_ClassificationEvaluator('predictions_table', 'actuals_table');
```

### Keywords and Phrases

- **TD_Pivoting Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Recommendations for Using Analytic Functions**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact on Function Execution**

This guide serves as a foundational reference for using SQL commands and understanding the analytic functions available within the Teradata Vantage analytics database environment.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/TD_Pivoting-Input","2024-07-27 12:21:59"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/TD_Pivoting-Output","text/html;charset=UTF-8","200","","Indexable","","TD_Pivoting Output - Analytics Database","39","360","OutputTable Schema - Only RowsPerPartition Column Data Type Description partition_column Same as InputTable Columns copied to output table. <target_column_name>_<i> or User-specified name Same as target_column Pivoted value. (where i is in range [0, rows_per_partition-1). Columns appear in order specified by TargetColu...","323","1890","","0","TD_Pivoting Output - Analytics Database","39","Database Analytic Functions","27","OutputTable Schema - Only RowsPerPartition","42","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/TD_Pivoting-Output","","","","","","213652","13492","13492","4.783","A+","194","56","3.464","3.593","Very Hard","11.373","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.543","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions tailored for data cleaning, exploration, feature engineering, model training, scoring, evaluation, and hypothesis testing. These functions are optimized for performance and scalability in cloud environments, including VantageCloud and VantageCore. The platform supports advanced data manipulation and analysis, enabling users to extract valuable insights from large datasets efficiently.

### Code Examples

Below are SQL code examples demonstrating basic operations—Select, Update, Delete, and Create—for Teradata Vantage™.

#### 1. Select
```sql
-- Selecting specific columns from a table
SELECT customer_id, first_name, last_name
FROM customers
WHERE status = 'active';
```

#### 2. Update
```sql
-- Updating a customer's status
UPDATE customers
SET status = 'inactive'
WHERE last_purchase_date < '2022-01-01';
```

#### 3. Delete
```sql
-- Deleting customers who have been inactive for over a year
DELETE FROM customers
WHERE last_purchase_date < CURRENT_DATE - INTERVAL '1' YEAR;
```

#### 4. Create
```sql
-- Creating a new table for storing customer transactions
CREATE TABLE customer_transactions (
    transaction_id INT GENERATED ALWAYS AS IDENTITY,
    customer_id INT,
    transaction_date DATE,
    amount DECIMAL(10, 2),
    PRIMARY KEY (transaction_id)
);
```

### Keywords and Phrases

- TD_Pivoting Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Maximum Number of Columns in a Database Table
- Recommendations for Using Analytic Functions
- Examples of TD functions (e.g., TD_CategoricalSummary, TD_OneHotEncodingFit)
- Spool Space Exhaustion for Large Partitions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior

These keywords and phrases provide a quick reference for understanding the capabilities and functionalities available in Teradata Vantage™ Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/TD_Pivoting-Output","2024-07-27 12:45:57"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/TD_Pivoting-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_Pivoting Syntax | Pivoting - TD_Pivoting Syntax - Analytics Database","71","635","See the syntax of the Analytics Database (SQL Engine) function TD_Pivoting and read descriptions of its required and optional syntax elements.","142","882","","0","TD_Pivoting Syntax | Pivoting - TD_Pivoting Syntax - Analytics Database","71","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/TD_Pivoting-Syntax","","","","","","209662","13219","13219","4.686","A+","164","74","2.216","14.236","Very Hard","11.550","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.522","","","","","","1.1","# Teradata Vantage™ Analytics Database: Overview and Code Examples

Teradata Vantage™ provides a comprehensive platform for analytics, equipped with a variety of analytic functions to aid in data manipulation, exploration, and modeling. In this overview, we focus on the fundamental SQL operations: SELECT, UPDATE, DELETE, and CREATE, which are vital for interacting with the database.

## Code Examples

### SELECT
The SELECT statement is used to query data from a database. You can specify the columns to retrieve and apply conditions to filter results.

```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE city = 'New York';
```

### UPDATE
The UPDATE statement modifies existing records in a table. You can set new values for specified columns based on conditions.

```sql
UPDATE customers
SET city = 'Los Angeles'
WHERE customer_id = 101;
```

### DELETE
The DELETE statement removes records from a table. Be cautious when using it, as it permanently deletes data.

```sql
DELETE FROM customers
WHERE customer_id = 101;
```

### CREATE
The CREATE statement is used to create new tables, views, or other database objects.

```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    city VARCHAR(50)
);
```

## Summary
Teradata Vantage™ offers a robust SQL interface for performing essential data manipulation tasks. With commands like SELECT, UPDATE, DELETE, and CREATE, users can effectively manage and analyze their data.

### Keywords and Phrases
- **TD_Pivoting Syntax**
- **Pivoting - TD_Pivoting Syntax - Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category: Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions**
- **Recommendations for Using Analytic Functions** 

This structured approach enables users to harness the power of Teradata Vantage™ effectively, facilitating data-driven decision-making processes.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/TD_Pivoting-Syntax","2024-07-27 12:06:36"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit","text/html;charset=UTF-8","200","","Indexable","","TD_PolynomialFeaturesFit Function | PolynomialFeaturesFit - TD_PolynomialFeaturesFit - Analytics Database","105","971","This Analytics Database (SQL Engine) feature engineering transform function outputs a table of values to input to TD_PolynomialFeaturesTransform.","145","920","","0","TD_PolynomialFeaturesFit Function | PolynomialFeaturesFit - TD_PolynomialFeaturesFit - Analytics Database","105","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit","","","","","","214595","16505","16505","5.851","A+","426","82","5.195","45.270","Hard","11.890","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","0.625","","","","","","1.1","## Overview of TD_PolynomialFeaturesFit Function

The `TD_PolynomialFeaturesFit` function in Teradata Vantage™ is used for generating polynomial features from the input dataset. It transforms the original input features into a new set of polynomial features, which are useful for fitting polynomial models to the data. This technique is particularly valuable in regression tasks where capturing non-linear relationships is essential.

### Key Points:
- **Input Features**: The input is a set of features, which can be one or more variables.
- **Polynomial Degree**: The degree of the polynomial can be specified, determining how many combinations of the input features will be generated.
- **Output**: The function creates new features that represent all polynomial combinations of the input features, including interaction terms.

## Code Example Section

### SQL Examples for Database Operations

Here are some SQL command examples demonstrating how to use basic operations like Select, Update, Delete, and Create in Teradata.

### 1. **Select**
```sql
SELECT *
FROM my_table
WHERE condition_column = 'some_value';
```

### 2. **Update**
```sql
UPDATE my_table
SET column_to_update = 'new_value'
WHERE condition_column = 'some_value';
```

### 3. **Delete**
```sql
DELETE FROM my_table
WHERE condition_column = 'some_value';
```

### 4. **Create**
```sql
CREATE TABLE my_table (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## Keywords and Phrases
- TD_PolynomialFeaturesFit Function
- PolynomialFeaturesFit
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- TD_GetRowsWithoutMissingValues
- TD_GetRowsWithMissingValues
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- TD_FunctionFit
- TD_FunctionTransform

This overview provides the essential information about the `TD_PolynomialFeaturesFit` function, how to use it effectively, and some foundational SQL commands in Teradata.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit","2024-07-27 12:02:43"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/Example-How-to-Use-TD_PolynomialFeaturesFit","text/html;charset=UTF-8","200","","Indexable","","TD_PolynomialFeaturesFit Example | PolynomialFeaturesFit - Example: How to Use TD_PolynomialFeaturesFit - Analytics Database","124","1165","See an example of the Analytics Database (SQL Engine) feature engineering transform function TD_PolynomialFeaturesFit.","118","756","","0","TD_PolynomialFeaturesFit Example | PolynomialFeaturesFit - Example: How to Use TD_PolynomialFeaturesFit - Analytics Database","124","Database Analytic Functions","27","TD_PolynomialFeaturesFit InputTable: polynomialFeaturesFit_input","64","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/Example-How-to-Use-TD_PolynomialFeaturesFit","","","","","","209931","13701","13701","4.857","A+","179","71","2.521","42.638","Hard","11.551","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.806","","","","","","1.1","## Summary

In this document, we will explore the `TD_PolynomialFeaturesFit` function in the Teradata Vantage™ Analytics Database. This function is part of the analytic functions available for feature engineering and is used to create polynomial features based on the input data. Below, you will find a code example that demonstrates how to use this function, along with additional SQL commands for creating, selecting, updating, and deleting records.

### Code Example

#### Create Table

```sql
CREATE TABLE polynomialFeaturesFit_input (
  id INT,
  col1 INT,
  col2 INT,
  col3 INT
);

INSERT INTO polynomialFeaturesFit_input (id, col1, col2, col3) VALUES
(1, 2, 3, 4),
(2, 5, 6, 7),
(3, 1, 2, 4),
(4, 5, 3, 5),
(5, 3, 2, 6);
```

#### Select

```sql
SELECT * FROM polynomialFeaturesFit_input;
```

#### Update

```sql
UPDATE polynomialFeaturesFit_input
SET col1 = col1 + 1
WHERE id = 1;
```

#### Delete

```sql
DELETE FROM polynomialFeaturesFit_input
WHERE id = 5;
```

#### Polynomial Features Fit Example

```sql
CREATE TABLE polynomialFit AS (
  SELECT * FROM TD_PolynomialFeaturesFit (
    ON polynomialFeaturesFit_input AS InputTable
    USING
    TargetColumns ('[1:2]')
    Degree (2)
  ) AS dt
) WITH DATA;
```

### Output

The output for the `TD_PolynomialFeaturesFit` function will include new polynomial features based on the specified degree and target columns.

| TD_INCLUDEBIAS_POLFIT | TD_INTERACTIONONLY_POLFIT | TD_DEGREE_POLFIT | col1 | col2 |
|-----------------------|---------------------------|------------------|------|------|
| TRUE                  | FALSE                     | 2                | NULL | NULL |

### Keywords and Phrases

- **TD_PolynomialFeaturesFit Example**
- **PolynomialFeaturesFit - Example: How to Use**
- **TD_PolynomialFeaturesFit**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This structured information provides a clear overview of the `TD_PolynomialFeaturesFit` function and its application within the Teradata Vantage™ environment.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/Example-How-to-Use-TD_PolynomialFeaturesFit","2024-07-27 12:48:47"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/Optional-Syntax-Elements-for-TD_PolynomialFeaturesFit","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_PolynomialFeaturesFit - Analytics Database","74","686","OUT clause Accepts the OutputTable clause. OutputTable Specifies a name for the output table. IncludeBias Specifies whether the output table is to include a bias column for the feature in which all polynomial powers are zero (that is, a column of ones). A bias column acts as an intercept term in a linear model. Default...","323","1961","","0","Optional Syntax Elements for TD_PolynomialFeaturesFit - Analytics Database","74","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/Optional-Syntax-Elements-for-TD_PolynomialFeaturesFit","","","","","","208602","13077","13077","4.636","A+","144","54","2.667","32.578","Hard","11.365","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.901","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database provides a suite of analytic functions tailored for various data processing and analysis tasks. Among these functions, `TD_PolynomialFeaturesFit` is used for generating polynomial and interaction features from input data, facilitating more sophisticated modeling approaches. This document outlines the essential syntax elements, examples, and optional settings for using this function and similar operations like selecting, updating, deleting, and creating data within the database.

### Code Example

Here are examples of common SQL operations including Select, Update, Delete, and Create:

#### 1. **Select**
```sql
SELECT column1, column2
FROM my_table
WHERE condition;
```

#### 2. **Update**
```sql
UPDATE my_table
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 3. **Delete**
```sql
DELETE FROM my_table
WHERE condition;
```

#### 4. **Create**
```sql
CREATE TABLE my_table (
    column1 INT,
    column2 VARCHAR(100),
    column3 DATE
);
```

### Keywords and Phrases

- **Optional Syntax Elements for TD_PolynomialFeaturesFit**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number 17.20**
- **Published June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Function Syntax Descriptions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in Database Table**
- **Spool Space Exhaustion for Large Partitions**
- **Recommendations for Using Analytic Functions**
- **Data Cleaning Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Data Exploration Functions**
- **Path and Pattern Analysis Functions**
- **TD_PolynomialFeaturesTransform**
- **TD_PolynomialFeaturesFit Usage Notes**
- **Required Syntax Elements for TD_PolynomialFeaturesFit**
- **Input Table Rows Redistribution**
- **Function Names with and without TD Prefix**
- **Displaying Online Help for Functions**
- **Input Table Schemas**
- **Accumulated Columns Impact on Function Performance** 

These keywords and phrases encapsulate the core functionalities and considerations for using Teradata's Analytics Database effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/Optional-Syntax-Elements-for-TD_PolynomialFeaturesFit","2024-07-27 11:24:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/Required-Syntax-Elements-for-TD_PolynomialFeaturesFit","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_PolynomialFeaturesFit - Analytics Database","74","690","ON clause Accepts the InputTable clause. TargetColumns Specifies the names of the InputTable columns to output polynomial combinations for features. Column limit is five.","170","1068","","0","Required Syntax Elements for TD_PolynomialFeaturesFit - Analytics Database","74","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/Required-Syntax-Elements-for-TD_PolynomialFeaturesFit","","","","","","207733","12760","12760","4.523","A+","68","39","1.744","1.030","Very Hard","11.191","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.522","","","","","","1.1","### Summary

In Teradata Vantage, the `Analytics Database` provides a variety of analytic functions that can be utilized for tasks such as data cleaning, feature engineering, and model training. Understanding the syntax and required elements for these functions is essential for effective data manipulation and analysis. This document focuses on key SQL operations including `SELECT`, `UPDATE`, `DELETE`, and `CREATE`, along with an emphasis on the `TD_PolynomialFeaturesFit` function.

### Code Example

#### 1. SELECT
To retrieve data from a table, use the `SELECT` statement. Here’s an example:
```sql
SELECT 
    customer_id, 
    first_name, 
    last_name 
FROM 
    customers 
WHERE 
    country = 'USA';
```

#### 2. UPDATE
To modify existing records in a table, you can use the `UPDATE` statement:
```sql
UPDATE 
    customers 
SET 
    last_name = 'Smith' 
WHERE 
    customer_id = 1001;
```

#### 3. DELETE
To remove records from a table, the `DELETE` statement is used:
```sql
DELETE FROM 
    customers 
WHERE 
    last_name = 'Doe';
```

#### 4. CREATE
To create a new table, the `CREATE` statement is necessary. This example creates a new table named `orders`:
```sql
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2)
);
```

### Keywords and Phrases

- **Required Syntax Elements for TD_PolynomialFeaturesFit**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language English (United States)**
- **Last Update April 2024**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Recommendations for Using Analytic Functions**
- **Example: How to Use TD_PolynomialFeaturesFit**
- **Maximum Number of Columns in a Database Table**
- **Input Table Rows Redistribution**
- **Function Names with and without TD Prefix**
- **AMP Configuration Impact on Function Execution**

This structured approach should provide a comprehensive understanding of basic SQL operations and specific analytic functions within the Teradata ecosystem.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/Required-Syntax-Elements-for-TD_PolynomialFeaturesFit","2024-07-27 12:00:12"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/TD_PolynomialFeaturesFit-Input","text/html;charset=UTF-8","200","","Indexable","","TD_PolynomialFeaturesFit Input - Analytics Database","51","472","InputTable Schema Column Data Type Description target_column NUMERIC Column for which to output polynomial combinations for features.","133","879","","0","TD_PolynomialFeaturesFit Input - Analytics Database","51","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/TD_PolynomialFeaturesFit-Input","","","","","","208469","12966","12966","4.597","A+","58","37","1.568","0.000","Very Hard","11.122","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.570","","","","","","1.1","# Summary

The Teradata Vantage™ Analytics Database provides a robust set of analytic functions designed to facilitate data manipulation, exploration, and modeling. The primary functions can be categorized into data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This guide focuses on fundamental SQL operations—Select, Update, Delete, and Create—within the context of the Analytics Database, providing syntax examples to illustrate each operation.

## Code Example

### 1. Select
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT 
    target_column, 
    other_column 
FROM 
    your_table 
WHERE 
    condition;
```

### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE 
    your_table 
SET 
    target_column = new_value 
WHERE 
    condition;
```

### 3. Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM 
    your_table 
WHERE 
    condition;
```

### 4. Create
The `CREATE` statement creates a new table in the database.

```sql
CREATE TABLE new_table (
    id INT,
    target_column NUMERIC,
    other_column VARCHAR(255)
);
```

## Keywords and Phrases

- TD_PolynomialFeaturesFit Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- gjn1627595495337.ditamap
- dita:ditavalPath
- ayr1485454803741.ditaval
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_OutlierFilterTransform
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- Unpack
- MovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- Feature Engineering Transform Functions
- Antiselect
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer
- TD_FunctionFit
- TD_FunctionTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_PolynomialFeaturesFit
- TD_RandomProjectionFit
- TD_RowNormalizeFit
- TD_RowNormalizeTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_Unpivoting
- Feature Engineering Utility Functions
- TD_FillRowID
- TD_NumApply
- TD_RoundColumns
- TD_StrApply
- Model Training Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_KNN
- TD_OneClassSVM
- TD_SVM
- TD_XGBoost
- Model Scoring Functions
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_OneClassSVMPredict
- TD_SVMPredict
- TD_XGBoostPredict
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- Text Analytic Functions
- NGramSplitter
- TD_NaiveBayesTextClassifierPredict
- TD_NaiveBayesTextClassifierTrainer
- TD_SentimentExtractor
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Testing Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Path and Pattern Analysis Functions
- Attribution
- nPath
- Sessionize
- InputTable Schema
- Column Data Type Description
- target_column NUMERIC
- Column for which to output polynomial combinations for features.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/TD_PolynomialFeaturesFit-Input","2024-07-27 12:24:24"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/TD_PolynomialFeaturesFit-Output","text/html;charset=UTF-8","200","","Indexable","","TD_PolynomialFeaturesFit Output - Analytics Database","52","488","OutputTable Schema Column Data Type Description TD_IncludeBias_POLFIT:Boolean INTEGER 1 if Boolean is 'True', 0 if Boolean is 'False'. TD_InteractionOnly_POLFIT:Boolean INTEGER 1 if Boolean is 'True', 0 if Boolean is 'False'. TD_Degree_POLFIT:degree INTEGER degree target_column NUMERIC Preserves target column name for ...","323","2052","","0","TD_PolynomialFeaturesFit Output - Analytics Database","52","Database Analytic Functions","27","OutputTable Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/TD_PolynomialFeaturesFit-Output","","","","","","209820","13171","13171","4.669","A+","86","46","1.870","0.000","Very Hard","11.172","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","3.613","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database offers various analytic functions that facilitate data processing and model training. Among these functions are SQL operations such as Select, Update, Delete, and Create, which are fundamental for interacting with databases. The Analytics Database includes a wide range of analytic functions designed to handle data cleaning, exploration, feature engineering, model training, and evaluation, making it a versatile tool for data scientists and engineers.

### Code Example

Below are examples of basic SQL operations using Teradata syntax.

#### 1. Select
```sql
SELECT column1, column2
FROM my_table
WHERE condition;
```

#### 2. Update
```sql
UPDATE my_table
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 3. Delete
```sql
DELETE FROM my_table
WHERE condition;
```

#### 4. Create
```sql
CREATE TABLE my_new_table (
    column1 DATA_TYPE,
    column2 DATA_TYPE,
    ...
);
```

### Keywords and Phrases
- **TD_PolynomialFeaturesFit Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Workload Management Configuration**
- **Data Exploration Functions** 
- **Data Cleaning Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/TD_PolynomialFeaturesFit-Output","2024-07-27 12:37:06"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/TD_PolynomialFeaturesFit-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_PolynomialFeaturesFit Syntax | PolynomialFeaturesFit - TD_PolynomialFeaturesFit Syntax - Analytics Database","110","1019","See the syntax of the Analytics Database (SQL Engine) function TD_PolynomialFeaturesFit and read descriptions of its required and optional syntax elements.","155","971","","0","TD_PolynomialFeaturesFit Syntax | PolynomialFeaturesFit - TD_PolynomialFeaturesFit Syntax - Analytics Database","110","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/TD_PolynomialFeaturesFit-Syntax","","","","","","208733","13027","13027","4.618","A+","132","48","2.750","47.662","Hard","11.335","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.118","","","","","","1.1","### Summary of TD_PolynomialFeaturesFit

The `TD_PolynomialFeaturesFit` function in Teradata Vantage is a powerful tool for generating polynomial features from a set of input columns in a dataset. It allows you to create new features by raising existing features to a specified degree, as well as include interaction terms. This is particularly useful in enhancing the performance of machine learning algorithms by providing them with more complex relationships to learn from.

### Code Example

Here are examples of SQL commands for selecting, updating, deleting, and creating tables using the `TD_PolynomialFeaturesFit` function:

#### Select Example
```sql
SELECT *
FROM TD_PolynomialFeaturesFit (
    ON my_input_table AS InputTable
    OUT TABLE my_output_table
    USING
    TargetColumns ('feature1', 'feature2')
    IncludeBias ('true')
    Degree (2)
);
```

#### Update Example
```sql
UPDATE my_output_table
SET new_feature = existing_feature * 2
WHERE condition_column = 'some_value';
```

#### Delete Example
```sql
DELETE FROM my_output_table
WHERE condition_column = 'some_value';
```

#### Create Example
```sql
CREATE TABLE my_output_table AS (
    SELECT *
    FROM TD_PolynomialFeaturesFit (
        ON my_input_table AS InputTable
        USING
        TargetColumns ('feature1', 'feature2')
        IncludeBias ('true')
        Degree (2)
    )
) WITH NO DATA;
```

### Keywords and Phrases

- **TD_PolynomialFeaturesFit Syntax**
- **PolynomialFeaturesFit**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Accumulated Columns Impact on Function Performance**
- **Example: How to Use TD_PolynomialFeaturesFit**
- **TargetColumns**
- **IncludeBias**
- **InteractionOnly**
- **Degree**
- **OutputTable**
- **InputTable**
- **Permanent Table**
- **Volatile Table**
- **CREATE TABLE**
- **CREATE VIEW**","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/TD_PolynomialFeaturesFit-Syntax","2024-07-27 11:40:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform","text/html;charset=UTF-8","200","","Indexable","","TD_PolynomialFeaturesTransform | PolynomialFeaturesTransform - TD_PolynomialFeaturesTransform - Analytics Database","114","1102","This Analytics Database function outputs polynomial combinations of input features of specified degree or less, using TD_PolynomialFeaturesFit output.","150","938","","0","TD_PolynomialFeaturesTransform | PolynomialFeaturesTransform - TD_PolynomialFeaturesTransform - Analytics Database","114","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform","","","","","","214419","16035","16035","5.684","A+","372","79","4.709","21.712","Very Hard","11.898","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","1.246","","","","","","1.1","### Summary
The `TD_PolynomialFeaturesTransform` function in Teradata Vantage™ is a powerful tool for transforming an input feature matrix into a new matrix that includes polynomial combinations of the original features. This transformation allows for the modeling of nonlinear relationships between input features and a target variable, which is essential in various analytical applications. The transformation can also include interaction terms, enhancing the complexity and capability of modeling.

### Code Example

Here are examples demonstrating basic SQL operations within Teradata, particularly focusing on `SELECT`, `INSERT`, `UPDATE`, and `DELETE` operations.

#### 1. SELECT
This command retrieves data from a database.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

#### 2. INSERT
This command adds new records to a table.

```sql
INSERT INTO table_name (column1, column2)
VALUES (value1, value2);
```

#### 3. UPDATE
This command modifies existing records.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 4. DELETE
This command removes records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

### Keywords and Phrases
- **TD_PolynomialFeaturesTransform**
- **PolynomialFeaturesTransform**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category: Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Accumulated Columns Impact on Function Performance**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Pack, Unpack, TD_ConvertTo, TD_GetRowsWithoutMissingValues, TD_OutlierFilterTransform, TD_SimpleImputeTransform**
- **Model Evaluation Functions**
- **TD_DecisionForest, TD_GLM, TD_KMeans, TD_XGBoost**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform","2024-07-27 12:21:38"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/Example-How-to-Use-TD_PolynomialFeaturesTransform","text/html;charset=UTF-8","200","","Indexable","","TD_PolynomialFeaturesTransform Function Example | Teradata Vantage - Example: How to Use TD_PolynomialFeaturesTransform - Analytics Database","140","1349","See an example of the Analytics Database (SQL Engine) feature engineering transform function TD_PolynomialFeaturesTransform.","124","806","","0","TD_PolynomialFeaturesTransform Function Example | Teradata Vantage - Example: How to Use TD_PolynomialFeaturesTransform - Analytics Database","140","Database Analytic Functions","27","TD_PolynomialFeaturesFit InputTable: polynomialFeaturesFit_input","64","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/Example-How-to-Use-TD_PolynomialFeaturesTransform","","","","","","210067","13302","13302","4.716","A+","198","106","1.868","48.130","Hard","11.697","1","5","","707","707","0","99.860","712","709","0","","","","","","","","","0.705","","","","","","1.1","### Overview of TD_PolynomialFeaturesTransform Function

The `TD_PolynomialFeaturesTransform` function in Teradata Vantage is used for transforming input data by creating polynomial features. This is particularly useful in machine learning and statistical modeling, where polynomial features can help capture non-linear relationships between variables. This function can generate new features based on existing ones in the input dataset, allowing for more complex modeling.

### Code Examples

Here are examples demonstrating how to use basic SQL operations (SELECT, UPDATE, DELETE, and CREATE) in the context of Teradata:

#### 1. **SELECT**
```sql
SELECT * 
FROM polynomialFeaturesFit_input;
```
This command retrieves all records from the `polynomialFeaturesFit_input` table.

#### 2. **UPDATE**
```sql
UPDATE polynomialFeaturesFit_input
SET col2 = col2 + 1
WHERE id = 1;
```
This command updates the `col2` value by incrementing it by 1 for the record where `id` equals 1.

#### 3. **DELETE**
```sql
DELETE FROM polynomialFeaturesFit_input
WHERE id = 5;
```
This command deletes the record from the `polynomialFeaturesFit_input` table where the `id` equals 5.

#### 4. **CREATE**
```sql
CREATE TABLE new_polynomial_features (
    id INT,
    col1 FLOAT,
    col2 FLOAT,
    col3 FLOAT
);
```
This command creates a new table named `new_polynomial_features` with specified columns.

### Example: How to Use TD_PolynomialFeaturesTransform

Here’s how to apply the `TD_PolynomialFeaturesTransform` function:

```sql
SELECT * FROM TD_PolynomialFeaturesTransform (
  ON polynomialFeaturesFit_input AS InputTable PARTITION BY ANY
  ON polynomialFit AS FitTable DIMENSION
  USING
  Accumulate ('[0:0]')
) AS dt;
```

#### Output Explanation
The command above transforms the input features into polynomial features and the output will include new columns that represent the polynomial combinations of the original features.

### Summary

The `TD_PolynomialFeaturesTransform` function is an essential tool for feature engineering in Teradata Vantage, allowing users to create polynomial features that enhance model performance. The examples provided illustrate fundamental SQL operations that can be performed within the Teradata environment.

### Keywords and Phrases

- TD_PolynomialFeaturesTransform Function Example
- Teradata Vantage
- Example: How to Use TD_PolynomialFeaturesTransform
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Enterprise Edition
- IntelliFlex
- VMware
- Product: Teradata Vantage™
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Model Training Functions
- Feature Engineering Transform Functions
- SQL Examples
- SELECT, UPDATE, DELETE, CREATE
- InputTable, OutputTable
- Polynomial Features
- Non-linear relationships
- Data Transformation Functions
- Analytics Database Functions","26","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/Example-How-to-Use-TD_PolynomialFeaturesTransform","2024-07-27 12:40:03"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/Optional-Syntax-Elements-for-TD_PolynomialFeaturesTransform","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_PolynomialFeaturesTransform - Analytics Database","80","757","Accumulate Specifies the names of the InputTable columns to copy to the output table. If two or more column names are concatenated and the column name exceeds 128 characters, then the function replaces the actual column names with names such as col1, col2, col3, col4, col5 in the output.","288","1814","","0","Optional Syntax Elements for TD_PolynomialFeaturesTransform - Analytics Database","80","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/Optional-Syntax-Elements-for-TD_PolynomialFeaturesTransform","","","","","","208107","12921","12921","4.581","A+","93","38","2.447","33.332","Hard","11.230","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.478","","","","","","1.1","## Summary of Teradata Analytics Database Functions

Teradata's Analytics Database offers a variety of analytic functions that facilitate data manipulation, exploration, and modeling. This includes functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Each function has specific syntax and required or optional elements that help users tailor their queries to meet their analytical needs. 

The following sections provide examples for basic SQL operations: Select, Update, Delete, and Create, which are commonly used in managing data within the Teradata environment.

## Code Examples

### 1. Select
The `SELECT` statement retrieves data from a database.

```sql
SELECT column1, column2 
FROM table_name 
WHERE condition;
```

**Example**:
```sql
SELECT first_name, last_name 
FROM employees 
WHERE department = 'Sales';
```

### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name 
SET column1 = value1, column2 = value2 
WHERE condition;
```

**Example**:
```sql
UPDATE employees 
SET salary = salary * 1.10 
WHERE department = 'Sales';
```

### 3. Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM table_name 
WHERE condition;
```

**Example**:
```sql
DELETE FROM employees 
WHERE last_name = 'Doe';
```

### 4. Create
The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example**:
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

## Keywords and Phrases
- **Optional Syntax Elements for TD_PolynomialFeaturesTransform**
- **Analytics Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Data Exploration Functions**
- **Model Training Functions**
- **Model Scoring Functions** 

This summary encapsulates the capabilities of the Teradata Analytics Database and provides foundational SQL operation examples, enabling effective data management and analysis.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/Optional-Syntax-Elements-for-TD_PolynomialFeaturesTransform","2024-07-27 11:53:10"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/Required-Syntax-Elements-for-TD_PolynomialFeaturesTransform","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_PolynomialFeaturesTransform - Analytics Database","80","761","ON clause Accepts the InputTable and FitTable clauses.","54","343","","0","Required Syntax Elements for TD_PolynomialFeaturesTransform - Analytics Database","80","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/Required-Syntax-Elements-for-TD_PolynomialFeaturesTransform","","","","","","207472","12639","12639","4.481","A+","52","35","1.486","0.000","Very Hard","11.152","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.730","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions designed to enhance data manipulation and analysis. The following code examples illustrate the fundamental SQL operations: **Select**, **Insert (Create)**, **Update**, and **Delete**. These examples are essential for managing data within the Analytics Database, particularly when working with analytic functions. 

### Code Example

#### 1. Select
```sql
SELECT customer_id, first_name, last_name, order_amount
FROM orders
WHERE order_date >= '2023-01-01';
```

#### 2. Insert (Create)
```sql
INSERT INTO customers (customer_id, first_name, last_name, email)
VALUES (1001, 'John', 'Doe', 'john.doe@example.com');
```

#### 3. Update
```sql
UPDATE customers
SET email = 'john.doe@newdomain.com'
WHERE customer_id = 1001;
```

#### 4. Delete
```sql
DELETE FROM customers
WHERE customer_id = 1001;
```

### Keywords and Phrases
- Required Syntax Elements for TD_PolynomialFeaturesTransform
- Analytics Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Recommendations for Using Analytic Functions
- Examples: How to Use [Function Name] (e.g., Pack, StringSimilarity, TD_ConvertTo)
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_RowNormalizeFit
- TD_RowNormalizeTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_XGBoostPredict
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- Text Analytic Functions
- NGramSplitter
- Hypothesis Test Types
- TD_ANOVA
- TD_ChiSq
- nPath
- Sessionize
- Additional Information
- Teradata Links
- Related Documentation

This concise overview provides a foundation for understanding how to interact with the Teradata Analytics Database using fundamental SQL operations, as well as an insight into additional analytic functions and considerations.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/Required-Syntax-Elements-for-TD_PolynomialFeaturesTransform","2024-07-27 12:16:14"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/TD_PolynomialFeaturesTransform-Input","text/html;charset=UTF-8","200","","Indexable","","TD_PolynomialFeaturesTransform Input - Analytics Database","57","543","InputTable Schema Column Data Type Description target_column NUMERIC Column for which to output polynomial combinations for features. FitTable Schema Column Data Type Description TD_IncludeBias_POLFIT:Boolean INTEGER 1 if Boolean is 'True', 0 if it is 'False'. TD_InteractionOnly_POLFIT:Boolean INTEGER 1 if Boolean is '...","323","2052","","0","TD_PolynomialFeaturesTransform Input - Analytics Database","57","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/TD_PolynomialFeaturesTransform-Input","","","","","","211031","13274","13274","4.706","A+","103","50","2.060","0.000","Very Hard","11.167","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.569","","","","","","1.1","## Summary

In this document, we will cover fundamental SQL operations—Select, Update, Delete, and Create—within the context of the Teradata Vantage™ Analytics Database. These operations are essential for managing and manipulating data stored in databases. Each operation serves a unique purpose:

1. **Select**: Retrieve data from one or more tables.
2. **Update**: Modify existing data in a table.
3. **Delete**: Remove data from a table.
4. **Create**: Establish new tables or structures in the database.

Below, you'll find code examples for each operation, demonstrating their syntax and usage.

### Code Examples

#### 1. Select

To query data from a table, you can use the `SELECT` statement. Here’s an example:

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

**Example Usage:**
```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

#### 2. Update

To modify existing records in a table, the `UPDATE` statement is used:

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example Usage:**
```sql
UPDATE employees
SET salary = salary * 1.10
WHERE performance_rating = 'Excellent';
```

#### 3. Delete

To remove records from a table, the `DELETE` statement is employed:

```sql
DELETE FROM table_name
WHERE condition;
```

**Example Usage:**
```sql
DELETE FROM employees
WHERE termination_date < '2020-01-01';
```

#### 4. Create

To create a new table in the database, the `CREATE TABLE` statement is used:

```sql
CREATE TABLE table_name (
    column1 data_type,
    column2 data_type,
    ...
);
```

**Example Usage:**
```sql
CREATE TABLE new_employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    hire_date DATE,
    salary NUMERIC(10, 2)
);
```

---

### Keywords and Phrases

- TD_PolynomialFeaturesTransform Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Workload Management Configuration
- Non-Deterministic Behavior
- Recommendations for Using Analytic Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- Spool Space Exhaustion
- TD_ConvertTo
- TD_GetRowsWithoutMissingValues
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer

This structured overview and code examples provide a solid foundation for understanding how to interact with the Teradata Vantage™ Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/TD_PolynomialFeaturesTransform-Input","2024-07-27 12:45:08"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/TD_PolynomialFeaturesTransform-Output","text/html;charset=UTF-8","200","","Indexable","","TD_PolynomialFeaturesTransform Output - Analytics Database","58","559","Output Table Schema Column Data Type Description accumulate_column Same as in InputTable. Column copied from InputTable. One DOUBLE PRECISION [Column appears only with IncludeBias ('true').] Column for feature in which all polynomial powers are zero (column of ones). output_column DOUBLE PRECISION [Column appears once ...","323","2109","","0","TD_PolynomialFeaturesTransform Output - Analytics Database","58","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/TD_PolynomialFeaturesTransform-Output","","","","","","209697","13305","13305","4.717","A+","119","45","2.644","15.045","Very Hard","11.258","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.365","","","","","","1.1","## Summary

In this document, we explore key operations related to managing data within an Analytics Database, focusing on the fundamental SQL operations: Create, Select, Update, and Delete. These operations are essential for data manipulation and management within the context of Analytics Database analytic functions. The examples provided illustrate how to implement these operations effectively, serving as a guide for users to interact with their data.

---

### Code Examples

#### 1. Create

Creating a new table in the Analytics Database can be done with the following SQL command:

```sql
CREATE TABLE Employee (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    BirthDate DATE,
    HireDate DATE
);
```

#### 2. Select

To retrieve data from the Employee table, you can use the SELECT statement:

```sql
SELECT FirstName, LastName, HireDate
FROM Employee
WHERE HireDate > '2020-01-01';
```

#### 3. Update

To update existing records in the Employee table, use the UPDATE statement:

```sql
UPDATE Employee
SET HireDate = '2021-06-01'
WHERE EmployeeID = 1;
```

#### 4. Delete

To remove records from the Employee table, the DELETE statement can be used:

```sql
DELETE FROM Employee
WHERE EmployeeID = 2;
```

---

### Keywords and Phrases

- TD_PolynomialFeaturesTransform Output
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Recommendations for Using Analytic Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Avoid Deadlocks Using Volatile Tables
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions

This structured approach to understanding and utilizing SQL within an Analytics Database context helps in effectively managing and analyzing data.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/TD_PolynomialFeaturesTransform-Output","2024-07-27 12:43:02"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/TD_PolynomialFeaturesTransform-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_PolynomialFeaturesTransform Function Syntax | Teradata Vantage - TD_PolynomialFeaturesTransform Syntax - Analytics Database","126","1203","See the syntax of the Analytics Database (SQL Engine) function TD_PolynomialFeaturesTransform & read descriptions of its required & optional syntax elements.","157","991","","0","TD_PolynomialFeaturesTransform Function Syntax | Teradata Vantage - TD_PolynomialFeaturesTransform Syntax - Analytics Database","126","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/TD_PolynomialFeaturesTransform-Syntax","","","","","","208502","12944","12944","4.589","A+","108","45","2.400","27.366","Very Hard","11.274","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.448","","","","","","1.1","### TD_PolynomialFeaturesTransform Function Overview

The `TD_PolynomialFeaturesTransform` function in Teradata Vantage is used for feature engineering in data analytics. It allows users to expand their dataset by generating polynomial features based on the input data. This can be particularly useful in machine learning applications where polynomial regression is used to model complex relationships between variables.

### Code Example

Below are examples demonstrating how to use the basic SQL operations: **SELECT**, **UPDATE**, **DELETE**, and **CREATE** in conjunction with the `TD_PolynomialFeaturesTransform` function.

#### 1. SELECT Example
```sql
SELECT *
FROM TD_PolynomialFeaturesTransform (
  ON my_table AS InputTable PARTITION BY ANY
  ON my_fit_table AS FitTable DIMENSION
  USING
  [ Accumulate ('feature1', 'feature2') ]
) AS Result;
```
This query selects all columns from the transformed polynomial features generated from `my_table` using `my_fit_table`.

#### 2. CREATE Example
```sql
CREATE TABLE my_transformed_table AS (
  SELECT *
  FROM TD_PolynomialFeaturesTransform (
    ON my_table AS InputTable PARTITION BY ANY
    ON my_fit_table AS FitTable DIMENSION
    USING
    [ Accumulate ('feature1', 'feature2') ]
  )
) WITH NO DATA;
```
In this example, a new table `my_transformed_table` is created based on the polynomial features transformed from `my_table`.

#### 3. UPDATE Example
```sql
UPDATE my_table
SET feature1 = new_value
WHERE id = some_id;
```
This update statement modifies a specific record in `my_table`, which could affect subsequent transformations when `TD_PolynomialFeaturesTransform` is applied.

#### 4. DELETE Example
```sql
DELETE FROM my_table
WHERE condition;
```
This statement deletes records from `my_table` that meet the specified condition, which may also influence the results of polynomial transformations.

### Summary
The `TD_PolynomialFeaturesTransform` function is instrumental in expanding datasets through polynomial feature generation, enhancing the model's ability to capture complex relationships. The examples provided illustrate how to integrate this function within standard SQL operations in Teradata Vantage.

### Keywords and Phrases
- TD_PolynomialFeaturesTransform Function Syntax
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Feature Engineering Transform Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number 17.20
- Published June 2022
- Language English (United States)
- Last Update 2024-04-06
- Data Cleaning Functions
- Data Exploration Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Hypothesis Testing Functions
- TD_GetRowsWithoutMissingValues
- TD_ScaleTransform
- TD_XGBoost
- TD_NaiveBayesTextClassifierPredict
- Data Transformation
- SQL Operations: SELECT, UPDATE, DELETE, CREATE","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/TD_PolynomialFeaturesTransform-Syntax","2024-07-27 11:53:07"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit","text/html;charset=UTF-8","200","","Indexable","","TD_RandomProjectionFit Function | RandomProjectionFit - TD_RandomProjectionFit - Analytics Database","99","932","Analytics Database returns a random projection matrix based on specified arguments & required parameters to transform input data into lower-dimensional data.","157","997","","0","TD_RandomProjectionFit Function | RandomProjectionFit - TD_RandomProjectionFit - Analytics Database","99","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit","","","","","","209201","13145","13145","4.660","A+","105","47","2.234","0.000","Very Hard","11.293","1","4","","707","707","0","99.860","715","713","0","","","","","","","","","0.861","","","","","","1.1","## Summary

The `TD_RandomProjectionFit` function in Teradata Vantage™ is used to generate a random projection matrix based on the specified parameters. This matrix is crucial for transforming high-dimensional input data into a lower-dimensional format while preserving the essential structure of the data. The transformation is achieved through another function called `TD_RandomProjectionTransform`, which utilizes the matrix generated by `TD_RandomProjectionFit`.

## Code Example

Here are examples of SQL operations for `Select`, `Update`, `Delete`, and `Create` statements in the context of Teradata:

### Select
```sql
SELECT *
FROM my_table
WHERE condition_column = 'desired_value';
```

### Update
```sql
UPDATE my_table
SET column_to_update = 'new_value'
WHERE condition_column = 'desired_value';
```

### Delete
```sql
DELETE FROM my_table
WHERE condition_column = 'value_to_delete';
```

### Create
```sql
CREATE TABLE my_table (
    id INT NOT NULL,
    name VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
);
```

## Keywords and Phrases

- TD_RandomProjectionFit Function
- RandomProjectionFit
- TD_RandomProjectionFit
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_OutlierFilterTransform
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- Unpack
- Data Exploration Functions
- MovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- Feature Engineering Transform Functions
- Antiselect
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer
- TD_FunctionFit
- TD_FunctionTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_PolynomialFeaturesFit
- TD_PolynomialFeaturesTransform
- TD_RandomProjectionFit
- TD_RandomProjectionTransform
- TD_RowNormalizeFit
- TD_RowNormalizeTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_Unpivoting
- Feature Engineering Utility Functions
- TD_FillRowID
- TD_NumApply
- TD_RoundColumns
- TD_StrApply
- Model Training Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_KNN
- TD_OneClassSVM
- TD_SVM
- TD_VectorDistance
- TD_XGBoost
- Model Scoring Functions
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_OneClassSVMPredict
- TD_SVMPredict
- TD_XGBoostPredict
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- Text Analytic Functions
- NGramSplitter
- TD_NaiveBayesTextClassifierPredict
- TD_NaiveBayesTextClassifierTrainer
- TD_SentimentExtractor
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Testing Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Path and Pattern Analysis Functions
- Attribution
- nPath
- Sessionize
- Additional Information
- Teradata Links
- Related Documentation","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit","2024-07-27 11:19:59"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit/TD_RandomProjectionFit-Example","text/html;charset=UTF-8","200","","Indexable","","TD_RandomProjectionFit Example | RandomProjectionFit - TD_RandomProjectionFit Example - Analytics Database","106","1014","See an example of the Analytics Database (SQL Engine) feature engineering transform function TD_RandomProjectionFit.","116","748","","0","TD_RandomProjectionFit Example | RandomProjectionFit - TD_RandomProjectionFit Example - Analytics Database","106","Database Analytic Functions","27","TD_RandomProjectionFit Input Table","34","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit/TD_RandomProjectionFit-Example","","","","","","209315","13505","13505","4.788","A+","208","138","1.507","100.000","Very Easy","11.764","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.766","","","","","","1.1","## Summary

The `TD_RandomProjectionFit` function in Teradata Vantage™ is part of the Analytics Database and is used for dimensionality reduction through random projection techniques. This is particularly useful in data analysis and machine learning tasks, where reducing the number of input features can help improve model performance and reduce computational load. In this context, the function takes an input table and generates a new output table with a reduced number of dimensions while preserving the essential structure of the data.

### Code Example

Here are examples demonstrating basic SQL operations relevant to working with a database, including Select, Update, Delete, and Create statements.

#### SELECT
```sql
SELECT company_id, date_2010_01_04, date_2010_01_05
FROM stock_movement
WHERE company_id = 1;
```

#### UPDATE
```sql
UPDATE stock_movement
SET date_2010_01_04 = 0.75
WHERE company_id = 1;
```

#### DELETE
```sql
DELETE FROM stock_movement
WHERE company_id = 10;
```

#### CREATE
```sql
CREATE TABLE stock_movement (
    company_id INT,
    date_2010_01_04 FLOAT,
    date_2010_01_05 FLOAT,
    -- Additional date columns as needed
);
```

### Keywords and Phrases
- **TD_RandomProjectionFit Example** 
- **RandomProjectionFit - TD_RandomProjectionFit Example**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Data Cleaning Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Function Names with and without TD Prefix**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Input Table Example**
- **Output Table Example**","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit/TD_RandomProjectionFit-Example","2024-07-27 12:05:09"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit/TD_RandomProjectionFit-Input","text/html;charset=UTF-8","200","","Indexable","","TD_RandomProjectionFit Input - Analytics Database","49","459","Input Table Schema Column Data Type Description Target_column BYTEINT,SMALLINT,INTEGER,BIGINT, Decimal/Numeric,Float,Real,Double precision The input table columns for dimensionality reduction.","192","1259","","0","TD_RandomProjectionFit Input - Analytics Database","49","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit/TD_RandomProjectionFit-Input","","","","","","208568","13048","13048","4.626","A+","59","38","1.553","0.000","Very Hard","11.145","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.694","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database provides various analytic functions designed for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. These functions can be leveraged to perform complex analytics tasks within a Teradata environment, facilitating data-driven decision-making. The following SQL code examples illustrate the basic operations of selecting, updating, deleting, and creating records in a database.

### Code Examples

#### 1. Select
To retrieve data from a table, use the `SELECT` statement. For example, to get all records from a table named `customers`:

```sql
SELECT * FROM customers;
```

To select specific columns:

```sql
SELECT first_name, last_name FROM customers WHERE city = 'New York';
```

#### 2. Update
To modify existing records in a table, use the `UPDATE` statement. For instance, to update the city of a customer:

```sql
UPDATE customers
SET city = 'Los Angeles'
WHERE customer_id = 1;
```

#### 3. Delete
To remove records from a table, use the `DELETE` statement. For example, to delete a customer record:

```sql
DELETE FROM customers
WHERE customer_id = 1;
```

#### 4. Create
To create a new table, use the `CREATE TABLE` statement. For example, to create a new table for storing customer information:

```sql
CREATE TABLE customers (
    customer_id INTEGER PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    city VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Keywords and Phrases
- TD_RandomProjectionFit Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Recommendations for Using Analytic Functions
- Input Table Schema
- Target_column Data Types
- Dimensionality Reduction","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit/TD_RandomProjectionFit-Input","2024-07-27 12:34:34"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit/TD_RandomProjectionFit-Output","text/html;charset=UTF-8","200","","Indexable","","TD_RandomProjectionFit Output - Analytics Database","50","475","Output Table Schema Column Data Type Description OutputFeatureNamesPrefix_NumComponents_0 INTEGER The combination of OutputFeatureNamesPrefix and NumComponents values is used for the column name and contains a unique identifier of rows in the Random Projection matrix. Target_column REAL The columns that have the elemen...","323","2159","","0","TD_RandomProjectionFit Output - Analytics Database","50","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit/TD_RandomProjectionFit-Output","","","","","","209157","13178","13178","4.672","A+","88","40","2.200","9.445","Very Hard","11.192","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.630","","","","","","1.1","# Summary of Teradata Vantage™ Analytics Database Functions

The Teradata Vantage™ Analytics Database provides a rich set of analytic functions designed to facilitate various data processing and analysis tasks. These functions span categories such as data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analytics. The database is optimized for large-scale analytics and provides tools for managing workloads effectively. 

The following sections outline basic SQL operations (Select, Update, Delete, Create) with examples relevant to the Teradata Analytics Database.

## Code Example

### 1. Select
The `SELECT` statement is used to query data from one or more tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

**Example**:
```sql
SELECT customer_id, purchase_amount
FROM sales
WHERE purchase_date > '2022-01-01';
```

### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example**:
```sql
UPDATE customers
SET customer_status = 'active'
WHERE last_purchase_date > '2023-01-01';
```

### 3. Delete
The `DELETE` statement removes existing records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

**Example**:
```sql
DELETE FROM orders
WHERE order_status = 'canceled';
```

### 4. Create
The `CREATE` statement is used to create a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example**:
```sql
CREATE TABLE new_customers (
    customer_id INT,
    customer_name VARCHAR(100),
    sign_up_date DATE
);
```

## Keywords and Phrases
- TD_RandomProjectionFit Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This summary and the examples provided are intended to give you a foundational understanding of SQL operations within the Teradata Vantage™ Analytics Database context. These operations serve as building blocks for more complex data manipulation and analysis tasks.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit/TD_RandomProjectionFit-Output","2024-07-27 11:39:10"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit/TD_RandomProjectionFit-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_RandomProjectionFit Syntax | RandomProjectionFit - TD_RandomProjectionFit Syntax - Analytics Database","104","980","See the syntax of the Analytics Database (SQL Engine) function TD_RandomProjectionFit and read descriptions of its required and optional syntax elements.","153","963","","0","TD_RandomProjectionFit Syntax | RandomProjectionFit - TD_RandomProjectionFit Syntax - Analytics Database","104","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit/TD_RandomProjectionFit-Syntax","","","","","","208274","13031","13031","4.620","A+","112","50","2.240","5.902","Very Hard","11.363","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.555","","","","","","1.1","## Summary of TD_RandomProjectionFit

The `TD_RandomProjectionFit` function in Teradata Vantage is used to perform random projection for dimensionality reduction on datasets. This technique is particularly useful when working with high-dimensional data, allowing you to reduce the number of features while preserving the structure of the data as much as possible.

### Syntax
The syntax for `TD_RandomProjectionFit` is as follows:

```sql
TD_RandomProjectionFit (
    ON {table | view | (query)} AS InputTable
    [ OUT [ PERMANENT | VOLATILE ] TABLE OutputTable(out_table_name) ]
    USING
    TargetColumns({'target_column' | 'target_column_range'} [,...])
    NumComponents(num_components)
    [ Seed(seed_value) ]
    [ Epsilon(epsilon_value) ]
    [ ProjectionMethod({'GAUSSIAN' | 'SPARSE'}) ]
    [ Density(density_value) ]
    [ OutputFeatureNamesPrefix('output_feature_names_prefix') ]
)
```

### Code Examples

#### 1. **Select**
To retrieve the projected features from the output table after fitting the random projection:

```sql
SELECT *
FROM OutputTable;
```

#### 2. **Update**
Updating the output table with new values, assuming you have a new density value to apply:

```sql
UPDATE OutputTable
SET density = 0.5
WHERE condition;  -- Specify your condition here
```

#### 3. **Delete**
Deleting specific rows from the output table based on a condition:

```sql
DELETE FROM OutputTable
WHERE condition;  -- Specify your condition here
```

#### 4. **Create**
Creating a new table to store the output of the random projection fit:

```sql
CREATE VOLATILE TABLE OutputTable AS (
    SELECT *
    FROM TD_RandomProjectionFit (
        ON my_table
        USING
        TargetColumns('my_target_column')
        NumComponents(10)
        Seed(123)
        ProjectionMethod('GAUSSIAN')
    )
) WITH DATA
PRIMARY INDEX (my_primary_index_column);
```

### Keywords and Phrases
- **TD_RandomProjectionFit Syntax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language English (United States)**
- **Last Update 2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Recommendations for Using Analytic Functions**
- **TD_GetRowsWithoutMissingValues**
- **TD_OneHotEncodingTransform**
- **TD_XGBoostPredict**
- **NGramSplitter**
- **Sessionize**
- **OutputFeatureNamesPrefix**","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit/TD_RandomProjectionFit-Syntax","2024-07-27 11:35:18"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit/TD_RandomProjectionFit-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","TD_RandomProjectionFit Syntax Elements - Analytics Database","59","563","TargetColumns [Required]: Specify the input table columns for dimensionality reduction. NumComponents [Required]: Specify the target dimension (number of features) on which the data points from the original dimension are projected. The NumComponents value cannot be greater than the original dimension (number of feature...","323","2041","","0","TD_RandomProjectionFit Syntax Elements - Analytics Database","59","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit/TD_RandomProjectionFit-Syntax-Elements","","","","","","209738","13423","13423","4.759","A+","257","88","2.920","37.633","Hard","11.731","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.551","","","","","","1.1","# Teradata Vantage™ Analytics Database: Code Examples

## Summary
Teradata Vantage™ provides a robust platform for executing analytics tasks within its Analytics Database. This database integrates various analytic functions that support data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Below are code examples demonstrating how to perform fundamental database operations: Select, Update, Delete, and Create.

## Code Examples

### 1. SELECT
```sql
SELECT customer_id, customer_name, purchase_amount
FROM sales_data
WHERE purchase_date >= '2023-01-01'
ORDER BY purchase_amount DESC;
```
This query retrieves customer IDs, names, and purchase amounts from the `sales_data` table for purchases made in 2023, sorted by the amount in descending order.

### 2. UPDATE
```sql
UPDATE customer_data
SET loyalty_points = loyalty_points + 100
WHERE customer_id = 12345;
```
This command updates the `loyalty_points` for the customer with ID 12345, adding 100 points.

### 3. DELETE
```sql
DELETE FROM sales_data
WHERE purchase_date < '2022-01-01';
```
This query deletes all records from the `sales_data` table where the purchase date is before January 1, 2022.

### 4. CREATE
```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    registration_date DATE
);
```
This command creates a new table named `new_customers` with three columns: `customer_id`, `customer_name`, and `registration_date`.

## Keywords and Phrases
- **TD_RandomProjectionFit**
- **Syntax Elements**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Data Exploration Functions**
- **Model Evaluation Functions**
- **TD_Silhouette**
- **TD_ClassificationEvaluator**
- **TD_RegressionEvaluator**
- **TD_ROC**
- **TD_TrainTestSplit**
- **Path and Pattern Analysis Functions**
- **NGramSplitter**
- **TD_NaiveBayesTextClassifierTrainer**
- **TD_SentimentExtractor**
- **TD_TFIDF**
- **Hypothesis Test Types**
- **TD_ANOVA**
- **TD_ChiSq**
- **TD_FTest**
- **TD_ZTest**
- **nPath**
- **Sessionize**

These keywords and phrases encapsulate the various functionalities and components related to the Teradata Vantage™ Analytics Database, providing a comprehensive view of its capabilities and application areas.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit/TD_RandomProjectionFit-Syntax-Elements","2024-07-27 12:49:56"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents","text/html;charset=UTF-8","200","","Indexable","","TD_RandomProjectionMinComponents | RandomProjectionMinComponents - TD_RandomProjectionMinComponents - Analytics Database","120","1222","This Analytics Database function estimates the minimum value of the NumComponents argument in the TD_RandomProjectionFit function for a given dataset.","150","977","","0","TD_RandomProjectionMinComponents | RandomProjectionMinComponents - TD_RandomProjectionMinComponents - Analytics Database","120","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents","","","","","","209373","13179","13179","4.672","A+","113","48","2.354","0.000","Very Hard","11.354","1","4","","707","707","0","99.860","715","713","0","","","","","","","","","0.784","","","","","","1.1","## Summary

The **TD_RandomProjectionMinComponents** function is a part of Teradata's Analytics Database and is used to determine the minimum number of components required for Random Projection on a dataset given a specific distortion parameter (epsilon). This function leverages the Johnson-Lindenstrauss Lemma algorithm to compute the necessary components, which is useful in dimensionality reduction tasks, especially in large datasets.

### Code Example

Here are some SQL code examples demonstrating the basic CRUD (Create, Read, Update, Delete) operations in Teradata:

#### 1. **Create**
To create a new table in Teradata:

```sql
CREATE TABLE Sales (
    SaleID INT,
    ProductName VARCHAR(100),
    Quantity INT,
    SaleDate DATE
);
```

#### 2. **Read (Select)**
To read data from a table:

```sql
SELECT * FROM Sales WHERE Quantity > 10;
```

#### 3. **Update**
To update existing records in a table:

```sql
UPDATE Sales
SET Quantity = Quantity + 5
WHERE ProductName = 'Widget';
```

#### 4. **Delete**
To delete records from a table:

```sql
DELETE FROM Sales WHERE SaleDate < '2023-01-01';
```

## Keywords and Phrases

- TD_RandomProjectionMinComponents
- RandomProjectionMinComponents
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Language English (United States)
- Last Update 2024-04-06
- Product Category Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Input Table Rows Redistribution
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Example: How to Use TD_RandomProjectionMinComponents

These keywords encapsulate the essential features and functionalities associated with the **TD_RandomProjectionMinComponents** function and its context within Teradata's suite of analytic functions.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents","2024-07-27 12:54:26"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents/TD_RandomProjectionMinComponents-Example","text/html;charset=UTF-8","200","","Indexable","","TD_RandomProjectionMinComponents Function Example | Teradata Vantage - TD_RandomProjectionMinComponents Example - Analytics Database","132","1317","See an example of the Analytics Database (SQL Engine) feature engineering transform function TD_RandomProjectionMinComponents.","126","835","","0","TD_RandomProjectionMinComponents Function Example | Teradata Vantage - TD_RandomProjectionMinComponents Example - Analytics Database","132","Database Analytic Functions","27","TD_RandomProjectionMinComponents Input Table","44","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents/TD_RandomProjectionMinComponents-Example","","","","","","208897","13203","13203","4.681","A+","154","105","1.467","68.558","Normal","11.564","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.102","","","","","","1.1","### Summary

The `TD_RandomProjectionMinComponents` function in Teradata Vantage is used for dimensionality reduction through random projection. This is particularly useful in analytics where high-dimensional data is involved. The function estimates the minimum number of components required to preserve a specified level of accuracy (Epsilon) in the data representation. 

### Code Example

Below are some basic SQL operations (Select, Update, Delete, Create) that can be performed in Teradata, along with the example of using the `TD_RandomProjectionMinComponents` function.

#### Select Example

```sql
SELECT * 
FROM stock_movement 
WHERE company_id = 1;
```

#### Update Example

```sql
UPDATE stock_movement 
SET date_2010_01_04 = 0.75 
WHERE company_id = 1;
```

#### Delete Example

```sql
DELETE FROM stock_movement 
WHERE company_id = 10;
```

#### Create Example

```sql
CREATE TABLE stock_movement (
    company_id INT,
    date_2010_01_04 FLOAT,
    date_2010_01_05 FLOAT,
    ...
    date_2013_10_29 FLOAT
);
```

#### TD_RandomProjectionMinComponents Function Example

Here’s how to use the `TD_RandomProjectionMinComponents` function:

```sql
SELECT * 
FROM TD_RandomProjectionMinComponents(
    ON stock_movement AS InputTable
    USING
    TargetColumns('[1:]') 
    Epsilon(0.25)
) AS dt;
```

### Keywords and Phrases

- **TD_RandomProjectionMinComponents Function Example**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Product Category**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **TD_GetRowsWithoutMissingValues**
- **TD_OutlierFilterFit**
- **TD_SimpleImputeFit**
- **Example: How to Use TD_RandomProjectionMinComponents** 

This information encapsulates essential aspects of using the `TD_RandomProjectionMinComponents` function along with SQL operations in Teradata.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents/TD_RandomProjectionMinComponents-Example","2024-07-27 11:23:09"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents/TD_RandomProjectionMinComponents-Input","text/html;charset=UTF-8","200","","Indexable","","TD_RandomProjectionMinComponents Input - Analytics Database","59","583","Input Table Schema Column Data Type Description Target_column BYTEINT,SMALLINT,INTEGER,BIGINT, Decimal/Numeric,Float,Real,Double precision The input columns for random projection.","179","1187","","0","TD_RandomProjectionMinComponents Input - Analytics Database","59","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents/TD_RandomProjectionMinComponents-Input","","","","","","208588","13043","13043","4.624","A+","58","38","1.526","0.000","Very Hard","11.142","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.428","","","","","","1.1","# Overview of Teradata Analytics Database Functions

Teradata's Analytics Database provides a comprehensive set of analytic functions designed to facilitate data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analytics. These functions streamline the data preparation and analysis processes, enabling users to derive meaningful insights from their datasets.

## Code Example
The following SQL code snippets illustrate how to perform basic operations such as Select, Update, Delete, and Create in the Teradata Analytics Database.

### 1. **Select**
To retrieve data from a table, you can use the SELECT statement:
```sql
SELECT customer_id, customer_name, purchase_amount
FROM sales_data
WHERE purchase_date >= '2023-01-01';
```

### 2. **Update**
To modify existing records in a table, use the UPDATE statement:
```sql
UPDATE sales_data
SET purchase_amount = purchase_amount * 1.1
WHERE purchase_date < '2023-01-01';
```

### 3. **Delete**
To remove records from a table, employ the DELETE statement:
```sql
DELETE FROM sales_data
WHERE purchase_date < '2022-01-01';
```

### 4. **Create**
To create a new table in the database, use the CREATE TABLE statement:
```sql
CREATE TABLE customer_data (
    customer_id INTEGER PRIMARY KEY,
    customer_name VARCHAR(100),
    email VARCHAR(100),
    purchase_amount DECIMAL(10, 2)
);
```

## Summary
Teradata's Analytics Database offers a range of analytic functions that support various data processing needs, from data cleaning and exploration to advanced modeling and evaluation. The ability to perform basic SQL operations like SELECT, UPDATE, DELETE, and CREATE further enhances the usability of the platform.

## Keywords and Phrases
- TD_RandomProjectionMinComponents Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Workload Management Configuration
- Recommendations for Using Analytic Functions
- Non-Deterministic Behavior
- Maximum Number of Columns
- Spool Space Exhaustion
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_SimpleImputeFit
- TD_OneHotEncodingFit
- TD_Pivoting
- TD_DecisionForest
- TD_SVM
- TD_XGBoost
- TD_NaiveBayesTextClassifierTrainer
- TD_TrainTestSplit
- Sessionize

These keywords encapsulate the essence of the Teradata Analytics Database functions and their applicability in data analytics scenarios.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents/TD_RandomProjectionMinComponents-Input","2024-07-27 12:37:23"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents/TD_RandomProjectionMinComponents-Output","text/html;charset=UTF-8","200","","Indexable","","TD_RandomProjectionMinComponents Output - Analytics Database","60","599","Output Table Schema Column Data Type Description RandomProjection_MinComponents INTEGER The minimum number of components computed using the Epsilon value to apply the RandomProjection function to the dataset.","208","1401","","0","TD_RandomProjectionMinComponents Output - Analytics Database","60","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents/TD_RandomProjectionMinComponents-Output","","","","","","208647","13025","13025","4.617","A+","68","38","1.789","0.000","Very Hard","11.153","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.735","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database provides a robust framework for performing various analytic functions, including data cleaning, feature engineering, model training, and scoring among others. The following code examples illustrate fundamental database operations: **Select**, **Update**, **Delete**, and **Create**. These operations are critical for managing data within the analytics database effectively.

### Code Examples

#### 1. Select
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE country = 'USA';
```

#### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE customers
SET email = 'new_email@example.com'
WHERE customer_id = 12345;
```

#### 3. Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM customers
WHERE customer_id = 12345;
```

#### 4. Create
The `CREATE` statement creates a new table in the database.

```sql
CREATE TABLE orders (
    order_id INTEGER PRIMARY KEY,
    customer_id INTEGER,
    order_date DATE,
    total_amount DECIMAL(10, 2)
);
```

### Keywords and Phrases

- **TD_RandomProjectionMinComponents Output**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category: Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents/TD_RandomProjectionMinComponents-Output","2024-07-27 12:11:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents/TD_RandomProjectionMinComponents-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_RandomProjectionMinComponents Function Syntax | Teradata Vantage - TD_RandomProjectionMinComponents Syntax - Analytics Database","130","1283","See the syntax of the Analytics Database (SQL Engine) function TD_RandomProjectionMinComponents & read descriptions of its required & optional syntax elements.","159","1020","","0","TD_RandomProjectionMinComponents Function Syntax | Teradata Vantage - TD_RandomProjectionMinComponents Syntax - Analytics Database","130","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents/TD_RandomProjectionMinComponents-Syntax","","","","","","208096","12897","12897","4.572","A+","92","45","2.044","14.410","Very Hard","11.269","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.549","","","","","","1.1","## Summary

The `TD_RandomProjectionMinComponents` function in Teradata Vantage is used to determine the minimum number of components required for random projection. This function is beneficial in scenarios where dimensionality reduction is needed, particularly when working with data that has high dimensionality. The function takes an input table and allows for specifying target columns and an optional epsilon value.

### Code Example Section

Here are examples demonstrating basic SQL operations (SELECT, UPDATE, DELETE, CREATE) in Teradata:

**1. SELECT Statement Example**
```sql
SELECT *
FROM Customers
WHERE CustomerID = 12345;
```

**2. UPDATE Statement Example**
```sql
UPDATE Customers
SET ContactName = 'John Doe'
WHERE CustomerID = 12345;
```

**3. DELETE Statement Example**
```sql
DELETE FROM Customers
WHERE CustomerID = 12345;
```

**4. CREATE TABLE Statement Example**
```sql
CREATE TABLE NewCustomers (
    CustomerID INT PRIMARY KEY,
    ContactName VARCHAR(100),
    Country VARCHAR(50)
);
```

### Keywords and Phrases
- **TD_RandomProjectionMinComponents Function Syntax**
- **Teradata Vantage**
- **TD_RandomProjectionMinComponents Syntax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Avoid Deadlocks Using Volatile Tables**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **TD_RandomProjectionMinComponents Example**
- **TargetColumns**
- **Epsilon**
- **Using in SELECT, CREATE TABLE, and CREATE VIEW Statements**","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents/TD_RandomProjectionMinComponents-Syntax","2024-07-27 12:20:06"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents/TD_RandomProjectionMinComponents-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","TD_RandomProjectionMinComponents Syntax Elements - Analytics Database","69","687","TargetColumns [Required]: Specify the input columns for random projection. Epsilon [Optional]: Specify a value to control distortion introduced while projecting the data to a lower dimension. The amount of distortion increases if you increase the value. Default Value: 0.1 Allowed Values: Between 0 and 1","304","1857","","0","TD_RandomProjectionMinComponents Syntax Elements - Analytics Database","69","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents/TD_RandomProjectionMinComponents-Syntax-Elements","","","","","","208026","12925","12925","4.582","A+","87","47","1.851","18.253","Very Hard","11.237","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.517","","","","","","1.1","# Overview of Teradata Vantage Analytics Database Functions

Teradata Vantage™ provides a robust set of analytic functions within its Analytics Database that facilitate data cleaning, exploration, feature engineering, model training, scoring, and evaluation. These functions are essential for data scientists and analysts looking to extract insights and build predictive models efficiently.

## Code Examples

### 1. Create

To create a new table in Teradata, use the `CREATE TABLE` statement:

```sql
CREATE TABLE Employee (
    EmployeeID INT,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    HireDate DATE
);
```

### 2. Select

To retrieve data from a table, use the `SELECT` statement:

```sql
SELECT FirstName, LastName
FROM Employee
WHERE HireDate > '2022-01-01';
```

### 3. Update

To modify existing records in a table, use the `UPDATE` statement:

```sql
UPDATE Employee
SET HireDate = '2023-01-15'
WHERE EmployeeID = 1;
```

### 4. Delete

To remove records from a table, use the `DELETE` statement:

```sql
DELETE FROM Employee
WHERE EmployeeID = 1;
```

## Summary

The Teradata Vantage Analytics Database offers a diverse range of analytic functions tailored for various data analysis needs, from data cleaning and exploration to model training and evaluation. The foundational SQL commands such as `CREATE`, `SELECT`, `UPDATE`, and `DELETE` are pivotal for managing the data effectively within this environment.

### Keywords and Phrases

- **TD_RandomProjectionMinComponents**: Syntax Elements - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Data Exploration Functions**
- **MovingAverage**
- **TD_CategoricalSummary**
- **TD_ColumnSummary**
- **TD_GetRowsWithMissingValues**
- **TD_Histogram**
- **TD_QQNorm**
- **TD_UnivariateStatistics**
- **Model Training Functions**
- **TD_DecisionForest**
- **TD_GLM**
- **TD_KMeans**
- **TD_XGBoost**
- **Model Evaluation Functions**
- **TD_Silhouette**
- **TD_ClassificationEvaluator**
- **TD_RegressionEvaluator**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents/TD_RandomProjectionMinComponents-Syntax-Elements","2024-07-27 11:38:53"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform","text/html;charset=UTF-8","200","","Indexable","","TD_RandomProjectionTransform | RandomProjectionTransform - TD_RandomProjectionTransform - Analytics Database","108","1063","This Analytics Database (SQL Engine) function converts high-dimensional input data to a lower-dimensional space using TD_RandomProjectionFit function output.","157","1003","","0","TD_RandomProjectionTransform | RandomProjectionTransform - TD_RandomProjectionTransform - Analytics Database","108","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform","","","","","","209062","13059","13059","4.629","A+","78","43","1.814","0.000","Very Hard","11.232","1","4","","707","707","0","99.860","715","713","0","","","","","","","","","1.659","","","","","","1.1","### Summary

This document provides an overview of analytic functions available in Teradata Vantage™ for data manipulation and analysis. It covers various operations including data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Each section outlines the syntax, required and optional elements, as well as examples for practical application.

### Code Example

Below are examples for the basic SQL operations: Select, Update, Delete, and Create, specifically tailored for an analytics database context.

#### 1. Select

```sql
-- Select statement to retrieve data from the 'customers' table
SELECT customer_id, customer_name, purchase_amount
FROM customers
WHERE purchase_amount > 1000;
```

#### 2. Update

```sql
-- Update statement to modify existing records in the 'customers' table
UPDATE customers
SET purchase_amount = purchase_amount * 1.1
WHERE customer_id = 12345;
```

#### 3. Delete

```sql
-- Delete statement to remove records from the 'customers' table
DELETE FROM customers
WHERE last_purchase_date < '2022-01-01';
```

#### 4. Create

```sql
-- Create statement to define a new table for storing customer analytics
CREATE TABLE customer_analytics (
    analytics_id INT GENERATED ALWAYS AS IDENTITY,
    customer_id INT,
    total_purchases DECIMAL(10,2),
    purchase_count INT,
    PRIMARY KEY (analytics_id)
);
```

### Keywords and Phrases

- **TD_RandomProjectionTransform**
- **RandomProjectionTransform**
- **TD_RandomProjectionTransform**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform","2024-07-27 11:24:42"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform/TD_RandomProjectionTransform-Example","text/html;charset=UTF-8","200","","Indexable","","TD_RandomProjectionTransform Function Example | Teradata Vantage - TD_RandomProjectionTransform Example - Analytics Database","124","1211","See an example of the Analytics Database (SQL Engine) feature engineering transform function TD_RandomProjectionTransform.","122","798","","0","TD_RandomProjectionTransform Function Example | Teradata Vantage - TD_RandomProjectionTransform Example - Analytics Database","124","Database Analytic Functions","27","TD_RandomProjectionTransform Input Table","40","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform/TD_RandomProjectionTransform-Example","","","","","","210147","13898","13898","4.927","A+","273","190","1.437","100.000","Very Easy","12.076","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.687","","","","","","1.1","### Summary

The TD_RandomProjectionTransform function in Teradata Vantage™ is utilized for dimensionality reduction via random projections. This function operates on data input tables and a fit table generated by the TD_RandomProjectionFit function. It transforms the input data by projecting it into a lower-dimensional space while retaining the essential properties of the original dataset. This is particularly useful in analytics and machine learning applications where managing high-dimensional data can be challenging.

### Code Example

Below are some basic SQL operations (SELECT, UPDATE, DELETE, CREATE) related to Teradata and the context of the TD_RandomProjectionTransform function.

#### 1. SELECT
```sql
SELECT company_id, td_rpj_feature_0, td_rpj_feature_1
FROM TD_RandomProjectionTransform(
    ON stock_movement AS InputTable
    ON rand_proj_fit_tbl_ex AS FitTable DIMENSION
    USING
    Accumulate('company_id')
) AS dt
ORDER BY company_id;
```

#### 2. UPDATE
```sql
UPDATE stock_movement
SET date_2010_01_04 = 0.75
WHERE company_id = 1;
```

#### 3. DELETE
```sql
DELETE FROM stock_movement
WHERE company_id = 10;
```

#### 4. CREATE
```sql
CREATE TABLE stock_movement (
    company_id INT,
    date_2010_01_04 FLOAT,
    date_2010_01_05 FLOAT,
    ...
    date_2013_10_29 FLOAT,
    PRIMARY KEY (company_id)
);
```

### Keywords and Phrases
- TD_RandomProjectionTransform Function Example
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Enterprise Edition
- IntelliFlex
- VMware Product
- Analytics Database Release Number
- Data Cleaning Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- TD_RandomProjectionFit
- Dimensionality Reduction
- Input Table
- Fit Table
- SQL Call
- Output Table
- Data Transformation
- Random Projections
- High-dimensional Data Management
- Example SQL Operations: SELECT, UPDATE, DELETE, CREATE","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform/TD_RandomProjectionTransform-Example","2024-07-27 12:53:10"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform/TD_RandomProjectionTransform-Input","text/html;charset=UTF-8","200","","Indexable","","TD_RandomProjectionTransform Input - Analytics Database","55","530","Input Table Schema Column Data Type Description Target_column BYTEINT,SMALLINT,INTEGER,BIGINT, Decimal/Numeric,Float,Real,Double precision The input table columns for dimensionality reduction. Accumulate_column ANY The input table columns that you want to copy to the output table.","281","1830","","0","TD_RandomProjectionTransform Input - Analytics Database","55","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform/TD_RandomProjectionTransform-Input","","","","","","209059","13130","13130","4.655","A+","74","40","1.850","0.000","Very Hard","11.164","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.539","","","","","","1.1","## Summary
This document provides a comprehensive overview of the Teradata Vantage™ Analytics Database, specifically focusing on various analytic functions available for data manipulation, exploration, and modeling. The key functions include data cleaning, feature engineering, model training, and evaluation, as well as text analytics and hypothesis testing, among others. Each function typically includes syntax descriptions, input and output details, and example use cases to guide users in implementing the functions effectively.

## Code Examples

### 1. Select
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

### 2. Update
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

### 3. Delete
```sql
DELETE FROM table_name
WHERE condition;
```

### 4. Create
```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Keywords and Phrases
- **TD_RandomProjectionTransform Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform/TD_RandomProjectionTransform-Input","2024-07-27 12:05:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform/TD_RandomProjectionTransform-Output","text/html;charset=UTF-8","200","","Indexable","","TD_RandomProjectionTransform Output - Analytics Database","56","546","Output Table Schema Column Data Type Description Accumulate ANY The specified columns in the Accumulate element is copied to the output table. OutputFeatureNamesPrefix_i REAL The rendered columns after converting the data points to lower-dimensional space wherein i is the sequence number of the generated column.","313","2013","","0","TD_RandomProjectionTransform Output - Analytics Database","56","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform/TD_RandomProjectionTransform-Output","","","","","","209126","13159","13159","4.665","A+","86","40","2.150","16.762","Very Hard","11.176","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.702","","","","","","1.1","## Summary

This section provides an overview of the core SQL operations—SELECT, INSERT, UPDATE, and DELETE—using Teradata SQL syntax, which is pivotal for managing data in the Teradata Vantage™ ecosystem. These operations form the backbone of data manipulation, allowing users to retrieve, modify, and manage their datasets effectively.

## Code Examples

### 1. SELECT
The `SELECT` statement is used to query data from a database. 

```sql
SELECT column1, column2
FROM my_table
WHERE condition;
```

**Example:**
```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

### 2. INSERT
The `INSERT` statement is used to add new rows to a table.

```sql
INSERT INTO my_table (column1, column2)
VALUES (value1, value2);
```

**Example:**
```sql
INSERT INTO employees (first_name, last_name, department)
VALUES ('John', 'Doe', 'Sales');
```

### 3. UPDATE
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE my_table
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example:**
```sql
UPDATE employees
SET department = 'Marketing'
WHERE first_name = 'John' AND last_name = 'Doe';
```

### 4. DELETE
The `DELETE` statement removes existing records from a table.

```sql
DELETE FROM my_table
WHERE condition;
```

**Example:**
```sql
DELETE FROM employees
WHERE first_name = 'John' AND last_name = 'Doe';
```

## Keywords and Phrases

- TD_RandomProjectionTransform Output
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Recommendations for Using Analytic Functions
- Workload Management Configuration
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Accumulated Columns Impact on Function Performance
- Data Exploration Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform/TD_RandomProjectionTransform-Output","2024-07-27 12:41:13"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform/TD_RandomProjectionTransform-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_RandomProjectionTransform Function Syntax | Teradata Vantage - TD_RandomProjectionTransform Syntax - Analytics Database","122","1177","See the syntax of the Analytics Database (SQL Engine) function TD_RandomProjectionTransform and read descriptions of its required and optional syntax elements.","159","1013","","0","TD_RandomProjectionTransform Function Syntax | Teradata Vantage - TD_RandomProjectionTransform Syntax - Analytics Database","122","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform/TD_RandomProjectionTransform-Syntax","","","","","","208092","12876","12876","4.565","A+","98","45","2.178","20.749","Very Hard","11.279","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.455","","","","","","1.1","### Overview of TD_RandomProjectionTransform Function

The `TD_RandomProjectionTransform` function in Teradata Vantage is an analytic function used for dimensionality reduction, which can help in reducing the computational complexity of various analytical tasks. This function allows users to transform their data into a lower-dimensional space while retaining essential features. It can be utilized effectively in machine learning and data processing workflows.

### Code Example

Here’s how to perform basic SQL operations such as SELECT, UPDATE, DELETE, and CREATE using Teradata SQL syntax:

#### 1. **SELECT**
```sql
SELECT *
FROM your_table
WHERE condition;
```

#### 2. **UPDATE**
```sql
UPDATE your_table
SET column_name = new_value
WHERE condition;
```

#### 3. **DELETE**
```sql
DELETE FROM your_table
WHERE condition;
```

#### 4. **CREATE**
```sql
CREATE TABLE new_table (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Using `TD_RandomProjectionTransform`

To utilize the `TD_RandomProjectionTransform` function, you can integrate it within your SQL queries. Below is an example of how to apply this function:

```sql
SELECT *
FROM TD_RandomProjectionTransform(
    ON your_input_table AS InputTable
    ON your_fit_table AS FitTable DIMENSION
    USING
    [ Accumulate('column_name1', 'column_name2') ]
);
```

### Summary

The `TD_RandomProjectionTransform` function is a powerful tool in the Teradata Vantage analytics database, allowing for effective dimensionality reduction. It can be seamlessly integrated into standard SQL operations, enhancing the analytical capabilities of users.

### Keywords and Phrases

- **TD_RandomProjectionTransform Function Syntax**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product Category: Teradata Vantage™**
- **Release Number: 17.20**
- **Published: June 2022**
- **Last Update: 2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Recommendations for Using Analytic Functions**
- **How to Use TD_RandomProjectionTransform**
- **AMP Configuration Impact**
- **Non-Deterministic Behavior**
- **Displaying Online Help for Functions**
- **Examples of TD_RandomProjectionTransform**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform/TD_RandomProjectionTransform-Syntax","2024-07-27 11:57:50"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform/TD_RandomProjectionTransform-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","TD_RandomProjectionTransform Syntax Elements - Analytics Database","65","634","Accumulate [Optional]: Specify the input table columns to copy to the output table. Default: Only transformed columns are present in the output.","144","886","","0","TD_RandomProjectionTransform Syntax Elements - Analytics Database","65","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform/TD_RandomProjectionTransform-Syntax-Elements","","","","","","207632","12722","12722","4.510","A+","64","38","1.684","9.488","Very Hard","11.179","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.527","","","","","","1.1","## Summary

This guide provides an overview of how to manage and manipulate data in Teradata's Analytics Database using SQL commands for creating, selecting, updating, and deleting records. The focus is on the fundamental operations required for managing data effectively, along with syntax examples for each operation.

## Code Examples

### 1. Create
To create a new table in the database, you can use the `CREATE TABLE` statement. Here’s an example that creates a simple table called `Employees`.

```sql
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    HireDate DATE,
    Salary DECIMAL(10, 2)
);
```

### 2. Select
To retrieve data from the table, use the `SELECT` statement. The following example selects all columns from the `Employees` table.

```sql
SELECT * FROM Employees;
```

To select specific columns, you can specify them as follows:

```sql
SELECT FirstName, LastName FROM Employees;
```

### 3. Update
To modify existing records, the `UPDATE` statement is used. Here’s how to increase the salary of an employee with a specific `EmployeeID`.

```sql
UPDATE Employees
SET Salary = Salary * 1.10
WHERE EmployeeID = 1;
```

### 4. Delete
To remove records from a table, use the `DELETE` statement. The following example deletes an employee from the `Employees` table based on their `EmployeeID`.

```sql
DELETE FROM Employees
WHERE EmployeeID = 1;
```

## Keywords and Phrases
- **TD_RandomProjectionTransform Syntax Elements**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language English (United States)**
- **Last Update 2024-04-06**
- **Product Category Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Input Table Schemas**
- **Accumulated Columns Impact on Function Performance**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Examples of Various Functions** (e.g., Pack, StringSimilarity, TD_ConvertTo, etc.)

This summary and code examples should provide you with a foundational understanding of how to work with Teradata's Analytics Database effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform/TD_RandomProjectionTransform-Syntax-Elements","2024-07-27 11:59:19"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit","text/html;charset=UTF-8","200","","Indexable","","TD_RowNormalizeFit | RowNormalizeFit | Teradata Vantage - TD_RowNormalizeFit - Analytics Database","97","921","This Analytics Database (SQL Engine) feature engineering transform function outputs a table of information to input to TD_RowNormalizeTransform.","144","920","","0","TD_RowNormalizeFit | RowNormalizeFit | Teradata Vantage - TD_RowNormalizeFit - Analytics Database","97","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit","","","","","","211465","13907","13907","4.930","A+","368","84","4.381","37.556","Hard","11.937","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.886","","","","","","1.1","## Summary

The `TD_RowNormalizeFit` function in Teradata Vantage is designed to perform row normalization on input data, which is essential in machine learning preprocessing. By normalizing data row-wise, it ensures that all rows contribute equally to the analysis, regardless of the scale of their features. This technique is particularly useful when dealing with datasets that contain features with significantly different ranges, as it helps in comparing variables, improving model performance, and handling outliers effectively.

### Code Example

Here are fundamental SQL operations using Teradata, including `SELECT`, `UPDATE`, `DELETE`, and `CREATE`, to illustrate how to interact with a database.

#### 1. **SELECT**
```sql
SELECT column1, column2
FROM your_table
WHERE condition;
```
*Example: Select all columns where the status is 'active'.*
```sql
SELECT *
FROM users
WHERE status = 'active';
```

#### 2. **UPDATE**
```sql
UPDATE your_table
SET column1 = value1, column2 = value2
WHERE condition;
```
*Example: Update the email for a specific user.*
```sql
UPDATE users
SET email = 'new_email@example.com'
WHERE user_id = 123;
```

#### 3. **DELETE**
```sql
DELETE FROM your_table
WHERE condition;
```
*Example: Delete users who have been inactive for over a year.*
```sql
DELETE FROM users
WHERE last_login < CURRENT_DATE - INTERVAL '1 year';
```

#### 4. **CREATE**
```sql
CREATE TABLE your_table (
    column1 datatype,
    column2 datatype,
    ...
);
```
*Example: Create a new table to store user information.*
```sql
CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50),
    email VARCHAR(100),
    status VARCHAR(20)
);
```

### Keywords and Phrases
- TD_RowNormalizeFit
- RowNormalizeFit
- Teradata Vantage - TD_RowNormalizeFit - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_OutlierFilterTransform
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- Unpack
- Data Exploration Functions
- MovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- Feature Engineering Transform Functions
- Antiselect
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer
- TD_FunctionFit
- TD_FunctionTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_PolynomialFeaturesFit
- TD_PolynomialFeaturesTransform
- TD_RandomProjectionFit
- TD_RandomProjectionTransform
- TD_RowNormalizeFit
- TD_RowNormalizeTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_Unpivoting
- Feature Engineering Utility Functions
- TD_FillRowID
- TD_NumApply
- TD_RoundColumns
- TD_StrApply
- Model Training Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_KNN
- TD_OneClassSVM
- TD_SVM
- TD_XGBoost
- Model Scoring Functions
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_OneClassSVMPredict
- TD_SVMPredict
- TD_XGBoostPredict
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- Text Analytic Functions
- NGramSplitter
- TD_NaiveBayesTextClassifierPredict
- TD_NaiveBayesTextClassifierTrainer
- TD_SentimentExtractor
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Testing Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Path and Pattern Analysis Functions
- Attribution
- nPath
- Sessionize","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit","2024-07-27 11:40:53"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/Example-How-to-Use-TD_RowNormalizeFit","text/html;charset=UTF-8","200","","Indexable","","TD_RowNormalizeFit Example | RowNormalizeFit - Example: How to Use TD_RowNormalizeFit - Analytics Database","106","1021","See an example of the Analytics Database (SQL Engine) feature engineering transform function TD_RowNormalizeFit.","112","723","","0","TD_RowNormalizeFit Example | RowNormalizeFit - Example: How to Use TD_RowNormalizeFit - Analytics Database","106","Database Analytic Functions","27","InputTable: rowNormalizeFit_input","33","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/Example-How-to-Use-TD_RowNormalizeFit","","","","","","209741","13677","13677","4.849","A+","176","70","2.514","51.426","Fairly Hard","11.484","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","3.039","","","","","","1.1","## Summary

The `TD_RowNormalizeFit` function in Teradata Vantage is an analytic function used for row normalization. It allows users to specify target columns for normalization, choose an approach (like INDEX normalization), and define a base column and base value for the transformation. This is particularly useful in preparing data for further analysis or modeling by ensuring that different features are on a comparable scale.

## Code Example

Here’s a quick overview of SQL commands for `SELECT`, `UPDATE`, `DELETE`, and `CREATE` operations in Teradata, including the usage of `TD_RowNormalizeFit`.

### 1. SELECT
To retrieve data from a table:

```sql
SELECT *
FROM rowNormalizeFit_input;
```

### 2. UPDATE
To update existing rows in a table:

```sql
UPDATE rowNormalizeFit_input
SET y = y + 10
WHERE id = 1;
```

### 3. DELETE
To delete rows from a table:

```sql
DELETE FROM rowNormalizeFit_input
WHERE id = 2;
```

### 4. CREATE
To create a new table utilizing `TD_RowNormalizeFit`:

```sql
CREATE TABLE rowNormalizeFit_output AS (
  SELECT * FROM TD_RowNormalizeFit (
    ON rowNormalizeFit_input AS InputTable
    USING
    TargetColumns ('[1:2]')
    Approach ('INDEX')
    BaseColumn ('y')
    BaseValue (100)
  ) AS dt
) WITH DATA;
```

### 5. TD_RowNormalizeFit Example

```sql
-- Creating a normalized output table using TD_RowNormalizeFit
CREATE TABLE rowNormalizeFit_output AS (
  SELECT * FROM TD_RowNormalizeFit (
    ON rowNormalizeFit_input AS InputTable
    USING
    TargetColumns ('[1:2]')
    Approach ('INDEX')
    BaseColumn ('y')
    BaseValue (100)
  ) AS dt
) WITH DATA;
```

### TD_RowNormalizeFit Output
The output of the `TD_RowNormalizeFit` will include the normalized values:

```
TD_KEY_ROWFIT  TD_VALUE_ROWFIT  x     y    
--------------- ---------------- ---- ---- 
 Approach       INDEX            null null
 BaseColumn     y                null null
 BaseValue      100              null null
```

## Keywords and Phrases
- TD_RowNormalizeFit Example
- RowNormalizeFit - Example: How to Use TD_RowNormalizeFit
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Functions Ignore Disallowed Syntax Elements
- TD_GetRowsWithMissingValues
- TD_OneHotEncodingFit
- TD_OrdinalEncodingFit
- TD_ScaleFit
- TD_VectorDistance
- TD_XGBoost
- TD_GLMPredict
- TD_KMeansPredict
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_TrainTestSplit
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Test Types
- nPath
- Sessionize
- Related Documentation

This structured overview provides insight into how `TD_RowNormalizeFit` operates within Teradata, alongside examples of basic SQL commands in the context of data management.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/Example-How-to-Use-TD_RowNormalizeFit","2024-07-27 11:35:37"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/Optional-Syntax-Elements-for-TD_RowNormalizeFit","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_RowNormalizeFit - Analytics Database","68","638","OUT clause Accept the OutputTable clause. Approach Specify the normalization method: Option Description Normalizing Formula UNITVECTOR (Default) Scales each row of the dataset to have a unit norm or magnitude of 1. X' = X / (sqrt (Σi ϵ [1, n] Xi2)) FRACTION Scales each row of the dataset to have a sum of 1. This functi...","323","2012","","0","Optional Syntax Elements for TD_RowNormalizeFit - Analytics Database","68","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/Optional-Syntax-Elements-for-TD_RowNormalizeFit","","","","","","211793","13596","13596","4.820","A+","231","59","3.915","88.596","Easy","11.313","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.441","","","","","","1.1","## Summary of Analytics Database Functions

The Analytics Database in Teradata Vantage™ provides a rich set of analytic functions that facilitate complex data analysis, cleaning, and modeling. These functions can be utilized for various tasks including data cleaning, feature engineering, model training, scoring, and evaluation. This guide highlights essential SQL operations such as SELECT, UPDATE, DELETE, and CREATE, which are fundamental for interacting with databases, alongside examples for each operation.

### Code Examples

#### 1. SELECT
The `SELECT` statement is used to query data from a database.

```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE country = 'USA';
```

#### 2. UPDATE
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE customers
SET last_name = 'Smith'
WHERE customer_id = 101;
```

#### 3. DELETE
The `DELETE` statement removes records from a table.

```sql
DELETE FROM customers
WHERE customer_id = 101;
```

#### 4. CREATE
The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2)
);
```

### Keywords and Phrases

- **Optional Syntax Elements for TD_RowNormalizeFit**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Release Number:** 17.20
- **Published:** June 2022
- **Language:** English (United States)
- **Last Update:** 2024-04-06
- **Teradata Vantage™**
- **Function Syntax Descriptions**
- **Data Cleaning Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Workload Management Configuration**
- **Non-Deterministic Behavior**
- **Spool Space Exhaustion**
- **Deadlocks Using Volatile Tables**
- **Recommendations for Using Analytic Functions**
- **Normalization Methods (Unit Vector, Fraction, Percentage, Index)**

This summary and the examples provided offer a solid foundation for understanding how to work with the Teradata Analytics Database, focusing on SQL operations that are crucial for data manipulation and analysis.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/Optional-Syntax-Elements-for-TD_RowNormalizeFit","2024-07-27 11:19:43"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/Required-Syntax-Elements-for-TD_RowNormalizeFit","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_RowNormalizeFit - Analytics Database","68","642","ON clause Accept the InputTable clause. TargetColumns Specify the names of the InputTable columns to normalize row-wise. BaseColumn [Required with Approach ('INDEX'), ignored otherwise.] Specify the name of the InputTable column that has the B values to use in the normalizing formula. BaseValue [Required with Approach ...","323","2042","","0","Required Syntax Elements for TD_RowNormalizeFit - Analytics Database","68","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/Required-Syntax-Elements-for-TD_RowNormalizeFit","","","","","","208301","12925","12925","4.582","A+","103","46","2.239","26.327","Very Hard","11.271","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.507","","","","","","1.1","### Summary

In the context of Teradata Vantage™ Analytics Database, managing data through SQL operations such as Select, Update, Delete, and Create is essential for effective data manipulation. These operations allow users to retrieve, modify, and manage data stored in the database, facilitating various analytical processes. Below are examples demonstrating the syntax for each of these operations.

### Code Example

#### 1. Select
To retrieve data from a table, you can use the `SELECT` statement:

```sql
SELECT column1, column2 
FROM my_table 
WHERE condition;
```

#### 2. Update
To modify existing data in a table, you can use the `UPDATE` statement:

```sql
UPDATE my_table 
SET column1 = value1, 
    column2 = value2 
WHERE condition;
```

#### 3. Delete
To remove data from a table, you can use the `DELETE` statement:

```sql
DELETE FROM my_table 
WHERE condition;
```

#### 4. Create
To create a new table in the database, you can use the `CREATE TABLE` statement:

```sql
CREATE TABLE my_new_table (
    column1 datatype,
    column2 datatype,
    column3 datatype
);
```

### Keywords and Phrases

- **Required Syntax Elements for TD_RowNormalizeFit**
- **Analytics Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Limitations When Using PARTITION BY**
- **Recommendations for Using Analytic Functions**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact on Function Execution**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**

This structured approach to using SQL within the Teradata environment enhances the ability to perform complex data operations efficiently.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/Required-Syntax-Elements-for-TD_RowNormalizeFit","2024-07-27 11:27:30"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/TD_RowNormalizeFit-Input","text/html;charset=UTF-8","200","","Indexable","","TD_RowNormalizeFit Input - Analytics Database","45","424","InputTable Schema Column Data Type Description target_column BYTEINT, SMALLINT,INTEGER,BIGINT, DECIMAL/NUMERIC, FLOAT, REAL, DOUBLE PRECISION Column to normalize row-wise. base_column BYTEINT, SMALLINT,INTEGER,BIGINT, DECIMAL/NUMERIC, FLOAT, REAL, DOUBLE PRECISION [Column appears only with Approach ('INDEX').] B value ...","323","2228","","0","TD_RowNormalizeFit Input - Analytics Database","45","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/TD_RowNormalizeFit-Input","","","","","","209157","13203","13203","4.681","A+","80","41","1.951","0.000","Very Hard","11.188","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.534","","","","","","1.1","## Summary

In this document, we explore the functionalities of the Teradata Vantage™ Analytics Database, focusing on analytic functions available for data manipulation and analysis. Teradata Vantage offers a rich set of analytic functions categorized into various types such as data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This guide provides basic SQL operations with examples, including SELECT, UPDATE, DELETE, and CREATE statements, to illustrate how to interact with the analytics database effectively.

## Code Examples

### SELECT
To retrieve data from a table, you can use the SELECT statement. Here’s an example that selects all columns from a table named `sales_data`.

```sql
SELECT * 
FROM sales_data;
```

### UPDATE
To modify existing records in a table, you can use the UPDATE statement. The following example updates the `price` column of the `sales_data` table for a specific product.

```sql
UPDATE sales_data
SET price = price * 1.10
WHERE product_id = 101;
```

### DELETE
To remove records from a table, the DELETE statement is used. The following example deletes records from the `sales_data` table where the quantity is zero.

```sql
DELETE FROM sales_data
WHERE quantity = 0;
```

### CREATE
To create a new table in the database, you can use the CREATE TABLE statement. Here’s an example that creates a new table called `customer_data`.

```sql
CREATE TABLE customer_data (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    email VARCHAR(100),
    signup_date DATE
);
```

## Keywords and Phrases

- **TD_RowNormalizeFit Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/TD_RowNormalizeFit-Input","2024-07-27 12:23:27"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/TD_RowNormalizeFit-Output","text/html;charset=UTF-8","200","","Indexable","","TD_RowNormalizeFit Output - Analytics Database","46","440","OutputTable Schema Column Data Type Description TD_KEY_ROWFIT VARCHAR (CHARACTER SET LATIN) Parameter key. TD_VALUE_ROWFIT VARCHAR (CHARACTER SET UNICODE) Parameter value. target_column BYTEINT, SMALLINT,INTEGER,BIGINT, DECIMAL/NUMERIC, FLOAT, REAL, DOUBLE PRECISION [Column appears once for each specified target_column...","323","2284","","0","TD_RowNormalizeFit Output - Analytics Database","46","Database Analytic Functions","27","OutputTable Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/TD_RowNormalizeFit-Output","","","","","","209445","13272","13272","4.705","A+","78","45","1.733","0.000","Very Hard","11.164","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.476","","","","","","1.1","## Summary

In this document, we explore the key functionalities of Teradata's Analytics Database, specifically focusing on analytic functions and their applications. The Analytics Database provides a range of analytic functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation, which are essential for advanced analytics and machine learning tasks.

### Code Examples

Here are examples of basic SQL operations such as **SELECT**, **UPDATE**, **DELETE**, and **CREATE** in the context of a typical analytics database.

#### 1. **SELECT**
```sql
SELECT 
    TD_KEY_ROWFIT, 
    TD_VALUE_ROWFIT 
FROM 
    analytics_table 
WHERE 
    target_column IS NOT NULL;
```

#### 2. **UPDATE**
```sql
UPDATE 
    analytics_table 
SET 
    TD_VALUE_ROWFIT = 'new_value' 
WHERE 
    TD_KEY_ROWFIT = 'key_value';
```

#### 3. **DELETE**
```sql
DELETE FROM 
    analytics_table 
WHERE 
    TD_KEY_ROWFIT = 'key_value_to_delete';
```

#### 4. **CREATE**
```sql
CREATE TABLE analytics_table (
    TD_KEY_ROWFIT VARCHAR(255) CHARACTER SET LATIN,
    TD_VALUE_ROWFIT VARCHAR(255) CHARACTER SET UNICODE,
    target_column INTEGER
);
```

### Keywords and Phrases
- TD_RowNormalizeFit Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- gjn1627595495337.ditamap
- dita:ditavalPath
- ayr1485454803741.ditaval
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Examples of various functions and their usage in analytics

This structured overview of the analytics database functions and examples should provide a clear understanding for users looking to leverage Teradata's capabilities effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/TD_RowNormalizeFit-Output","2024-07-27 12:36:21"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/TD_RowNormalizeFit-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_RowNormalizeFit Syntax | RowNormalizeFit - TD_RowNormalizeFit Syntax - Analytics Database","92","875","See the syntax of the Analytics Database (SQL Engine) function TD_RowNormalizeFit and read descriptions of its required and optional syntax elements.","149","938","","0","TD_RowNormalizeFit Syntax | RowNormalizeFit - TD_RowNormalizeFit Syntax - Analytics Database","92","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/TD_RowNormalizeFit-Syntax","","","","","","208499","13035","13035","4.621","A+","117","48","2.438","33.715","Hard","11.314","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.635","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database provides a rich set of analytic functions that facilitate data manipulation and analysis. Among these functions, the `TD_RowNormalizeFit` function is particularly useful for normalizing rows of data based on specified target columns. This functionality is essential in preparing data for machine learning and statistical analysis, ensuring that different features contribute equally to the model performance.

### Code Examples

Here are examples of basic SQL operations—SELECT, UPDATE, DELETE, and CREATE—using the Teradata SQL syntax:

#### 1. SELECT

```sql
SELECT 
    employee_id, 
    first_name, 
    last_name 
FROM 
    employees 
WHERE 
    department = 'Sales';
```

#### 2. UPDATE

```sql
UPDATE 
    employees 
SET 
    salary = salary * 1.10 
WHERE 
    performance_rating = 'Excellent';
```

#### 3. DELETE

```sql
DELETE FROM 
    employees 
WHERE 
    last_review_date < '2022-01-01';
```

#### 4. CREATE

```sql
CREATE TABLE new_employees (
    employee_id INT NOT NULL,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    hire_date DATE
);
```

### TD_RowNormalizeFit Syntax Example

```sql
SELECT * 
FROM TD_RowNormalizeFit (
  ON employees AS InputTable
  OUT TABLE normalized_employees
  USING
  TargetColumns ('salary', 'bonus')
  Approach ('UNITVECTOR')
);
```

In this example, the `TD_RowNormalizeFit` function is applied to the `employees` table to normalize the `salary` and `bonus` columns, storing the results in a new table called `normalized_employees`.

### Keywords and Phrases

- **TD_RowNormalizeFit Syntax**
- **RowNormalizeFit**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Non-Deterministic Behavior**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/TD_RowNormalizeFit-Syntax","2024-07-27 12:26:13"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform","text/html;charset=UTF-8","200","","Indexable","","TD_RowNormalizeTransform Function | RowNormalizeTransform - TD_RowNormalizeTransform - Analytics Database","105","1040","This Analytics Database (SQL Engine) feature engineering transform function normalizes input columns row-wise.","110","702","","0","TD_RowNormalizeTransform Function | RowNormalizeTransform - TD_RowNormalizeTransform - Analytics Database","105","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform","","","","","","217525","14240","14240","5.048","A+","304","85","3.576","75.192","Fairly Easy","11.329","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.455","","","","","","1.1","### Summary of TD_RowNormalizeTransform Function

The `TD_RowNormalizeTransform` function in Teradata Vantage is designed to normalize the values of each row in a dataset. This process is essential in data analysis and machine learning as it ensures that each row contributes equally to the analysis, avoiding any bias due to the scale of the values. The normalization is achieved by dividing each element in a row by the sum of all elements in that row, resulting in a proportional representation of the data.

The output of the `TD_RowNormalizeTransform` is a transformed dataset where each row sums to 1, facilitating easier comparison and analysis.

### Code Example

#### 1. Create a Table
```sql
CREATE TABLE sales_data (
    day1 INT,
    day2 INT,
    day3 INT,
    day4 INT,
    day5 INT
);
```

#### 2. Insert Sample Data
```sql
INSERT INTO sales_data (day1, day2, day3, day4, day5) VALUES
(120, 150, 80, 200, 90),
(90, 110, 100, 120, 130),
(200, 180, 150, 170, 190);
```

#### 3. Normalize Rows
```sql
-- First, fit the normalization model
CALL TD_RowNormalizeFit('sales_data', 'sales_fit');

-- Then, apply the normalization transformation
SELECT 
    TD_RowNormalizeTransform(sales_fit, day1, day2, day3, day4, day5) AS normalized_sales
FROM sales_data;
```

#### 4. Update a Record
```sql
UPDATE sales_data
SET day1 = 130
WHERE day2 = 150;
```

#### 5. Delete a Record
```sql
DELETE FROM sales_data
WHERE day3 < 100;
```

#### 6. Drop the Table
```sql
DROP TABLE sales_data;
```

### Keywords and Phrases
- TD_RowNormalizeTransform Function
- RowNormalizeTransform
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Function Syntax Descriptions
- Data Cleaning Functions
- Data Exploration Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Usage Notes
- Input Table Rows Redistribution
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Example: How to Use TD_RowNormalizeTransform
- Data Normalization Techniques
- Row-wise normalization
- Transform output representation
- Sales performance comparison","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform","2024-07-27 11:31:53"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/Example-How-to-Use-TD_RowNormalizeTransform","text/html;charset=UTF-8","200","","Indexable","","TD_RowNormalizeTransform Example | RowNormalizeTransform - Example: How to Use TD_RowNormalizeTransform - Analytics Database","124","1234","See an example of the Analytics Database (SQL Engine) feature engineering transform function TD_RowNormalizeTransform.","118","773","","0","TD_RowNormalizeTransform Example | RowNormalizeTransform - Example: How to Use TD_RowNormalizeTransform - Analytics Database","124","Database Analytic Functions","27","InputTable from TD_RowNormalizeFit Output: rowNormalizeFit_input","64","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/Example-How-to-Use-TD_RowNormalizeTransform","","","","","","208718","12975","12975","4.600","A+","139","72","1.931","44.196","Hard","11.437","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.021","","","","","","1.1","# TD_RowNormalizeTransform Example

The `TD_RowNormalizeTransform` function in Teradata Vantage™ is used to normalize rows in a dataset based on specified parameters. This function is especially useful in data preparation for analytics and modeling, ensuring that the data adheres to specific scaling requirements.

## Summary

The `TD_RowNormalizeTransform` function is part of the Analytics Database Analytic Functions. It normalizes data rows based on a fitted model, allowing users to adjust the values to a common scale. The function can be utilized in various scenarios, particularly when preparing data for machine learning models or other analytical applications. 

### Example Usage

In this example, we will see how to use the `TD_RowNormalizeTransform` function with a given input table and a fitted model table.

#### Input Table

The input table (`rowNormalizeFit_input`) contains the following data:

| id | x  | y  |
|----|----|----|
| 1  | 0  | 1  |
| 2  | 3  | 4  |
| 3  | 5  | 12 |
| 4  | 7  | 24 |

#### Fit Table

The fit table (`rowNormalizeFit_output`) contains the parameters generated by the `TD_RowNormalizeFit` function:

| TD_KEY_ROWFIT | TD_VALUE_ROWFIT | x    | y    |
|---------------|------------------|------|------|
| Approach      | INDEX            | null | null |
| BaseColumn    | y                | null | null |
| BaseValue     | 100              | null | null |

#### SQL Call

Here’s how to call the `TD_RowNormalizeTransform` function:

```sql
SELECT * FROM TD_RowNormalizeTransform (
  ON rowNormalizeFit_input AS InputTable
  ON rowNormalizeFit_output AS FitTable DIMENSION
  USING
  Accumulate ('id')
) AS dt;
```

#### Output

The output of the `TD_RowNormalizeTransform` function will look like this:

| id | x      | y      |
|----|--------|--------|
| 1  | 0.00   | 100.00 |
| 2  | 75.00  | 100.00 |
| 3  | 41.66  | 100.00 |
| 4  | 29.16  | 100.00 |

In this output, the `y` values have been normalized to a scale of 100, while the `x` values have been adjusted based on the normalization process.

## Code Example

Here are some basic SQL operations for managing data in Teradata:

### Select
```sql
SELECT * FROM my_table WHERE column_name = 'value';
```

### Update
```sql
UPDATE my_table SET column_name = 'new_value' WHERE condition_column = 'condition_value';
```

### Delete
```sql
DELETE FROM my_table WHERE condition_column = 'condition_value';
```

### Create
```sql
CREATE TABLE my_table (
    id INT,
    column_name VARCHAR(100)
);
```

## Keywords and Phrases

- **TD_RowNormalizeTransform Example**
- **RowNormalizeTransform - Example: How to Use TD_RowNormalizeTransform**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Input Table Rows Redistribution**
- **Usage Notes**
- **Recommendations for Using Analytic Functions**
- **Example: How to Use TD_RowNormalizeTransform** 

This summary and examples provide a clear understanding of how to implement and utilize the `TD_RowNormalizeTransform` function and some basic SQL operations in Teradata.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/Example-How-to-Use-TD_RowNormalizeTransform","2024-07-27 12:17:02"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/Optional-Syntax-Elements-for-TD_RowNormalizeTransform","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_RowNormalizeTransform - Analytics Database","74","709","Accumulate Specify the names of the InputTable columns to copy to the output table.","83","526","","0","Optional Syntax Elements for TD_RowNormalizeTransform - Analytics Database","74","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/Optional-Syntax-Elements-for-TD_RowNormalizeTransform","","","","","","207506","12676","12676","4.494","A+","58","35","1.657","3.863","Very Hard","11.161","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.680","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a robust set of analytic functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. These functions help in transforming raw data into insightful information. The functions are designed to handle large datasets efficiently and can be used in various scenarios such as hypothesis testing, text analysis, and path analysis.

### Code Examples

Here are fundamental SQL operations—Select, Update, Delete, and Create—typically used in an analytics database context:

1. **Select**
   ```sql
   SELECT column1, column2
   FROM table_name
   WHERE condition;
   ```
   This statement retrieves data from specified columns in a table that meet a certain condition.

2. **Update**
   ```sql
   UPDATE table_name
   SET column1 = value1, column2 = value2
   WHERE condition;
   ```
   This command modifies existing records in a table based on a specified condition.

3. **Delete**
   ```sql
   DELETE FROM table_name
   WHERE condition;
   ```
   This statement removes records from a table that match the given condition.

4. **Create**
   ```sql
   CREATE TABLE new_table_name (
       column1 data_type,
       column2 data_type,
       ...
   );
   ```
   This command creates a new table with specified columns and data types.

### Optional Syntax Elements for TD_RowNormalizeTransform
- **Analytics Database**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Analytics Database Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Data Cleaning Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**

This summary and examples provide a foundational understanding of SQL operations in the context of Teradata's Analytics Database, along with a reference to its analytic functions and deployment considerations.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/Optional-Syntax-Elements-for-TD_RowNormalizeTransform","2024-07-27 12:10:24"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/Required-Syntax-Elements-for-TD_RowNormalizeTransform","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_RowNormalizeTransform - Analytics Database","74","713","ON clause Accept the InputTable and FitTable clauses.","53","336","","0","Required Syntax Elements for TD_RowNormalizeTransform - Analytics Database","74","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/Required-Syntax-Elements-for-TD_RowNormalizeTransform","","","","","","207446","12636","12636","4.480","A+","52","35","1.486","0.000","Very Hard","11.150","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.450","","","","","","1.1","# Summary of TD_RowNormalizeTransform in Teradata Vantage

The **TD_RowNormalizeTransform** function is part of Teradata Vantage's analytics capabilities, specifically designed for transforming and normalizing rows in a dataset. Normalization is essential in data preprocessing, particularly in machine learning and statistics, as it ensures that each feature contributes equally to the distance calculations. This function helps in transforming input data into a normalized format, allowing for better model performance and interpretability.

## Code Example

Here are examples of SQL statements for the basic operations: Select, Update, Delete, and Create in the context of Teradata Vantage.

### Select

```sql
SELECT *
FROM YourTable
WHERE condition;
```

### Update

```sql
UPDATE YourTable
SET column1 = 'new_value'
WHERE condition;
```

### Delete

```sql
DELETE FROM YourTable
WHERE condition;
```

### Create

```sql
CREATE TABLE YourTable (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Key Concepts and Keywords

- **Required Syntax Elements for TD_RowNormalizeTransform**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This summary and the examples provide a foundational understanding of the **TD_RowNormalizeTransform** function and its context within the Teradata Vantage environment.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/Required-Syntax-Elements-for-TD_RowNormalizeTransform","2024-07-27 12:46:38"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/TD_RowNormalizeTransform-Input","text/html;charset=UTF-8","200","","Indexable","","TD_RowNormalizeTransform Input - Analytics Database","51","495","InputTable Schema Column Data Type Description target_column BYTEINT, SMALLINT,INTEGER, BIGINT, DECIMAL/NUMERIC, FLOAT, REAL, DOUBLE PRECISION Column to normalize row-wise. base_column BYTEINT, SMALLINT,INTEGER, BIGINT, DECIMAL/NUMERIC, FLOAT, REAL, DOUBLE PRECISION [Column appears only with Approach ('INDEX') from the...","323","2231","","0","TD_RowNormalizeTransform Input - Analytics Database","51","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/TD_RowNormalizeTransform-Input","","","","","","211660","13445","13445","4.766","A+","136","55","2.473","0.912","Very Hard","11.271","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.296","","","","","","1.1","### Summary

The **Analytics Database** from Teradata Vantage™ provides a suite of analytic functions and methods for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This enables users to efficiently prepare, analyze, and derive insights from data. This document outlines the basic SQL operations (SELECT, UPDATE, DELETE, CREATE) relevant to using the Analytics Database alongside its powerful analytic functions.

### Code Examples

#### 1. SELECT
The `SELECT` statement is used to retrieve data from a database. The syntax can include various clauses such as `WHERE`, `ORDER BY`, and `GROUP BY`.

```sql
SELECT target_column, base_column
FROM my_table
WHERE target_column IS NOT NULL
ORDER BY target_column;
```

#### 2. UPDATE
The `UPDATE` statement modifies existing records in a table. 

```sql
UPDATE my_table
SET base_column = base_column + 1
WHERE target_column > 100;
```

#### 3. DELETE
The `DELETE` statement removes existing records from a table.

```sql
DELETE FROM my_table
WHERE target_column < 10;
```

#### 4. CREATE
The `CREATE` statement is used to create a new table or database.

```sql
CREATE TABLE my_new_table (
    target_column INTEGER,
    base_column DECIMAL(10, 2),
    accumulate_column VARCHAR(255)
);
```

### Keywords and Phrases

- TD_RowNormalizeTransform Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_OutlierFilterTransform
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- Unpack
- Data Exploration Functions
- MovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- Feature Engineering Transform Functions
- Antiselect
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer
- TD_FunctionFit
- TD_FunctionTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_PolynomialFeaturesFit
- TD_PolynomialFeaturesTransform
- TD_RandomProjectionFit
- TD_RandomProjectionTransform
- TD_RowNormalizeFit
- TD_RowNormalizeTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_Unpivoting
- Feature Engineering Utility Functions
- TD_FillRowID
- TD_NumApply
- TD_RoundColumns
- TD_StrApply
- Model Training Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_KNN
- TD_OneClassSVM
- TD_SVM
- TD_VectorDistance
- TD_XGBoost
- Model Scoring Functions
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_OneClassSVMPredict
- TD_SVMPredict
- TD_XGBoostPredict
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- Text Analytic Functions
- NGramSplitter
- TD_NaiveBayesTextClassifierPredict
- TD_NaiveBayesTextClassifierTrainer
- TD_SentimentExtractor
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Testing Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Path and Pattern Analysis Functions
- Attribution
- nPath
- Sessionize
- InputTable Schema
- FitTable Schema

This document provides a foundational understanding of the SQL operations within the Teradata Analytics Database, along with a comprehensive list of relevant keywords and phrases.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/TD_RowNormalizeTransform-Input","2024-07-27 11:38:42"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/TD_RowNormalizeTransform-Output","text/html;charset=UTF-8","200","","Indexable","","TD_RowNormalizeTransform Output - Analytics Database","52","511","Column Data Type Description accumulate_column Any Column copied from InputTable. target_column DOUBLE PRECISION Row-normalized values.","135","918","","0","TD_RowNormalizeTransform Output - Analytics Database","52","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/TD_RowNormalizeTransform-Output","","","","","","208721","12959","12959","4.594","A+","56","36","1.556","0.000","Very Hard","11.110","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.448","","","","","","1.1","# Summary of Teradata Vantage™ Analytics Database Analytic Functions

The Teradata Vantage™ Analytics Database provides a wide array of analytic functions categorized into data cleaning, exploration, feature engineering, model training, scoring, and evaluation functions, as well as text analytic and hypothesis testing functions. Each function is designed to facilitate various data analysis tasks, allowing users to manipulate and derive insights from their data efficiently.

## Code Example

Here are examples of SQL statements for common database operations: Select, Update, Delete, and Create.

### 1. Select
```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE status = 'active';
```

### 2. Update
```sql
UPDATE customers
SET status = 'inactive'
WHERE last_purchase_date < '2022-01-01';
```

### 3. Delete
```sql
DELETE FROM customers
WHERE status = 'inactive' AND last_purchase_date < '2021-01-01';
```

### 4. Create
```sql
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    status VARCHAR(20),
    last_purchase_date DATE
);
```

## Keywords and Phrases
- **TD_RowNormalizeTransform Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number** 17.20
- **Published** June 2022
- **Language** English (United States)
- **Last Update** 2024-04-06
- **dita:mapPath** gjn1627595495337.ditamap
- **dita:ditavalPath** ayr1485454803741.ditaval
- **dita:id** jmh1512506877710
- **Product Category** Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This summary provides an overview of the key concepts and functionalities within the Teradata Vantage™ Analytics Database, along with practical SQL examples for fundamental database operations.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/TD_RowNormalizeTransform-Output","2024-07-27 11:26:31"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/TD_RowNormalizeTransform-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_RowNormalizeTransform Syntax | RowNormalizeTransform - TD_RowNormalizeTransform Syntax - Analytics Database","110","1088","See the syntax of the Analytics Database (SQL Engine) function TD_RowNormalizeTransform and read descriptions of its required and optional syntax elements.","155","988","","0","TD_RowNormalizeTransform Syntax | RowNormalizeTransform - TD_RowNormalizeTransform Syntax - Analytics Database","110","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/TD_RowNormalizeTransform-Syntax","","","","","","208509","12954","12954","4.592","A+","113","45","2.511","37.332","Hard","11.277","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.617","","","","","","1.1","## Summary

The Teradata Vantage™ platform provides a robust environment for working with data analytics and machine learning. This document outlines the key SQL operations such as **SELECT**, **UPDATE**, **DELETE**, and **CREATE** as they pertain to the Teradata environment, specifically within the context of its Analytics Database and analytic functions. The **TD_RowNormalizeTransform** function is highlighted, which is used to normalize rows in a dataset. 

SQL operations are foundational for data manipulation, allowing users to query, modify, and manage datasets effectively. The following examples illustrate how to perform these operations in Teradata.

## Code Examples

### 1. SELECT
The **SELECT** statement is used to query data from a database.

```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE status = 'active';
```

### 2. UPDATE
The **UPDATE** statement modifies existing records in a table.

```sql
UPDATE customers
SET status = 'inactive'
WHERE last_purchase_date < '2022-01-01';
```

### 3. DELETE
The **DELETE** statement removes records from a table.

```sql
DELETE FROM customers
WHERE status = 'inactive' AND last_purchase_date < '2022-01-01';
```

### 4. CREATE
The **CREATE** statement is used to create a new table or view.

```sql
CREATE TABLE active_customers AS
SELECT customer_id, first_name, last_name
FROM customers
WHERE status = 'active'
WITH NO DATA;
```

### 5. TD_RowNormalizeTransform
The **TD_RowNormalizeTransform** function normalizes rows in a dataset.

```sql
SELECT * 
FROM TD_RowNormalizeTransform (
  ON customers AS InputTable
  ON customers AS FitTable DIMENSION
  USING
  Accumulate (sales_amount)
);
```

## Keywords and Phrases

- TD_RowNormalizeTransform Syntax
- RowNormalizeTransform - TD_RowNormalizeTransform Syntax
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Language: English (United States)
- Last Update 2024-04-06
- Product Category: Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Recommendations for Using Analytic Functions

This guide serves as a high-level overview of essential SQL functions and specific Teradata analytic functions, allowing users to effectively manage and analyze their data.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/TD_RowNormalizeTransform-Syntax","2024-07-27 11:21:02"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit","text/html;charset=UTF-8","200","","Indexable","","TD_ScaleFit Function | ScaleFit | Teradata Vantage - TD_ScaleFit - Analytics Database","85","760","This Analytics Database (SQL Engine) feature engineering transform function outputs a table of statistics to input to TD_ScaleTransform.","136","846","","0","TD_ScaleFit Function | ScaleFit | Teradata Vantage - TD_ScaleFit - Analytics Database","85","Database Analytic Functions","27","Usage Considerations","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit","","","","","","214151","14655","14655","5.195","A+","677","131","5.168","55.383","Fairly Hard","12.615","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.762","","","","","","1.1","## Summary

The `TD_ScaleFit` function in Teradata Vantage is used for scaling specified input table columns to a more suitable range or distribution for analysis or modeling. This function is essential for ensuring that variables with different units or ranges do not bias the results of analyses or predictive models. The scaling methods supported include Min-Max scaling, Standardization, Logarithmic scaling, Power transformation, and Robust scaling.

The `TD_ScaleFit` function takes parameters such as `TargetColumns` and `ScaleMethod`, which are mandatory, and supports input in both dense and sparse formats. Usage considerations include the structure of input tables, potential errors due to invalid parameters, and spool space limitations when working with large datasets.

## Code Examples

### 1. Create a Table
To start, we need to create a sample table with some numerical data.

```sql
CREATE TABLE SampleData (
    ID INT,
    Value1 FLOAT,
    Value2 FLOAT
);

INSERT INTO SampleData (ID, Value1, Value2) VALUES (1, 10.0, 20.0);
INSERT INTO SampleData (ID, Value1, Value2) VALUES (2, 15.0, 25.0);
INSERT INTO SampleData (ID, Value1, Value2) VALUES (3, 30.0, 60.0);
```

### 2. Select Data
We can select data from the table to view the contents.

```sql
SELECT * FROM SampleData;
```

### 3. Scale Fit
Next, we apply the `TD_ScaleFit` function to scale the `Value1` and `Value2` columns.

```sql
SELECT * 
FROM TD_ScaleFit (
    ON SampleData
    USING 
    TargetColumns ('Value1', 'Value2') 
    ScaleMethod ('STD')
) AS FitResults;
```

### 4. Scale Transform
Once we have the fit results, we can use the `TD_ScaleTransform` function to apply the scaling to the original data.

```sql
SELECT * 
FROM TD_ScaleTransform (
    ON SampleData
    USING 
    FitResults
) AS TransformedData;
```

### 5. Delete Data
If we need to delete a specific row from the table, we can do so as follows:

```sql
DELETE FROM SampleData WHERE ID = 1;
```

### 6. Update Data
To update a specific value in the table:

```sql
UPDATE SampleData 
SET Value1 = 20.0 
WHERE ID = 2;
```

## Keywords and Phrases
- TD_ScaleFit Function
- ScaleFit
- Teradata Vantage - TD_ScaleFit - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Usage Notes
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- TD_ScaleTransform
- Input Table Rows Redistribution
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion
- Recommendations for Using Analytic Functions
- Scaling Methods: Min-Max, Standardization, Logarithmic, Power Transformation, Robust Scaling
- Usage Considerations for TD_ScaleFit","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit","2024-07-27 11:21:59"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Examples-How-to-Use-TD_ScaleFit","text/html;charset=UTF-8","200","","Indexable","","TD_ScaleFit Examples | ScaleFit | Teradata Vantage - Examples: How to Use TD_ScaleFit - Analytics Database","106","974","See examples of the Analytics Database (SQL Engine) feature engineering transform function TD_ScaleFit.","103","653","","0","TD_ScaleFit Examples | ScaleFit | Teradata Vantage - Examples: How to Use TD_ScaleFit - Analytics Database","106","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Examples-How-to-Use-TD_ScaleFit","","","","","","209303","13485","13485","4.780","A+","117","47","2.489","44.508","Hard","11.255","1","5","","707","707","0","99.860","714","711","0","","","","","","","","","0.535","","","","","","1.1","### Summary

The **Teradata Vantage™ Analytics Database** provides a robust set of analytic functions to manage and manipulate data efficiently. The **TD_ScaleFit** function is particularly useful for scaling input data, which is crucial for various data processing and machine learning tasks. This function can handle both dense and sparse datasets, making it versatile for different types of data. 

In addition to scaling, Teradata Vantage supports a comprehensive set of SQL commands for data manipulation, including **SELECT**, **INSERT**, **UPDATE**, and **DELETE**. These operations form the backbone of database interaction and are essential for managing data within Teradata.

### Code Example

#### 1. SELECT
The `SELECT` statement is used to query data from a database.

```sql
SELECT column1, column2
FROM my_table
WHERE condition;
```

#### 2. INSERT
The `INSERT` statement is used to add new records to a table.

```sql
INSERT INTO my_table (column1, column2)
VALUES (value1, value2);
```

#### 3. UPDATE
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE my_table
SET column1 = new_value
WHERE condition;
```

#### 4. DELETE
The `DELETE` statement removes records from a table.

```sql
DELETE FROM my_table
WHERE condition;
```

### Keywords and Phrases

- TD_ScaleFit Examples
- ScaleFit
- Teradata Vantage - Examples
- How to Use TD_ScaleFit
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Examples: How to Use Pack
- Example: Using TD_OutlierFilterFit with Percentile Method
- Example: How to Use TD_SimpleImputeFit
- Example: How to Use TD_ScaleTransform
- Dense Input
- Sparse Input without Partition
- Sparse Input with Partition

This concise overview and examples should help you navigate the functionalities offered by Teradata Vantage, particularly around the TD_ScaleFit function and standard SQL operations.","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Examples-How-to-Use-TD_ScaleFit","2024-07-27 11:59:35"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Examples-How-to-Use-TD_ScaleFit/Dense-Input","text/html;charset=UTF-8","200","","Indexable","","TD_ScaleFit Examples | ScaleFit | Teradata Vantage - Dense Input - Analytics Database","85","770","See examples of the Analytics Database (SQL Engine) feature engineering transform function TD_ScaleFit.","103","653","","0","TD_ScaleFit Examples | ScaleFit | Teradata Vantage - Dense Input - Analytics Database","85","Database Analytic Functions","27","Example: InputTable: scale_input_table","38","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Examples-How-to-Use-TD_ScaleFit/Dense-Input","","","","","","275038","17231","17231","6.108","A+","1250","383","3.264","97.265","Very Easy","11.587","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.576","","","","","","1.1","### Summary

The Teradata Vantage platform provides a range of analytic functions and capabilities for data processing and analysis. This includes various functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Among these capabilities, the TD_ScaleFit function is particularly useful for scaling data, allowing for normalization based on various methods such as range, standard deviation, and more.

### Code Example: SQL Operations

Here are examples of basic SQL operations (Select, Update, Delete, Create) using Teradata syntax, followed by a specific example of using the `TD_ScaleFit` function.

#### Create Table
```sql
CREATE TABLE passengers (
    passenger_id INTEGER,
    name VARCHAR(100),
    age INTEGER,
    gender VARCHAR(10),
    fare FLOAT
);
```

#### Insert Data
```sql
INSERT INTO passengers (passenger_id, name, age, gender, fare) VALUES 
(1, 'John Doe', 28, 'Male', 70.0),
(2, 'Jane Smith', 34, 'Female', 80.0),
(3, 'Emily Johnson', 22, 'Female', 50.0);
```

#### Select Data
```sql
SELECT * FROM passengers WHERE age > 25;
```

#### Update Data
```sql
UPDATE passengers 
SET fare = fare * 1.1 
WHERE gender = 'Female';
```

#### Delete Data
```sql
DELETE FROM passengers 
WHERE passenger_id = 3;
```

### TD_ScaleFit SQL Example
This example demonstrates how to use the `TD_ScaleFit` function for scaling a specific column in a dataset.

```sql
-- Create input table
CREATE TABLE input_table AS 
(SELECT * FROM titanic_train WHERE passenger IN (97,488,505,631,873)) WITH DATA;

-- Apply TD_ScaleFit
SELECT * FROM TD_ScaleFit (
  ON input_table AS InputTable
  OUT PERMANENT TABLE OutputTable (scaleFitOut)
  USING
  TargetColumns ('fare')
  MissValue ('keep')
  ScaleMethod ('range')
  GlobalScale ('f')
) AS dt2;
```

### Keywords and Phrases
- TD_ScaleFit Examples
- ScaleFit
- Teradata Vantage
- Dense Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published June 2022
- Language: English (United States)
- Last Update April 6, 2024
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Hypothesis Testing Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Recommendations for Using Analytic Functions
- Example: TD_ScaleTransform
- Example: TD_OneHotEncodingFit
- Example: TD_GLM
- Example: TD_KMeans
- Example: TD_XGBoost
- Example: TD_Silhouette

This summary and code examples should provide a solid foundation for understanding and using Teradata Vantage's analytic capabilities, particularly for data scaling and manipulation.","28","1","4","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Examples-How-to-Use-TD_ScaleFit/Dense-Input","2024-07-27 12:38:07"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Examples-How-to-Use-TD_ScaleFit/Sparse-Input-with-Partition","text/html;charset=UTF-8","200","","Indexable","","Sparse Input with Partition - Analytics Database","48","424","The following example assumes the sparse input format for InputTable, ParameterTable, and AttributeTable: CREATE MULTISET TABLE scale_input_part_sparse (pid int, passenger int, attribute_column varchar(20), attribute_value real);
insert into scale_input_part_sparse values (1, 2,   'age',  38);
insert into scale_input_p...","323","1964","","0","Sparse Input with Partition - Analytics Database","48","Database Analytic Functions","27","TD_ScaleFit Call","16","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Examples-How-to-Use-TD_ScaleFit/Sparse-Input-with-Partition","","","","","","215119","14128","14128","5.008","A+","683","245","2.788","57.349","Fairly Hard","13.955","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.867","","","","","","1.1","## Summary of Sparse Input with Partition - Analytics Database

The Analytics Database supports various analytic functions that can be applied to data organized in sparse input format. This format is particularly useful for handling datasets with many missing values, allowing for efficient data manipulation and analysis. The following SQL statements illustrate basic operations such as creating tables, inserting data, and performing selections and updates using partitioned data.

### Code Example

#### 1. Create Table

```sql
CREATE MULTISET TABLE scale_input_part_sparse (
    pid INT, 
    passenger INT, 
    attribute_column VARCHAR(20), 
    attribute_value FLOAT
);
```

#### 2. Insert Data

```sql
INSERT INTO scale_input_part_sparse VALUES (1, 2, 'age', 38);
INSERT INTO scale_input_part_sparse VALUES (1, 2, 'fare', 71.2833);
INSERT INTO scale_input_part_sparse VALUES (2, 22, 'age', 34);
INSERT INTO scale_input_part_sparse VALUES (2, 22, 'fare', 13);
```

#### 3. Select Data

```sql
SELECT * FROM scale_input_part_sparse WHERE pid = 1;
```

#### 4. Update Data

```sql
UPDATE scale_input_part_sparse 
SET attribute_value = 40 
WHERE pid = 1 AND attribute_column = 'age';
```

#### 5. Delete Data

```sql
DELETE FROM scale_input_part_sparse 
WHERE pid = 2 AND passenger = 22;
```

### Keywords and Phrases

- Sparse Input with Partition - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- TD_ScaleFit
- TD_ScaleFit Output

This concise overview and code examples demonstrate basic interactions with an analytics database using the sparse input format, specifically focusing on partitioned data operations.","26","1","4","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Examples-How-to-Use-TD_ScaleFit/Sparse-Input-with-Partition","2024-07-27 12:31:54"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Examples-How-to-Use-TD_ScaleFit/Sparse-Input-without-Partition","text/html;charset=UTF-8","200","","Indexable","","Sparse Input without Partition - Analytics Database","51","453","The following example assumes the sparse input format for InputTable: create multiset table scale_input_sparse (passenger int, attribute_column varchar(20), attribute_value real);
insert into scale_input_sparse values (97,   'age',  71);
insert into scale_input_sparse values (97,   'fare', 34.6542);
insert into scale_i...","323","1895","","0","Sparse Input without Partition - Analytics Database","51","Database Analytic Functions","27","TD_ScaleFit Call","16","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Examples-How-to-Use-TD_ScaleFit/Sparse-Input-without-Partition","","","","","","209977","13435","13435","4.763","A+","212","96","2.208","22.624","Very Hard","11.919","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.642","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides various analytic functions to perform operations on data, including selecting, updating, deleting, and creating tables. The following examples demonstrate how to use SQL commands for these operations, specifically focusing on a sparse input format.

## Code Example

### Create a Table
```sql
CREATE MULTISET TABLE scale_input_sparse (
    passenger INT,
    attribute_column VARCHAR(20),
    attribute_value REAL
);
```

### Insert Data
```sql
INSERT INTO scale_input_sparse VALUES (97, 'age', 71);
INSERT INTO scale_input_sparse VALUES (97, 'fare', 34.6542);
INSERT INTO scale_input_sparse VALUES (488, 'age', 58);
INSERT INTO scale_input_sparse VALUES (488, 'fare', 29.7);
INSERT INTO scale_input_sparse VALUES (505, 'age', 16);
INSERT INTO scale_input_sparse VALUES (505, 'fare', 86.5);
INSERT INTO scale_input_sparse VALUES (631, 'age', 80);
INSERT INTO scale_input_sparse VALUES (631, 'fare', 30);
INSERT INTO scale_input_sparse VALUES (873, 'age', 33);
INSERT INTO scale_input_sparse VALUES (873, 'fare', 5);
```

### Select Data
```sql
SELECT * FROM scale_input_sparse;
```

### Update Data
```sql
UPDATE scale_input_sparse 
SET attribute_value = 75 
WHERE passenger = 97 AND attribute_column = 'age';
```

### Delete Data
```sql
DELETE FROM scale_input_sparse 
WHERE passenger = 873 AND attribute_column = 'fare';
```

### Call TD_ScaleFit Function
```sql
SELECT * FROM TD_ScaleFit(
    ON scale_input_sparse AS InputTable
    OUT PERMANENT TABLE OutputTable(sparseScaleFitOut)
    USING
    TargetAttributes('fare')
    AttributeNameColumn('attribute_column')
    AttributeValueColumn('attribute_value')
    MissValue('Keep')
    ScaleMethod('range')
    GlobalScale('f')
) AS dt2;
```

### TD_ScaleFit Output
The output of the `TD_ScaleFit` function provides various statistics for the 'fare' attribute, such as average, count, location, and scale.

## Keywords and Phrases
- Sparse Input without Partition
- Analytics Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Workload Management Configuration
- Non-Deterministic Behavior
- Recommendations for Using Analytic Functions
- Input Table Rows Redistribution
- AMP Configuration Impact
- Operating Functions
- TD_ScaleFit
- TD_OneHotEncodingFit
- TD_NaiveBayesTextClassifierTrainer
- TD_DecisionForestPredict
- TD_XGBoostPredict
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- TD_TextParser
- TD_WordEmbeddings
- Hypothesis Test Types
- nPath
- Sessionize","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Examples-How-to-Use-TD_ScaleFit/Sparse-Input-without-Partition","2024-07-27 12:09:23"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Optional-Syntax-Elements-for-TD_ScaleFit","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_ScaleFit - Analytics Database","61","557","ON clause Specifies the table name, view name or query as a ParameterTable and AttributeTable. OutputTable Specifies the name of the output table. If this argument is provided, the output is stored in the specified OutputTable name. TargetAttributes Specifies the target attributes names from AttributeNameColumn which n...","323","2012","","0","Optional Syntax Elements for TD_ScaleFit - Analytics Database","61","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Optional-Syntax-Elements-for-TD_ScaleFit","","","","","","216173","14526","14526","5.150","A+","631","129","4.891","51.038","Fairly Hard","12.447","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.509","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides powerful analytic functions that enable users to perform a variety of data manipulation tasks, such as selecting, updating, deleting, and creating data. This functionality is essential for effective data analysis and management in analytics applications.

The following sections illustrate how to utilize the key SQL commands within the context of the Teradata Analytics Database, particularly focusing on `SELECT`, `UPDATE`, `DELETE`, and `CREATE` operations.

## Code Examples

### 1. SELECT

The `SELECT` statement is used to retrieve data from one or more tables.

```sql
SELECT 
    customer_id, 
    first_name, 
    last_name 
FROM 
    customers 
WHERE 
    purchase_amount > 1000;
```

### 2. UPDATE

The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE 
    customers 
SET 
    loyalty_points = loyalty_points + 100 
WHERE 
    customer_id = 12345;
```

### 3. DELETE

The `DELETE` statement is used to remove records from a table.

```sql
DELETE FROM 
    customers 
WHERE 
    last_purchase_date < '2020-01-01';
```

### 4. CREATE

The `CREATE` statement is used to create new tables or databases.

```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## Keywords and Phrases

- **Optional Syntax Elements for TD_ScaleFit**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Data Exploration Functions**
- **Model Evaluation Functions**
- **Usage Notes**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Recommendations for Using Analytic Functions**
- **Examples of Functions like TD_ScaleFit, TD_ConvertTo, TD_GetFutileColumns, etc.**
- **Syntax Elements and Input/Output Descriptions for Various Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Optional-Syntax-Elements-for-TD_ScaleFit","2024-07-27 11:32:07"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Required-Syntax-Elements-for-TD_ScaleFit","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_ScaleFit - Analytics Database","61","561","ON clause Specifies the table name, view name or query as an InputTable. ScaleMethod Specifies the name of the method to be used for Scaling data. If you specify only one argument value, it applies to all columns specified by the TargetColumns argument. If you specify multiple argument values, each argument value appli...","323","1999","","0","Required Syntax Elements for TD_ScaleFit - Analytics Database","61","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Required-Syntax-Elements-for-TD_ScaleFit","","","","","","210047","13506","13506","4.788","A+","238","63","3.778","41.621","Hard","11.610","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.447","","","","","","1.1","# Summary of Required Syntax Elements for TD_ScaleFit

`TD_ScaleFit` is a function used in Teradata's Analytics Database to scale numerical data within specified bounds or using various scaling methods. The syntax allows for customization based on the input data type, whether it is dense or sparse. Understanding the required syntax elements is crucial for efficient data preprocessing in analytical tasks.

## Code Examples

### 1. Create

Creating a sample table to use with `TD_ScaleFit`:

```sql
CREATE TABLE SampleData (
    ID INT,
    Feature1 FLOAT,
    Feature2 FLOAT,
    Feature3 FLOAT
);
```

### 2. Insert

Inserting sample data into the created table:

```sql
INSERT INTO SampleData (ID, Feature1, Feature2, Feature3) VALUES 
(1, 23.5, 45.6, 78.1),
(2, 12.3, 56.4, 89.0),
(3, 34.1, 67.2, 90.3);
```

### 3. Select

Selecting data from the table:

```sql
SELECT * FROM SampleData;
```

### 4. TD_ScaleFit Example

Using `TD_ScaleFit` to scale the features in `SampleData`:

```sql
SELECT TD_ScaleFit(
    ON SampleData
    USING
    ScaleMethod = 'RESCALE',
    TargetColumns = ('Feature1', 'Feature2', 'Feature3'),
    lower_bound = 0,
    upper_bound = 1
) AS ScaledData;
```

### 5. Update

Updating a specific row in the table (e.g., updating `Feature1`):

```sql
UPDATE SampleData
SET Feature1 = 45.0
WHERE ID = 1;
```

### 6. Delete

Deleting a row from the table:

```sql
DELETE FROM SampleData WHERE ID = 2;
```

## Keywords and Phrases

- Required Syntax Elements for TD_ScaleFit
- Analytics Database
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- TD_ScaleFit Syntax
- TargetColumns
- ScaleMethod
- AttributeNameColumn
- AttributeValueColumn
- Sparse Input
- Dense Input
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Workload Management Configuration for Analytics Database Analytic Functions

This summary provides a foundational understanding of how to use `TD_ScaleFit` and its surrounding context in Teradata's environment.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Required-Syntax-Elements-for-TD_ScaleFit","2024-07-27 12:17:19"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/TD_ScaleFit-Input","text/html;charset=UTF-8","200","","Indexable","","TD_ScaleFit Input - Analytics Database","38","343","Dense Input InputTable Schema Column Name Data Type Description PartitionColumns BYTEINT, SMALLINT, INTEGER, BIGINT, VARCHAR, CHAR Columns on which to partition the input. TargetColumns NUMERIC Column to be scaled. ParameterTable Schema Column Name Data Type Description PartitionColumns BYTEINT, SMALLINT, INTEGER, BIGI...","323","2180","","0","TD_ScaleFit Input - Analytics Database","38","Database Analytic Functions","27","Dense Input","11","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/TD_ScaleFit-Input","","","","","","221092","13988","13988","4.959","A+","372","87","4.276","28.747","Very Hard","11.518","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.341","","","","","","1.1","## Overview of Analytics Database Functions

In an Analytics Database, various functions facilitate data manipulation and analysis. These functions can be categorized into different types, including data cleaning, exploration, feature engineering, model training, and evaluation.

### Code Example Section

Here, we present SQL examples for common operations: `SELECT`, `UPDATE`, `DELETE`, and `CREATE` in the context of an Analytics Database.

#### 1. SELECT
The `SELECT` statement retrieves data from a database. You can specify the columns you want to retrieve and apply filters using `WHERE`.

```sql
SELECT customer_id, customer_name, order_total
FROM orders
WHERE order_date >= '2023-01-01';
```

#### 2. UPDATE
The `UPDATE` statement modifies existing records in a table. You can specify which records to update using `WHERE`.

```sql
UPDATE customers
SET loyalty_points = loyalty_points + 100
WHERE customer_id = 12345;
```

#### 3. DELETE
The `DELETE` statement removes records from a table based on a condition specified in `WHERE`.

```sql
DELETE FROM orders
WHERE order_date < '2022-01-01';
```

#### 4. CREATE
The `CREATE` statement is used to define a new table in the database.

```sql
CREATE TABLE customer_feedback (
    feedback_id INT PRIMARY KEY,
    customer_id INT,
    feedback_text VARCHAR(255),
    feedback_date DATE
);
```

## Summary

The Analytics Database provides a robust set of functions for data transformation and analysis, including various analytic functions for data cleaning, exploration, model training, and evaluation. The SQL examples above illustrate how to interact with an Analytics Database effectively.

### Keywords and Phrases

- TD_ScaleFit Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_SimpleImputeFit
- Unpack
- Data Exploration Functions
- MovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- Feature Engineering Transform Functions
- Antiselect
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer
- TD_FunctionFit
- TD_FunctionTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_PolynomialFeaturesFit
- TD_PolynomialFeaturesTransform
- TD_RandomProjectionFit
- TD_RowNormalizeFit
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_Unpivoting
- Feature Engineering Utility Functions
- TD_FillRowID
- TD_NumApply
- TD_RoundColumns
- TD_StrApply
- Model Training Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_KNN
- TD_OneClassSVM
- TD_SVM
- TD_XGBoost
- Model Scoring Functions
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_OneClassSVMPredict
- TD_SVMPredict
- TD_XGBoostPredict
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- Text Analytic Functions
- NGramSplitter
- TD_NaiveBayesTextClassifierPredict
- TD_NaiveBayesTextClassifierTrainer
- TD_SentimentExtractor
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Testing Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Path and Pattern Analysis Functions
- Attribution
- nPath
- Sessionize
- Dense Input
- Sparse Input","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/TD_ScaleFit-Input","2024-07-27 12:32:25"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/TD_ScaleFit-Output","text/html;charset=UTF-8","200","","Indexable","","TD_ScaleFit Output - Analytics Database","39","359","Dense Input Output Table Schema Column Data Type Description PartitionColumns Same as InputTable Columns on which input is partitioned. This appears only when the PartitionColumns argument is specified. TD_STATTYPE_SCLFIT VARCHAR (CHARACTER SET LATIN) Statistic names and parameters—see following table. TargetColumns RE...","323","2136","","0","TD_ScaleFit Output - Analytics Database","39","Database Analytic Functions","27","Dense Input","11","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/TD_ScaleFit-Output","","","","","","224285","15952","15952","5.655","A+","478","108","4.426","49.072","Hard","11.729","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.802","","","","","","1.1","# Summary

This document provides an overview of the Teradata Vantage™ Analytics Database, focusing on its analytic functions which facilitate data manipulation, exploration, and modeling. The key features include a variety of functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. It highlights the importance of understanding syntax, input/output structures, and the limitations when using certain functions.

The provided ""Code Example"" section demonstrates how to perform basic SQL operations such as `SELECT`, `INSERT`, `UPDATE`, and `DELETE`, which are foundational skills for interacting with an analytics database.

## Code Example

### 1. Create a Table
```sql
CREATE TABLE sales_data (
    sale_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    sale_amount DECIMAL(10, 2),
    sale_date DATE
);
```

### 2. Insert Data
```sql
INSERT INTO sales_data (sale_id, product_name, sale_amount, sale_date)
VALUES (1, 'Laptop', 1200.00, '2023-04-06'),
       (2, 'Smartphone', 800.00, '2023-04-07');
```

### 3. Select Data
```sql
SELECT * FROM sales_data WHERE sale_amount > 1000;
```

### 4. Update Data
```sql
UPDATE sales_data
SET sale_amount = sale_amount * 1.10
WHERE sale_date < '2023-04-07';
```

### 5. Delete Data
```sql
DELETE FROM sales_data WHERE sale_id = 1;
```

## Keywords and Phrases
- TD_ScaleFit Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_OutlierFilterTransform
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- Unpack
- Data Exploration Functions
- MovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- Feature Engineering Transform Functions
- Antiselect
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer
- TD_FunctionFit
- TD_FunctionTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_PolynomialFeaturesFit
- TD_PolynomialFeaturesTransform
- TD_RandomProjectionFit
- TD_RandomProjectionTransform
- TD_RowNormalizeFit
- TD_RowNormalizeTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_Unpivoting
- Feature Engineering Utility Functions
- TD_FillRowID
- TD_NumApply
- TD_RoundColumns
- TD_StrApply
- Model Training Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_KNN
- TD_OneClassSVM
- TD_SVM
- TD_VectorDistance
- TD_XGBoost
- Model Scoring Functions
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_OneClassSVMPredict
- TD_SVMPredict
- TD_XGBoostPredict
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- Text Analytic Functions
- NGramSplitter
- TD_NaiveBayesTextClassifierPredict
- TD_NaiveBayesTextClassifierTrainer
- TD_SentimentExtractor
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Testing Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Path and Pattern Analysis Functions
- Attribution
- nPath
- Sessionize
- Dense Input
- Sparse Input
- Output Table Schema
- Statistics values
- Teradata Links
- Related Documentation","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/TD_ScaleFit-Output","2024-07-27 12:30:27"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/TD_ScaleFit-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_ScaleFit Syntax | ScaleFit | Teradata Vantage - TD_ScaleFit Syntax - Analytics Database","90","808","See the syntax of the Analytics Database (SQL Engine) function TD_ScaleFit and read descriptions of its required and optional syntax elements.","142","880","","0","TD_ScaleFit Syntax | ScaleFit | Teradata Vantage - TD_ScaleFit Syntax - Analytics Database","90","Database Analytic Functions","27","TD_ScaleFit Syntax without Partition","36","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/TD_ScaleFit-Syntax","","","","","","212683","13443","13443","4.766","A+","327","94","3.479","40.572","Hard","11.953","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.615","","","","","","1.1","### Summary
The `TD_ScaleFit` function in Teradata Vantage is used to perform scaling on input data, either for dense or sparse input formats. This function allows users to apply various scaling methods, specify how to handle missing values, and define output attributes. It provides a comprehensive way to prepare data for further analytics, ensuring that the dataset is standardized or normalized according to the chosen parameters.

### Code Example

Here are examples demonstrating the basic operations (Select, Update, Delete, Create) in Teradata, including the use of the `TD_ScaleFit` function.

#### 1. **Create Table**
```sql
CREATE TABLE SalesData (
    SalesID INT,
    Product VARCHAR(100),
    Quantity INT,
    Price DECIMAL(10, 2)
);
```

#### 2. **Insert Data**
```sql
INSERT INTO SalesData (SalesID, Product, Quantity, Price)
VALUES (1, 'Widget', 10, 19.99),
       (2, 'Gadget', 5, 29.99);
```

#### 3. **Select Data**
```sql
SELECT * FROM SalesData;
```

#### 4. **Update Data**
```sql
UPDATE SalesData
SET Quantity = Quantity + 5
WHERE Product = 'Widget';
```

#### 5. **Delete Data**
```sql
DELETE FROM SalesData
WHERE SalesID = 2;
```

#### 6. **Using TD_ScaleFit**
```sql
TD_ScaleFit (
    ON SalesData AS InputTable
    OUT TABLE ScaledSalesData
    USING
    ScaleMethod ('MEAN', 'STD')
    for_dense_input
    TargetColumns ('Quantity', 'Price')
);
```

### Keywords and Phrases
- **TD_ScaleFit Syntax** 
- **ScaleFit** 
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/TD_ScaleFit-Syntax","2024-07-27 12:08:38"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform","text/html;charset=UTF-8","200","","Indexable","","TD_ScaleTransform Function | ScaleTransform | Teradata Vantage - TD_ScaleTransform - Analytics Database","103","973","This Analytics Database (SQL Engine) feature engineering transform function scales specified input table columns.","113","706","","0","TD_ScaleTransform Function | ScaleTransform | Teradata Vantage - TD_ScaleTransform - Analytics Database","103","Database Analytic Functions","27","Usage Considerations","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform","","","","","","212485","14171","14171","5.024","A+","453","95","4.768","49.790","Hard","12.110","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.537","","","","","","1.1","## Summary

The `TD_ScaleTransform` function in Teradata Vantage is a data preprocessing tool that scales specified input table columns based on the output of the `TD_ScaleFit` function. This function is crucial for preparing data for analysis and modeling by standardizing the range of input features. It accepts input data in both dense and sparse formats and supports various scaling methods, including Min-Max scaling and Standardization.

### Usage Considerations
- **Input Table**: Can have no partition or specific combinations of `PARTITION BY` and `ORDER BY`.
- **Fit Table**: Must be a DIMENSION table with optional `ORDER BY` or can have `PARTITION BY KEY`.
- **Encoding**: Requires UTF8 character set for UNICODE data.
- **Limitations**: Does not support Pass Through Characters (PTCs) and certain data types.

## Code Example

### 1. Create Table
```sql
CREATE TABLE sales_data (
    id INT,
    sales_amount FLOAT,
    region VARCHAR(50)
);
```

### 2. Insert Data
```sql
INSERT INTO sales_data (id, sales_amount, region) VALUES
(1, 250.00, 'North'),
(2, 300.00, 'South'),
(3, 150.00, 'East'),
(4, 400.00, 'West');
```

### 3. Select Data
```sql
SELECT * FROM sales_data;
```

### 4. Update Data
```sql
UPDATE sales_data
SET sales_amount = sales_amount * 1.10
WHERE region = 'North';
```

### 5. Delete Data
```sql
DELETE FROM sales_data
WHERE id = 3;
```

### 6. Scale Transform Example
```sql
-- Assuming TD_ScaleFit has been previously executed
SELECT TD_ScaleTransform(
    InputTable => sales_data,
    FitTable => scale_fit_results
) AS scaled_data
FROM sales_data;
```

## Keywords and Phrases
- TD_ScaleTransform Function
- ScaleTransform
- Teradata Vantage - TD_ScaleTransform
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Usage Notes
- Function Syntax Descriptions
- Input Table Rows Redistribution
- Partitioning
- Scaling Methods
- Fit and Transform Process
- Min-Max Scaling
- Standardization","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform","2024-07-27 12:01:13"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Examples-How-to-Use-TD_ScaleTransform","text/html;charset=UTF-8","200","","Indexable","","TD_ ScaleTransform Examples | ScaleTransform | Teradata Vantage - Examples: How to Use TD_ScaleTransform - Analytics Database","125","1192","See examples of the Analytics Database (SQL Engine) feature engineering transform function TD_ScaleTransform.","109","703","","0","TD_ ScaleTransform Examples | ScaleTransform | Teradata Vantage - Examples: How to Use TD_ScaleTransform - Analytics Database","125","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Examples-How-to-Use-TD_ScaleTransform","","","","","","209365","13490","13490","4.782","A+","118","47","2.511","43.690","Hard","11.261","1","5","","707","707","0","99.860","714","711","0","","","","","","","","","0.547","","","","","","1.1","## Summary of TD_ScaleTransform in Teradata Vantage

The `TD_ScaleTransform` function in Teradata Vantage is designed to standardize or scale numerical data. This function can be particularly useful in preparing data for machine learning models, as it helps to improve the performance and accuracy of the algorithms by bringing the data into a common scale. The function can handle different types of input, including dense and sparse data, and it can be used with or without partitioning.

### Code Example

Here's a basic overview of how to use the `TD_ScaleTransform` function, along with examples of `SELECT`, `UPDATE`, `DELETE`, and `CREATE` statements in Teradata.

#### 1. **Select**

```sql
SELECT *
FROM my_table
WHERE column_name = 'value';
```

#### 2. **Update**

```sql
UPDATE my_table
SET column_name = 'new_value'
WHERE column_name = 'old_value';
```

#### 3. **Delete**

```sql
DELETE FROM my_table
WHERE column_name = 'value_to_delete';
```

#### 4. **Create**

```sql
CREATE TABLE my_table (
    id INT,
    column_name VARCHAR(100),
    value NUMERIC
);
```

#### 5. **TD_ScaleTransform Example**

```sql
SELECT *
FROM TD_ScaleTransform (
    ON my_table
    USING
    (
        InputColumn1
        InputColumn2
        -- Additional input columns
    )
    RETURNING
    (
        ScaledColumn1
        ScaledColumn2
    )
) AS scaled_data;
```

### Keywords and Phrases

- TD_ScaleTransform Examples
- ScaleTransform
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- TD_ConvertTo
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterTransform
- TD_SimpleImputeTransform
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_Histogram
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- TD_ScaleFit
- TD_ScaleTransform Syntax
- Sparse Input without Partition
- Sparse Input with Partition
- Dense Input
- Example: How to Use TD_ScaleTransform","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Examples-How-to-Use-TD_ScaleTransform","2024-07-27 12:27:59"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Examples-How-to-Use-TD_ScaleTransform/Dense-Input","text/html;charset=UTF-8","200","","Indexable","","TD_ ScaleTransform Examples | ScaleTransform | Teradata Vantage - Dense Input - Analytics Database","98","917","See examples of the Analytics Database (SQL Engine) feature engineering transform function TD_ScaleTransform.","109","703","","0","TD_ ScaleTransform Examples | ScaleTransform | Teradata Vantage - Dense Input - Analytics Database","98","Database Analytic Functions","27","Example: InputTable: scale_input_table","38","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Examples-How-to-Use-TD_ScaleTransform/Dense-Input","","","","","","275399","17413","17413","6.173","A+","1233","404","3.052","100.000","Very Easy","11.480","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.562","","","","","","1.1","## Summary

In Teradata Vantage, the `TD_ScaleTransform` function is an important analytic function that allows for scaling of data based on a fitted model (from `TD_ScaleFit`). The scaling process can be applied to both dense and sparse inputs, and it provides an effective method for preprocessing data for further analysis or modeling. This document provides a comprehensive overview of the SQL commands for creating, selecting, updating, and deleting data within Teradata, along with examples to illustrate their usage.

### Code Examples

Here are the SQL code examples demonstrating the basic operations of **Select**, **Update**, **Delete**, and **Create** in Teradata:

#### 1. Create
```sql
CREATE TABLE example_table (
    id INTEGER,
    name VARCHAR(100),
    age INTEGER
);
```

#### 2. Select
```sql
SELECT * FROM example_table WHERE age > 30;
```

#### 3. Update
```sql
UPDATE example_table 
SET age = age + 1 
WHERE name = 'John Doe';
```

#### 4. Delete
```sql
DELETE FROM example_table 
WHERE age < 18;
```

### Keywords and Phrases

- TD_ScaleTransform Examples
- ScaleTransform
- Teradata Vantage - Dense Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- gjn1627595495337.ditamap
- dita:ditavalPath
- ayr1485454803741.ditaval
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This summary and examples provide a foundational understanding of how to interact with Teradata databases effectively. For more advanced operations or specific use cases, refer to Teradata's documentation or additional resources.","28","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Examples-How-to-Use-TD_ScaleTransform/Dense-Input","2024-07-27 11:52:16"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Examples-How-to-Use-TD_ScaleTransform/Sparse-Input-with-Partition","text/html;charset=UTF-8","200","","Indexable","","Sparse Input with Partition - Analytics Database","48","424","The following example assumes sparse input format for InputTable: CREATE MULTISET TABLE scale_input_part_sparse (pid int, passenger int, attribute_column varchar(20), attribute_value real);
insert into scale_input_part_sparse values (1, 2,   'age',  38);
insert into scale_input_part_sparse values (1, 2,   'fare', 71.28...","323","1929","","0","Sparse Input with Partition - Analytics Database","48","Database Analytic Functions","27","FitTable Generated with TD_ScaleFit Function","44","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Examples-How-to-Use-TD_ScaleTransform/Sparse-Input-with-Partition","","","","","","215632","14243","14243","5.049","A+","700","270","2.593","82.984","Easy","14.106","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.516","","","","","","1.1","## Summary

In this document, we explore the functionalities of Teradata Vantage's Analytics Database, focusing on the various analytic functions available. The functions are designed to assist in data analysis, including data cleaning, exploration, feature engineering, model training, scoring, and evaluation. We specifically highlight the use of sparse input with partitioning and provide SQL code examples for creating, selecting, updating, and deleting records from an analytics database.

## Code Examples

### 1. Create

To create a table for storing sparse input data, you can use the following SQL command:

```sql
CREATE MULTISET TABLE scale_input_part_sparse (
    pid INT,
    passenger INT,
    attribute_column VARCHAR(20),
    attribute_value REAL
);
```

### 2. Insert

Inserting records into the `scale_input_part_sparse` table can be done as follows:

```sql
INSERT INTO scale_input_part_sparse VALUES (1, 2, 'age', 38);
INSERT INTO scale_input_part_sparse VALUES (1, 2, 'fare', 71.2833);
INSERT INTO scale_input_part_sparse VALUES (1, 4, 'age', 35);
INSERT INTO scale_input_part_sparse VALUES (1, 4, 'fare', 53.1);
-- Add more insert statements as needed
```

### 3. Select

To retrieve data from the table, you can use a simple SELECT statement:

```sql
SELECT * FROM scale_input_part_sparse WHERE pid = 1;
```

### 4. Update

To update a specific record in the table, you can use the following SQL command:

```sql
UPDATE scale_input_part_sparse
SET attribute_value = 80.0
WHERE pid = 1 AND passenger = 2 AND attribute_column = 'fare';
```

### 5. Delete

To delete a record from the table, use the following SQL command:

```sql
DELETE FROM scale_input_part_sparse
WHERE pid = 1 AND passenger = 4 AND attribute_column = 'age';
```

## Keywords and Phrases

- Sparse Input with Partition - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- TD_ScaleFit
- TD_ScaleTransform
- SQL Queries
- Data Modeling
- Data Ingestion
- Data Analysis
- Data Visualization
- SQL Operations (Create, Read, Update, Delete)","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Examples-How-to-Use-TD_ScaleTransform/Sparse-Input-with-Partition","2024-07-27 11:54:40"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Examples-How-to-Use-TD_ScaleTransform/Sparse-Input-without-Partition","text/html;charset=UTF-8","200","","Indexable","","Sparse Input without Partition - Analytics Database","51","453","The following example assumes sparse input format for InputTable: create multiset table scale_input_sparse (passenger int, attribute_column varchar(20), attribute_value real);
insert into scale_input_sparse values (97,   'age',  71);
insert into scale_input_sparse values (97,   'fare', 34.6542);
insert into scale_input...","323","1901","","0","Sparse Input without Partition - Analytics Database","51","Database Analytic Functions","27","FitTable Generated with TD_ScaleFit Function","44","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Examples-How-to-Use-TD_ScaleTransform/Sparse-Input-without-Partition","","","","","","210493","13523","13523","4.794","A+","244","107","2.280","39.134","Hard","12.073","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.609","","","","","","1.1","## Summary of Sparse Input without Partition in Analytics Database

The Analytics Database provides various functions designed to handle sparse input data formats. In this context, sparse input refers to data that may not have values for all attributes across all records, making it crucial to effectively manage and analyze such data. Functions like `TD_ScaleFit` and `TD_ScaleTransform` are essential for scaling attributes in a way that accounts for missing values. This guide will cover the basic operations (Select, Update, Delete, Create) in the context of an analytics database that works with sparse input.

### Code Example

#### Create

```sql
CREATE MULTISET TABLE scale_input_sparse (
    passenger INT,
    attribute_column VARCHAR(20),
    attribute_value REAL
);
```

#### Insert

```sql
INSERT INTO scale_input_sparse VALUES (97, 'age', 71);
INSERT INTO scale_input_sparse VALUES (97, 'fare', 34.6542);
INSERT INTO scale_input_sparse VALUES (488, 'age', 58);
INSERT INTO scale_input_sparse VALUES (488, 'fare', 29.7);
INSERT INTO scale_input_sparse VALUES (505, 'age', 16);
INSERT INTO scale_input_sparse VALUES (505, 'fare', 86.5);
INSERT INTO scale_input_sparse VALUES (631, 'age', 80);
INSERT INTO scale_input_sparse VALUES (631, 'fare', 30);
INSERT INTO scale_input_sparse VALUES (873, 'age', 33);
INSERT INTO scale_input_sparse VALUES (873, 'fare', 5);
```

#### Select

```sql
SELECT * FROM scale_input_sparse ORDER BY passenger;
```

#### Update

```sql
UPDATE scale_input_sparse
SET attribute_value = 75
WHERE passenger = 505 AND attribute_column = 'age';
```

#### Delete

```sql
DELETE FROM scale_input_sparse
WHERE passenger = 873 AND attribute_column = 'fare';
```

### Keywords and Phrases

- Sparse Input without Partition
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Workload Management Configuration
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- TD_ScaleFit
- TD_ScaleTransform
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions

This summary provides a foundational understanding of how to work with sparse input in an analytics database, illustrating basic SQL operations and highlighting important keywords and phrases associated with the topic.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Examples-How-to-Use-TD_ScaleTransform/Sparse-Input-without-Partition","2024-07-27 11:56:36"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Optional-Syntax-Elements-for-TD_ScaleTransform","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_ScaleTransform - Analytics Database","67","628","Accumulate Specifies the InputTable columns to copy to the output table.","72","452","","0","Optional Syntax Elements for TD_ScaleTransform - Analytics Database","67","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Optional-Syntax-Elements-for-TD_ScaleTransform","","","","","","207456","12663","12663","4.489","A+","55","35","1.571","2.200","Very Hard","11.155","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.583","","","","","","1.1","# Overview of Teradata Vantage™ Analytics Database

The Teradata Vantage™ Analytics Database offers a comprehensive suite of analytic functions designed for data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analysis. This platform empowers data scientists and analysts to easily manipulate and analyze data through a robust set of SQL functions and features.

## Key Features and Functions

- **Data Cleaning Functions**: Functions like `TD_GetRowsWithMissingValues` and `TD_SimpleImputeTransform` help in preparing datasets by handling missing values.
- **Data Exploration Functions**: Analytic functions like `TD_Histogram` and `TD_CategoricalSummary` assist in understanding data distributions and categorical data insights.
- **Feature Engineering Functions**: Functions such as `TD_OneHotEncodingFit` and `TD_BinCodeTransform` allow users to create features that enhance model performance.
- **Model Training and Scoring**: Functions like `TD_GLM` and `TD_XGBoost` offer advanced machine learning capabilities for training and predicting outcomes.
- **Model Evaluation**: Functions such as `TD_RegressionEvaluator` and `TD_Silhouette` provide metrics to assess model performance.

## Code Examples

Here are SQL code snippets demonstrating common operations within the Teradata Vantage™ Analytics Database:

### Select
```sql
SELECT customer_id, purchase_amount
FROM sales
WHERE purchase_date >= '2023-01-01';
```

### Update
```sql
UPDATE customers
SET status = 'inactive'
WHERE last_purchase < '2022-01-01';
```

### Delete
```sql
DELETE FROM orders
WHERE order_status = 'cancelled'
AND order_date < '2022-01-01';
```

### Create
```sql
CREATE TABLE sales_summary (
    customer_id INT,
    total_sales DECIMAL(10, 2)
);
```

## Optional Syntax Elements for TD_ScaleTransform
- InputTable: The table containing the data to be transformed.
- OutputTable: The destination table for the transformed data.
- ScalingMethod: Method to apply (e.g., MinMax, Standard).
- Additional parameters for specific transformations.

## Keywords and Phrases
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Workload Management**
- **Non-Deterministic Behavior**
- **Spool Space Exhaustion**
- **Function Performance**
- **Input Table Rows Redistribution**
- **Usage Notes**
- **Analytic Functions** 

These elements encapsulate the capabilities and structure of the Teradata Vantage™ Analytics Database, making it a powerful tool for advanced data analytics.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Optional-Syntax-Elements-for-TD_ScaleTransform","2024-07-27 11:42:58"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Required-Syntax-Elements-for-TD_ScaleTransform","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_ScaleTransform - Analytics Database","67","632","ON clause Specifies the table name, view name or query as an InputTable and FitTable. Applicable for dense and sparse input format. AttributeNameColumn Specifies the attribute or features names. Argument for sparse input, disallowed otherwise. AttributeValueColumn Specifies the attribute or features values. Argument fo...","323","2015","","0","Required Syntax Elements for TD_ScaleTransform - Analytics Database","67","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Required-Syntax-Elements-for-TD_ScaleTransform","","","","","","208545","12937","12937","4.586","A+","92","43","2.140","7.876","Very Hard","11.233","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.529","","","","","","1.1","## Summary

Teradata's Analytics Database offers various analytic functions that facilitate data analysis and feature engineering. These include functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Understanding how to manipulate data using SQL commands—such as SELECT, UPDATE, DELETE, and CREATE—is essential for effective data management and analysis in this context.

## Code Examples

### 1. SELECT
The `SELECT` statement is used to query data from a database.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

### 2. UPDATE
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

### 3. DELETE
The `DELETE` statement is used to remove existing records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

### 4. CREATE
The `CREATE` statement is used to create a new table or database.

```sql
CREATE TABLE new_table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Keywords and Phrases

- Required Syntax Elements for TD_ScaleTransform
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Teradata Vantage™
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- Workload Management Configuration for Analytics Database
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This structured format provides a clear overview of the essential elements related to Teradata's Analytics Database, including basic SQL commands for data manipulation.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Required-Syntax-Elements-for-TD_ScaleTransform","2024-07-27 12:00:14"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/TD_ScaleTransform-Input","text/html;charset=UTF-8","200","","Indexable","","TD_ScaleTransform Input - Analytics Database","44","414","Dense Input InputTable Schema Column Name Data Type Description PartitionColumns Any Columns on which to partition the input. TargetColumns BYTEINT, SMALLINT,INTEGER,BIGINT, DECIMAL/NUMERIC, FLOAT, REAL, DOUBLE PRECISION Column to be scaled. FitTable Schema Column Data Type Description PartitionColumns Same as InputTab...","323","2177","","0","TD_ScaleTransform Input - Analytics Database","44","Database Analytic Functions","27","Dense Input","11","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/TD_ScaleTransform-Input","","","","","","215499","13618","13618","4.828","A+","199","60","3.317","1.109","Very Hard","11.303","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.779","","","","","","1.1","## Summary

The Teradata Analytics Database provides a rich set of analytic functions to facilitate data processing, transformation, and analysis. This guide focuses on basic SQL operations—Select, Update, Delete, and Create—integral to managing and querying data within the database environment. Each operation is crucial for data manipulation, allowing users to effectively manage their datasets for analytics and reporting.

## Code Example

### 1. Create Table
To create a new table in the database, you can use the following SQL command:

```sql
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    HireDate DATE,
    Salary DECIMAL(10, 2)
);
```

### 2. Select Data
To retrieve data from the table, use the SELECT statement:

```sql
SELECT FirstName, LastName, Salary
FROM Employees
WHERE HireDate >= '2021-01-01';
```

### 3. Update Data
To modify existing records, use the UPDATE statement:

```sql
UPDATE Employees
SET Salary = Salary * 1.10
WHERE HireDate < '2020-01-01';
```

### 4. Delete Data
To remove records from the table, use the DELETE statement:

```sql
DELETE FROM Employees
WHERE Salary < 30000;
```

## Keywords and Phrases
- TD_ScaleTransform Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Examples: How to Use [Various Functions]","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/TD_ScaleTransform-Input","2024-07-27 11:47:32"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/TD_ScaleTransform-Output","text/html;charset=UTF-8","200","","Indexable","","TD_ScaleTransform Output - Analytics Database","45","430","Dense Input Output Table Schema Column Data Type Description AccumlateColumns Any Columns copied from input to output. TargetColumns REAL Columns containing scaled values. Sparse Input Output Table Schema Column Name Data Type Description AccumulateColumns Any Columns copied from input to output. AttributeNameColumn VA...","323","2159","","0","TD_ScaleTransform Output - Analytics Database","45","Database Analytic Functions","27","Dense Input","11","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/TD_ScaleTransform-Output","","","","","","211033","13191","13191","4.676","A+","95","44","2.159","8.728","Very Hard","11.115","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.412","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a rich set of analytic functions that empower users to perform various data operations, including data transformation, model training, and hypothesis testing. Among these functions, the `TD_ScaleTransform` function is particularly useful for scaling numeric data, which can help in data preprocessing for machine learning algorithms.

This document focuses on providing code examples for essential SQL operations such as selecting, updating, deleting, and creating records in a database. These operations are fundamental for managing data within the Analytics Database.

## Code Examples

### 1. Select
The `SELECT` statement retrieves data from a database table.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

### 3. Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

### 4. Create
The `CREATE` statement allows you to create a new table in the database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Keywords and Phrases

- TD_ScaleTransform Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This summary and code examples should serve as a foundational reference for working with the Teradata Vantage™ Analytics Database and executing fundamental SQL operations.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/TD_ScaleTransform-Output","2024-07-27 12:05:03"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/TD_ScaleTransform-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_ScaleTransform Syntax | ScaleTransform | Teradata Vantage - TD_ScaleTransform Syntax - Analytics Database","108","1021","See the syntax of the Analytics Database (SQL Engine) function TD_ScaleTransform and read descriptions of its required and optional syntax elements.","148","930","","0","TD_ScaleTransform Syntax | ScaleTransform | Teradata Vantage - TD_ScaleTransform Syntax - Analytics Database","108","Database Analytic Functions","27","Dense Input","11","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/TD_ScaleTransform-Syntax","","","","","","211222","13094","13094","4.642","A+","227","84","2.702","24.830","Very Hard","11.626","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.561","","","","","","1.1","Error: {
    ""error"": {
        ""message"": ""You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors."",
        ""type"": ""insufficient_quota"",
        ""param"": null,
        ""code"": ""insufficient_quota""
    }
}
","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/TD_ScaleTransform-Syntax","2024-07-27 11:25:15"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit","text/html;charset=UTF-8","200","","Indexable","","TD_TargetEncodingFit Function | TargetEncodingFit - TD_TargetEncodingFit - Analytics Database","93","857","The Analytics Database TD_TargetEncodingFit transform function identifies and outputs distinct categories and the hyperparameter associated with each category.","159","1012","","0","TD_TargetEncodingFit Function | TargetEncodingFit - TD_TargetEncodingFit - Analytics Database","93","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit","","","","","","210738","13632","13632","4.833","A+","218","57","3.825","28.320","Very Hard","11.531","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.555","","","","","","1.1","## Summary

The `TD_TargetEncodingFit` function in Teradata Vantage is used to prepare categorical variables for machine learning tasks by encoding them based on the target variable's expected value. This function is particularly useful for scenarios involving binary classification, regression, and multiclass classification. It generates the necessary hyperparameters that will later be utilized by the `TD_TargetEncodingTransform` function to perform the actual encoding. 

### Key Features:
- **Input Requirements**: Accepts an InputTable and a CategoricalTable.
- **Character Set**: Requires the UTF8 client character set.
- **Limitations**: Supports a maximum of 4000 unique categories and a maximum category length of 128 characters.
- **Performance Note**: Caution is advised when dealing with columns that have a large number of distinct categories, as they may slow down query execution.

## Code Example

Here’s how to perform basic operations in Teradata SQL, including Select, Update, Delete, and Create statements.

### Select
```sql
SELECT *
FROM employees
WHERE department = 'Sales';
```

### Update
```sql
UPDATE employees
SET salary = salary * 1.1
WHERE performance_rating = 'Excellent';
```

### Delete
```sql
DELETE FROM employees
WHERE termination_date < '2020-01-01';
```

### Create
```sql
CREATE TABLE new_employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    hire_date DATE,
    department VARCHAR(50)
);
```

## Keywords and Phrases
- TD_TargetEncodingFit Function
- TargetEncodingFit
- TD_TargetEncodingFit
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Language English (United States)
- Last Update 2024-04-06
- Product Category Teradata Vantage™
- Analytics Database Analytic Functions
- Data Cleaning Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Limitations When Using PARTITION BY
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion
- Recommendations for Using Analytic Functions
- TD_TargetEncodingTransform
- Function Syntax Descriptions
- Input Table Rows Redistribution
- How to Read Syntax
- Function Names with and without TD Prefix

This structured approach ensures a clear understanding of the `TD_TargetEncodingFit` function and its context within Teradata Vantage while providing essential SQL operations for practical application.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit","2024-07-27 11:38:29"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Examples","text/html;charset=UTF-8","200","","Indexable","","TD_TargetEncodingFit Examples | TargetEncodingFit - TD_TargetEncodingFit Examples - Analytics Database","102","959","See examples of the Analytics Database (SQL Engine) feature engineering transform function TD_TargetEncodingFit.","112","719","","0","TD_TargetEncodingFit Examples | TargetEncodingFit - TD_TargetEncodingFit Examples - Analytics Database","102","Database Analytic Functions","27","TD_TargetEncodingFit Example","28","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Examples","","","","","","243733","15656","15656","5.550","A+","737","215","3.428","69.740","Normal","11.593","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.169","","","","","","1.1","### Summary

This document provides an overview of various SQL operations and analytic functions available in Teradata Vantage, focusing on data manipulation and analytic functions relevant to the Analytics Database. The primary operations covered include `SELECT`, `INSERT`, `UPDATE`, and `DELETE`, along with examples of how to use them effectively. Additionally, it introduces the `TD_TargetEncodingFit` function, which is useful in machine learning contexts for encoding categorical variables based on their relationship with a target variable.

### Code Examples

#### 1. Create a Table
The `CREATE TABLE` statement is used to create a new table in the database with specified columns and data types.

```sql
CREATE TABLE titanic_train (
   passenger INTEGER,
   survived INTEGER,
   pclass INTEGER,
   name VARCHAR(90) CHARACTER SET LATIN NOT CASESPECIFIC,
   gender VARCHAR(10) CHARACTER SET LATIN NOT CASESPECIFIC,
   age INTEGER,
   sibsp INTEGER,
   parch INTEGER,
   ticket VARCHAR(20) CHARACTER SET LATIN NOT CASESPECIFIC,
   fare FLOAT,
   cabin VARCHAR(20) CHARACTER SET LATIN NOT CASESPECIFIC,
   embarked VARCHAR(10) CHARACTER SET LATIN NOT CASESPECIFIC
) PRIMARY INDEX (passenger);
```

#### 2. Insert Data
The `INSERT INTO` statement adds new records to the table.

```sql
INSERT INTO titanic_train (passenger, survived, pclass, name, gender, age, sibsp, parch, ticket, fare, cabin, embarked)
VALUES (2, 1, 1, 'Cumings; Mrs. John Bradley (Florence Briggs Thayer)', 'female', 38, 1, 0, 'PC 17599', 71.2833, 'C85', 'C');
```

#### 3. Select Data
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT * FROM titanic_train ORDER BY passenger;
```

#### 4. Update Data
The `UPDATE` statement modifies existing records in the table.

```sql
UPDATE titanic_train 
SET fare = fare * 1.1 
WHERE survived = 1;
```

#### 5. Delete Data
The `DELETE` statement removes records from the table based on a condition.

```sql
DELETE FROM titanic_train 
WHERE age IS NULL;
```

### TD_TargetEncodingFit Examples
The `TD_TargetEncodingFit` function is used for encoding categorical variables based on their relationship to a target variable. Below are examples of how to use this function.

#### Example 1: CBM_BETA Encoding
```sql
TD_TargetEncodingFit (
   ON titanic_train AS InputTable
   ON categoryTable AS CategoryTable DIMENSION
   USING
   EncoderMethod('CBM_BETA')
   TargetColumns('gender','embarked')
   ResponseColumn ('survived')
   DefaultValues(-1, -2)
);
```

#### Example 2: CBM_DIRICHLET Encoding
```sql
TD_TargetEncodingFit (
   ON titanic_train AS InputTable
   ON categoryTable AS CategoryTable DIMENSION
   USING
   EncoderMethod('CBM_DIRICHLET')
   TargetColumns('gender','embarked')
   ResponseColumn ('pclass')
   DefaultValues(-1, -2)
);
```

#### Example 3: CBM_GAUSSIAN_INVERSE_GAMMA Encoding
```sql
TD_TargetEncodingFit (
   ON titanic_train AS InputTable
   ON categoryTable AS CategoryTable DIMENSION
   USING
   EncoderMethod('CBM_GAUSSIAN_INVERSE_GAMMA')
   TargetColumns('gender','embarked')
   ResponseColumn ('age')
   DefaultValues(-1, -2)
);
```

### Keywords and Phrases
- TD_TargetEncodingFit Examples
- TargetEncodingFit
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- AMP Configuration
- Recommendations for Using Analytic Functions

This structured approach provides a concise reference for utilizing SQL operations and analytic functions in Teradata Vantage, particularly in the context of machine learning and data analysis.","29","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Examples","2024-07-27 12:40:34"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Input","text/html;charset=UTF-8","200","","Indexable","","TD_TargetEncodingFit Input - Analytics Database","47","434","TD_TargetEncodingFit Input The input table schema is as follows: Column Name Data Type Description Charset MaxValueLen target_column CHAR, VARCHAR The column that contains the categorical values to be encoded. LATIN/UNICODE 128 characters response_column INTEGER for classification and NUMERIC group for regression The c...","323","2119","","0","TD_TargetEncodingFit Input - Analytics Database","47","Database Analytic Functions","27","TD_TargetEncodingFit Input","26","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Input","","","","","","211856","13431","13431","4.761","A+","142","50","2.840","24.624","Very Hard","11.229","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.361","","","","","","1.1","# Teradata Vantage™ Analytics Database Overview

Teradata Vantage™ is an advanced analytics platform that provides a wide range of analytic functions for data processing and analysis. It encompasses various categories of functions such as data cleaning, feature engineering, model training, scoring, and evaluation, among others. This document outlines key functionalities and includes examples of basic database operations: select, update, delete, and create.

## Summary of Key Features
- **Analytics Database Analytic Functions**: A comprehensive set of functions for data analysis.
- **Deployment Options**: Available on VantageCloud and VantageCore.
- **Enterprise Edition**: Designed for large-scale enterprise applications.
- **Compatibility**: Works with VMware environments.
- **Release Information**: Current release is version 17.20, published in June 2022.
- **Language Support**: English (United States).

### Code Example Section

Below are simple SQL examples demonstrating basic operations in Teradata's Analytics Database.

#### 1. SELECT Statement
To retrieve data from a table:
```sql
SELECT target_column, response_column
FROM your_table
WHERE target_column IS NOT NULL;
```

#### 2. INSERT Statement
To add a new record to a table:
```sql
INSERT INTO your_table (target_column, response_column)
VALUES ('NewCategory', 100);
```

#### 3. UPDATE Statement
To modify existing records in a table:
```sql
UPDATE your_table
SET response_column = 150
WHERE target_column = 'SomeCategory';
```

#### 4. DELETE Statement
To remove records from a table:
```sql
DELETE FROM your_table
WHERE target_column = 'OldCategory';
```

### Keywords and Phrases
- **TD_TargetEncodingFit Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number** - 17.20
- **Published** - June 2022
- **Language** - English (United States)
- **Last Update** - 2024-04-06
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category** - Teradata Vantage™
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Sessionize**
- **nPath**

This structure provides a foundational understanding of the Teradata Vantage™ Analytics Database and key operations within it, along with a concise reference for further exploration.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Input","2024-07-27 12:03:25"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Output","text/html;charset=UTF-8","200","","Indexable","","TD_TargetEncodingFit Output - Analytics Database","48","450","TD_TargetEncodingFit Primary Output Table Schema The CBM_BETA encoder output schema is as follows: Column Name Data Type Description Charset MaxValueLen TD_ColumnName_TEFIT VARCHAR Contains the names of the target column. Unicode 128 characters TD_Category_TEFIT VARCHAR Contains the category values for each of the targ...","323","2167","","0","TD_TargetEncodingFit Output - Analytics Database","48","Database Analytic Functions","27","TD_TargetEncodingFit Primary Output Table Schema","48","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Output","","","","","","226545","13984","13984","4.957","A+","454","128","3.547","11.674","Very Hard","11.660","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.580","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database provides a suite of analytic functions that enable users to perform various data processing tasks, including data cleaning, feature engineering, model training, and evaluation. This document covers key SQL operations (Select, Update, Delete, Create) along with examples relevant to the analytics database context.

### Code Examples

#### 1. Select

The `SELECT` statement is used to query data from a database table.

```sql
SELECT 
    TD_ColumnName_TEFIT, 
    TD_Category_TEFIT 
FROM 
    analytics_table 
WHERE 
    TD_CategoryCount_TEFIT > 5;
```

#### 2. Update

The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE 
    analytics_table 
SET 
    TD_CategoryCount_TEFIT = TD_CategoryCount_TEFIT + 1 
WHERE 
    TD_Category_TEFIT = 'CategoryA';
```

#### 3. Delete

The `DELETE` statement removes records from a table.

```sql
DELETE FROM 
    analytics_table 
WHERE 
    TD_Category_TEFIT = 'CategoryB' AND 
    TD_CategoryCount_TEFIT < 3;
```

#### 4. Create

The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE new_analytics_table (
    TD_ColumnName_TEFIT VARCHAR(128),
    TD_Category_TEFIT VARCHAR(128),
    TD_CategoryCount_TEFIT SMALLINT
);
```

### Keywords and Phrases

- **TD_TargetEncodingFit Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number** - 17.20
- **Published** - June 2022
- **Language** - English (United States)
- **Last Update** - 2024-04-06
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category** - Teradata Vantage™
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Recommendations for Using Analytic Functions**
- **Example: How to Use**
- **Primary Output Table Schema**
- **Secondary Output Table Schema**

This summary and the accompanying examples provide a foundational understanding of key SQL operations in the context of the Teradata Vantage™ Analytics Database and its analytic functions.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Output","2024-07-27 11:55:12"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_TargetEncodingFit Syntax | TargetEncodingFit - TD_TargetEncodingFit Syntax - Analytics Database","98","905","See the syntax of the Analytics Database (SQL Engine) TD_TargetEncodingFit function and read descriptions of its required and optional syntax elements.","151","946","","0","TD_TargetEncodingFit Syntax | TargetEncodingFit - TD_TargetEncodingFit Syntax - Analytics Database","98","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Syntax","","","","","","209479","13216","13216","4.685","A+","125","58","2.155","0.000","Very Hard","11.521","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.523","","","","","","1.1","# Teradata Vantage™ TD_TargetEncodingFit Overview

**TD_TargetEncodingFit** is a function used in Teradata Vantage™ for implementing target encoding, a method for converting categorical variables into numerical values based on their relationship with a target variable. This process is crucial in preparing data for machine learning models, especially when dealing with categorical data that can significantly influence model performance.

## Summary
The `TD_TargetEncodingFit` function incorporates various parameters to define how the encoding should be performed, including the method of encoding, target columns, response column, and several prior settings. It is flexible and can be utilized in various contexts, such as within SELECT statements or during the creation of tables and views.

## Code Example
Here are some basic SQL operations (SELECT, UPDATE, DELETE, CREATE) involving the `TD_TargetEncodingFit` function.

### 1. Create a Table
```sql
CREATE TABLE encoded_data AS (
    SELECT *
    FROM TD_TargetEncodingFit (
        ON source_table AS InputTable
        ON category_table AS CategoryTable DIMENSION
        OUT TABLE OutputTable (encoded_output)
        USING 
        EncoderMethod('CBM_BETA')
        TargetColumns ('category_column')
        ResponseColumn ('target_variable')
    )
) WITH DATA;
```

### 2. Select Data
```sql
SELECT *
FROM encoded_data;
```

### 3. Update Data
```sql
UPDATE encoded_data
SET encoded_output = new_value
WHERE condition;
```

### 4. Delete Data
```sql
DELETE FROM encoded_data
WHERE condition;
```

## Keywords and Phrases
- **TD_TargetEncodingFit Syntax**
- **TargetEncodingFit**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language English (United States)**
- **Last Update 2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Function Names with and without TD Prefix**
- **Example Usage**","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Syntax","2024-07-27 12:42:36"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","TD_TargetEncodingFit Syntax Elements - Analytics Database","57","538","EncoderMethod [Required] If the response variable is following a binary classification, for example, values are either 0 or 1, use EncoderMethod as CBM_BETA. If the response variable is following a multi-class classification, for example. values are (1,...,k, where k is the number of classes), use EncoderMethod as CBM_...","323","1958","","0","TD_TargetEncodingFit Syntax Elements - Analytics Database","57","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Syntax-Elements","","","","","","210521","13417","13417","4.756","A+","345","92","3.750","35.790","Hard","11.995","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.687","","","","","","1.1","# Teradata Vantage™ Analytics Database: Summary and Code Examples

The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions designed for data exploration, feature engineering, model training, and evaluation. This guide highlights essential SQL operations such as selecting, updating, deleting, and creating records, alongside specific analytic functions relevant to various data processing tasks.

## Code Examples

### 1. Select
To retrieve data from a table, you can use the SELECT statement. Here’s an example of selecting specific columns from a table:

```sql
SELECT column1, column2, column3
FROM your_table
WHERE condition;
```

### 2. Update
To modify existing records in a table, use the UPDATE statement. The following example updates a column's value based on a condition:

```sql
UPDATE your_table
SET column1 = new_value
WHERE condition;
```

### 3. Delete
To remove records from a table, the DELETE statement is used. The example below demonstrates how to delete records that meet a specific condition:

```sql
DELETE FROM your_table
WHERE condition;
```

### 4. Create
To create a new table, you can use the CREATE TABLE statement. Here’s an example of creating a table with specified columns and data types:

```sql
CREATE TABLE new_table (
    id INT,
    name VARCHAR(100),
    created_at TIMESTAMP
);
```

## Keywords and Phrases

- **TD_TargetEncodingFit**: Syntax Elements, Input Table, Output
- **Database Analytic Functions**: Data Cleaning Functions, Feature Engineering Functions, Model Training Functions
- **Deployment**: VantageCloud, VantageCore, Edition, Enterprise
- **IntelliFlex**: VMware, Product, Analytics Database
- **Release Number**: 17.20, Published June 2022
- **Language**: English (United States), Last Update 2024-04-06
- **Product Category**: Teradata Vantage™
- **Usage Notes**: How to Read Syntax, Input Table Rows Redistribution
- **Function Syntax Descriptions**: Limitations, Recommendations, Performance
- **Analytic Function Categories**: Data Exploration Functions, Text Analytic Functions, Hypothesis Testing Functions
- **Model Evaluation Functions**: TD_ClassificationEvaluator, TD_RegressionEvaluator
- **Feature Engineering Utility Functions**: TD_NumApply, TD_RoundColumns, TD_StrApply

This summary provides a foundational understanding of basic SQL operations and highlights some of the sophisticated capabilities of Teradata Vantage™ for analytics, enabling users to efficiently manage and analyze their data.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Syntax-Elements","2024-07-27 11:45:42"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Usage-Notes","text/html;charset=UTF-8","200","","Indexable","","TD_TargetEncodingFit Usage Notes | TargetEncodingFit - TD_TargetEncodingFit Usage Notes - Analytics Database","108","1013","Learn about the usage considerations for the Analytics Database TD_TargetEncodingFit transform function.","104","668","","0","TD_TargetEncodingFit Usage Notes | TargetEncodingFit - TD_TargetEncodingFit Usage Notes - Analytics Database","108","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Usage-Notes","","","","","","208517","13101","13101","4.644","A+","174","56","3.107","26.216","Very Hard","11.500","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.468","","","","","","1.1","## Summary

The `TD_TargetEncodingFit` function in Teradata Vantage™ is used for target encoding categorical variables based on the mean of the target variable. This function is valuable in predictive modeling as it transforms categorical variables into numerical format, which is essential for many machine learning algorithms. 

### Key Usage Notes:
- **Input Requirements**: The input table can either have no partition or use a `PARTITION BY ANY` clause.
- **Category Table**: A `CategoryTable` is required, which can be generated using the `TD_CategoricalSummary` function.
- **Null Handling**: Null categories are ignored in encoding.
- **Default Value**: The `DefaultValue` argument must be specified when using `TD_TargetEncodingTransform` to handle missing categories.
- **Mandatory Arguments**: The `EncoderMethod`, `TargetColumns`, and `ResponseColumn` are mandatory inputs.

## Code Example

Here are examples of basic SQL operations: `SELECT`, `UPDATE`, `DELETE`, and `CREATE`.

### SELECT
```sql
SELECT Column1, Column2 
FROM YourTable 
WHERE Condition;
```

### UPDATE
```sql
UPDATE YourTable 
SET Column1 = NewValue 
WHERE Condition;
```

### DELETE
```sql
DELETE FROM YourTable 
WHERE Condition;
```

### CREATE
```sql
CREATE TABLE NewTable (
    Column1 DataType,
    Column2 DataType,
    Column3 DataType
);
```

## Keywords and Phrases
- **TD_TargetEncodingFit Usage Notes**
- **TargetEncodingFit**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published Date**
- **Last Update**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Input Table Schemas**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Accumulated Columns Impact on Function Performance**
- **TD_CategoricalSummary**
- **EncoderMethod**
- **TargetColumns**
- **ResponseColumn**
- **DefaultValue Argument**
- **Null Categories** 

This structured overview provides insights into the use of `TD_TargetEncodingFit`, along with practical SQL examples and relevant keywords for further exploration.","27","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Usage-Notes","2024-07-27 12:23:48"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform","text/html;charset=UTF-8","200","","Indexable","","TD_TargetEncodingTransform | TargetEncodingTransform - TD_TargetEncodingTransform - Analytics Database","102","988","The Analytics Database TD_TargetEncodingTransform function takes the InputTable and a FitTable generated by the TD_TargetEncodingFit function for encoding.","155","1001","","0","TD_TargetEncodingTransform | TargetEncodingTransform - TD_TargetEncodingTransform - Analytics Database","102","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform","","","","","","209847","13259","13259","4.700","A+","113","47","2.404","3.002","Very Hard","11.287","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.588","","","","","","1.1","# Overview of Teradata Vantage™ Analytics Database Functions

Teradata Vantage™ provides a robust set of analytic functions that enable data scientists and analysts to perform a wide range of operations on their data. This includes data cleaning, exploration, feature engineering, model training, and evaluation functions. The analytics database is optimized for high-performance data processing and analytics, making it an essential tool for organizations looking to leverage their data for insights.

## Code Example Section

This section provides basic SQL commands commonly used in database operations. The examples demonstrate how to create a table, insert data, select data, update records, and delete records.

### 1. Create a Table
```sql
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    HireDate DATE,
    Salary DECIMAL(10, 2)
);
```

### 2. Insert Data
```sql
INSERT INTO Employees (EmployeeID, FirstName, LastName, HireDate, Salary)
VALUES (1, 'John', 'Doe', '2022-01-15', 60000.00),
       (2, 'Jane', 'Smith', '2021-05-12', 65000.00);
```

### 3. Select Data
```sql
SELECT * FROM Employees WHERE Salary > 60000;
```

### 4. Update Data
```sql
UPDATE Employees
SET Salary = Salary * 1.05
WHERE HireDate < '2022-01-01';
```

### 5. Delete Data
```sql
DELETE FROM Employees
WHERE EmployeeID = 1;
```

## Keywords and Phrases

- **TD_TargetEncodingTransform**
- **TargetEncodingTransform**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Function Names with and without TD Prefix**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Recommendations for Using Analytic Functions**

These keywords and phrases encapsulate the core functionalities and considerations when working with the Teradata Vantage™ Analytics Database and its analytic functions.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform","2024-07-27 12:49:03"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Examples","text/html;charset=UTF-8","200","","Indexable","","TD_TargetEncodingTransform Examples - Analytics Database","56","547","TD_TargetEncodingTransform Example InputTable: The following table contains a subset of titantic dataset. CREATE TABLE titanic_train (
   passenger INTEGER,
   survived INTEGER,
   pclass INTEGER,
   name VARCHAR(90) CHARACTER SET LATIN NOT CASESPECIFIC,
   gender VARCHAR(10) CHARACTER SET LATIN NOT CASESPECIFIC,
   ag...","323","2072","","0","TD_TargetEncodingTransform Examples - Analytics Database","56","Database Analytic Functions","27","TD_TargetEncodingTransform Example","34","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Examples","","","","","","257681","16299","16299","5.778","A+","924","351","2.632","83.672","Easy","11.559","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.730","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides various analytic functions, including target encoding transformations that are useful in machine learning contexts. Target encoding involves encoding categorical variables based on the response variable to improve model performance. This document provides a structured overview of how to use the `TD_TargetEncodingFit` and `TD_TargetEncodingTransform` functions, along with basic SQL operations such as Select, Update, Delete, and Create.

## Code Example

### Create
To create a table that will contain Titanic passenger data:

```sql
CREATE TABLE titanic_train (
   passenger INTEGER,
   survived INTEGER,
   pclass INTEGER,
   name VARCHAR(90) CHARACTER SET LATIN NOT CASESPECIFIC,
   gender VARCHAR(10) CHARACTER SET LATIN NOT CASESPECIFIC,
   age INTEGER,
   sibsp INTEGER,
   parch INTEGER,
   ticket VARCHAR(20) CHARACTER SET LATIN NOT CASESPECIFIC,
   fare FLOAT,
   cabin VARCHAR(20) CHARACTER SET LATIN NOT CASESPECIFIC,
   embarked VARCHAR(10) CHARACTER SET LATIN NOT CASESPECIFIC)
PRIMARY INDEX (passenger);
```

### Insert
Inserting sample data into the `titanic_train` table:

```sql
INSERT INTO titanic_train (passenger, survived, pclass, name, gender, age, sibsp, parch, ticket, fare, cabin, embarked) 
VALUES (2, 1, 1, 'Cumings; Mrs. John Bradley (Florence Briggs Thayer)', 'female', 38, 1, 0, 'PC 17599', 71.2833, 'C85', 'C');
```

### Select
To retrieve all records from the `titanic_train` table:

```sql
SELECT * FROM titanic_train ORDER BY passenger;
```

### Update
To update a specific record (for example, changing the fare for passenger 2):

```sql
UPDATE titanic_train 
SET fare = 80.0 
WHERE passenger = 2;
```

### Delete
To delete a record from the table (for example, removing passenger 7):

```sql
DELETE FROM titanic_train 
WHERE passenger = 7;
```

### Target Encoding Example
To perform target encoding, you can use the following queries:

1. **Fit the Model:**
```sql
SELECT * FROM TD_TargetEncodingFit (
   ON titanic_train AS InputTable
   ON categoryTable AS CategoryTable DIMENSION
   OUT PERMANENT TABLE OutputTable(betaEncFitTbl)    
   USING    
   EncoderMethod('CBM_BETA')
   TargetColumns('gender','embarked')
   ResponseColumn ('survived')
   DefaultValues(-1, -2)
) AS dt;
```

2. **Transform Data:**
```sql
SELECT * FROM TD_TargetEncodingTransform (
   ON titanic_train AS InputTable
   ON betaEncFitTbl AS FitTable DIMENSION
   USING
   Accumulate('passenger')
) AS dt ORDER BY passenger;
```

## Keywords and Phrases

- **TD_TargetEncodingTransform Examples**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware Product**
- **Analytics Database Release Number**
- **Language: English (United States)**
- **Last Update**
- **Product Category: Teradata Vantage™**
- **Data Cleaning Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **TD_ColumnTransformer**
- **TD_OneHotEncodingTransform**
- **TD_OrdinalEncodingTransform**
- **TD_ScaleTransform**
- **TD_TargetEncodingFit**
- **TD_DecisionForest**
- **TD_XGBoost**
- **TD_SVMPredict**
- **TD_ZTest**
- **TD_ANOVA**
- **TD_ChiSq**","32","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Examples","2024-07-27 12:43:34"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Input","text/html;charset=UTF-8","200","","Indexable","","TD_TargetEncodingTransform Input - Analytics Database","53","505","TD_TargetEncodingTransform Input The input table schema is as follows: Column Name Data Type Description Charset MaxLen target_column CHAR or VARCHAR The column that needs to be encoded. LATIN or UNICODE 128 characters The FitTable schema is the same as the output schema of TD_TargetEncodingFit Output.","303","2009","","0","TD_TargetEncodingTransform Input - Analytics Database","53","Database Analytic Functions","27","TD_TargetEncodingTransform Input","32","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Input","","","","","","209346","13252","13252","4.698","A+","86","41","2.098","22.718","Very Hard","11.158","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","1.014","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a wide array of analytic functions designed to facilitate data manipulation, feature engineering, model training, and evaluation. It includes various functions for data cleaning, exploration, and transformation, allowing users to efficiently handle large datasets and perform complex analyses. This document outlines fundamental SQL operations like Select, Update, Delete, and Create, with examples tailored for Teradata's SQL syntax.

### Code Example

#### Select

```sql
SELECT target_column
FROM your_table_name
WHERE condition_column = 'condition_value';
```

*This query retrieves the `target_column` from `your_table_name` where a specified condition is met.*

#### Update

```sql
UPDATE your_table_name
SET target_column = 'new_value'
WHERE condition_column = 'condition_value';
```

*This query updates the `target_column` to `new_value` for rows where `condition_column` matches the specified condition.*

#### Delete

```sql
DELETE FROM your_table_name
WHERE condition_column = 'condition_value';
```

*This query deletes rows from `your_table_name` where `condition_column` matches the specified condition.*

#### Create

```sql
CREATE TABLE your_table_name (
    id INT,
    target_column VARCHAR(128),
    condition_column CHAR(10),
    PRIMARY KEY (id)
);
```

*This query creates a new table named `your_table_name` with three specified columns and a primary key on the `id` column.*

### Keywords and Phrases

- TD_TargetEncodingTransform Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_TargetEncodingFit Input
- TD_TargetEncodingTransform Input
- Target Column
- FitTable Schema

This structured approach ensures clarity and utility in understanding how to employ Teradata's analytic functions effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Input","2024-07-27 12:40:08"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Output","text/html;charset=UTF-8","200","","Indexable","","TD_TargetEncodingTransform Output - Analytics Database","54","521","CBM_Beta and CBM_GAUSSIAN_INVERSE_GAMMA Encoder Output Schema Column Name Data Type Description Charset MaxLen Case Sensitive target_column INTEGER Target columns with encoded target values. Not applicable Not applicable Not applicable accumulate_column any Column copied from input table to output. Same as the Input ta...","323","2161","","0","TD_TargetEncodingTransform Output - Analytics Database","54","Database Analytic Functions","27","CBM_Beta and CBM_GAUSSIAN_INVERSE_GAMMA Encoder Output Schema","61","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Output","","","","","","212675","13381","13381","4.744","A+","145","53","2.736","22.606","Very Hard","11.183","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.695","","","","","","1.1","# Teradata Vantage™ Analytics Database: Overview and Code Examples

Teradata Vantage™ Analytics Database provides a robust framework for performing complex analytical functions. This document covers core SQL operations such as selecting, updating, deleting, and creating records in the Analytics Database. 

## Summary of Key Features
The Analytics Database is equipped with a variety of analytic functions that are essential for data analysis and machine learning. These include data cleaning functions, feature engineering transforms, model training functions, and various utility functions for effective data manipulation and analysis.

## Code Examples

### 1. SELECT
The `SELECT` statement retrieves data from one or more tables. 

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```
*Example:*
```sql
SELECT customer_id, customer_name
FROM customers
WHERE active = 'Y';
```

### 2. UPDATE
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```
*Example:*
```sql
UPDATE customers
SET active = 'N'
WHERE last_purchase < '2022-01-01';
```

### 3. DELETE
The `DELETE` statement removes records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```
*Example:*
```sql
DELETE FROM customers
WHERE last_purchase < '2022-01-01';
```

### 4. CREATE
The `CREATE` statement creates a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```
*Example:*
```sql
CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    price DECIMAL(10, 2)
);
```

## Keywords and Phrases
- TD_TargetEncodingTransform Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Language English (United States)
- Last Update 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Recommendations for Using Analytic Functions
- Example Use Cases
- SQL Operations: Select, Update, Delete, Create

This structured overview provides an essential reference for using SQL commands with the Teradata Vantage™ Analytics Database, along with a summary of important keywords and phrases relevant to its functionality and deployment.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Output","2024-07-27 12:54:40"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_TargetEncodingTransform Syntax | Teradata Vantage - TD_TargetEncodingTransform Syntax - Analytics Database","109","1045","See the syntax of the TD_TargetEncodingTransform function.","58","379","","0","TD_TargetEncodingTransform Syntax | Teradata Vantage - TD_TargetEncodingTransform Syntax - Analytics Database","109","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Syntax","","","","","","208270","12879","12879","4.566","A+","100","45","2.222","26.919","Very Hard","11.269","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.152","","","","","","1.1","### Summary

The `TD_TargetEncodingTransform` function in Teradata Vantage is used for transforming categorical data into numerical formats by encoding target values. This function is particularly useful in machine learning applications where models require numerical inputs. The function can be applied in various contexts such as SELECT, CREATE TABLE, and CREATE VIEW statements. 

### Code Examples

Here are examples of basic SQL operations (SELECT, UPDATE, DELETE, CREATE) using Teradata Vantage. Each example demonstrates the syntax and basic usage of these operations.

#### 1. SELECT

```sql
SELECT *
FROM my_table
WHERE category = 'A';
```

#### 2. UPDATE

```sql
UPDATE my_table
SET value = value * 1.1
WHERE category = 'A';
```

#### 3. DELETE

```sql
DELETE FROM my_table
WHERE date < '2022-01-01';
```

#### 4. CREATE

```sql
CREATE TABLE my_table (
    id INT,
    category VARCHAR(50),
    value FLOAT
);
```

### Keywords and Phrases

- TD_TargetEncodingTransform Syntax
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- VantageCloud
- VantageCore
- Enterprise Edition
- IntelliFlex
- VMware
- Release Number 17.20
- Published June 2022
- English (United States)
- Data Cleaning Functions
- Feature Engineering Functions
- Model Training Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Limitations When Using PARTITION BY
- Recommendations for Using Analytic Functions
- Example Usage of TD_TargetEncodingTransform
- Input and Output Syntax Elements
- CREATE TABLE Statement
- SELECT Statement
- UPDATE Statement
- DELETE Statement

This structured outline provides clarity on the usage of the `TD_TargetEncodingTransform` function along with examples of essential SQL operations in Teradata Vantage.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Syntax","2024-07-27 11:20:48"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","TD_TargetEncodingTransform Syntax Elements - Analytics Database","63","609","Accumulate [Optional] Specifies the columns copied from the input table to the output table. The maximum length supported is 128. The maximum list length is 2047. Not case sensitive.","182","1135","","0","TD_TargetEncodingTransform Syntax Elements - Analytics Database","63","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Syntax-Elements","","","","","","207673","12776","12776","4.529","A+","71","40","1.775","23.918","Very Hard","11.194","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.436","","","","","","1.1","### Summary

In this document, we explore various SQL commands used in the context of Teradata Vantage™ Analytics Database, particularly focusing on the fundamental operations: **Select**, **Update**, **Delete**, and **Create**. These commands are essential for managing database records, and understanding their syntax and application can significantly enhance data manipulation and retrieval capabilities.

### Code Example

#### 1. **Select**
The `SELECT` statement is used to query data from a database. It can retrieve all or specific columns from a table.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

**Example:**
```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

#### 2. **Update**
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example:**
```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department = 'Sales';
```

#### 3. **Delete**
The `DELETE` statement is used to remove existing records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

**Example:**
```sql
DELETE FROM employees
WHERE last_name = 'Doe';
```

#### 4. **Create**
The `CREATE` statement is used to create a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example:**
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

### Keywords and Phrases

- **TD_TargetEncodingTransform Syntax Elements - Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This structured overview outlines essential SQL commands, their syntax, and practical examples, providing a foundational understanding for users working within Teradata Vantage™.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Syntax-Elements","2024-07-27 12:37:03"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Usage-Notes","text/html;charset=UTF-8","200","","Indexable","","TD_TargetEncodingFitTransform Usage Notes | TargetEncodingFitTransform - TD_TargetEncodingTransform Usage Notes - Analytics Database","132","1272","Learn about the usage considerations for the Analytics Database TD_TargetEncodingFitTransform function.","103","668","","0","TD_TargetEncodingFitTransform Usage Notes | TargetEncodingFitTransform - TD_TargetEncodingTransform Usage Notes - Analytics Database","132","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Usage-Notes","","","","","","207921","12794","12794","4.536","A+","108","41","2.634","34.178","Hard","11.287","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.604","","","","","","1.1","### Summary

In Teradata Vantage™, the Analytics Database provides a wide array of analytic functions that facilitate data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Among these functions, the `TD_TargetEncodingFit` and `TD_TargetEncodingTransform` are particularly useful for transforming categorical variables into numerical formats, which can improve model performance. These functions are part of a broader set of utilities that support various data operations, including selection, updates, deletions, and creations.

### Code Example

Below are examples of basic SQL operations (Select, Update, Delete, Create) that can be applied in the context of Teradata.

#### 1. Select
This query retrieves data from a specific table.

```sql
SELECT customer_id, customer_name, purchase_amount
FROM customers
WHERE purchase_amount > 100;
```

#### 2. Update
This query updates the `purchase_amount` for a specific customer.

```sql
UPDATE customers
SET purchase_amount = purchase_amount * 1.1
WHERE customer_id = 12345;
```

#### 3. Delete
This query deletes records of customers who have not made any purchases.

```sql
DELETE FROM customers
WHERE purchase_amount = 0;
```

#### 4. Create
This query creates a new table to store customer transactions.

```sql
CREATE TABLE customer_transactions (
    transaction_id INT PRIMARY KEY,
    customer_id INT,
    transaction_date DATE,
    purchase_amount DECIMAL(10, 2)
);
```

### Keywords and Phrases

- **TD_TargetEncodingFitTransform Usage Notes**
- **TargetEncodingFitTransform - TD_TargetEncodingTransform Usage Notes**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **English (United States)**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Examples of various analytic functions** (e.g., Pack, StringSimilarity, TD_ConvertTo, TD_GetFutileColumns, etc.)","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Usage-Notes","2024-07-27 12:39:07"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting","text/html;charset=UTF-8","200","","Indexable","","TD_Unpivoting Function | Unpivoting | Teradata Vantage - TD_Unpivoting - Analytics Database","91","829","Analytics Database (SQL Engine) feature engineering transformation function changes data from dense to sparse format.","117","752","","0","TD_Unpivoting Function | Unpivoting | Teradata Vantage - TD_Unpivoting - Analytics Database","91","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting","","","","","","209218","13048","13048","4.626","A+","123","50","2.460","31.699","Hard","11.272","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.534","","","","","","1.1","### Summary

The TD_Unpivoting function in Teradata Vantage is a powerful analytic tool that allows users to transform dense data formats into sparse data formats. This operation is essential for data preprocessing and analysis, especially when working with wide tables that need to be restructured for better analysis or reporting. The unpivoting process can simplify complex datasets into more manageable formats that are conducive to various types of data analysis.

### Code Example

Here's how you can use the TD_Unpivoting function along with examples of basic SQL operations like SELECT, UPDATE, DELETE, and CREATE in Teradata.

#### 1. **SELECT**
The `SELECT` statement is used to query data from a database.

```sql
SELECT * FROM sales_data;
```

#### 2. **CREATE**
The `CREATE` statement is used to create a new table.

```sql
CREATE TABLE sales_data (
    product_id INT,
    month VARCHAR(20),
    sales_amount DECIMAL(10, 2)
);
```

#### 3. **UPDATE**
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE sales_data
SET sales_amount = sales_amount * 1.10
WHERE month = 'January';
```

#### 4. **DELETE**
The `DELETE` statement removes existing records from a table.

```sql
DELETE FROM sales_data
WHERE product_id = 101;
```

#### 5. **TD_Unpivoting**
The `TD_Unpivoting` function transforms dense data into a sparse format.

```sql
SELECT * FROM TD_Unpivoting (
    ON sales_data
    UNPIVOT (sales_amount FOR month IN ('January' AS 'Jan', 'February' AS 'Feb', 'March' AS 'Mar'))
) AS unpivoted_data;
```

### Keywords and Phrases

- **TD_Unpivoting Function**
- **Unpivoting**
- **Teradata Vantage - TD_Unpivoting**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Example: How to Use TD_Unpivoting**","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting","2024-07-27 11:27:34"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/Example-How-to-Use-TD_Unpivoting","text/html;charset=UTF-8","200","","Indexable","","Example: How to Use TD_Unpivoting - Analytics Database","54","510","InputTable The following contains a subset of titanic dataset. DROP TABLE unpivoting_titanic_dataset;
CREATE TABLE unpivoting_titanic_dataset (
   passenger INTEGER,
   survived INTEGER,
   pclass INTEGER,
   name VARCHAR(90) CHARACTER SET LATIN NOT CASESPECIFIC,
   gender VARCHAR(10) CHARACTER SET UNICODE NOT CASESPEC...","323","2103","","0","Example: How to Use TD_Unpivoting - Analytics Database","54","Database Analytic Functions","27","InputTable","10","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/Example-How-to-Use-TD_Unpivoting","","","","","","217693","14463","14463","5.127","A+","894","273","3.275","76.990","Fairly Easy","14.265","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.462","","","","","","1.1","## Summary

In this guide, we explore key SQL operations for managing data in a Teradata Analytics Database. The operations covered include `SELECT`, `UPDATE`, `DELETE`, and `CREATE`. These are fundamental SQL commands that allow users to manipulate and retrieve data from the database effectively.

### Code Examples

#### 1. SELECT
The `SELECT` statement is used to query data from a database. Here’s a simple example:

```sql
SELECT passenger, name, gender, fare
FROM unpivoting_titanic_dataset
WHERE survived = 1;
```

#### 2. UPDATE
The `UPDATE` statement modifies existing records in a table. Here’s an example of updating the fare for a specific passenger:

```sql
UPDATE unpivoting_titanic_dataset
SET fare = 75.00
WHERE passenger = 2;
```

#### 3. DELETE
The `DELETE` statement removes existing records from a table. Here’s how to delete a specific passenger record:

```sql
DELETE FROM unpivoting_titanic_dataset
WHERE passenger = 1000;
```

#### 4. CREATE
The `CREATE` statement is used to create a new table in the database. Below is an example:

```sql
CREATE TABLE new_passenger_data (
   passenger INTEGER,
   name VARCHAR(90),
   gender VARCHAR(10),
   fare FLOAT
) PRIMARY INDEX (passenger);
```

### Keywords and Phrases

- How to Use TD_Unpivoting - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Input Table Rows Redistribution
- Size of the Query
- AMP Configuration Impact on Function Execution
- Recommendations for Using Analytic Functions
- SQL Call examples
- InputTable structure
- Passenger data management
- Data types and attributes

This guide provides essential SQL operations and serves as a foundation for further exploration into managing data within the Teradata Analytics Database.","30","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/Example-How-to-Use-TD_Unpivoting","2024-07-27 12:37:38"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/Optional-Syntax-Elements-for-TD_Unpivoting","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_Unpivoting - Analytics Database","63","580","AttributeAliasList Specifies alternate name for the values in the AttributeName column.The number of attribute aliases must match with number of target columns. AttributeColName Specifies the output column name for the AttributeName column. Default: AttributeName. ValueColName Specifies the output column name for the A...","323","2050","","0","Optional Syntax Elements for TD_Unpivoting - Analytics Database","63","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/Optional-Syntax-Elements-for-TD_Unpivoting","","","","","","209810","13285","13285","4.710","A+","231","78","2.962","33.530","Hard","11.616","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.913","","","","","","1.1","## Overview of Analytics Database Operations

In an analytics database, operations such as **Select**, **Update**, **Delete**, and **Create** are fundamental for managing and manipulating data. Below is a summary of these operations along with examples to illustrate how they are commonly used.

### Summary of Operations

1. **Select**: Retrieve data from a database table based on specified criteria.
2. **Update**: Modify existing data in a table.
3. **Delete**: Remove data from a table.
4. **Create**: Add new data or structures (like tables) to the database.

### Code Examples

#### 1. Select
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```
*Example: Retrieve names and ages from the users table where age is greater than 18.*
```sql
SELECT name, age
FROM users
WHERE age > 18;
```

#### 2. Update
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```
*Example: Update the age of the user with ID 1 to 30.*
```sql
UPDATE users
SET age = 30
WHERE id = 1;
```

#### 3. Delete
```sql
DELETE FROM table_name
WHERE condition;
```
*Example: Delete the user with ID 1 from the users table.*
```sql
DELETE FROM users
WHERE id = 1;
```

#### 4. Create
```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```
*Example: Create a new table called users with columns for ID, name, and age.*
```sql
CREATE TABLE users (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    age INT
);
```

### Keywords and Phrases

- **Optional Syntax Elements for TD_Unpivoting**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Release Number 17.20**
- **Published June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Data Cleaning Functions**
- **Model Training Functions**
- **Feature Engineering Transform Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Data Exploration Functions**
- **TD_Unpivoting**
- **TD_ConvertTo**
- **TD_GetRowsWithoutMissingValues**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Accumulated Columns Impact on Function Performance**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Recommendations for Using Analytic Functions**

This structured approach helps in understanding the core functionalities and operations available within an analytics database environment.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/Optional-Syntax-Elements-for-TD_Unpivoting","2024-07-27 11:28:56"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/Required-Syntax-Elements-for-TD_Unpivoting","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_Unpivoting - Analytics Database","63","584","ON clause Specifies the table name, view name or query as an InputTable. IDColumn Specifies the column from the InputTable which contains the identifier. TargetColumns Specifies the columns from the InputTable which need to be unpivoted.","237","1492","","0","Required Syntax Elements for TD_Unpivoting - Analytics Database","63","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/Required-Syntax-Elements-for-TD_Unpivoting","","","","","","207879","12792","12792","4.535","A+","80","39","2.051","24.978","Very Hard","11.210","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.553","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database includes a variety of analytic functions that can be utilized for tasks such as data cleaning, feature engineering, model training, and evaluation. This document outlines the essential CRUD (Create, Read, Update, Delete) operations and provides examples of their syntax. The keywords and phrases related to the required syntax elements for TD_Unpivoting are also included to assist users in leveraging the analytics capabilities effectively.

### Code Example

#### 1. Create
To create a new table in Teradata:

```sql
CREATE TABLE sales_data (
    sale_id INT,
    product_name VARCHAR(50),
    sale_amount DECIMAL(10, 2),
    sale_date DATE
);
```

#### 2. Read
To select data from the table:

```sql
SELECT * FROM sales_data WHERE sale_amount > 100;
```

#### 3. Update
To update existing records in the table:

```sql
UPDATE sales_data
SET sale_amount = sale_amount * 1.10
WHERE sale_date < '2023-01-01';
```

#### 4. Delete
To delete records from the table:

```sql
DELETE FROM sales_data WHERE sale_id = 5;
```

#### 5. TD_Unpivoting Example
To unpivot data using the TD_Unpivoting function:

```sql
SELECT *
FROM TD_Unpivoting (
    InputTable => sales_data,
    TargetColumns => (sale_amount),
    IDColumn => sale_id
);
```

### Keywords and Phrases
- Required Syntax Elements for TD_Unpivoting
- Analytics Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- Recommendations for Using Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- TD_Pivoting
- TD_Unpivoting Usage Notes
- Example: How to Use TD_Unpivoting

This overview provides a foundational understanding of how to perform CRUD operations and leverage analytic functions in Teradata Vantage, emphasizing the importance of syntax and proper function usage.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/Required-Syntax-Elements-for-TD_Unpivoting","2024-07-27 12:31:40"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/TD_Unpivoting-Input","text/html;charset=UTF-8","200","","Indexable","","TD_Unpivoting Input - Analytics Database","40","366","InputTable Schema Column Name Data Type Description id_column Any Column which contains the identifier values. target_column CHAR, VARCHAR, CLOB, BYTE, VARBYTE, BLOB, BYTEINT, SMALLINT, INTEGER, BIGINT, FLOAT, REAL, DOUBLE PRECISION, DECIMAL, NUMBER, DATE, TIME, TIMESTAMP, TIME WITH TIME ZONE, TIMESTAMP WITH TIME ZONE,...","323","2229","","0","TD_Unpivoting Input - Analytics Database","40","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/TD_Unpivoting-Input","","","","","","209729","13316","13316","4.721","A+","142","44","3.227","27.806","Very Hard","11.318","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.283","","","","","","1.1","# Teradata Vantage™ Analytics Database: SQL Operations Overview

The Teradata Vantage™ Analytics Database provides a robust set of analytic functions designed for data analysis and manipulation. Below is a concise overview of SQL operations commonly used within this context, including examples for each operation: SELECT, UPDATE, DELETE, and CREATE.

## Summary of SQL Operations

1. **SELECT**: Used to retrieve data from one or more tables.
2. **UPDATE**: Used to modify existing data in a table.
3. **DELETE**: Used to remove data from a table.
4. **CREATE**: Used to create a new table or database.

### Code Examples

#### 1. SELECT
```sql
SELECT id_column, target_column
FROM analytics_table
WHERE target_column IS NOT NULL;
```
This query selects the `id_column` and `target_column` from `analytics_table` where `target_column` is not null.

#### 2. UPDATE
```sql
UPDATE analytics_table
SET target_column = 'New Value'
WHERE id_column = 1;
```
This statement updates the `target_column` to 'New Value' for the record where `id_column` is equal to 1.

#### 3. DELETE
```sql
DELETE FROM analytics_table
WHERE id_column = 1;
```
This command deletes the record from `analytics_table` where `id_column` is equal to 1.

#### 4. CREATE
```sql
CREATE TABLE new_table (
    id_column INTEGER,
    target_column VARCHAR(255),
    accumulate_column CHAR(1)
);
```
This SQL statement creates a new table called `new_table` with three columns: `id_column`, `target_column`, and `accumulate_column`.

### Keywords and Phrases

- **TD_Unpivoting Input**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Input Table Schemas**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This overview provides a foundational understanding of SQL operations within the Teradata Vantage™ Analytics Database, emphasizing practical usage through code examples and a comprehensive list of relevant keywords and phrases.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/TD_Unpivoting-Input","2024-07-27 11:33:04"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/TD_Unpivoting-Output","text/html;charset=UTF-8","200","","Indexable","","TD_Unpivoting Output - Analytics Database","41","382","Output Table Schema Column Data Type Description id_column Any Column copied to output table. AttributeName VARCHAR or SMALLINT Column which contains the unpivoted attribute or attribute alias or index of the target column. AttributeValue Original compatible data type from InputTable if all columns are of same group or...","323","2051","","0","TD_Unpivoting Output - Analytics Database","41","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/TD_Unpivoting-Output","","","","","","210980","13455","13455","4.770","A+","174","55","3.164","2.820","Very Hard","11.439","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.795","","","","","","1.1","## Summary

The Teradata Analytics Database provides a wide array of analytic functions that cater to various data manipulation and analysis needs. This includes functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation, among others. Each function typically has a defined syntax with required and optional elements, allowing for flexibility and specificity in data operations. The key operations—Select, Update, Delete, and Create—are foundational to managing and manipulating data within the database effectively.

### Code Example

Here are simple examples of each of the basic SQL operations using Teradata SQL syntax:

#### 1. **Select**

```sql
SELECT id, name, age 
FROM employees 
WHERE age > 30;
```

This query selects the `id`, `name`, and `age` fields from the `employees` table where the age is greater than 30.

#### 2. **Update**

```sql
UPDATE employees 
SET age = age + 1 
WHERE id = 101;
```

This command updates the `age` of the employee with `id` 101 by incrementing it by 1.

#### 3. **Delete**

```sql
DELETE FROM employees 
WHERE id = 102;
```

This query deletes the record of the employee whose `id` is 102.

#### 4. **Create**

```sql
CREATE TABLE new_employees (
    id INT,
    name VARCHAR(100),
    age INT,
    department VARCHAR(50)
);
```

This command creates a new table named `new_employees` with four columns: `id`, `name`, `age`, and `department`.

### Keywords and Phrases

- TD_Unpivoting Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Data Cleaning Functions
- Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_SimpleImputeFit
- TD_Pivoting
- TD_Unpivoting
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- nPath
- Sessionize
- DataTypes
- accumulate_column
- AttributeName
- AttributeValue
- Original compatible data type
- Group Names
- VARCHAR or SMALLINT
- Original data type name from the InputTable","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/TD_Unpivoting-Output","2024-07-27 12:06:40"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/TD_Unpivoting-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_Unpivoting Syntax - Analytics Database","41","381","TD_Unpivoting(
ON {table | view | (query)} AS InputTable PARTITION BY ANY
USING
IDColumn('id_column')
TARGETCOLUMNS ({'target_column' | target_column_range}[,...])
[ ATTRIBUTEALIASLIST ( 'attribute_alias_list_value' [,...] ) ]
[ ATTRIBUTECOLNAME('Output_ColumnName_For_AttributeName') ]
[ VALUECOLNAME('Output_ColumnName...","323","2112","","0","TD_Unpivoting Syntax - Analytics Database","41","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/TD_Unpivoting-Syntax","","","","","","209511","13277","13277","4.707","A+","166","54","3.074","44.708","Hard","11.462","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.441","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a comprehensive set of analytic functions for data processing, including data cleaning, exploration, feature engineering, and more. The TD_Unpivoting function is particularly useful for reshaping data from a wide format to a long format, which is essential in various data analysis tasks. This document highlights the syntax for the TD_Unpivoting function and includes examples of basic SQL operations like SELECT, UPDATE, DELETE, and CREATE.

### Code Example

#### SELECT
```sql
SELECT *
FROM sales_data
WHERE sales_amount > 1000;
```

#### UPDATE
```sql
UPDATE sales_data
SET sales_amount = sales_amount * 1.1
WHERE sales_date = '2023-01-01';
```

#### DELETE
```sql
DELETE FROM sales_data
WHERE sales_date < '2023-01-01';
```

#### CREATE
```sql
CREATE TABLE new_sales_data (
    id INT,
    sales_amount DECIMAL(10, 2),
    sales_date DATE
);
```

### TD_Unpivoting Syntax
```sql
TD_Unpivoting(
    ON {table | view | (query)} AS InputTable
    PARTITION BY ANY
    USING
    IDColumn('id_column')
    TARGETCOLUMNS ({'target_column' | target_column_range}[,...])
    [ ATTRIBUTEALIASLIST ( 'attribute_alias_list_value' [,...] ) ]
    [ ATTRIBUTECOLNAME('Output_ColumnName_For_AttributeName') ]
    [ VALUECOLNAME('Output_ColumnName_For_AttributeValue') ]
    [ ACCUMULATE ({ 'accumulate_column' | accumulate_column_range }[,...]) ]
    [ INCLUDENULLS({'true'|'t'|'yes'|'y'|'1'|'false'|'f'|'no'|'n'|'0'}) ]
    [ INPUTTYPES({'true'|'t'|'yes'|'y'|'1'|'false'|'f'|'no'|'n'|'0'}) ]
    [ OUTPUTVARCHAR({'true'|'t'|'yes'|'y'|'1'|'false'|'f'|'no'|'n'|'0'}) ]
    [ INDEXEDATTRIBUTE({'true'|'t'|'yes'|'y'|'1'|'false'|'f'|'no'|'n'|'0'}) ]
    [ INCLUDEDATATYPES({'true'|'t'|'yes'|'y'|'1'|'false'|'f'|'no'|'n'|'0'}) ]
)
```

### Keywords and Phrases

- TD_Unpivoting Syntax
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Spool Space Exhaustion
- Recommendations for Using Analytic Functions
- Data Exploration Functions
- Moving Average
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- Hypothesis Test Types
- Sessionize","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/TD_Unpivoting-Syntax","2024-07-27 12:50:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/TD_Unpivoting-Usage-Notes","text/html;charset=UTF-8","200","","Indexable","","TD_Unpivoting Usage Notes - Analytics Database","46","435","The following are usage considerations for the TD_Unpivoting function: TD_Unpivoting function is aimed to be used in conjunction with other inDB analytic functions, in contrast to SQLE Unpivot. The function returns N*M output rows, if there are N rows in the input table and M features (columns). Due to this large outpu...","323","1975","","0","TD_Unpivoting Usage Notes - Analytics Database","46","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/TD_Unpivoting-Usage-Notes","","","","","","208223","13062","13062","4.631","A+","151","44","3.432","56.562","Fairly Hard","11.369","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.119","","","","","","1.1","# Summary of Teradata Vantage™ Analytics Database Functions

The Teradata Vantage Analytics Database provides a range of analytic functions and utilities designed to facilitate data analysis, feature engineering, and model training. This document specifically highlights the usage of the `TD_Unpivoting` function, its syntax requirements, and examples for practical application. Additionally, it includes standard SQL operations including Select, Update, Delete, and Create commands to manipulate data effectively.

## Code Example Section

### 1. **Select**
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

### 2. **Update**
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

### 3. **Delete**
The `DELETE` statement removes records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

### 4. **Create**
The `CREATE` statement creates a new table in the database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

## TD_Unpivoting Usage Notes

The `TD_Unpivoting` function is designed primarily for use with other inDB analytic functions, distinguishing it from traditional SQL unpivot operations. Here are some important considerations:

- **Output Size**: The function generates N*M output rows, where N is the number of rows in the input table and M is the number of features (columns). This can lead to significant output sizes, which may affect query performance.
  
- **Spool Space Limitation**: The output size is constrained by the user’s spool space, thus influencing the scalability of the input data.

- **Input Types**: When the `InputTypes` parameter is set to false, BLOB/CLOB data type columns should not be combined with other data type columns.

### Example: How to Use TD_Unpivoting

```sql
SELECT *
FROM TD_Unpivoting (
    ON input_table
    COLUMN column1, column2, column3
    VALUE AS unpivoted_value
);
```

## Keywords and Phrases

- **TD_Unpivoting**
- **Usage Notes**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Release Number 17.20**
- **Published June 2022**
- **English (United States)**
- **Last Update 2024-04-06**
- **Product Category: Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in Database Table**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions**
- **Examples of TD Functions**

This structured overview provides fundamental insights into the capabilities of the Teradata Vantage Analytics Database and serves as a reference for users seeking to leverage analytic functions effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/TD_Unpivoting-Usage-Notes","2024-07-27 11:51:26"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID","text/html;charset=UTF-8","200","","Indexable","","TD_FillRowID Function | FillRowID | Teradata Vantage - TD_FillRowID - Analytics Database","88","790","This Analytics Database (SQL Engine) feature engineering utility function adds a column of unique row identifiers to the input table.","133","806","","0","TD_FillRowID Function | FillRowID | Teradata Vantage - TD_FillRowID - Analytics Database","88","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID","","","","","","210508","13731","13731","4.868","A+","293","67","4.373","50.232","Fairly Hard","11.677","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","1.323","","","","","","1.1","### Overview of TD_FillRowID Function

The `TD_FillRowID` function in Teradata Vantage is designed to add a column of unique row identifiers to an input table. This function is particularly useful in database management for ensuring that each row has a unique identifier, which can simplify data retrieval, enhance data integrity, and support relationships between tables.

### Key Features of TD_FillRowID

- **Unique Identification**: Automatically generates unique identifiers for each row, facilitating efficient searches and data management.
- **Data Integrity**: Helps maintain data consistency by preventing duplicate rows.
- **Efficiency**: Improves the performance of operations that involve searching for specific rows based on their identifiers.

### Code Examples

#### 1. **Create Table**

```sql
CREATE TABLE Employee (
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Department VARCHAR(50)
);
```

#### 2. **Insert Data**

```sql
INSERT INTO Employee (FirstName, LastName, Department) VALUES ('John', 'Doe', 'HR');
INSERT INTO Employee (FirstName, LastName, Department) VALUES ('Jane', 'Smith', 'Finance');
INSERT INTO Employee (FirstName, LastName, Department) VALUES ('Alice', 'Johnson', 'IT');
```

#### 3. **Select Data**

```sql
SELECT * FROM Employee;
```

#### 4. **Using TD_FillRowID to Add Row Identifiers**

```sql
SELECT TD_FillRowID() AS RowID, FirstName, LastName, Department
FROM Employee;
```

#### 5. **Update Data**

```sql
UPDATE Employee
SET Department = 'Marketing'
WHERE FirstName = 'Jane' AND LastName = 'Smith';
```

#### 6. **Delete Data**

```sql
DELETE FROM Employee
WHERE FirstName = 'John' AND LastName = 'Doe';
```

### Summary

The `TD_FillRowID` function is an essential tool in Teradata Vantage for generating unique row identifiers. It supports the integrity and performance of database operations by ensuring that each row can be uniquely identified and efficiently managed. The examples provided illustrate how to create a table, insert data, use the `TD_FillRowID` function, and perform select, update, and delete operations.

### Keywords and Phrases

- **TD_FillRowID Function**
- **FillRowID**
- **Teradata Vantage - TD_FillRowID**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Data Integrity**
- **Unique Identifiers**
- **Table Relationships**
- **Row IDs**
- **Efficient Searches**
- **Non-Deterministic Behavior**
- **Usage Notes**","25","2","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID","2024-07-27 11:27:47"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/Example-Using-TD_FillRowID-to-Generate-Row-Identifers","text/html;charset=UTF-8","200","","Indexable","","TD_FillRowID Example | FillRowID | Teradata Vantage - Example: Using TD_FillRowID to Generate Row Identifers - Analytics Database","129","1176","See an example of the Analytics Database (SQL Engine) feature engineering utility function TD_FillRowID.","104","645","","0","TD_FillRowID Example | FillRowID | Teradata Vantage - Example: Using TD_FillRowID to Generate Row Identifers - Analytics Database","129","Database Analytic Functions","27","TD_FillRowID InputTable: fillrowid_input","40","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/Example-Using-TD_FillRowID-to-Generate-Row-Identifers","","","","","","210056","13739","13739","4.871","A+","213","76","2.803","76.097","Fairly Easy","11.605","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.753","","","","","","1.1","## Summary

The `TD_FillRowID` function in Teradata Vantage is a powerful analytic tool designed to generate unique row identifiers for data within specified partitions. This function is particularly useful in scenarios where you need to track or reference rows uniquely after performing operations such as sorting or aggregating data. 

In the example provided, the `TD_FillRowID` function is applied to a dataset containing passenger information, partitioned by class (`Pclass`) and ordered by age. The function generates a unique `PassengerId` for each row within the specified partitions, facilitating easier data management and analysis.

## Code Examples

### 1. SELECT

```sql
SELECT * FROM TD_FillRowID (
  ON fillrowid_input AS InputTable
  PARTITION BY Pclass
  ORDER BY Age
  USING
  RowIDColumnName ('PassengerId')
) AS dt;
```

### 2. UPDATE

While `TD_FillRowID` does not directly involve an update operation, you can incorporate it into a larger procedure where updates are needed after generating row IDs. For example:

```sql
UPDATE fillrowid_input
SET PassengerId = SUBQUERY.PassengerId
FROM (
  SELECT * FROM TD_FillRowID (
    ON fillrowid_input AS InputTable
    PARTITION BY Pclass
    ORDER BY Age
    USING
    RowIDColumnName ('PassengerId')
  ) AS dt
) AS SUBQUERY
WHERE fillrowid_input.Name = SUBQUERY.Name;
```

### 3. DELETE

To delete rows based on certain criteria, you might first want to generate IDs and then delete:

```sql
DELETE FROM fillrowid_input
WHERE PassengerId IN (
  SELECT PassengerId FROM TD_FillRowID (
    ON fillrowid_input AS InputTable
    PARTITION BY Pclass
    ORDER BY Age
    USING
    RowIDColumnName ('PassengerId')
  ) AS dt
  WHERE Age < 18
);
```

### 4. CREATE

You can create a table to hold the results of the `TD_FillRowID` function:

```sql
CREATE TABLE passenger_ids AS (
  SELECT * FROM TD_FillRowID (
    ON fillrowid_input AS InputTable
    PARTITION BY Pclass
    ORDER BY Age
    USING
    RowIDColumnName ('PassengerId')
  ) AS dt
) WITH NO DATA;
```

## Keywords and Phrases

- TD_FillRowID Example
- FillRowID
- Teradata Vantage - Example: Using TD_FillRowID to Generate Row Identifiers
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- Usage Notes
- Recommendations for Using Analytic Functions
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Example: Using TD_FillRowID to Generate Row Identifiers
- Survived Pclass Name Age
- PassengerId","26","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/Example-Using-TD_FillRowID-to-Generate-Row-Identifers","2024-07-27 11:25:23"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/Optional-Syntax-Elements-for-TD_FillRowID","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_FillRowID - Analytics Database","62","567","RowIDColumnName Specify a name for the output column of row identifiers. Default: row_id","88","567","","0","Optional Syntax Elements for TD_FillRowID - Analytics Database","62","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/Optional-Syntax-Elements-for-TD_FillRowID","","","","","","207498","12705","12705","4.504","A+","57","37","1.541","4.903","Very Hard","11.158","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.574","","","","","","1.1","## Summary of TD_FillRowID and Analytics Database Functions

The **TD_FillRowID** function in Teradata's Analytics Database is used to generate unique row identifiers for records in a table. This functionality is particularly useful for maintaining unique identifiers when processing datasets, especially during data transformation and analysis tasks.

Teradata's Analytics Database encompasses a wide range of analytic functions that aid in data cleaning, exploration, feature engineering, model training, scoring, and evaluation, as well as text analytics and hypothesis testing. With the release of version **17.20** in June 2022, many enhancements and new functions were introduced to improve analytic capabilities.

### Code Examples

Here are basic SQL examples demonstrating the **Select**, **Update**, **Delete**, and **Create** operations using the TD_FillRowID function and general SQL syntax.

#### 1. Select
```sql
SELECT TD_FillRowID() AS row_id, column1, column2
FROM my_table;
```

#### 2. Update
```sql
UPDATE my_table
SET column1 = 'New Value'
WHERE column2 = 'Condition';
```

#### 3. Delete
```sql
DELETE FROM my_table
WHERE column1 = 'Value to Delete';
```

#### 4. Create
```sql
CREATE TABLE new_table AS (
    SELECT TD_FillRowID() AS row_id, column1, column2
    FROM my_table
) WITH NO DATA;
```

### Keywords and Phrases

- **Optional Syntax Elements for TD_FillRowID**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Recommendations for Using Analytic Functions**

This summary provides an overview of the TD_FillRowID function and some foundational SQL operations relevant in the context of data analytics within Teradata's environment.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/Optional-Syntax-Elements-for-TD_FillRowID","2024-07-27 11:49:44"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/Required-Syntax-Elements-for-TD_FillRowID","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_FillRowID - Analytics Database","62","571","ON clause Accept the PARTITION BY and ORDER BY clauses. The PARTITION BY clause specifies that a table is partitioned by one or more partitioning levels. A partitioning level can be defined using a single COLUMN keyword, a partitioning expression, or a combination of both. The ORDER BY clause specifies how result sets ...","323","2006","","0","Required Syntax Elements for TD_FillRowID - Analytics Database","62","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/Required-Syntax-Elements-for-TD_FillRowID","","","","","","208063","12956","12956","4.593","A+","112","43","2.605","43.300","Hard","11.272","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.548","","","","","","1.1","# Teradata Analytics Database - SQL Operations Overview

In Teradata, SQL operations are fundamental for managing data within an Analytics Database. The primary operations include **Select**, **Update**, **Delete**, and **Create**. Below is a brief overview of each operation followed by code examples.

## Summary of SQL Operations

1. **Select**: Retrieves data from one or more tables.
2. **Update**: Modifies existing data within a table.
3. **Delete**: Removes data from a table.
4. **Create**: Establishes new tables or other database objects.

## Code Examples

### Select
```sql
SELECT column1, column2
FROM your_table
WHERE condition;
```

### Update
```sql
UPDATE your_table
SET column1 = value1, column2 = value2
WHERE condition;
```

### Delete
```sql
DELETE FROM your_table
WHERE condition;
```

### Create
```sql
CREATE TABLE new_table (
    column1 datatype1,
    column2 datatype2,
    ...
);
```

## Keywords and Phrases

- **Required Syntax Elements for TD_FillRowID**
- **Analytics Database**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**

This overview provides a foundational understanding of SQL operations in Teradata's Analytics Database environment, along with essential keywords relevant to further exploration and documentation.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/Required-Syntax-Elements-for-TD_FillRowID","2024-07-27 12:47:56"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/TD_FillRowID-Input","text/html;charset=UTF-8","200","","Indexable","","TD_FillRowID Input - Analytics Database","39","353","InputTable Schema InputTable can have any schema.","49","331","","0","TD_FillRowID Input - Analytics Database","39","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/TD_FillRowID-Input","","","","","","207298","12605","12605","4.469","A+","48","35","1.371","0.000","Very Hard","11.139","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.524","","","","","","1.1","### Summary of Analytic Database Functions

The Analytics Database in Teradata Vantage™ provides a comprehensive set of analytic functions designed for various data processing tasks. It includes functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This functionality supports complex data manipulations and analytics, which can be applied across numerous domains including business intelligence, machine learning, and statistical analysis.

#### Code Examples

Here are some basic SQL code examples demonstrating how to perform common database operations such as Select, Update, Delete, and Create using the Analytics Database.

**1. Select**
```sql
SELECT * 
FROM employees 
WHERE department = 'Sales';
```

**2. Update**
```sql
UPDATE employees 
SET salary = salary * 1.1 
WHERE department = 'Sales';
```

**3. Delete**
```sql
DELETE FROM employees 
WHERE termination_date < '2023-01-01';
```

**4. Create**
```sql
CREATE TABLE new_employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    hire_date DATE,
    salary DECIMAL(10, 2)
);
```

### Keywords and Phrases
- TD_FillRowID Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This summary provides an overview of the key capabilities of the Analytics Database and examples of SQL commands for basic operations. For more advanced functions, Teradata's documentation offers extensive resources.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/TD_FillRowID-Input","2024-07-27 12:33:42"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/TD_FillRowID-Output","text/html;charset=UTF-8","200","","Indexable","","TD_FillRowID Output - Analytics Database","40","369","Output Table Schema Column Data Type Description row_id_column BIGINT Column of row identifiers. input_column Same as in InputTable Column copied from InputTable.","162","1059","","0","TD_FillRowID Output - Analytics Database","40","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/TD_FillRowID-Output","","","","","","208828","13014","13014","4.614","A+","63","37","1.703","3.678","Very Hard","11.112","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.472","","","","","","1.1","# Overview of SQL Commands

SQL (Structured Query Language) is essential for managing and manipulating databases. The following sections provide an overview of basic SQL commands: `SELECT`, `UPDATE`, `DELETE`, and `CREATE`. 

## Summary of SQL Commands

- **SELECT**: Retrieves data from one or more tables.
- **UPDATE**: Modifies existing data within a table.
- **DELETE**: Removes records from a table.
- **CREATE**: Creates new tables or databases.

## Code Examples

### 1. SELECT

The `SELECT` statement is used to query data from a database.

```sql
SELECT first_name, last_name 
FROM employees 
WHERE department = 'Sales';
```

### 2. UPDATE

The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE employees 
SET salary = salary * 1.10 
WHERE performance_rating = 'Excellent';
```

### 3. DELETE

The `DELETE` statement removes records from a table.

```sql
DELETE FROM employees 
WHERE termination_date < '2023-01-01';
```

### 4. CREATE

The `CREATE` statement is used to create a new table in a database.

```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

## Keywords and Phrases

- **TD_FillRowID Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number** - 17.20
- **Published** - June 2022
- **Language** - English (United States)
- **Last Update** - 2024-04-06
- **dita:mapPath** - gjn1627595495337.ditamap
- **dita:ditavalPath** - ayr1485454803741.ditaval
- **dita:id** - jmh1512506877710
- **Product Category** - Teradata Vantage™

### Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This guide provides a foundation for performing essential operations in SQL, as well as context around the Teradata Analytics Database features.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/TD_FillRowID-Output","2024-07-27 12:13:46"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/TD_FillRowID-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_FillRowID Syntax | FillRowID | Teradata Vantage - TD_FillRowID Syntax - Analytics Database","93","838","See the syntax of the Analytics Database (SQL Engine) function TD_FillRowID and read descriptions of its required and optional syntax elements.","143","889","","0","TD_FillRowID Syntax | FillRowID | Teradata Vantage - TD_FillRowID Syntax - Analytics Database","93","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/TD_FillRowID-Syntax","","","","","","208140","12914","12914","4.578","A+","103","43","2.395","48.345","Hard","11.240","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.707","","","","","","1.1","### Summary

In Teradata Vantage, the `TD_FillRowID` function is an analytic function designed to generate unique row identifiers for each row in a specified input table. This function is particularly useful in analytics and data processing workflows where row identification is crucial. It can be invoked in various contexts, including SELECT statements, CREATE TABLE, and CREATE VIEW statements.

### Code Example

Here are some basic SQL operations demonstrating how to use `TD_FillRowID` along with other common SQL operations like SELECT, UPDATE, DELETE, and CREATE in Teradata.

#### 1. SELECT
```sql
SELECT 
    TD_FillRowID(ON my_table) AS row_id,
    column1,
    column2
FROM my_table;
```

#### 2. CREATE TABLE
```sql
CREATE TABLE my_new_table AS (
    SELECT 
        TD_FillRowID(ON my_table) AS row_id,
        column1,
        column2
    FROM my_table
) WITH NO DATA;
```

#### 3. UPDATE
```sql
UPDATE my_table
SET column1 = 'New Value'
WHERE TD_FillRowID(ON my_table) = 'some_row_id';
```

#### 4. DELETE
```sql
DELETE FROM my_table
WHERE TD_FillRowID(ON my_table) = 'some_row_id';
```

### Keywords and Phrases
- TD_FillRowID Syntax
- FillRowID
- Teradata Vantage - TD_FillRowID Syntax - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Input Table Rows Redistribution
- Limitations When Using PARTITION BY
- Recommendations for Using Analytic Functions
- Example: Using TD_FillRowID to Generate Row Identifiers

This comprehensive overview provides a foundational understanding of the `TD_FillRowID` function within the context of Teradata Vantage, along with practical examples of SQL operations that utilize this function.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/TD_FillRowID-Syntax","2024-07-27 12:16:15"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply","text/html;charset=UTF-8","200","","Indexable","","TD_NumApply Function | NumApply | Teradata Vantage - TD_NumApply - Analytics Database","85","820","This Analytics Database (SQL Engine) feature engineering utility function applies a specified numeric operator to the specified input table columns.","148","900","","0","TD_NumApply Function | NumApply | Teradata Vantage - TD_NumApply - Analytics Database","85","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply","","","","","","211630","13808","13808","4.895","A+","237","70","3.386","27.773","Very Hard","11.524","1","4","","707","707","0","99.860","720","718","0","","","","","","","","","0.524","","","","","","1.1","### Summary

The `TD_NumApply` function in Teradata Vantage allows users to apply specified numeric operators to columns in a database table. This function is particularly useful for performing complex calculations and analyzing relationships between multiple variables. The operators that can be applied include exponential, logarithmic, sigmoid, inverse of sine, and hyperbolic tangent functions. It leverages Teradata's efficient parallel processing capabilities, making it a valuable tool for quick and effective data analysis.

### Code Example

Below are examples of SQL commands for performing basic operations in a Teradata database, including SELECT, UPDATE, DELETE, and CREATE statements.

#### SELECT
```sql
SELECT 
    CustomerID, 
    FirstName, 
    LastName 
FROM 
    Customers 
WHERE 
    Country = 'USA';
```

#### UPDATE
```sql
UPDATE 
    Customers 
SET 
    City = 'New York' 
WHERE 
    CustomerID = 1;
```

#### DELETE
```sql
DELETE FROM 
    Customers 
WHERE 
    CustomerID = 10;
```

#### CREATE
```sql
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Country VARCHAR(50)
);
```

### Keywords and Phrases

- TD_NumApply Function
- NumApply
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Language: English (United States)
- Last Update 2024-04-06
- Product Category: Teradata Vantage™
- Function Syntax Descriptions
- Usage Notes
- Data Cleaning Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- TD_StrApply
- TD_FunctionFit
- TD_FunctionTransform
- TD_NumApply Usage Notes
- Example: How to Use TD_NumApply

This structured overview provides a comprehensive understanding of the `TD_NumApply` function and fundamental SQL operations relevant to Teradata databases.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply","2024-07-27 12:28:42"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/Example-How-to-Use-TD_NumApply","text/html;charset=UTF-8","200","","Indexable","","TD_NumApply Example | TD_NumApply | Teradata Vantage - Example: How to Use TD_NumApply - Analytics Database","107","1048","See an example of the Analytics Database (SQL Engine) feature engineering utility function TD_NumApply.","103","652","","0","TD_NumApply Example | TD_NumApply | Teradata Vantage - Example: How to Use TD_NumApply - Analytics Database","107","Database Analytic Functions","27","TD_NumApply InputTable: input_table","35","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/Example-How-to-Use-TD_NumApply","","","","","","210395","13881","13881","4.921","A+","229","86","2.663","87.392","Easy","11.764","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.657","","","","","","1.1","### Summary
In this document, we explore the use of the Teradata Vantage analytics database and specifically focus on the analytic function `TD_NumApply`. This function allows users to apply numeric transformations to specified columns of a dataset, such as taking logarithms or applying other mathematical operations. The document provides comprehensive guidance on how to use various analytic functions, including their syntax, input requirements, and practical examples.

### Code Examples
Below are some common SQL operations (Select, Update, Delete, Create) relevant to Teradata Vantage, showcasing the usage of the `TD_NumApply` function.

#### 1. **Select**
This query retrieves transformed data using `TD_NumApply`.
```sql
SELECT * FROM TD_NumApply (
  ON input_table AS InputTable PARTITION BY ANY
  USING
  TargetColumns ('Age', 'Fare')
  ApplyMethod ('log')
  Accumulate ('Passenger')
  InPlace ('true')
) AS dt;
```

#### 2. **Update**
Updating records in a table based on transformed values.
```sql
UPDATE input_table
FROM TD_NumApply (
  ON input_table AS InputTable PARTITION BY ANY
  USING
  TargetColumns ('Age', 'Fare')
  ApplyMethod ('log')
  InPlace ('true')
) AS dt
SET input_table.age = dt.age, input_table.fare = dt.fare;
```

#### 3. **Delete**
Deleting rows based on a condition after transformation.
```sql
DELETE FROM input_table
WHERE passenger IN (
  SELECT passenger FROM TD_NumApply (
    ON input_table AS InputTable PARTITION BY ANY
    USING
    TargetColumns ('Age', 'Fare')
    ApplyMethod ('log')
    InPlace ('true')
  ) AS dt
  WHERE dt.age IS NULL
);
```

#### 4. **Create**
Creating a new table to store transformed data.
```sql
CREATE TABLE transformed_table AS (
  SELECT * FROM TD_NumApply (
    ON input_table AS InputTable PARTITION BY ANY
    USING
    TargetColumns ('Age', 'Fare')
    ApplyMethod ('log')
    Accumulate ('Passenger')
    InPlace ('true')
  ) AS dt
) WITH NO DATA;
```

### Keywords and Phrases
- TD_NumApply Example
- TD_NumApply
- Teradata Vantage - Example: How to Use TD_NumApply
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Usage Notes
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Example: How to Use TD_NumApply

This document serves as a guide for leveraging the powerful analytic capabilities of Teradata Vantage, helping users effectively manage and analyze data within their enterprise environments.","26","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/Example-How-to-Use-TD_NumApply","2024-07-27 12:50:55"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/Optional-Syntax-Elements-for-TD_NumApply","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_NumApply - Analytics Database","61","577","OutputColumns [Ignored with Inplace ('true'), otherwise optional.] Specifies the names for the output columns. An output_column cannot exceed 128 characters. Default: With InPlace ('false'), target_column_operator; otherwise target_column. If any target_column_operator exceeds 128 characters, specify an output_column f...","323","2014","","0","Optional Syntax Elements for TD_NumApply - Analytics Database","61","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/Optional-Syntax-Elements-for-TD_NumApply","","","","","","209398","13249","13249","4.697","A+","187","62","3.016","30.954","Hard","11.523","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.511","","","","","","1.1","### Summary
The Teradata Vantage™ Analytics Database provides a suite of analytic functions tailored to data processing and analytics. This includes functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Each function has specific syntax and required elements, which facilitate smooth integration and execution within the Teradata environment.

### Code Example Section

Here are some examples of basic SQL operations commonly used in an Analytics Database context:

#### 1. **Create**
Creating a new table can be fundamental for storing results or intermediate data.

```sql
CREATE TABLE sales_data (
    sale_id INT PRIMARY KEY,
    sale_date DATE,
    amount DECIMAL(10, 2),
    customer_id INT
);
```

#### 2. **Select**
Retrieving data from the database is essential for analysis.

```sql
SELECT sale_id, sale_date, amount
FROM sales_data
WHERE amount > 100.00;
```

#### 3. **Update**
Updating existing records allows for data correction or adjustment.

```sql
UPDATE sales_data
SET amount = amount * 1.10
WHERE sale_date < '2023-01-01';
```

#### 4. **Delete**
Removing records that are no longer needed or are duplicates.

```sql
DELETE FROM sales_data
WHERE sale_date < '2020-01-01';
```

### Keywords and Phrases
- **Optional Syntax Elements for TD_NumApply**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Release Number 17.20**
- **Published June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Product Category: Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Recommendations for Using Analytic Functions**
- **Example Syntax and Use Cases**
- **Function Output and Input Requirements**

This summary and the code examples provide a foundation for working with the Teradata Analytics Database and its features.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/Optional-Syntax-Elements-for-TD_NumApply","2024-07-27 12:51:43"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/Required-Syntax-Elements-for-TD_NumApply","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_NumApply - Analytics Database","61","581","ON clause Specifies the table name, view name or query as an InputTable. TargetColumns Specifies the names of the InputTable columns to apply the numeric operator. ApplyMethod Main base attribute for this function that specifies the operator that you want to apply to the given columns. Accepts one of these numeric oper...","323","2017","","0","Required Syntax Elements for TD_NumApply - Analytics Database","61","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/Required-Syntax-Elements-for-TD_NumApply","","","","","","209874","13344","13344","4.731","A+","139","51","2.725","36.695","Hard","11.283","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.449","","","","","","1.1","### Summary
The TD_NumApply function within Teradata's Analytics Database allows users to apply numeric operators to specified columns in a table. This function is useful for performing mathematical transformations such as exponentiation, logarithmic calculations, and other numeric operations. Understanding the required syntax and elements involved in using the TD_NumApply function is essential for effective data manipulation and analysis.

### Code Examples
Below are examples demonstrating the basic SQL operations: Select, Update, Delete, and Create, relevant to the usage of TD_NumApply.

#### 1. Select Example
```sql
SELECT column1, column2, TD_NumApply(column3, 'EXP') AS exp_column
FROM my_table
WHERE condition_column = 'some_value';
```

#### 2. Update Example
```sql
UPDATE my_table
SET column3 = TD_NumApply(column3, 'LOG')
WHERE condition_column = 'some_value';
```

#### 3. Delete Example
```sql
DELETE FROM my_table
WHERE condition_column = 'some_value';
```

#### 4. Create Example
```sql
CREATE TABLE new_table AS (
    SELECT column1, column2, TD_NumApply(column3, 'TANH') AS tanh_column
    FROM my_table
) WITH NO DATA;
```

### Required Syntax Elements for TD_NumApply
- **InputTable**: Specifies the source table, view, or query.
- **TargetColumns**: Specifies which columns to apply the numeric operator to.
- **ApplyMethod**: The numeric operator to apply:
  - `EXP`: Exponential function
  - `LOG`: Base 10 logarithm
  - `SIGMOID`: Sigmoid function
  - `SININV`: Inverse hyperbolic sine
  - `TANH`: Hyperbolic tangent

### Keywords and Phrases
- Required Syntax Elements for TD_NumApply
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Limitations When Using PARTITION BY
- Non-Deterministic Behavior
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Model Training Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- TD_NumApply Syntax
- TD_NumApply Input
- TD_NumApply Output
- Example: How to Use TD_NumApply

This information provides a foundational understanding of how to use the TD_NumApply function within Teradata's Analytics Database effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/Required-Syntax-Elements-for-TD_NumApply","2024-07-27 12:07:34"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/TD_NumApply-Input","text/html;charset=UTF-8","200","","Indexable","","TD_NumApply Input - Analytics Database","38","363","InputTable Schema Column Data Type Description target_column NUMERIC Column to which to apply num_operator. accumulate_column Any Column to copy to output table.","161","1076","","0","TD_NumApply Input - Analytics Database","38","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/TD_NumApply-Input","","","","","","208742","12984","12984","4.603","A+","63","37","1.703","0.000","Very Hard","11.115","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.694","","","","","","1.1","### Summary

This document provides a comprehensive overview of the Teradata Vantage™ Analytics Database, focusing on its analytic functions, features, and usage. The document includes essential information regarding deployment, function categories, usage notes, input and output specifications, and examples for various analytic operations.

### Code Example

The following code examples demonstrate basic SQL operations that can be performed on the Teradata Analytics Database:

#### 1. **Create**
To create a new table in the analytics database:

```sql
CREATE TABLE SalesData (
    SaleID INT,
    ProductName VARCHAR(100),
    Quantity INT,
    SaleDate DATE
);
```

#### 2. **Select**
To retrieve data from the created table:

```sql
SELECT ProductName, SUM(Quantity) AS TotalSales
FROM SalesData
GROUP BY ProductName;
```

#### 3. **Update**
To update the quantity of a specific product sold:

```sql
UPDATE SalesData
SET Quantity = Quantity + 10
WHERE ProductName = 'Widget A';
```

#### 4. **Delete**
To delete records of a specific product:

```sql
DELETE FROM SalesData
WHERE ProductName = 'Widget A' AND SaleDate < '2023-01-01';
```

### Keywords and Phrases

- **TD_NumApply Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number** - 17.20
- **Published** - June 2022
- **Language** - English (United States)
- **Last Update** - 2024-04-06
- **dita:mapPath** - gjn1627595495337.ditamap
- **dita:ditavalPath** - ayr1485454803741.ditaval
- **dita:id** - jmh1512506877710
- **Product Category** - Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This summary and code examples provide a foundational understanding of how to interact with the Teradata Analytics Database using SQL.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/TD_NumApply-Input","2024-07-27 11:27:50"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/TD_NumApply-Output","text/html;charset=UTF-8","200","","Indexable","","TD_NumApply Output - Analytics Database","39","379","Output Table Schema Column Data Type Description accumulate_column Same as in InputTable Column copied from InputTable. output_column Same as in InputTable Column to that num_operator was applied. With InPlace ('true'), output_column is target_column. With InPlace ('false'), OutputColumns determines output_column.","315","2036","","0","TD_NumApply Output - Analytics Database","39","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/TD_NumApply-Output","","","","","","209350","13158","13158","4.665","A+","80","39","2.051","1.713","Very Hard","11.159","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.479","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database provides a robust set of analytic functions that facilitate data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This functionality is crucial for businesses looking to derive insights from their data efficiently. The following sections include SQL code examples for basic database operations: Select, Update, Delete, and Create, as well as relevant keywords and phrases associated with Teradata's analytic functions.

### Code Example

#### 1. Select
```sql
-- Select statement to retrieve data from a table
SELECT customer_id, customer_name, total_purchases
FROM customer_data
WHERE total_purchases > 1000;
```

#### 2. Update
```sql
-- Update statement to modify existing records in a table
UPDATE customer_data
SET total_purchases = total_purchases + 100
WHERE customer_id = 12345;
```

#### 3. Delete
```sql
-- Delete statement to remove records from a table
DELETE FROM customer_data
WHERE total_purchases < 500;
```

#### 4. Create
```sql
-- Create statement to create a new table
CREATE TABLE sales_data (
    sale_id INT PRIMARY KEY,
    customer_id INT,
    sale_amount DECIMAL(10, 2),
    sale_date DATE
);
```

### Keywords and Phrases

- TD_NumApply Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- gjn1627595495337.ditamap
- dita:ditavalPath
- ayr1485454803741.ditaval
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This guide provides a foundational understanding of basic SQL operations and highlights the significant features of the Teradata Vantage™ Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/TD_NumApply-Output","2024-07-27 12:19:08"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/TD_NumApply-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_NumApply Syntax | NumApply | Teradata Vantage - TD_NumApply Syntax - Analytics Database","90","868","See the syntax of the Analytics Database (SQL Engine) function TD_NumApply and read descriptions of its required and optional syntax elements.","142","896","","0","TD_NumApply Syntax | NumApply | Teradata Vantage - TD_NumApply Syntax - Analytics Database","90","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/TD_NumApply-Syntax","","","","","","208798","13084","13084","4.638","A+","137","51","2.686","49.729","Hard","11.355","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.485","","","","","","1.1","## Overview of Teradata Vantage TD_NumApply Function

The `TD_NumApply` function in Teradata Vantage is used for applying various numerical operations to specified columns in a dataset. This function allows you to perform operations on target columns, output results to new columns, and apply various mathematical transformations efficiently. It is particularly useful in the context of analytics databases where performance and scalability are critical.

### Code Example Section

#### 1. **Select Statement**
To use the `TD_NumApply` function within a `SELECT` statement to apply a numerical operation:

```sql
SELECT
  InputTable.*,
  TD_NumApply(
    ON InputTable 
    USING
      TargetColumns ('column1', 'column2')
      OutputColumns ('new_column1', 'new_column2')
      ApplyMethod ('add')
  ) AS NumApplied
FROM
  InputTable;
```

#### 2. **Update Statement**
You can also use `TD_NumApply` to update existing columns in a table:

```sql
UPDATE InputTable
SET 
  column1 = TD_NumApply(
    ON InputTable 
    USING
      TargetColumns ('column1')
      ApplyMethod ('multiply')
  )
WHERE some_condition;
```

#### 3. **Delete Statement**
If you need to remove records based on the results of the `TD_NumApply`, you can do so with a `DELETE` statement:

```sql
DELETE FROM InputTable
WHERE TD_NumApply(
    ON InputTable 
    USING
      TargetColumns ('column1')
      ApplyMethod ('greater_than')
) > threshold_value;
```

#### 4. **Create Table Statement**
To create a new table using the results of `TD_NumApply`, you can include it in a `CREATE TABLE` statement:

```sql
CREATE TABLE NewTable AS (
  SELECT
    *,
    TD_NumApply(
      ON InputTable 
      USING
        TargetColumns ('column1', 'column3')
        OutputColumns ('new_column1', 'new_column3')
        ApplyMethod ('subtract')
    ) AS NumApplied
  FROM InputTable
) WITH NO DATA;
```

### Summary

The `TD_NumApply` function in Teradata Vantage is a powerful tool for performing numerical operations on specified columns within tables or views. It supports operations like addition, subtraction, multiplication, and more, making it versatile for various analytical tasks. The ability to integrate `TD_NumApply` with SQL commands like `SELECT`, `UPDATE`, `DELETE`, and `CREATE TABLE` allows for comprehensive data manipulation and analysis within the Teradata ecosystem.

### Keywords and Phrases
- TD_NumApply Syntax
- NumApply
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- Features
- SQL Command Examples
- Data Manipulation Functions
- Analytical Operations
- Performance Optimization
- Mathematical Transformations
- Data Processing Techniques
- Teradata SQL Syntax","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/TD_NumApply-Syntax","2024-07-27 12:21:22"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/TD_NumApply-Usage-Notes","text/html;charset=UTF-8","200","","Indexable","","TD_NumApply Usage Notes | Teradata Vantage - TD_NumApply Usage Notes - Analytics Database","89","869","Learn about the technique with using the Analytics Database (SQL Engine) feature engineering utility function TD_NumApply.","122","770","","0","TD_NumApply Usage Notes | Teradata Vantage - TD_NumApply Usage Notes - Analytics Database","89","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/TD_NumApply-Usage-Notes","","","","","","296412","36672","36672","13.000","A+","409","84","4.869","60.617","Normal","11.825","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.561","","","","","","1.1","### Summary

The `TD_NumApply` function in Teradata Vantage allows users to apply specified numeric operators to designated input columns in a table. This function is particularly useful for mathematical transformations and data analysis, offering several operators including exponential, logarithmic, sigmoid, arcsin, and hyperbolic tangent. Each operator serves distinct purposes in data manipulation and analysis, such as normalizing data, transforming scales, and enabling non-linear relationships in modeling.

### Code Examples

Here are examples of how to use `TD_NumApply` along with basic SQL operations like `SELECT`, `UPDATE`, `DELETE`, and `CREATE` in Teradata.

#### 1. CREATE Table

```sql
CREATE TABLE sales_data (
    id INT,
    revenue FLOAT,
    cost FLOAT
);
```

#### 2. INSERT Data

```sql
INSERT INTO sales_data (id, revenue, cost) VALUES (1, 1000.00, 500.00);
INSERT INTO sales_data (id, revenue, cost) VALUES (2, 2000.00, 800.00);
```

#### 3. SELECT with TD_NumApply

Here, we will use `TD_NumApply` to apply the `LOG` function to the revenue column.

```sql
SELECT 
    id,
    revenue,
    TD_NumApply('LOG', revenue) AS log_revenue
FROM 
    sales_data;
```

#### 4. UPDATE with TD_NumApply

We can update the `cost` column by applying the `EXP` function to the revenue.

```sql
UPDATE sales_data
SET cost = TD_NumApply('EXP', revenue);
```

#### 5. DELETE Example

To delete a record where the revenue is less than a certain threshold:

```sql
DELETE FROM sales_data
WHERE revenue < 1500.00;
```

### Keywords and Phrases

- TD_NumApply Usage Notes
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Enterprise Edition
- IntelliFlex
- VMware
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact
- Limitations Using PARTITION BY
- Non-Deterministic Behavior
- Spool Space Exhaustion
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Feature Engineering Functions
- Model Training Functions
- TD_NumApply Syntax
- Numeric Operators: EXP, LOG, SIGMOID, SININV, TANH
- Transform Functions
- Data Exploration Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- Sessionize
- NGramSplitter
- Data Imputation Functions

This summary and the examples provided should help you understand how to use `TD_NumApply` within the context of SQL operations in Teradata Vantage.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/TD_NumApply-Usage-Notes","2024-07-27 11:35:02"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns","text/html;charset=UTF-8","200","","Indexable","","TD_RoundColumns Function | RoundColumns | Teradata Vantage - TD_RoundColumns - Analytics Database","97","949","This Analytics Database feature engineering utility function rounds the values of each specified input table column to a specified number of decimal places.","156","952","","0","TD_RoundColumns Function | RoundColumns | Teradata Vantage - TD_RoundColumns - Analytics Database","97","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns","","","","","","210705","13705","13705","4.858","A+","310","76","4.079","48.505","Hard","11.763","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","0.526","","","","","","1.1","### Summary of TD_RoundColumns Function

The `TD_RoundColumns` function in Teradata Vantage is used to round the values of specified columns in an input table to a specified number of decimal places. This function is particularly useful in data engineering for ensuring data consistency, reducing data size, improving accuracy, enhancing visualization, and optimizing performance for computational tasks.

### Code Example

Below are examples demonstrating common SQL operations: `SELECT`, `INSERT`, `UPDATE`, and `DELETE` using the `TD_RoundColumns` function.

#### 1. Select

```sql
SELECT 
    column1, 
    column2, 
    TD_RoundColumns(column3, 2) AS rounded_column3
FROM 
    my_table;
```

#### 2. Insert

```sql
INSERT INTO my_table (column1, column2, column3)
VALUES ('value1', 'value2', TD_RoundColumns(123.4567, 2));
```

#### 3. Update

```sql
UPDATE my_table
SET column3 = TD_RoundColumns(column3, 2)
WHERE column1 = 'value1';
```

#### 4. Delete

```sql
DELETE FROM my_table
WHERE TD_RoundColumns(column3, 2) < 10.00;
```

### Keywords and Phrases

- **TD_RoundColumns Function**
- **RoundColumns**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns","2024-07-27 11:51:14"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/Example-How-to-Use-TD_RoundColumns","text/html;charset=UTF-8","200","","Indexable","","TD_RoundColumns Example | RoundColumns | Teradata Vantage - Example: How to Use TD_RoundColumns - Analytics Database","116","1143","See an example of the Analytics Database (SQL Engine) feature engineering utility function TD_RoundColumns.","107","683","","0","TD_RoundColumns Example | RoundColumns | Teradata Vantage - Example: How to Use TD_RoundColumns - Analytics Database","116","Database Analytic Functions","27","TD_RoundColumns InputTable: titanic","35","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/Example-How-to-Use-TD_RoundColumns","","","","","","209904","13671","13671","4.846","A+","187","80","2.337","81.408","Easy","11.555","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.682","","","","","","1.1","## Overview of TD_RoundColumns

The `TD_RoundColumns` function in Teradata Vantage is designed to round numeric values in specified columns of a table to a defined precision. This function is particularly useful in data preparation and cleaning, ensuring that numerical data is presented in a consistent and easily interpretable format. Below, we provide a structured example of how to use `TD_RoundColumns` along with general SQL operations including SELECT, UPDATE, DELETE, and CREATE.

### Code Examples

#### 1. SELECT
The SELECT statement retrieves data from the specified table, allowing you to view the data before any operations are applied.

```sql
SELECT * FROM titanic;
```

#### 2. UPDATE
The UPDATE statement modifies existing records in a table. In this example, we could use it to update a specific fare for a passenger.

```sql
UPDATE titanic
SET fare = 10.50
WHERE passenger = 1;
```

#### 3. DELETE
The DELETE statement removes records from a table. Here, we demonstrate deleting a passenger record.

```sql
DELETE FROM titanic
WHERE passenger = 5;
```

#### 4. CREATE
The CREATE statement is used to create a new table. Below is an example of how to create a table to store passenger data.

```sql
CREATE TABLE titanic (
    passenger INT,
    pclass INT,
    fare DECIMAL(10, 4),
    survived INT
);
```

#### 5. TD_RoundColumns Example
This section illustrates how to use the `TD_RoundColumns` function to round the fare amounts in the `titanic` table.

##### Input Table: `titanic`
| passenger | pclass | fare     | survived |
|-----------|--------|----------|----------|
| 1         | 3      | 7.25     | 0        |
| 2         | 1      | 71.2833  | 1        |
| 3         | 3      | 7.925    | 1        |
| 4         | 1      | 53.100   | 1        |
| 5         | 3      | 8.050    | 0        |

##### SQL Call
```sql
SELECT * FROM TD_RoundColumns (
  ON titanic AS InputTable
  USING
  TargetColumns ('Fare')
  PrecisionDigit (1)
  Accumulate ('[0:1]','Survived')
) AS dt;
```

##### Output Table
| passenger | pclass | survived | fare  |
|-----------|--------|----------|-------|
| 1         | 3      | 0        | 7.30  |
| 2         | 1      | 1        | 71.30 |
| 3         | 3      | 1        | 7.90  |
| 4         | 1      | 1        | 53.10 |
| 5         | 3      | 0        | 8.10  |

### Summary
The `TD_RoundColumns` function is essential for rounding numeric values in specified columns while allowing for the accumulation of other values, such as counts or sums. The examples provided demonstrate basic SQL operations alongside the specific usage of `TD_RoundColumns`, making it a versatile tool in data manipulation and analysis within Teradata Vantage.

### Keywords and Phrases

- **TD_RoundColumns Example**
- **RoundColumns**
- **Teradata Vantage**
- **How to Use TD_RoundColumns**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Input Table Rows Redistribution**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","26","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/Example-How-to-Use-TD_RoundColumns","2024-07-27 11:21:25"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/Optional-Syntax-Elements-for-TD_RoundColumns","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_RoundColumns - Analytics Database","65","620","PrecisionDigit Specify the number of decimal places to which to round values. If precision is positive, the function rounds values to the right of the decimal point. If precision is negative, the function rounds values to the left of the decimal point. Default: If the PrecisionDigit value is not provided, the function ...","323","1884","","0","Optional Syntax Elements for TD_RoundColumns - Analytics Database","65","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/Optional-Syntax-Elements-for-TD_RoundColumns","","","","","","208931","13178","13178","4.672","A+","202","58","3.483","66.767","Normal","11.482","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.627","","","","","","1.1","### Summary

The Teradata Vantage Analytics Database provides a robust set of analytic functions for data manipulation and analysis. Among its various features, the functionality for handling round operations on numeric columns is encapsulated in the `TD_RoundColumns` function. This function is designed to round numeric values in specified columns of a table according to user-defined precision. The function is flexible, allowing for both required and optional syntax elements, making it suitable for a variety of use cases in data analysis.

### Code Examples

Below are examples illustrating basic SQL operations: `SELECT`, `UPDATE`, `DELETE`, and `CREATE` commands relevant to the `TD_RoundColumns` function.

#### 1. SELECT Example

```sql
SELECT 
    customer_id,
    TD_RoundColumns(order_amount, 2) AS rounded_order_amount
FROM 
    orders;
```

*This example selects the `customer_id` and the `order_amount` rounded to 2 decimal places from the `orders` table.*

#### 2. UPDATE Example

```sql
UPDATE orders
SET order_amount = TD_RoundColumns(order_amount, 2)
WHERE order_status = 'completed';
```

*This example updates the `order_amount` in the `orders` table to round the values to 2 decimal places for completed orders.*

#### 3. DELETE Example

```sql
DELETE FROM orders
WHERE TD_RoundColumns(order_amount, 2) = 0;
```

*This example deletes records from the `orders` table where the rounded order amount equals 0.*

#### 4. CREATE Example

```sql
CREATE TABLE rounded_orders AS (
    SELECT 
        customer_id,
        TD_RoundColumns(order_amount, 2) AS rounded_order_amount
    FROM 
        orders
) WITH NO DATA;
```

*This example creates a new table `rounded_orders` to hold the rounded order amounts, but does not copy any data yet.*

### Keywords and Phrases

- Optional Syntax Elements for TD_RoundColumns
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Examples: How to Use TD_RoundColumns
- PrecisionDigit
- Accumulate

This structured approach allows users to effectively leverage the capabilities of Teradata's Analytics Database for rounding and other data manipulation tasks.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/Optional-Syntax-Elements-for-TD_RoundColumns","2024-07-27 11:22:54"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/Required-Syntax-Elements-for-TD_RoundColumns","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_RoundColumns - Analytics Database","65","624","ON clause Accept the InputTable clause. TargetColumns Specify the names of the InputTable columns in which to round every value to precision digits.","148","927","","0","Required Syntax Elements for TD_RoundColumns - Analytics Database","65","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/Required-Syntax-Elements-for-TD_RoundColumns","","","","","","207688","12760","12760","4.523","A+","67","38","1.763","16.905","Very Hard","11.178","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.533","","","","","","1.1","## Summary

The **Teradata Vantage™ Analytics Database** provides a rich set of analytic functions designed to handle various data processing tasks, including data cleaning, exploration, feature engineering, model training, scoring, and evaluation. The **TD_RoundColumns** function specifically allows users to round numeric values in specified columns to a defined precision, making it a valuable tool for data preprocessing.

### Code Examples

Here are examples of SQL commands typically used in Teradata, focusing on the basic operations: Select, Update, Delete, and Create.

#### 1. Select
Retrieve data from a table:
```sql
SELECT column1, column2 
FROM your_table 
WHERE condition;
```

#### 2. Update
Modify existing records in a table:
```sql
UPDATE your_table 
SET column1 = new_value 
WHERE condition;
```

#### 3. Delete
Remove records from a table:
```sql
DELETE FROM your_table 
WHERE condition;
```

#### 4. Create
Create a new table:
```sql
CREATE TABLE new_table (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Using TD_RoundColumns

Below is a specific example showing how to use the `TD_RoundColumns` function to round values in selected columns.

```sql
SELECT TD_RoundColumns(column1, column2, precision) 
FROM your_table;
```

- **column1, column2**: The columns you want to round.
- **precision**: The number of decimal places to round to.

### Keywords and Phrases

- **Required Syntax Elements for TD_RoundColumns**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Non-Deterministic Behavior**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This succinct overview provides a foundation for understanding how to utilize Teradata's analytics capabilities, particularly focusing on data manipulation and the specific use of the `TD_RoundColumns` function.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/Required-Syntax-Elements-for-TD_RoundColumns","2024-07-27 12:38:52"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/TD_RoundColumns-Column-Examples","text/html;charset=UTF-8","200","","Indexable","","TD_RoundColumns Column Examples - Analytics Database","52","522","You can also input multiple columns in the TargetColumns parameter to have these statistics calculated for all those columns at the same time. If you want stats for all columns, a shorter way to do this would be to add [:] in the TargetColumns parameter. titanic2: Input Table The following input table is used for these...","323","1956","","0","TD_RoundColumns Column Examples - Analytics Database","52","Database Analytic Functions","27","titanic2: Input Table","21","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/TD_RoundColumns-Column-Examples","","","","","","218821","13875","13875","4.919","A+","239","109","2.193","97.709","Very Easy","11.049","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.630","","","","","","1.1","## Summary

This document covers the Teradata Vantage™ Analytics Database, specifically focusing on analytic functions and their usage. It provides insights into various functions for data cleaning, exploration, feature engineering, model training, scoring, evaluation, text analytics, and hypothesis testing. Each function is explained with its syntax, required and optional elements, and practical examples to illustrate how to use them effectively.

### Code Example Section

Here are examples of SQL code for basic operations such as `SELECT`, `UPDATE`, `DELETE`, and `CREATE` in the context of the Teradata Vantage™ Analytics Database.

#### Select

```sql
-- Selecting specific columns from a table
SELECT passenger, fare, height_cms 
FROM titanic2;
```

#### Update

```sql
-- Updating a column value based on a condition
UPDATE titanic2 
SET fare = fare * 1.1 
WHERE survived = 1;
```

#### Delete

```sql
-- Deleting records based on a condition
DELETE FROM titanic2 
WHERE p_class = 3 AND survived = 0;
```

#### Create

```sql
-- Creating a new table to store the cleaned data
CREATE TABLE cleaned_titanic AS (
  SELECT * FROM titanic2
) WITH NO DATA;
```

### Keywords and Phrases

- **TD_RoundColumns**: Column Examples - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**: Enterprise
- **IntelliFlex**
- **VMware**
- **Product**: Analytics Database
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**: gjn1627595495337.ditamap
- **dita:ditavalPath**: ayr1485454803741.ditaval
- **dita:id**: jmh1512506877710
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This outline serves as a concise reference for understanding the key features and functionalities of the Teradata Vantage™ Analytics Database, along with practical SQL examples for data manipulation.","27","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/TD_RoundColumns-Column-Examples","2024-07-27 11:23:51"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/TD_RoundColumns-Input","text/html;charset=UTF-8","200","","Indexable","","TD_RoundColumns Input - Analytics Database","42","406","InputTable Schema Column Data Type Description target_column NUMERIC Column in which to round every value to precision digits. accumulate_column Any Column to copy to output table.","180","1170","","0","TD_RoundColumns Input - Analytics Database","42","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/TD_RoundColumns-Input","","","","","","208842","13039","13039","4.622","A+","67","38","1.763","4.278","Very Hard","11.121","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.595","","","","","","1.1","## Summary

This document provides an overview of Teradata Vantage™ and its Analytics Database Analytic Functions, detailing various operations such as data cleaning, exploration, feature engineering, model training, scoring, and evaluation. It also includes guidelines on syntax, input/output specifications, and examples for using specific functions like `TD_RoundColumns`, `TD_ConvertTo`, and more.

## Code Example Section

Here are some basic SQL operations that can be performed using Teradata Vantage™:

### 1. Create
To create a new table in the database:
```sql
CREATE TABLE SalesData (
    SaleID INT,
    ProductName VARCHAR(100),
    SaleAmount DECIMAL(10, 2),
    SaleDate DATE
);
```

### 2. Select
To retrieve data from the table:
```sql
SELECT ProductName, SUM(SaleAmount) AS TotalSales
FROM SalesData
GROUP BY ProductName
ORDER BY TotalSales DESC;
```

### 3. Update
To update existing records in the table:
```sql
UPDATE SalesData
SET SaleAmount = SaleAmount * 1.10  -- Increasing sales amount by 10%
WHERE SaleDate < '2022-01-01';
```

### 4. Delete
To remove records from the table:
```sql
DELETE FROM SalesData
WHERE SaleAmount < 50;  -- Deleting sales records with amount less than 50
```

## Keywords and Phrases

- TD_RoundColumns Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This summary and the accompanying code examples should serve as a foundational guide for working with the Teradata Vantage™ Analytics Database and its functions.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/TD_RoundColumns-Input","2024-07-27 11:22:20"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/TD_RoundColumns-Output","text/html;charset=UTF-8","200","","Indexable","","TD_RoundColumns Output - Analytics Database","43","422","Output Table Schema Column Data Type Description target_column NUMERIC Column in that every value is rounded to precision digits. accumulate_column Any Column copied from InputTable.","182","1188","","0","TD_RoundColumns Output - Analytics Database","43","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/TD_RoundColumns-Output","","","","","","208831","13036","13036","4.621","A+","66","38","1.737","3.827","Very Hard","11.123","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.589","","","","","","1.1","## Summary of TD_RoundColumns

The **TD_RoundColumns** function is designed to round numeric values in a specified column of a database table to a defined number of decimal places. This function is part of the Teradata Vantage™ analytics database, which provides various analytic functions for data manipulation and analysis.

### Key Features:
- **Input Table**: The function takes an input table containing numeric columns that need to be rounded.
- **Precision**: Users can specify the number of decimal places to which the values should be rounded.
- **Output**: The output includes the rounded values in a new column, along with the original values for comparison.

## Code Examples

### Example 1: Create a Table
```sql
CREATE TABLE SalesData (
    SaleID INT,
    SaleAmount DECIMAL(10, 2)
);
```

### Example 2: Insert Data into the Table
```sql
INSERT INTO SalesData (SaleID, SaleAmount) VALUES (1, 123.4567);
INSERT INTO SalesData (SaleID, SaleAmount) VALUES (2, 987.6543);
```

### Example 3: Round Values in a Column
```sql
SELECT 
    SaleID, 
    SaleAmount, 
    TD_RoundColumns(SaleAmount, 2) AS RoundedAmount
FROM 
    SalesData;
```

### Example 4: Update Values in a Column
```sql
UPDATE SalesData
SET SaleAmount = TD_RoundColumns(SaleAmount, 2);
```

### Example 5: Delete from Table
```sql
DELETE FROM SalesData
WHERE SaleID = 1;
```

## Keywords and Phrases
- **TD_RoundColumns Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**: Teradata Vantage™
- **Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Recommendations for Using Analytic Functions**
- **Examples: How to Use TD_RoundColumns**
- **Output Table Schema**: Column Data Types and Descriptions.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/TD_RoundColumns-Output","2024-07-27 11:34:02"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/TD_RoundColumns-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_RoundColumns Syntax | RoundColumns | Teradata Vantage - TD_RoundColumns Syntax - Analytics Database","102","997","See the syntax of the Analytics Database (SQL Engine) function TD_RoundColumns and read descriptions of its required and optional syntax elements.","146","927","","0","TD_RoundColumns Syntax | RoundColumns | Teradata Vantage - TD_RoundColumns Syntax - Analytics Database","102","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/TD_RoundColumns-Syntax","","","","","","208403","12942","12942","4.588","A+","105","47","2.234","36.979","Hard","11.274","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.082","","","","","","1.1","### Summary

The `TD_RoundColumns` function in Teradata is a powerful analytic tool used for rounding specified columns in a table, view, or query. This function allows users to define the precision for rounding and can also accumulate values from specified columns. The `TD_RoundColumns` function is versatile and can be utilized in various SQL operations, including SELECT, CREATE TABLE, and CREATE VIEW.

### Code Example

Here are examples of how to use `TD_RoundColumns` in different SQL operations:

#### 1. SELECT Statement
This example demonstrates how to use `TD_RoundColumns` to round values in selected columns.

```sql
SELECT *
FROM TD_RoundColumns (
  ON (SELECT column1, column2 FROM my_table) AS InputTable
  USING
  TargetColumns ('column1', 'column2')
  PrecisionDigit (2)
);
```

#### 2. CREATE TABLE Statement
This example shows how to create a new table using the `TD_RoundColumns` function.

```sql
CREATE TABLE my_rounded_table AS
(
  SELECT *
  FROM TD_RoundColumns (
    ON (SELECT column1, column2 FROM my_table) AS InputTable
    USING
    TargetColumns ('column1', 'column2')
    PrecisionDigit (2)
  )
) WITH NO DATA;
```

#### 3. CREATE VIEW Statement
This example creates a view that rounds specified columns.

```sql
CREATE VIEW my_rounded_view AS
SELECT *
FROM TD_RoundColumns (
  ON my_table AS InputTable
  USING
  TargetColumns ('column1', 'column2')
  PrecisionDigit (3)
);
```

#### 4. UPDATE Statement
While `TD_RoundColumns` isn't explicitly used in an UPDATE statement, you can achieve rounding with a direct update.

```sql
UPDATE my_table
SET column1 = ROUND(column1, 2),
    column2 = ROUND(column2, 2);
```

### Keywords and Phrases

- **TD_RoundColumns Syntax**
- **RoundColumns**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware Product**
- **Release Number 17.20**
- **Published June 2022**
- **Language English (United States)**
- **Last Update 2024-04-06**
- **Product Category Teradata Vantage™**
- **Data Cleaning Functions**
- **Function Syntax Descriptions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Input Table Schemas**
- **Accumulated Columns Impact on Function Performance**
- **Spool Space Exhaustion for Large Partitions**
- **Recommendations for Using Analytic Functions**","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/TD_RoundColumns-Syntax","2024-07-27 11:30:06"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply","text/html;charset=UTF-8","200","","Indexable","","TD_StrApply Function | strapply | Teradata Vantage - TD_StrApply - Analytics Database","85","765","This Analytics Database (SQL Engine) feature engineering utility function applies a specified string operator to the specified input table columns.","147","886","","0","TD_StrApply Function | strapply | Teradata Vantage - TD_StrApply - Analytics Database","85","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply","","","","","","210090","13452","13452","4.769","A+","169","60","2.817","44.788","Hard","11.379","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.542","","","","","","1.1","## Summary

The TD_StrApply function in Teradata Vantage is a powerful tool for string manipulation, particularly useful for applying regular expression patterns to strings. This function allows users to search for specific patterns within a string and replace them with a different string. It's particularly advantageous in data preparation and cleaning tasks where string formats need to be standardized or modified.

### Code Example: Select, Update, Delete, Create

Here are examples of common SQL operations using Teradata Vantage:

1. **Select**: Retrieve data from the `employees` table.

   ```sql
   SELECT first_name, last_name, email
   FROM employees
   WHERE department = 'Sales';
   ```

2. **Update**: Change the email format for employees by replacing dots with underscores.

   ```sql
   UPDATE employees
   SET email = TD_StrApply(email, 'replace(\., _)')
   WHERE email LIKE '%.%';
   ```

3. **Delete**: Remove records of employees who no longer work at the company.

   ```sql
   DELETE FROM employees
   WHERE employment_status = 'terminated';
   ```

4. **Create**: Create a new table called `departments`.

   ```sql
   CREATE TABLE departments (
       department_id INT PRIMARY KEY,
       department_name VARCHAR(100),
       manager_id INT
   );
   ```

### Keywords and Phrases

- TD_StrApply Function
- strapply
- Teradata Vantage - TD_StrApply
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- String manipulation
- Regular expression pattern
- Data cleaning
- Email format modification
- SQL operations: Select, Update, Delete, Create
- Input and Output specifications
- TD_NumApply
- Related functions and documentation","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply","2024-07-27 12:46:24"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/Example-How-to-Use-TD_StrApply","text/html;charset=UTF-8","200","","Indexable","","TD_StrApply Example | strapply | Teradata Vantage - Example: How to Use TD_StrApply - Analytics Database","104","959","See an example of the Analytics Database (SQL Engine) feature engineering utility function TD_StrApply.","103","640","","0","TD_StrApply Example | strapply | Teradata Vantage - Example: How to Use TD_StrApply - Analytics Database","104","Database Analytic Functions","27","TD_StrApply Input Table: input_table","36","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/Example-How-to-Use-TD_StrApply","","","","","","210586","14007","14007","4.966","A+","260","82","3.171","84.201","Easy","11.846","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.767","","","","","","1.1","## Overview of Teradata Vantage and TD_StrApply

Teradata Vantage™ is a powerful analytics database that enables organizations to perform complex analytic functions on large datasets. One of the many functions available in Teradata Vantage is `TD_StrApply`, which is used for string manipulation tasks. This function allows users to apply operations to string columns in a dataset efficiently.

### TD_StrApply Function

The `TD_StrApply` function serves to apply various string operations such as converting strings to uppercase, lowercase, or applying other transformations. This is particularly useful in data cleaning and preparation stages of data analysis.

### Code Example Section

Here are some fundamental SQL operations such as Select, Update, Delete, and Create, which are commonly used in Teradata databases.

#### 1. **Select**
```sql
SELECT * 
FROM passengers 
WHERE survived = 1;
```

#### 2. **Update**
```sql
UPDATE passengers 
SET fare = fare * 1.10 
WHERE pclass = 1;
```

#### 3. **Delete**
```sql
DELETE FROM passengers 
WHERE age IS NULL;
```

#### 4. **Create**
```sql
CREATE TABLE passengers (
    passenger_id INT,
    survived INT,
    pclass INT,
    name VARCHAR(100),
    gender VARCHAR(10),
    age FLOAT,
    sibsp INT,
    parch INT,
    ticket VARCHAR(20),
    fare FLOAT,
    cabin VARCHAR(10),
    embarked CHAR(1)
);
```

#### 5. **TD_StrApply Example**
```sql
SELECT * FROM TD_StrApply ( 
    ON strApply_input_table AS InputTable PARTITION BY ANY
    USING   
        TargetColumns ('Gender')
        stringOperation ('toUpper') 
        Accumulate('Passenger')
        InPlace('True')
) AS dt 
ORDER BY 1;
```

### Summary

In summary, Teradata Vantage provides a robust set of analytic functions, including TD_StrApply, which enhances string handling capabilities within large datasets. The basic SQL operations illustrated above are foundational for data manipulation in Teradata.

### Keywords and Phrases
- **TD_StrApply Example**
- **strapply**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number 17.20**
- **Published June 2022**
- **Last Update April 2024**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Displaying Online Help for Analytics Database Analytic Functions**","26","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/Example-How-to-Use-TD_StrApply","2024-07-27 11:56:19"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/Optional-Syntax-Elements-for-TD_StrApply","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_StrApply - Analytics Database","61","560","OutputColumns [Ignored with Inplace ('true'), otherwise optional.] Specifies the name for the output columns. An output_column cannot exceed 128 characters. Default: With InPlace ('false'), target_column_operator; otherwise target_column If any target_column_operator exceeds 128 characters, specify an output_column for...","323","2016","","0","Optional Syntax Elements for TD_StrApply - Analytics Database","61","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/Optional-Syntax-Elements-for-TD_StrApply","","","","","","214660","14015","14015","4.968","A+","353","100","3.530","39.085","Hard","11.809","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.646","","","","","","1.1","# Teradata Vantage™: Analytics Database Overview

Teradata Vantage™ is a powerful analytics platform designed to handle complex data queries and analytics. The Analytics Database offers a variety of analytic functions that can be employed for data cleaning, exploration, feature engineering, model training, and evaluation. This guide provides an overview of basic SQL operations such as Select, Update, Delete, and Create, focusing on how to manipulate data within the Teradata environment.

## Summary of SQL Operations

1. **Select**: Retrieve data from one or more tables.
2. **Update**: Modify existing data in a table.
3. **Delete**: Remove data from a table.
4. **Create**: Create a new table or database.

## Code Examples

### 1. Select

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

**Example**:
```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

### 2. Update

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example**:
```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department = 'Sales';
```

### 3. Delete

```sql
DELETE FROM table_name
WHERE condition;
```

**Example**:
```sql
DELETE FROM employees
WHERE last_name = 'Doe';
```

### 4. Create

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example**:
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

## Keywords and Phrases

- **Optional Syntax Elements for TD_StrApply**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **Product Category**: Teradata Vantage™
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Recommendations for Using Analytic Functions**
- **Displaying Online Help for Analytics Database Analytic Functions**

This guide serves as an introduction to fundamental SQL operations within the Teradata Vantage™ Analytics Database and provides important references for further exploration of its capabilities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/Optional-Syntax-Elements-for-TD_StrApply","2024-07-27 11:47:01"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/Required-Syntax-Elements-for-TD_StrApply","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_StrApply - Analytics Database","61","564","ON clause Accepts the InputTable clause. TargetColumns Specifies the name of the input table columns to apply the string operator. StringOperation Specifies a string operator (str_operator) from the following table. If str_operator requires string, length, or start_index, specify that value with String, StringLength, o...","323","1943","","0","Required Syntax Elements for TD_StrApply - Analytics Database","61","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/Required-Syntax-Elements-for-TD_StrApply","","","","","","213964","13831","13831","4.903","A+","241","66","3.652","22.344","Very Hard","11.501","1","5","","707","707","0","99.860","715","709","0","","","","","","","","","0.537","","","","","","1.1","## Summary

The Teradata Analytics Database provides a comprehensive suite of analytic functions tailored for various data manipulation and analysis tasks. This includes functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Teradata offers specific functions like `TD_StrApply` which allows users to apply various string operations on data columns. Understanding the required syntax and available options is crucial for effectively leveraging these functions in data analytics workflows.

## Code Example

Here's a quick overview of the basic SQL commands: **Select**, **Update**, **Delete**, and **Create**.

### Select
```sql
SELECT column1, column2
FROM my_table
WHERE condition;
```

### Update
```sql
UPDATE my_table
SET column1 = value1, column2 = value2
WHERE condition;
```

### Delete
```sql
DELETE FROM my_table
WHERE condition;
```

### Create
```sql
CREATE TABLE my_table (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Keywords and Phrases

- **Required Syntax Elements for TD_StrApply** 
- **Analytics Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This structured approach will ensure you are well-equipped to utilize Teradata's analytics capabilities effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/Required-Syntax-Elements-for-TD_StrApply","2024-07-27 12:53:25"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/TD_StrApply-Input","text/html;charset=UTF-8","200","","Indexable","","TD_StrApply Input - Analytics Database","38","346","Input Table Schema Column Data Type Description target_column CHAR, VARCHAR (CHARACTER SET LATIN or UNICODE) Column to which to apply str_operator. accumulate_column Any Column to copy to output table.","201","1354","","0","TD_StrApply Input - Analytics Database","38","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/TD_StrApply-Input","","","","","","208848","13057","13057","4.629","A+","70","39","1.795","6.807","Very Hard","11.129","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.718","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database offers a variety of analytic functions designed for data cleaning, exploration, feature engineering, and model training. Among these functions are SQL commands for manipulating data, such as SELECT, INSERT (often used for updates), DELETE, and CREATE. This guide provides an overview of basic SQL operations along with examples tailored for the Teradata Analytics Database.

### Code Example

Here's a brief overview and examples of the main SQL commands:

#### 1. SELECT
The `SELECT` statement retrieves data from one or more tables.

```sql
-- Example: Select all columns from the ""customers"" table
SELECT *
FROM customers;

-- Example: Select specific columns
SELECT first_name, last_name
FROM customers
WHERE city = 'New York';
```

#### 2. UPDATE
The `UPDATE` statement modifies existing records in a table.

```sql
-- Example: Update the city for a specific customer
UPDATE customers
SET city = 'Los Angeles'
WHERE customer_id = 123;

-- Example: Update multiple records
UPDATE customers
SET status = 'inactive'
WHERE last_purchase_date < '2022-01-01';
```

#### 3. DELETE
The `DELETE` statement removes records from a table.

```sql
-- Example: Delete a specific customer record
DELETE FROM customers
WHERE customer_id = 123;

-- Example: Delete records based on a condition
DELETE FROM customers
WHERE status = 'inactive';
```

#### 4. CREATE
The `CREATE` statement is used to create a new table or database.

```sql
-- Example: Create a new table called ""orders""
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2)
);

-- Example: Create a new database
CREATE DATABASE SalesDB;
```

### Keywords and Phrases

- **TD_StrApply Input**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language English (United States)**
- **Last Update 2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Hypothesis Testing Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Recommendations for Using Analytic Functions**
- **Examples: How to Use Pack**
- **Data Exploration Functions**
- **Model Evaluation Functions**
- **TD_OneClassSVM**
- **TD_XGBoost**
- **TD_Silhouette**
- **TD_ClassificationEvaluator**
- **TD_RegressionEvaluator** 

This guide should help you better understand how to perform basic operations within the Teradata Vantage™ Analytics Database and leverage its analytic capabilities effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/TD_StrApply-Input","2024-07-27 11:39:19"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/TD_StrApply-Output","text/html;charset=UTF-8","200","","Indexable","","TD_StrApply Output - Analytics Database","39","362","Output Table Schema Column Data Type Description accumulate_column Same as input table. Column copied from input table. output_column Same as input table. Column to which str_operator was applied. With InPlace ('true'), output_column is target_column. With InPlace ('false'), OutputColumns determines output_column.","315","2013","","0","TD_StrApply Output - Analytics Database","39","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/TD_StrApply-Output","","","","","","209119","13111","13111","4.648","A+","81","41","1.976","8.474","Very Hard","11.171","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.578","","","","","","1.1","## Summary

In Teradata, the Analytics Database supports various operations through SQL commands. The primary operations include selecting, updating, deleting, and creating records in tables. This functionality is critical for managing data and performing analytics effectively. Below are examples demonstrating how to use these SQL commands within the context of the Analytics Database.

### Code Example

#### 1. Create Table
```sql
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Department VARCHAR(50),
    Salary DECIMAL(10, 2)
);
```

#### 2. Select Data
```sql
SELECT 
    FirstName, 
    LastName, 
    Department, 
    Salary 
FROM 
    Employees 
WHERE 
    Salary > 50000;
```

#### 3. Update Data
```sql
UPDATE Employees 
SET Salary = Salary * 1.10 
WHERE Department = 'Sales';
```

#### 4. Delete Data
```sql
DELETE FROM Employees 
WHERE EmployeeID = 3;
```

### Keywords and Phrases
- **TD_StrApply Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Recommendations for Using Analytic Functions**

This concise overview and examples should assist users in leveraging the capabilities of the Analytics Database for their analytical needs.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/TD_StrApply-Output","2024-07-27 11:44:19"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/TD_StrApply-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_StrApply Syntax | strapply | Teradata Vantage - TD_StrApply Syntax - Analytics Database","90","813","See the syntax of the Analytics Database (SQL Engine) function TD_StrApply and read descriptions of its required and optional syntax elements.","142","884","","0","TD_StrApply Syntax | strapply | Teradata Vantage - TD_StrApply Syntax - Analytics Database","90","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/TD_StrApply-Syntax","","","","","","209375","13148","13148","4.661","A+","168","57","2.947","64.354","Normal","11.444","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.462","","","","","","1.1","## Overview of TD_StrApply in Teradata Vantage

The `TD_StrApply` function in Teradata Vantage is a powerful string manipulation function that allows users to perform various operations on string values within specified columns of a table or view. It is particularly useful in data cleaning, transformation, and preparation for analytics.

## Code Examples

Here are some basic SQL operations using Teradata Vantage, including `SELECT`, `UPDATE`, `DELETE`, and `CREATE`, along with an example of the `TD_StrApply` function.

### 1. SELECT
The `SELECT` statement is used to retrieve data from a database. You can specify columns and apply functions like `TD_StrApply`.

```sql
SELECT 
    ID, 
    TD_StrApply( 
        ON my_table 
        USING TargetColumns ('name') 
        StringOperation ('UPPER') 
    ) AS upper_name 
FROM my_table;
```

### 2. UPDATE
The `UPDATE` statement modifies existing records in a table. You can use `TD_StrApply` to update string columns.

```sql
UPDATE my_table
SET name = TD_StrApply(
    ON my_table 
    USING TargetColumns ('name') 
    StringOperation ('TRIM')
)
WHERE ID = 1;
```

### 3. DELETE
The `DELETE` statement removes records from a table.

```sql
DELETE FROM my_table
WHERE ID = 1;
```

### 4. CREATE
The `CREATE` statement is used to create a new table or view in the database.

```sql
CREATE TABLE new_table AS (
    SELECT 
        ID, 
        TD_StrApply(
            ON my_table 
            USING TargetColumns ('description') 
            StringOperation ('SUBSTRING') 
            String ('example') 
            StartIndex ('1')
        ) AS substring_description
    FROM my_table
) WITH NO DATA;
```

### 5. TD_StrApply Example
Here’s a specific example of using `TD_StrApply`.

```sql
SELECT 
    ID, 
    TD_StrApply(
        ON my_table 
        USING TargetColumns ('name') 
        StringOperation ('LOWER') 
        IsCaseSpecific ('false')
    ) AS lower_name 
FROM my_table;
```

## Summary
The `TD_StrApply` function enables users to manipulate string data directly within SQL statements in Teradata Vantage. The examples above showcase how to select, update, delete, and create tables while utilizing the `TD_StrApply` function for string operations.

## Keywords and Phrases
- TD_StrApply Syntax
- strapply
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Language English (United States)
- Last Update 2024-04-06
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Function Names with and without TD Prefix
- Maximum Number of Columns in a Database Table
- Workload Management Configuration
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Examples of TD_StrApply Usage
- String Manipulation Functions","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/TD_StrApply-Syntax","2024-07-27 11:41:48"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/How-to-Read-Syntax","text/html;charset=UTF-8","200","","Indexable","","How to Read Syntax | Teradata Vantage - How to Read Syntax - Analytics Database","79","735","Learn to read the syntax in Teradata Vantage documents.","55","358","","0","How to Read Syntax | Teradata Vantage - How to Read Syntax - Analytics Database","79","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/How-to-Read-Syntax","","","","","","212977","13664","13664","4.844","A+","324","99","3.273","78.180","Fairly Easy","11.518","1","3","","707","707","0","99.860","710","708","0","","","","","","","","","0.691","","","","","","1.1","## Summary

In this document, we cover essential SQL commands for managing data in Teradata Vantage's Analytics Database, specifically focusing on the basic operations: Select, Update, Delete, and Create. Understanding these commands is fundamental for performing data manipulation and retrieval in SQL.

### Code Example

#### 1. Select
The `SELECT` statement is used to retrieve data from one or more tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

#### 2. Update
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 3. Delete
The `DELETE` statement is used to remove existing records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

#### 4. Create
The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Keywords and Phrases

- **How to Read Syntax**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language (English - United States)**
- **Last Update**
- **Product Category (Teradata Vantage™)**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Recommendations for Using Analytic Functions**
- **TD Functions**
- **Analytic Functions Syntax**
- **Example Usage**
- **Input and Output Descriptions**
- **Syntax Elements** 

This structure and content should assist users in understanding how to perform basic SQL operations in Teradata Vantage and provide them with a clear reference for further exploration of the system's features.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/How-to-Read-Syntax","2024-07-27 11:56:36"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions","text/html;charset=UTF-8","200","","Indexable","","Hypothesis Testing Functions | Teradata Vantage - Hypothesis Testing Functions - Analytics Database","99","905","Learn general information about Analytics Database (SQL Engine) hypothesis testing functions.","93","591","","0","Hypothesis Testing Functions | Teradata Vantage - Hypothesis Testing Functions - Analytics Database","99","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions","","","","","","209153","13018","13018","4.615","A+","85","43","1.977","24.680","Very Hard","11.155","1","3","","707","707","0","99.860","716","714","0","","","","","","","","","0.608","","","","","","1.1","### Overview of Teradata Vantage Hypothesis Testing Functions

Hypothesis testing is a fundamental method in statistics that allows researchers to make inferences about populations based on sample data. Teradata Vantage provides a robust set of hypothesis testing functions, which can be leveraged to assess the validity of claims or hypotheses regarding data. These functions include:

- **TD_ANOVA**: Used to analyze variance among groups.
- **TD_ChiSq**: Conducts Chi-square tests to evaluate the association between categorical variables.
- **TD_FTest**: Compares variances between two populations.
- **TD_ZTest**: Tests if the means of two populations are significantly different.

These functions help data analysts and scientists in making data-driven decisions and validating hypotheses effectively.

### Code Example

The following SQL examples illustrate how you can use these hypothesis testing functions in Teradata Vantage.

#### 1. Create a Sample Table

```sql
CREATE TABLE test_scores (
    student_id INT,
    test_score FLOAT,
    group_id VARCHAR(10)
);
```

#### 2. Insert Sample Data

```sql
INSERT INTO test_scores (student_id, test_score, group_id) VALUES
(1, 85.5, 'A'),
(2, 78.0, 'A'),
(3, 92.0, 'B'),
(4, 88.5, 'B'),
(5, 75.0, 'C'),
(6, 80.0, 'C');
```

#### 3. ANOVA Test Example

```sql
SELECT TD_ANOVA(test_score, group_id) AS anova_result
FROM test_scores;
```

#### 4. Chi-Square Test Example

```sql
SELECT TD_ChiSq(test_score, group_id) AS chi_square_result
FROM test_scores;
```

#### 5. F-Test Example

```sql
SELECT TD_FTest(
    'test_score', 
    'group_id', 
    'A', 
    'B') AS f_test_result
FROM test_scores;
```

#### 6. Z-Test Example

```sql
SELECT TD_ZTest(
    'test_score', 
    'group_id', 
    'A', 
    'B') AS z_test_result
FROM test_scores;
```

### Summary

Using hypothesis testing functions in Teradata Vantage enables analysts to systematically evaluate their hypotheses based on sample data. The ability to perform ANOVA, Chi-square tests, F-tests, and Z-tests is crucial for statistical analysis in various fields, including research, marketing, and quality control.

### Keywords and Phrases

- Hypothesis Testing Functions
- Teradata Vantage
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Analytics Database
- Data Analysis
- Statistical Inference
- Variance Analysis
- Categorical Variables
- Population Comparison
- SQL Examples
- Data-Driven Decisions
- Sample Data
- Group Comparison","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions","2024-07-27 11:28:05"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/Hypothesis-Test-Components","text/html;charset=UTF-8","200","","Indexable","","Hypothesis Test Components | Teradata Vantage - Hypothesis Test Components - Analytics Database","95","905","Learn about the Analytics Database (SQL Engine) hypothesis test components.","75","489","","0","Hypothesis Test Components | Teradata Vantage - Hypothesis Test Components - Analytics Database","95","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/Hypothesis-Test-Components","","","","","","211392","13716","13716","4.862","A+","287","71","4.042","40.901","Hard","11.679","1","4","","707","707","0","99.860","710","708","0","","","","","","","","","1.600","","","","","","1.1","# Summary of Hypothesis Test Components in Teradata Vantage

In the context of hypothesis testing, several key components must be understood to conduct an accurate analysis. The null hypothesis (H0) and the alternative hypothesis (H1) form the foundation of a hypothesis test. The significance level (α), test statistic, degrees of freedom, critical value, and p-value are essential for determining the validity of the hypotheses. 

- **Null Hypothesis (H0)**: Represents a statement of no effect or no difference. For example, it might state that a new drug is no more effective than a placebo.
- **Alternative Hypothesis (H1)**: This hypothesis suggests that there is an effect or a difference, indicating the researcher's expectation. For instance, it may claim that the new drug is more effective than the placebo.
- **Alpha (α)**: This is the threshold for significance, typically set at 0.05, which defines the probability of rejecting the null hypothesis when it is true (Type I error).
- **Test Statistic**: A standardized value that is calculated from sample data during a hypothesis test.
- **Degrees of Freedom**: Represents the number of independent values in a calculation, which is crucial for determining the p-value.
- **Critical Value**: A threshold that determines the rejection region for the null hypothesis.
- **P-value**: The probability of obtaining test results at least as extreme as the observed results, under the assumption that the null hypothesis is true.
- **Hypothesis Test Conclusion**: This is the final determination about whether to accept or reject the null hypothesis based on the test results.

# Code Example

In Teradata Vantage, you can perform various database operations, such as selecting, inserting, updating, and deleting data. Below are examples illustrating these operations:

### 1. SELECT
Retrieve records from a table:
```sql
SELECT employee_id, employee_name, department 
FROM employees 
WHERE department = 'Sales';
```

### 2. INSERT
Add a new record to a table:
```sql
INSERT INTO employees (employee_id, employee_name, department) 
VALUES (101, 'John Doe', 'Sales');
```

### 3. UPDATE
Modify existing records in a table:
```sql
UPDATE employees 
SET department = 'Marketing' 
WHERE employee_id = 101;
```

### 4. DELETE
Remove records from a table:
```sql
DELETE FROM employees 
WHERE employee_id = 101;
```

## Keywords and Phrases
- **Hypothesis Test Components**
- **Teradata Vantage**
- **Hypothesis Test Types**
- **Null Hypothesis (H0)**
- **Alternative Hypothesis (H1)**
- **Significance Level (α)**
- **Test Statistic**
- **Degrees of Freedom**
- **Critical Value**
- **P-value**
- **Hypothesis Test Conclusion**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Analytics Database Release Number**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Statistical Significance** 

This structured overview and example code snippets provide a comprehensive insight into conducting hypothesis tests and managing database operations in Teradata Vantage.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/Hypothesis-Test-Components","2024-07-27 12:51:25"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/Hypothesis-Test-Types","text/html;charset=UTF-8","200","","Indexable","","Hypothesis Test Types | Teradata Vantage - Hypothesis Test Types - Analytics Database","85","783","Learn about the Analytics Database (SQL Engine) hypothesis test types and terminology.","86","549","","0","Hypothesis Test Types | Teradata Vantage - Hypothesis Test Types - Analytics Database","85","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/Hypothesis-Test-Types","","","","","","212164","13555","13555","4.805","A+","266","70","3.800","65.901","Normal","11.494","1","4","","707","707","0","99.860","710","708","0","","","","","","","","","0.524","","","","","","1.1","## Summary

This document provides an overview of the Teradata Vantage™ Analytics Database and its analytic functions, particularly focusing on hypothesis testing functions. Hypothesis tests are critical in statistics for determining whether there is enough evidence to reject a null hypothesis. The document outlines various types of hypothesis tests, including one-tailed and two-tailed tests, as well as one-sample and two-sample tests, distinguishing between paired and unpaired tests.

### Code Examples

Here are examples of SQL commands for common operations such as Select, Update, Delete, and Create in Teradata:

#### Select
```sql
SELECT *
FROM Employees
WHERE Department = 'Sales';
```

#### Update
```sql
UPDATE Employees
SET Salary = Salary * 1.10
WHERE Department = 'Sales';
```

#### Delete
```sql
DELETE FROM Employees
WHERE HireDate < '2020-01-01';
```

#### Create
```sql
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Department VARCHAR(50),
    HireDate DATE,
    Salary DECIMAL(10, 2)
);
```

## Keywords and Phrases

- **Hypothesis Test Types**
- **Teradata Vantage**
- **Hypothesis Test Components**
- **One-tailed test**
- **Two-tailed test**
- **Lower-tailed test**
- **Upper-tailed test**
- **One-sample test**
- **Two-sample test**
- **Paired test**
- **Unpaired test**
- **Null hypothesis (H0)**
- **Alternative hypothesis (H1)**
- **ANOVA**
- **Chi-Square Test**
- **F-Test**
- **Z-Test**
- **Analytics Database**
- **Data Cleaning Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Data Exploration Functions**
- **Teradata VantageCloud**
- **Teradata VantageCore**
- **Version 17.20**
- **Published June 2022**
- **Language: English (United States)**
- **Last Update April 2024**

This structured approach provides a comprehensive understanding of hypothesis testing in the context of Teradata Vantage, along with practical SQL examples.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/Hypothesis-Test-Types","2024-07-27 12:46:32"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA","text/html;charset=UTF-8","200","","Indexable","","TD_ANOVA Function |ANOVA | Teradata Vantage - TD_ANOVA - Analytics Database","75","740","This Analytics Database (SQL Engine) hypothesis testing function performs analysis of variance (ANOVA) test to analyze the difference between the means.","152","961","","0","TD_ANOVA Function |ANOVA | Teradata Vantage - TD_ANOVA - Analytics Database","75","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA","","","","","","210823","13736","13736","4.869","A+","352","72","4.889","51.900","Fairly Hard","11.852","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","0.899","","","","","","1.1","### Summary of TD_ANOVA Function

The TD_ANOVA function in Teradata Vantage is used to perform analysis of variance (ANOVA), a statistical method for comparing the means of multiple groups. ANOVA helps determine whether any of the differences among sample means are statistically significant. It operates on the principle that if the variation between the means of different groups is significantly larger than the variation within the groups, it suggests that at least one group mean is different.

ANOVA can be one-way, involving one independent variable with two or more categorical groups. The function requires specific assumptions, such as normality of data and homogeneity of variances.

### Code Example

Below are examples of SQL operations for creating, selecting, updating, and deleting data in Teradata, followed by an example of using the `TD_ANOVA` function.

#### Create Table
```sql
CREATE TABLE treatments (
    treatment_id INT,
    treatment_group VARCHAR(50),
    response FLOAT
);
```

#### Insert Data
```sql
INSERT INTO treatments (treatment_id, treatment_group, response) VALUES
(1, 'Control', 5.1),
(2, 'Treatment A', 7.3),
(3, 'Treatment B', 6.8),
(4, 'Treatment A', 7.5),
(5, 'Control', 5.5),
(6, 'Treatment B', 6.9);
```

#### Select Data
```sql
SELECT treatment_group, AVG(response) AS average_response
FROM treatments
GROUP BY treatment_group;
```

#### Update Data
```sql
UPDATE treatments
SET response = response + 0.5
WHERE treatment_group = 'Control';
```

#### Delete Data
```sql
DELETE FROM treatments
WHERE treatment_id = 1;
```

#### Using TD_ANOVA
```sql
SELECT *
FROM TD_ANOVA(
    'response',               -- The dependent variable
    'treatment_group',        -- The independent variable
    'treatments'              -- The input table
) AS result;
```

### Keywords and Phrases
- TD_ANOVA Function
- ANOVA
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Analysis of Variance
- Statistical Test
- Null Hypothesis
- One-Way ANOVA
- Categorical Groups
- Variance Comparison
- Clinical Trials
- Marketing Strategies
- Group Means Comparison
- Assumptions for ANOVA
- Normal Distribution
- Homogeneity of Variances

This summary and example should provide a foundational understanding of the TD_ANOVA function within the Teradata Vantage environment.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA","2024-07-27 12:51:26"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Examples-How-to-Use-TD_ANOVA","text/html;charset=UTF-8","200","","Indexable","","TD_ANOVA Examples | ANOVA | Teradata Vantage - Examples: How to Use TD_ANOVA - Analytics Database","97","959","See examples of Analytics Database (SQL Engine) hypothesis testing function TD_ANOVA.","85","556","","0","TD_ANOVA Examples | ANOVA | Teradata Vantage - Examples: How to Use TD_ANOVA - Analytics Database","97","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Examples-How-to-Use-TD_ANOVA","","","","","","209270","13458","13458","4.771","A+","121","47","2.574","40.615","Hard","11.270","1","5","","707","707","0","99.860","714","711","0","","","","","","","","","1.776","","","","","","1.1","# Summary

Teradata Vantage provides a powerful platform for analytics and data management. Among its many features, the TD_ANOVA function stands out for performing analysis of variance, a statistical method used to compare means among different groups. This function is part of the broader suite of analytic functions available in Teradata Vantage, which also includes various capabilities for data cleaning, exploration, feature engineering, model training, and evaluation.

## Code Example

Here are examples of basic SQL operations: Select, Update, Delete, and Create in Teradata. 

### 1. SELECT
```sql
SELECT 
    column1, 
    column2 
FROM 
    your_table 
WHERE 
    condition;
```

### 2. UPDATE
```sql
UPDATE 
    your_table 
SET 
    column1 = value1, 
    column2 = value2 
WHERE 
    condition;
```

### 3. DELETE
```sql
DELETE FROM 
    your_table 
WHERE 
    condition;
```

### 4. CREATE
```sql
CREATE TABLE your_table (
    column1 DataType,
    column2 DataType,
    column3 DataType
);
```

## Keywords and Phrases
- TD_ANOVA Examples
- ANOVA
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Examples: How to Use TD_ANOVA
- Using TD_ANOVA to Determine Difference of Insect Sprays
- Using GroupNames Argument
- Using NumGroups Argument

This summary provides a concise overview of the capabilities available in Teradata Vantage, particularly focusing on the analytical features, alongside basic SQL operation examples that are essential for data manipulation.","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Examples-How-to-Use-TD_ANOVA","2024-07-27 11:29:48"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Examples-How-to-Use-TD_ANOVA/Using-GroupNames-Argument","text/html;charset=UTF-8","200","","Indexable","","Using GroupNames Argument - Analytics Database","46","454","TD_ANOVA Input: insect2cols groupName groupValue
--------- ----------
groupE    34
groupF    15
groupE    31
groupF    26
groupE    21
groupF    26
groupE    11
groupF    10
...       ...
groupD    12
groupB    21
groupD    12
groupB    19
groupD     5
groupB    21
...       ...
groupC    13
groupC    11
groupC    10
g...","323","1639","","0","Using GroupNames Argument - Analytics Database","46","Database Analytic Functions","27","TD_ANOVA Input: insect2cols","27","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Examples-How-to-Use-TD_ANOVA/Using-GroupNames-Argument","","","","","","211448","13453","13453","4.769","A+","170","83","2.048","81.340","Easy","11.350","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","1.176","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database is equipped with powerful analytic functions designed to facilitate data exploration, feature engineering, model training, and evaluation. In this context, we will cover the fundamental SQL operations: SELECT, UPDATE, DELETE, and CREATE. These operations are essential for manipulating data within the Analytics Database effectively.

### Code Examples

#### 1. SELECT
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT groupName, AVG(groupValue) AS averageValue
FROM insect2cols
GROUP BY groupName;
```

#### 2. UPDATE
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE insect2cols
SET groupValue = groupValue + 5
WHERE groupName = 'groupA';
```

#### 3. DELETE
The `DELETE` statement removes existing records from a table.

```sql
DELETE FROM insect2cols
WHERE groupName = 'groupB' AND groupValue < 20;
```

#### 4. CREATE
The `CREATE` statement creates a new table or database object.

```sql
CREATE TABLE new_insect_data (
    groupName VARCHAR(50),
    groupValue INT
);
```

### Keywords and Phrases

- **Using GroupNames Argument** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Examples-How-to-Use-TD_ANOVA/Using-GroupNames-Argument","2024-07-27 12:15:07"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Examples-How-to-Use-TD_ANOVA/Using-NumGroups-Argument","text/html;charset=UTF-8","200","","Indexable","","Using NumGroups Argument - Analytics Database","45","443","TD_ANOVA Input: insect2cols groupName groupValue
--------- ----------
groupE    34
groupF    15
groupE    31
groupF    26
groupE    21
groupF    26
groupE    11
groupF    10
...       ...
groupD    12
groupB    21
groupD    12
groupB    19
groupD     5
groupB    21
...       ...
groupC    13
groupC    11
groupC    10
g...","323","1639","","0","Using NumGroups Argument - Analytics Database","45","Database Analytic Functions","27","TD_ANOVA Input: insect2cols","27","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Examples-How-to-Use-TD_ANOVA/Using-NumGroups-Argument","","","","","","211412","13465","13465","4.773","A+","168","83","2.024","82.916","Easy","11.346","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.908","","","","","","1.1","## Summary

Teradata Vantage™ offers a range of analytic functions within its Analytics Database, enabling users to perform complex data manipulations and statistical analyses. This guide covers fundamental SQL operations—Select, Update, Delete, and Create—alongside practical code examples to illustrate their usage.

### Code Examples

#### 1. SELECT Statement
The `SELECT` statement is used to query data from a database table.

```sql
SELECT employee_id, first_name, last_name
FROM employees
WHERE department_id = 10;
```

#### 2. UPDATE Statement
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department_id = 10;
```

#### 3. DELETE Statement
The `DELETE` statement removes records from a table.

```sql
DELETE FROM employees
WHERE employee_id = 100;
```

#### 4. CREATE Statement
The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(50) NOT NULL
);
```

### Keywords and Phrases

- Using NumGroups Argument - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This content provides a foundational understanding of SQL operations and highlights the capabilities of Teradata Vantage™ for data analytics.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Examples-How-to-Use-TD_ANOVA/Using-NumGroups-Argument","2024-07-27 11:54:25"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Examples-How-to-Use-TD_ANOVA/Using-TD_ANOVA-to-Determine-Difference-of-Insect-Sprays","text/html;charset=UTF-8","200","","Indexable","","TD_ANOVA Example | ANOVA | Teradata Vantage - Using TD_ANOVA to Determine Difference of Insect Sprays - Analytics Database","122","1167","See an example of Analytics Database (SQL Engine) hypothesis testing function TD_ANOVA.","87","568","","0","TD_ANOVA Example | ANOVA | Teradata Vantage - Using TD_ANOVA to Determine Difference of Insect Sprays - Analytics Database","122","Database Analytic Functions","27","TD_ANOVA Input: Insect_sprays","29","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Examples-How-to-Use-TD_ANOVA/Using-TD_ANOVA-to-Determine-Difference-of-Insect-Sprays","","","","","","209452","13301","13301","4.715","A+","243","73","3.329","100.000","Very Easy","11.779","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.773","","","","","","1.1","## Summary

In this guide, we explore the TD_ANOVA function in Teradata Vantage, particularly focusing on how to perform a one-way ANOVA test to determine if there are significant differences in means among multiple groups. The example provided illustrates how to set up the input data, execute the TD_ANOVA function, and interpret the results.

### Code Example

#### Create Table
```sql
CREATE TABLE insect_sprays (
    groupA INT,
    groupB INT,
    groupC INT,
    groupD INT,
    groupE INT,
    groupF INT
);
```

#### Insert Data
```sql
INSERT INTO insect_sprays (groupA, groupB, groupC, groupD, groupE, groupF) VALUES
(7, 17, 1, 5, 6, 9),
(10, 17, 2, 5, 1, 13),
(10, 11, 0, 3, 3, 11),
(12, 14, 1, 3, 6, 16),
(13, 13, 4, 4, 4, 13),
(14, 11, 2, 6, 5, 22),
(14, 16, 3, 4, 3, 15),
(14, 7, 1, 2, 6, 24),
(17, 19, 3, 5, 3, 26),
(20, 21, 0, 5, 2, 26),
(20, 21, 7, 12, 3, 15),
(23, 17, 1, 5, 1, 10);
```

#### Execute TD_ANOVA
```sql
SELECT * FROM TD_ANOVA (
    ON insect_sprays AS InputTable
    USING
    ALPHA (0.05)
) AS dt;
```

#### Output Interpretation
The output will include several statistical measures, including:
- **sum_of_squares(between groups)**: Variance explained by the group differences.
- **sum_of_squares(within groups)**: Variance within the groups.
- **df (degrees of freedom)**: Number of values that are free to vary.
- **mean_square(between groups)**, **mean_square(within groups)**: Mean squares for between and within groups.
- **f_statistic**: Ratio of variances (mean square between / mean square within).
- **p_value**: Probability value for the hypothesis test.
- **conclusion**: Decision based on the p-value (e.g., reject or fail to reject the null hypothesis).

### Keywords and Phrases
- TD_ANOVA Example
- ANOVA
- Teradata Vantage
- Insect Sprays
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Hypothesis Testing Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- TD_ANOVA Input
- TD_ANOVA SQL Call
- TD_ANOVA Output Table
- Reject Null Hypothesis
- Statistical Measures","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Examples-How-to-Use-TD_ANOVA/Using-TD_ANOVA-to-Determine-Difference-of-Insect-Sprays","2024-07-27 11:55:12"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Optional-Syntax-Elements-for-TD_ANOVA","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_ANOVA - Analytics Database","58","552","GroupColumns Specifies the input table column names or a column range. Unicode and double quotes are supported. Alpha Specifies the probability of rejecting the null hypothesis when the null hypothesis is true. Default: 0.05 Valid range: [0,1]","243","1491","","0","Optional Syntax Elements for TD_ANOVA - Analytics Database","58","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Optional-Syntax-Elements-for-TD_ANOVA","","","","","","208004","12921","12921","4.581","A+","81","44","1.841","22.189","Very Hard","11.203","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.576","","","","","","1.1","## Summary

In the context of managing and analyzing data within the Teradata Vantage™ Analytics Database, SQL operations are essential for interacting with database tables. The following are the fundamental SQL commands: **SELECT**, **INSERT**, **UPDATE**, and **DELETE**. Each command serves a specific purpose in data manipulation and retrieval.

### Code Example

1. **SELECT** - Retrieve data from a table.
   ```sql
   SELECT column1, column2
   FROM table_name
   WHERE condition;
   ```

2. **INSERT** - Add new records to a table.
   ```sql
   INSERT INTO table_name (column1, column2)
   VALUES (value1, value2);
   ```

3. **UPDATE** - Modify existing records in a table.
   ```sql
   UPDATE table_name
   SET column1 = value1, column2 = value2
   WHERE condition;
   ```

4. **DELETE** - Remove records from a table.
   ```sql
   DELETE FROM table_name
   WHERE condition;
   ```

### Keywords and Phrases

- **Optional Syntax Elements for TD_ANOVA**
- **Analytics Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This comprehensive list encapsulates the essential elements related to the Analytics Database and analytic functions, guiding users in their data manipulation and analysis tasks.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Optional-Syntax-Elements-for-TD_ANOVA","2024-07-27 12:04:33"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Required-Syntax-Elements-for-TD_ANOVA","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_ANOVA - Analytics Database","58","556","ON clause Specifies the table name, view name, or query as an InputTable. GroupNameColumn Required for group-value input. Specifies the column that contains the groups names. GroupValueColumn Required for group-value input. Specifies the column that contains the values for each group. GroupNames Required for group-valu...","323","2060","","0","Required Syntax Elements for TD_ANOVA - Analytics Database","58","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Required-Syntax-Elements-for-TD_ANOVA","","","","","","208782","12978","12978","4.601","A+","134","54","2.481","43.955","Hard","11.331","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.879","","","","","","1.1","## Overview of TD_ANOVA in Teradata Vantage

TD_ANOVA (Two-way Analysis of Variance) is a powerful analytic function within the Teradata Vantage Analytics Database used for hypothesis testing. It allows users to determine whether there are statistically significant differences between the means of multiple groups. This function is particularly useful in experimental design and analysis where comparisons between different treatments or categories are required.

### Required Syntax Elements for TD_ANOVA
- **InputTable**: Specifies the table name, view name, or query that serves as the input data.
- **GroupNameColumn**: Required for group-value input. This column contains the group names.
- **GroupValueColumn**: Required for group-value input. This column contains the values for each group.
- **GroupNames**: Required for group-value input. This specifies the groups' names to be used for ANOVA.
- **NumGroups**: Required for group-value input. This specifies the number of groups to be used for ANOVA.

### Basic Example of TD_ANOVA
```sql
SELECT TD_ANOVA(
    ON InputTable,
    GroupNameColumn,
    GroupValueColumn,
    GroupNames => 'GroupA, GroupB, GroupC',
    NumGroups => 3
) AS ANOVA_Result
FROM YourDataTable;
```

## SQL Operations: Select, Update, Delete, Create

### Select
The `SELECT` statement is used to query data from a database.
```sql
SELECT * FROM YourTable WHERE condition;
```

### Update
The `UPDATE` statement modifies existing records in a table.
```sql
UPDATE YourTable
SET column1 = value1, column2 = value2
WHERE condition;
```

### Delete
The `DELETE` statement removes records from a table based on a specified condition.
```sql
DELETE FROM YourTable WHERE condition;
```

### Create
The `CREATE` statement is used to create a new table or database.
```sql
CREATE TABLE NewTable (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Summary
The TD_ANOVA function in Teradata Vantage provides a robust method for conducting two-way ANOVA, assisting users in understanding the differences between group means. The required syntax elements ensure that users can effectively specify their data inputs while the SQL operations (Select, Update, Delete, Create) are fundamental for managing data in a relational database.

### Keywords and Phrases
- Required Syntax Elements for TD_ANOVA
- Analytics Database
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Model Training Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Recommendations for Using Analytic Functions
- Function Syntax Descriptions
- Examples: How to Use TD_ANOVA
- GroupNames Argument
- NumGroups Argument

This structured approach ensures that users can effectively utilize the TD_ANOVA function while also managing their data through standard SQL operations.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Required-Syntax-Elements-for-TD_ANOVA","2024-07-27 11:42:00"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/TD_ANOVA-Input","text/html;charset=UTF-8","200","","Indexable","","TD_ANOVA Input - Analytics Database","35","338","TD_ANOVA accepts one input table which can be formatted either as multiple columns or group-value. Option 1 - Multiple Column Input Using GroupColumns Argument Input Description Comments InputTable A table that contains columns of samples. Each column represents a different sample with rows containing the value of each...","323","2063","","0","TD_ANOVA Input - Analytics Database","35","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/TD_ANOVA-Input","","","","","","212916","13515","13515","4.791","A+","169","54","3.130","28.451","Very Hard","11.249","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.565","","","","","","1.1","# Summary

This document provides an overview of various analytic functions available in the Teradata Vantage Analytics Database, with a particular focus on the TD_ANOVA function. TD_ANOVA is used for performing analysis of variance (ANOVA) on input data, which can be formatted in two ways: multiple columns or group-value pairs. The document outlines the input specifications, schemas, and examples for using the TD_ANOVA function.

## Code Example Section

### 1. Create Table

```sql
CREATE TABLE sample_data (
    group_name_column VARCHAR(50),
    group_value_column DOUBLE
);
```

### 2. Insert Data

```sql
INSERT INTO sample_data (group_name_column, group_value_column) VALUES
('Group A', 5.2),
('Group A', 6.1),
('Group B', 7.3),
('Group B', 8.0),
('Group C', 4.8),
('Group C', 5.5);
```

### 3. Select Data

```sql
SELECT * FROM sample_data;
```

### 4. Update Data

```sql
UPDATE sample_data
SET group_value_column = 6.5
WHERE group_name_column = 'Group A';
```

### 5. Delete Data

```sql
DELETE FROM sample_data
WHERE group_name_column = 'Group C';
```

### 6. TD_ANOVA Example

#### Using Group-Value Input

```sql
SELECT TD_ANOVA(
    InputTable => (SELECT group_name_column, group_value_column FROM sample_data),
    GroupNameColumn => 'group_name_column',
    GroupValueColumn => 'group_value_column'
) AS ANOVA_Result;
```

#### Using Multiple Column Input

```sql
SELECT TD_ANOVA(
    InputTable => (SELECT group_column1, group_column2, group_column3 FROM sample_data),
    GroupColumns => 'group_column1, group_column2, group_column3'
) AS ANOVA_Result;
```

## Keywords and Phrases

- **TD_ANOVA Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number** - 17.20
- **Published** - June 2022
- **Language** - English (United States)
- **Last Update** - 2024-04-06
- **dita:mapPath** - gjn1627595495337.ditamap
- **dita:ditavalPath** - ayr1485454803741.ditaval
- **dita:id** - jmh1512506877710
- **Product Category** - Teradata Vantage™
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Input Table Schemas**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Example: Using TD_ANOVA to Determine Difference of Insect Sprays**
- **Example: Using GroupNames Argument**
- **Example: Using NumGroups Argument**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/TD_ANOVA-Input","2024-07-27 12:16:30"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/TD_ANOVA-Output","text/html;charset=UTF-8","200","","Indexable","","TD_ANOVA Output - Analytics Database","36","354","Output Table Schema Column Data Type Description sum_of_squares (between groups) DOUBLE The sum of squares (variation) between groups. sum_of_squares (within groups) DOUBLE The sum of squares (variation) within groups. Df (between groups) INTEGER The degrees of freedom corresponding to the between groups sum of squares...","323","2127","","0","TD_ANOVA Output - Analytics Database","36","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/TD_ANOVA-Output","","","","","","212962","13555","13555","4.805","A+","286","65","4.400","69.849","Normal","11.529","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.968","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions, enabling users to perform complex data analysis, model training, and evaluation tasks. The platform supports operations such as data cleaning, exploration, feature engineering, and hypothesis testing, making it essential for data-driven decision-making in various industries. The TD_ANOVA function, in particular, allows users to perform Analysis of Variance (ANOVA) tests, which is crucial for understanding the differences between group means.

### Code Example: SQL Operations

Below are examples of basic SQL operations including `SELECT`, `UPDATE`, `DELETE`, and `CREATE` statements that can be utilized within the Teradata environment.

#### 1. SELECT
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

#### 2. UPDATE
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 3. DELETE
```sql
DELETE FROM table_name
WHERE condition;
```

#### 4. CREATE
```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype
);
```

### Keywords and Phrases
- **TD_ANOVA Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

These keywords and phrases encapsulate the essential concepts and functionalities within the Teradata Vantage Analytics Database, aiding users in navigating the features and understanding the scope of analytic capabilities available.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/TD_ANOVA-Output","2024-07-27 12:03:43"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/TD_ANOVA-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_ANOVA Syntax | ANOVA | Teradata Vantage - TD_ANOVA Syntax - Analytics Database","81","793","See the syntax of Analytics Database (SQL Engine) hypothesis testing function TD_ANOVA and read descriptions of its required and optional syntax elements.","154","972","","0","TD_ANOVA Syntax | ANOVA | Teradata Vantage - TD_ANOVA Syntax - Analytics Database","81","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/TD_ANOVA-Syntax","","","","","","208613","13006","13006","4.611","A+","105","57","1.842","29.320","Very Hard","11.309","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.557","","","","","","1.1","## Summary

The TD_ANOVA function in Teradata Vantage is a powerful tool used for performing Analysis of Variance (ANOVA), which is a statistical method used to determine if there are significant differences between the means of three or more independent groups. This function is part of the Analytics Database Analytic Functions in Teradata Vantage, providing users with capabilities to analyze and interpret data effectively.

### Code Examples

Here are some examples demonstrating how to use the TD_ANOVA function alongside standard SQL operations like SELECT, UPDATE, DELETE, and CREATE in Teradata.

#### 1. **SELECT**
```sql
SELECT
  *
FROM
  TD_ANOVA (
    ON my_table AS InputTable
    USING
      GroupColumns({'group_col1', 'group_col2'})
      Alpha(0.05)
  ) AS ANOVA_Result;
```

#### 2. **UPDATE**
```sql
UPDATE my_table
SET group_col1 = 'NewGroupValue'
WHERE group_col1 = 'OldGroupValue';
```

#### 3. **DELETE**
```sql
DELETE FROM my_table
WHERE group_col1 = 'UnwantedGroup';
```

#### 4. **CREATE**
```sql
CREATE TABLE my_anova_results AS (
  SELECT
    *
  FROM
    TD_ANOVA (
      ON my_table AS InputTable
      USING
        GroupColumns({'group_col1'})
    )
) WITH NO DATA;
```

### Keywords and Phrases
- TD_ANOVA Syntax
- ANOVA
- Teradata Vantage - TD_ANOVA Syntax
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Language English (United States)
- Last Update 2024-04-06
- Product Category Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- TD_ChiSq
- TD_ANOVA
- TD_FTest
- TD_ZTest
- GroupColumns
- GroupNameColumn
- GroupValueColumn
- GroupNames
- NumGroups
- Alpha

This overview provides a concise introduction to using the TD_ANOVA function and its integration within SQL operations in Teradata Vantage.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/TD_ANOVA-Syntax","2024-07-27 12:12:11"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq","text/html;charset=UTF-8","200","","Indexable","","TD_ChiSq Function | chisq | Teradata Vantage - TD_ChiSq - Analytics Database","76","695","This Analytics Database (SQL Engine) hypothesis testing function performs Pearson's chi-squared test for independence.","118","746","","0","TD_ChiSq Function | chisq | Teradata Vantage - TD_ChiSq - Analytics Database","76","Database Analytic Functions","27","Why Use Chi-Square Test?","24","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq","","","","","","211381","13879","13879","4.920","A+","362","78","4.641","46.946","Hard","11.904","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.438","","","","","","1.1","## Summary of TD_ChiSq Function in Teradata Vantage

The `TD_ChiSq` function in Teradata Vantage is utilized to perform Pearson's chi-squared test for independence. This statistical test helps determine if there is a significant relationship between two categorical variables by comparing observed and expected frequencies in a contingency table. It returns a result set with the chi-square statistic, degrees of freedom, and p-value, providing insights into the association between the variables.

### Code Example

Here’s a basic overview of SQL operations related to `TD_ChiSq`, including `SELECT`, `UPDATE`, `DELETE`, and `CREATE` statements in the context of a hypothetical analytics database:

```sql
-- Create a sample table for storing categorical data
CREATE TABLE EducationEmployment (
    EducationLevel VARCHAR(50),
    EmploymentStatus VARCHAR(50)
);

-- Insert sample data into the table
INSERT INTO EducationEmployment (EducationLevel, EmploymentStatus) VALUES
('High School', 'Employed'),
('High School', 'Unemployed'),
('Bachelor', 'Employed'),
('Bachelor', 'Unemployed'),
('Master', 'Employed'),
('Master', 'Unemployed');

-- Select data from the table
SELECT * FROM EducationEmployment;

-- Update an entry in the table
UPDATE EducationEmployment
SET EmploymentStatus = 'Employed'
WHERE EducationLevel = 'High School' AND EmploymentStatus = 'Unemployed';

-- Delete an entry from the table
DELETE FROM EducationEmployment
WHERE EducationLevel = 'Master' AND EmploymentStatus = 'Unemployed';

-- Perform the chi-square test to analyze the relationship between education level and employment status
SELECT TD_ChiSq(EducationLevel, EmploymentStatus)
FROM EducationEmployment;
```

### Keywords and Phrases
- TD_ChiSq Function
- chisq
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Hypothesis Testing Functions
- Chi-Square Test
- Categorical Variables
- Contingency Table
- Statistical Independence
- Observed Frequencies
- Expected Frequencies
- P-value
- Degrees of Freedom
- One-tailed Test
- Unpaired Test
- Marketing Analytics
- Social Sciences
- Healthcare Analytics
- Finance Analytics

This summary provides a comprehensive view of the `TD_ChiSq` function, its context, and relevant SQL operations, making it a useful reference for users of Teradata Vantage.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq","2024-07-27 11:49:10"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/Example-How-to-Use-TD_ChiSq","text/html;charset=UTF-8","200","","Indexable","","TD_ChiSq Example | chisq | Teradata Vantage - Example: How to Use TD_ChiSq - Analytics Database","95","889","See an example of Analytics Database (SQL Engine) hypothesis testing function TD_ChiSq.","87","557","","0","TD_ChiSq Example | chisq | Teradata Vantage - Example: How to Use TD_ChiSq - Analytics Database","95","Database Analytic Functions","27","TD_ChiSq Input: contingency1","28","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/Example-How-to-Use-TD_ChiSq","","","","","","219914","15106","15106","5.355","A+","533","142","3.754","55.094","Fairly Hard","12.038","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.958","","","","","","1.1","### Summary
This document provides an overview of the TD_ChiSq function in Teradata Vantage, which is used for performing Chi-Squared tests to analyze the relationship between categorical variables. It describes the steps involved in creating a contingency table and executing the Chi-Squared test, including the SQL syntax used for each. The example illustrates how to determine whether gender influences party affiliation by comparing observed frequencies with expected frequencies.

### Code Example

#### Create a Contingency Table
This example creates a contingency table that counts the number of men and women affiliated with each political party.

```sql
CREATE MULTISET TABLE contingency1 AS
(
SELECT gender AS gender,
       SUM(CASE WHEN party = 'dem' THEN 1 ELSE 0 END) AS dem_party_cnt,
       SUM(CASE WHEN party = 'rep' THEN 1 ELSE 0 END) AS rep_party_cnt
FROM mytesttable
GROUP BY gender
) WITH DATA;
```

#### Alternative Query Using PIVOT
This alternative method uses the PIVOT operation to create the same contingency table.

```sql
DROP TABLE contingency1;

CREATE MULTISET TABLE contingency1 AS
(
SELECT *
FROM (SELECT gender AS gender, party, COUNT(party) AS party_count
      FROM mytesttable GROUP BY gender, party) AS mytesttable
PIVOT (SUM(party_count) FOR party IN ('dem' AS dem, 'rep' AS rep)) AS Tmp
) WITH DATA;
```

#### TD_ChiSq SQL Call
The following SQL command executes the Chi-Squared test on the contingency table.

```sql
SELECT * FROM TD_ChiSq (
  ON contingency1 AS CONTINGENCY
  OUT TABLE EXPCOUNTS (exptable1)
  USING
  Alpha (0.05)
) AS dt;
```

#### Output Table
The output will include the Chi-Squared statistic, degrees of freedom, p-value, and a conclusion based on the test results.

```sql
SELECT * FROM exptable1;
```

### Keywords and Phrases
- TD_ChiSq Example
- chisq
- Teradata Vantage - Example: How to Use TD_ChiSq
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Hypothesis Testing Functions
- TD_ChiSq
- Chi-Squared Test
- Contingency Table
- Observed Frequencies
- Expected Frequencies
- Null Hypothesis
- Categorical Variables","32","1","5","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/Example-How-to-Use-TD_ChiSq","2024-07-27 12:04:07"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/Optional-Syntax-Elements-for-TD_ChiSq","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_ChiSq - Analytics Database","58","537","alpha The significance level at which the test will be undertaken. alpha must be a numeric value in the range [0, 1]. Default: 0.05 expected_values_table Name for the table of expected values. expected_values_table cannot be the name of an existing table. Default behavior: Function does not output this table.","310","1885","","0","Optional Syntax Elements for TD_ChiSq - Analytics Database","58","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/Optional-Syntax-Elements-for-TD_ChiSq","","","","","","208153","12975","12975","4.600","A+","93","46","2.022","38.312","Hard","11.228","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.060","","","","","","1.1","### Summary of TD_ChiSq - Analytics Database

The `TD_ChiSq` function within the Teradata Vantage™ Analytics Database is designed for performing Chi-Square tests, which are essential for analyzing categorical data. This function evaluates whether there is a significant association between two categorical variables. The key components of the function include specifying observed and expected frequencies, and it provides the flexibility to output various results, including the Chi-Square statistic and p-value.

### Code Example

Below are examples demonstrating the basic SQL operations (Select, Update, Delete, Create) that can be performed with the `TD_ChiSq` function.

#### 1. **Select**
```sql
SELECT * 
FROM my_table 
WHERE category_column = 'A';
```

#### 2. **Insert/Create**
```sql
CREATE TABLE chi_square_results (
    variable1 VARCHAR(50),
    variable2 VARCHAR(50),
    chi_square_stat FLOAT,
    p_value FLOAT
);
```

#### 3. **Update**
```sql
UPDATE chi_square_results 
SET chi_square_stat = chi_square_stat + 1 
WHERE variable1 = 'A' AND variable2 = 'B';
```

#### 4. **Delete**
```sql
DELETE FROM chi_square_results 
WHERE p_value < 0.05;
```

### Example Usage of `TD_ChiSq`
To perform a Chi-Square test using `TD_ChiSq`, the SQL syntax might look like this:

```sql
SELECT 
    TD_ChiSq(observed_values, expected_values) AS chi_square_result 
FROM 
    your_data_table;
```

### Keywords and Phrases
- **Optional Syntax Elements for TD_ChiSq**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware Product**
- **Teradata Vantage™**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **Data Cleaning Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Function Names with and without TD Prefix**
- **Maximum Number of Columns in a Database Table**
- **Avoid Deadlocks Using Volatile Tables**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Example: Using TD_ChiSq to Analyze Categorical Data**

This overview provides a foundational understanding of how to utilize the `TD_ChiSq` function, along with basic SQL operations that can be employed in conjunction.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/Optional-Syntax-Elements-for-TD_ChiSq","2024-07-27 11:25:23"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/Required-Syntax-Elements-for-TD_ChiSq","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_ChiSq - Analytics Database","58","541","ON clause Name of a table, view, or query that contains the actual frequencies for the categories.","98","597","","0","Required Syntax Elements for TD_ChiSq - Analytics Database","58","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/Required-Syntax-Elements-for-TD_ChiSq","","","","","","207461","12699","12699","4.502","A+","61","36","1.694","23.433","Very Hard","11.163","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.333","","","","","","1.1","# Teradata Vantage™ - Analytics Database Overview

The Teradata Vantage™ Analytics Database is designed for advanced analytical functions, enabling users to perform a variety of data processing tasks such as data cleaning, exploration, feature engineering, model training, and evaluation. This documentation outlines essential database operations, function categories, and syntax examples for key analytic functions, including selections, updates, deletions, and creations within the database.

## Summary of Database Functions

The Analytics Database includes a range of analytic functions categorized into:

1. **Data Cleaning Functions**: Functions that help in preparing data for analysis.
2. **Data Exploration Functions**: Functions used for exploring and analyzing data distributions.
3. **Feature Engineering Functions**: Functions that transform raw data into features suitable for model training.
4. **Model Training and Scoring Functions**: Functions to train and evaluate models based on data.
5. **Text Analytic Functions**: Functions for processing and analyzing text data.
6. **Hypothesis Testing Functions**: Functions to perform statistical tests on data.

## Code Example: Basic SQL Operations

Here are examples of basic SQL operations—select, update, delete, and create—commonly used in the Teradata Vantage™ Analytics Database.

### 1. Select

```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE account_status = 'Active';
```

### 2. Update

```sql
UPDATE customers
SET account_status = 'Inactive'
WHERE last_login < '2023-01-01';
```

### 3. Delete

```sql
DELETE FROM customers
WHERE account_status = 'Inactive' AND last_login < '2022-01-01';
```

### 4. Create

```sql
CREATE TABLE customer_orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    order_total DECIMAL(10, 2)
);
```

## Keywords and Phrases

- Required Syntax Elements for TD_ChiSq
- Analytics Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This overview provides foundational knowledge for working with the Teradata Vantage™ Analytics Database, focusing on essential SQL commands and analytic functions.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/Required-Syntax-Elements-for-TD_ChiSq","2024-07-27 11:52:49"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/TD_ChiSq-Input","text/html;charset=UTF-8","200","","Indexable","","TD_ChiSq Input - Analytics Database","35","323","A contingency table, also known as a two-way frequency table, is a tabular mechanism with at least two rows and two columns used in statistics to present categorical data in terms of frequency counts. A contingency table shows the observed frequency of two variables arranged into rows and columns. A cell is the interse...","323","2000","","0","TD_ChiSq Input - Analytics Database","35","Database Analytic Functions","27","CONTINGENCY Table Schema","24","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/TD_ChiSq-Input","","","","","","212029","13885","13885","4.922","A+","366","68","5.382","64.533","Normal","11.732","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.654","","","","","","1.1","## Summary of Teradata Analytics Database Functions

The Teradata Analytics Database provides a range of analytic functions to support data analysis and modeling. This guide covers the essential SQL commands for manipulating data in an analytics database, specifically focusing on the operations to select, update, delete, and create records. Additionally, we'll outline important keywords and phrases relevant to the Teradata Vantage™ Analytics Database.

### Code Examples

#### 1. Select
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT gender, smoking_habit, COUNT(*) AS frequency
FROM contingency_table
GROUP BY gender, smoking_habit;
```

#### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE contingency_table
SET smokers = smokers + 1
WHERE gender = 'Male' AND smoking_habit = 'Smoker';
```

#### 3. Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM contingency_table
WHERE gender = 'Female' AND smoking_habit = 'Non-Smoker';
```

#### 4. Create
The `CREATE` statement creates a new table in the database.

```sql
CREATE TABLE contingency_table (
    gender VARCHAR(10),
    smokers INT,
    non_smokers INT
);
```

### Keywords and Phrases
- **TD_ChiSq Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**: gjn1627595495337.ditamap
- **dita:ditavalPath**: ayr1485454803741.ditaval
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Input Table Schemas**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Recommendations for Using Analytic Functions**
- **Contingency Table Schema**
- **Observed Frequency**
- **Joint Occurrence**
- **Maximum Label Length**

This concise summary and code examples provide a foundational understanding of how to perform common data manipulation tasks in the Teradata Analytics Database, along with important terminology to enhance your analytical capabilities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/TD_ChiSq-Input","2024-07-27 12:35:55"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/TD_ChiSq-Output","text/html;charset=UTF-8","200","","Indexable","","TD_ChiSq Output - Analytics Database","36","339","Output Table Schema Column Data Type Description chi_square DOUBLE PRECISION Chi-squared statistic. cramers_v DOUBLE PRECISION Cramer's V statistic. df INTEGER Degrees of freedom. alpha DOUBLE PRECISION alpha (see Optional Syntax Elements for TD_ChiSq). p_value DOUBLE PRECISION Probability associated with chi-squared s...","323","2125","","0","TD_ChiSq Output - Analytics Database","36","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/TD_ChiSq-Output","","","","","","211483","13602","13602","4.822","A+","177","52","3.404","41.828","Hard","11.345","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.694","","","","","","1.1","# Summary of TD_ChiSq Output - Analytics Database

The TD_ChiSq function in the Analytics Database provides a method for performing chi-squared tests to assess whether there is a significant association between categorical variables in a dataset. The output includes various statistical metrics such as the chi-squared statistic, degrees of freedom, p-value, and a conclusion about the null hypothesis. This function is essential in hypothesis testing, particularly in determining if observed frequencies differ from expected frequencies under the assumption of independence.

## Code Example

Here’s a brief overview of SQL commands for common operations: Select, Update, Delete, and Create, specifically related to using the TD_ChiSq function.

### Select
```sql
SELECT *
FROM chi_sq_results
WHERE p_value < 0.05; -- Selecting results with statistically significant p-value
```

### Update
```sql
UPDATE chi_sq_results
SET conclusion = 'reject null hypothesis'
WHERE p_value < 0.05; -- Updating conclusion based on p-value
```

### Delete
```sql
DELETE FROM chi_sq_results
WHERE df = 0; -- Deleting entries with zero degrees of freedom
```

### Create
```sql
CREATE TABLE chi_sq_results (
    chi_square DOUBLE PRECISION,
    cramers_v DOUBLE PRECISION,
    df INTEGER,
    alpha DOUBLE PRECISION,
    p_value DOUBLE PRECISION,
    criticalvalue DOUBLE PRECISION,
    conclusion VARCHAR(50)
); -- Creating a table to store chi-squared test results
```

## Keywords and Phrases
- TD_ChiSq Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Hypothesis Testing Functions
- TD_ANOVA
- TD_FTest
- TD_ZTest
- Model Evaluation Functions
- Conclusion
- Chi-squared statistic
- Cramer's V statistic
- Degrees of freedom
- p-value
- Critical value
- Null hypothesis
- Expected values
- OUT clause
- Contingency table
- Statistical significance
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Usage Notes
- Recommendations for Using Analytic Functions","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/TD_ChiSq-Output","2024-07-27 12:14:46"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/TD_ChiSq-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_ChiSq Syntax | chisq | Teradata Vantage - TD_ChiSq Syntax - Analytics Database","81","743","See the syntax of Analytics Database (SQL Engine) hypothesis testing function TD_ChiSq and read descriptions of its required and optional syntax elements.","154","961","","0","TD_ChiSq Syntax | chisq | Teradata Vantage - TD_ChiSq Syntax - Analytics Database","81","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/TD_ChiSq-Syntax","","","","","","208134","12922","12922","4.581","A+","103","44","2.341","54.150","Fairly Hard","11.237","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.546","","","","","","1.1","## Summary

The TD_ChiSq function in Teradata Vantage is an analytic function used for performing Chi-Square tests on contingency tables. This function helps determine if there is a significant association between categorical variables. It can be used in various contexts, including within SELECT statements and during table or view creation.

## Code Example

### 1. **Select**
This example retrieves the Chi-Square test results from a contingency table.

```sql
SELECT TD_ChiSq(
    ON (SELECT column1, column2 FROM my_table) AS CONTINGENCY
) AS ChiSquareValue;
```

### 2. **Update**
While the Chi-Square function is primarily used for calculating statistics and not for updating records, you can update a table based on the results of a Chi-Square test in a broader query.

```sql
UPDATE my_table
SET status = 'Significant'
WHERE TD_ChiSq(
    ON (SELECT column1, column2 FROM my_table) AS CONTINGENCY
) > 0.05;
```

### 3. **Delete**
Similarly, you cannot directly delete using the Chi-Square function. However, you could delete records based on certain conditions derived from a Chi-Square analysis.

```sql
DELETE FROM my_table
WHERE condition_column = 'Unrelated'
AND TD_ChiSq(
    ON (SELECT column1, column2 FROM my_table) AS CONTINGENCY
) < 0.05;
```

### 4. **Create**
You can create a table that includes the results of the Chi-Square test.

```sql
CREATE TABLE chi_square_results AS (
    SELECT 
        TD_ChiSq(
            ON (SELECT column1, column2 FROM my_table) AS CONTINGENCY
        ) AS ChiSquareValue,
        COUNT(*) AS TotalCount
    FROM my_table
    GROUP BY column1, column2
) WITH DATA;
```

## Keywords and Phrases
- TD_ChiSq Syntax
- chisq
- Teradata Vantage
- TD_ChiSq Syntax - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Example: How to Use TD_ChiSq
- Input Table Rows Redistribution
- Functions Ignore Disallowed Syntax Elements
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Avoid Deadlocks Using Volatile Tables","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/TD_ChiSq-Syntax","2024-07-27 12:12:59"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/TD_ChiSq-Usage-Notes","text/html;charset=UTF-8","200","","Indexable","","TD_ChiSq Usage Notes - Analytics Database","41","392","Computational Method The Chi-Square test finds statistically significant associations between categorical variables. The test determines if the categorical variables are statistically independent or not. The contingency tables organize the data for analysis. A two-way contingency table consists of r rows and c columns ...","323","1968","","0","TD_ChiSq Usage Notes - Analytics Database","41","Database Analytic Functions","27","Computational Method","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/TD_ChiSq-Usage-Notes","","","","","","229473","26756","26756","9.485","A+","411","89","4.618","71.440","Fairly Easy","10.980","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.672","","","","","","1.1","## Summary

The Chi-Square test is a statistical method used to determine if there is a significant association between two categorical variables. It operates under the null hypothesis that the variables are independent. The test uses a contingency table to organize the data, and the Chi-Square statistic is calculated to assess the relationship between these variables. The result is compared against a critical value from the Chi-Square distribution to either accept or reject the null hypothesis.

## Code Example

### Create a Contingency Table

```sql
CREATE TABLE gender_affiliation (
    Gender VARCHAR(10),
    Affiliation VARCHAR(10),
    Count INT
);

INSERT INTO gender_affiliation (Gender, Affiliation, Count) VALUES
('Male', 'Smokers', 30),
('Male', 'Non-Smokers', 70),
('Female', 'Smokers', 20),
('Female', 'Non-Smokers', 80);
```

### Select Data for Chi-Square Calculation

```sql
SELECT Gender, Affiliation, Count
FROM gender_affiliation;
```

### Update Data in the Table

```sql
UPDATE gender_affiliation
SET Count = 25
WHERE Gender = 'Female' AND Affiliation = 'Smokers';
```

### Delete Data from the Table

```sql
DELETE FROM gender_affiliation
WHERE Gender = 'Male' AND Affiliation = 'Non-Smokers';
```

### Perform Chi-Square Test

```sql
SELECT TD_ChiSq(
    COUNT, 
    Gender, 
    Affiliation
) AS Chi_Square_Result
FROM gender_affiliation;
```

## Keywords and Phrases

- **TD_ChiSq Usage Notes**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Hypothesis Testing Functions**
- **Chi-Square Test**
- **Contingency Table**
- **Null Hypothesis**
- **Alternative Hypothesis**
- **Expected Cell Counts**
- **Chi-Square Statistic**
- **Degrees of Freedom**
- **Cramer's V Statistic**
- **Statistical Independence**
- **Joint Occurrence**
- **Critical Value**
- **Data Analysis**
- **Statistical Association** 

This concise summary, along with code examples on how to create, select, update, and delete data in a contingency table, provides a solid foundation for understanding and applying the Chi-Square test in statistical analysis.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/TD_ChiSq-Usage-Notes","2024-07-27 12:07:47"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest","text/html;charset=UTF-8","200","","Indexable","","TD_FTest Function | F Test | Teradata Vantage - TD_FTest - Analytics Database","77","702","This Analytics Database (SQL Engine) hypothesis testing function performs an F -test.","85","530","","0","TD_FTest Function | F Test | Teradata Vantage - TD_FTest - Analytics Database","77","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest","","","","","","210240","13514","13514","4.791","A+","247","60","4.117","51.267","Fairly Hard","11.553","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.599","","","","","","1.1","### Overview of TD_FTest in Teradata Vantage

The **F test** is a statistical method used to compare the variances of two or more populations to determine if they are significantly different from each other. This test is particularly useful in various fields such as quality control, regression analysis, and machine learning, where evaluating the variability of different groups or models is crucial.

In Teradata Vantage, the `TD_FTest` function is utilized to perform this test, allowing analysts to assess the significance of their data models or to compare the variances between different datasets.

### Code Example Section

Below are examples showcasing common SQL operations (`SELECT`, `UPDATE`, `DELETE`, and `CREATE`) in Teradata, illustrating the usage of the `TD_FTest` function along with basic SQL commands.

```sql
-- 1. Create a table for test data
CREATE TABLE test_data (
    id INT,
    group_name VARCHAR(50),
    sample_value FLOAT
);

-- 2. Insert sample data into the table
INSERT INTO test_data (id, group_name, sample_value) VALUES (1, 'Group A', 23.5);
INSERT INTO test_data (id, group_name, sample_value) VALUES (2, 'Group A', 22.8);
INSERT INTO test_data (id, group_name, sample_value) VALUES (3, 'Group B', 29.1);
INSERT INTO test_data (id, group_name, sample_value) VALUES (4, 'Group B', 27.3);

-- 3. Select data to view the contents
SELECT * FROM test_data;

-- 4. Update a record in the table
UPDATE test_data
SET sample_value = 24.0
WHERE id = 1;

-- 5. Delete a record from the table
DELETE FROM test_data
WHERE id = 3;

-- 6. Use the TD_FTest function to compare variances between two groups
SELECT TD_FTest(
    FIRSTSAMPLE = (SELECT sample_value FROM test_data WHERE group_name = 'Group A'),
    SECONDSAMPLE = (SELECT sample_value FROM test_data WHERE group_name = 'Group B')
) AS f_test_result;
```

### Summary

The `TD_FTest` function in Teradata Vantage allows users to perform F tests to compare variances between different groups within a dataset. This function is essential for statistical analysis in various applications, helping in quality control, regression analysis, and machine learning.

### Keywords and Phrases

- TD_FTest Function
- F Test
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Function Syntax Descriptions
- Data Cleaning Functions
- Data Exploration Functions
- Model Evaluation Functions
- Hypothesis Testing Functions
- Usage Notes
- SQL Operations
- CREATE TABLE
- INSERT INTO
- SELECT
- UPDATE
- DELETE
- Variance Comparison
- Statistical Analysis
- Quality Control
- Regression Analysis
- Machine Learning","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest","2024-07-27 11:57:21"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Examples-How-to-Use-TD_FTest","text/html;charset=UTF-8","200","","Indexable","","TD_FTest Example | F Test | Teradata Vantage - Examples: How to Use TD_FTest - Analytics Database","97","906","See examples of Analytics Database (SQL Engine) hypothesis testing function TD_FTest.","85","544","","0","TD_FTest Example | F Test | Teradata Vantage - Examples: How to Use TD_FTest - Analytics Database","97","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Examples-How-to-Use-TD_FTest","","","","","","209599","13506","13506","4.788","A+","129","48","2.688","30.316","Hard","11.310","1","5","","707","707","0","99.860","715","712","0","","","","","","","","","0.788","","","","","","1.1","## Summary

The TD_FTest function in Teradata Vantage is used to perform an F-test, which is a statistical test for comparing the variances of two populations. This test is useful in various contexts, such as hypothesis testing and identifying whether two samples have significantly different variances. The function takes several optional and required parameters, allowing users to specify their sample names, variances, and more.

### Code Examples

Here are some basic SQL operations (Select, Update, Delete, Create) that can be performed in Teradata, along with an example of how to use the `TD_FTest` function.

#### 1. Create Table

```sql
CREATE TABLE SampleData (
    SampleID INT,
    SampleValue DECIMAL(10, 2)
);
```

#### 2. Insert Data

```sql
INSERT INTO SampleData (SampleID, SampleValue) VALUES (1, 25.0);
INSERT INTO SampleData (SampleID, SampleValue) VALUES (2, 30.0);
INSERT INTO SampleData (SampleID, SampleValue) VALUES (3, 28.0);
```

#### 3. Select Data

```sql
SELECT * FROM SampleData;
```

#### 4. Update Data

```sql
UPDATE SampleData SET SampleValue = 29.0 WHERE SampleID = 1;
```

#### 5. Delete Data

```sql
DELETE FROM SampleData WHERE SampleID = 2;
```

### Example: Using TD_FTest

Here is an example of how to use the `TD_FTest` function in Teradata Vantage:

```sql
SELECT TD_FTest(
    FirstSampleName => 'Sample1',
    SecondSampleName => 'Sample2',
    FirstSampleVariance => 10,
    SecondSampleVariance => 15
) AS F_Test_Result;
```

### Keywords and Phrases
- TD_FTest Example
- F Test
- Teradata Vantage - Examples: How to Use TD_FTest
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Recommendations for Using Analytic Functions
- SQL Syntax
- Input Table
- Variance Comparison
- Hypothesis Testing
- Statistical Analysis
- Data Management Functions
- Example Queries
- SQL Operations","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Examples-How-to-Use-TD_FTest","2024-07-27 12:18:08"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Examples-How-to-Use-TD_FTest/Using-FirstSampleName-and-SecondSampleName-Arguments","text/html;charset=UTF-8","200","","Indexable","","Using FirstSampleName and SecondSampleName Arguments - Analytics Database","73","739","TD_FTest Input: insect2cols groupName groupValue
--------- ----------
groupE    34
groupF    15
groupE    31
groupF    26
groupE    21
groupF    26
groupE    11
groupF    10
...       ...
groupD    12
groupB    21
groupD    12
groupB    19
groupD     5
groupB    21
...       ...
groupC    13
groupC    11
groupC    10
g...","323","1627","","0","Using FirstSampleName and SecondSampleName Arguments - Analytics Database","73","Database Analytic Functions","27","TD_FTest Input: insect2cols","27","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Examples-How-to-Use-TD_FTest/Using-FirstSampleName-and-SecondSampleName-Arguments","","","","","","208960","13112","13112","4.648","A+","155","80","1.938","73.329","Fairly Easy","11.520","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.554","","","","","","1.1","## Summary

In the context of managing data within the Teradata Vantage™ Analytics Database, various SQL commands are utilized for performing essential operations such as selecting, updating, deleting, and creating data. This guide provides a brief overview of each operation along with code examples to illustrate their syntax and usage effectively.

### Code Example

#### Select
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

#### Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

#### Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

#### Create
The `CREATE` statement creates a new table in the database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Keywords and Phrases

- Using FirstSampleName and SecondSampleName Arguments
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Workload Management Configuration
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- TD_ConvertTo
- TD_GetRowsWithoutMissingValues
- TD_OneHotEncodingFit
- TD_XGBoostPredict
- TD_ClassificationEvaluator
- TD_FTest
- TD_ZTest
- nPath
- Sessionize

These keywords and phrases encompass critical concepts and functionalities available within the Analytics Database, facilitating better understanding and utilization of the database's capabilities.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Examples-How-to-Use-TD_FTest/Using-FirstSampleName-and-SecondSampleName-Arguments","2024-07-27 12:33:28"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Examples-How-to-Use-TD_FTest/Using-FirstSampleName-and-SecondSampleVariance-Arguments","text/html;charset=UTF-8","200","","Indexable","","Using FirstSampleName and SecondSampleVariance Arguments - Analytics Database","77","764","TD_FTest Input: insect2cols groupName groupValue
--------- ----------
groupE    34
groupF    15
groupE    31
groupF    26
groupE    21
groupF    26
groupE    11
groupF    10
...       ...
groupD    12
groupB    21
groupD    12
groupB    19
groupD     5
groupB    21
...       ...
groupC    13
groupC    11
groupC    10
g...","323","1627","","0","Using FirstSampleName and SecondSampleVariance Arguments - Analytics Database","77","Database Analytic Functions","27","TD_FTest Input: insect2cols","27","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Examples-How-to-Use-TD_FTest/Using-FirstSampleName-and-SecondSampleVariance-Arguments","","","","","","208977","13122","13122","4.652","A+","156","81","1.926","72.557","Fairly Easy","11.527","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.668","","","","","","1.1","## Summary
This document provides an overview of the analytical functions available within the Teradata Vantage™ Analytics Database. It covers various function categories, including data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Additionally, it discusses the syntax and usage of several key functions, along with examples to illustrate their practical applications.

### Code Examples

#### 1. **Select**
```sql
SELECT *
FROM analytics_table
WHERE sample_name = 'FirstSampleName';
```

#### 2. **Update**
```sql
UPDATE analytics_table
SET sample_value = sample_value * 1.1
WHERE sample_name = 'FirstSampleName';
```

#### 3. **Delete**
```sql
DELETE FROM analytics_table
WHERE sample_name = 'SecondSampleName';
```

#### 4. **Create**
```sql
CREATE TABLE analytics_table (
    sample_name VARCHAR(50),
    sample_value FLOAT
);
```

### Keywords and Phrases
- Using FirstSampleName and SecondSampleVariance Arguments - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_SimpleImputeFit
- Unpack
- Data Exploration Functions
- MovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- Feature Engineering Transform Functions
- Antiselect
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer
- TD_FunctionFit
- TD_FunctionTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_PolynomialFeaturesFit
- TD_PolynomialFeaturesTransform
- TD_RandomProjectionFit
- TD_RandomProjectionTransform
- TD_RowNormalizeFit
- TD_RowNormalizeTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_Unpivoting
- Feature Engineering Utility Functions
- TD_FillRowID
- TD_NumApply
- TD_RoundColumns
- TD_StrApply
- Model Training Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_KNN
- TD_OneClassSVM
- TD_SVM
- TD_VectorDistance
- TD_XGBoost
- Model Scoring Functions
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_OneClassSVMPredict
- TD_SVMPredict
- TD_XGBoostPredict
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- Text Analytic Functions
- NGramSplitter
- TD_NaiveBayesTextClassifierPredict
- TD_NaiveBayesTextClassifierTrainer
- TD_SentimentExtractor
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Testing Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Path and Pattern Analysis Functions
- Attribution
- nPath
- Sessionize","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Examples-How-to-Use-TD_FTest/Using-FirstSampleName-and-SecondSampleVariance-Arguments","2024-07-27 11:35:21"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Examples-How-to-Use-TD_FTest/Using-FirstSampleVariance-and-SecondSampleVariance-Arguments","text/html;charset=UTF-8","200","","Indexable","","TD_FTest Example | F Test | Specify Sample Variances - Using FirstSampleVariance and SecondSampleVariance Arguments - Analytics Database","136","1290","See an example of Analytics Database (SQL Engine) hypothesis testing function TD_FTest that specifies two sample variances.","123","780","","0","TD_FTest Example | F Test | Specify Sample Variances - Using FirstSampleVariance and SecondSampleVariance Arguments - Analytics Database","136","Database Analytic Functions","27","TD_FTest Input","14","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Examples-How-to-Use-TD_FTest/Using-FirstSampleVariance-and-SecondSampleVariance-Arguments","","","","","","208694","13057","13057","4.629","A+","117","57","2.053","44.229","Hard","11.444","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.446","","","","","","1.1","### Summary

In the context of Teradata Vantage™ and its Analytics Database, the TD_FTest function is used to perform an F-test, which is a statistical test used to compare the variances of two populations. This function allows users to specify variances directly through arguments rather than requiring input tables. The output includes various statistics, such as the variance ratio, degrees of freedom, critical value, alpha level, and the p-value, which together help in assessing the null hypothesis.

### Code Example

Here are examples of basic SQL operations: **Select**, **Update**, **Delete**, and **Create** in Teradata.

#### Select Example
```sql
SELECT *
FROM Employees
WHERE Department = 'Sales';
```

#### Update Example
```sql
UPDATE Employees
SET Salary = Salary * 1.10
WHERE Department = 'Sales';
```

#### Delete Example
```sql
DELETE FROM Employees
WHERE LastName = 'Doe';
```

#### Create Example
```sql
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Salary DECIMAL(10, 2),
    Department VARCHAR(50)
);
```

### Keywords and Phrases
- TD_FTest Example
- F Test
- Specify Sample Variances
- Using FirstSampleVariance and SecondSampleVariance Arguments
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Hypothesis Testing Functions
- TD_FTest Syntax
- Conclusion
- Variance Ratio
- Degrees of Freedom
- Critical Value
- Alpha
- p_value
- Fail to reject Null hypothesis
- Usage Notes
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Model Training Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Examples-How-to-Use-TD_FTest/Using-FirstSampleVariance-and-SecondSampleVariance-Arguments","2024-07-27 12:52:11"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Examples-How-to-Use-TD_FTest/Using-SecondSampleName-and-FirstSampleVariance-Arguments","text/html;charset=UTF-8","200","","Indexable","","Using SecondSampleName and FirstSampleVariance Arguments - Analytics Database","77","764","TD_FTest Input: insect2cols groupName groupValue
--------- ----------
groupE    34
groupF    15
groupE    31
groupF    26
groupE    21
groupF    26
groupE    11
groupF    10
...       ...
groupD    12
groupB    21
groupD    12
groupB    19
groupD     5
groupB    21
...       ...
groupC    13
groupC    11
groupC    10
g...","323","1627","","0","Using SecondSampleName and FirstSampleVariance Arguments - Analytics Database","77","Database Analytic Functions","27","TD_FTest Input: insect2cols","27","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Examples-How-to-Use-TD_FTest/Using-SecondSampleName-and-FirstSampleVariance-Arguments","","","","","","208976","13123","13123","4.652","A+","156","81","1.926","73.099","Fairly Easy","11.526","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.571","","","","","","1.1","### Summary
The Analytics Database in Teradata Vantage™ provides a variety of analytic functions that are essential for data analysis, model training, and evaluation. It supports operations such as selection, updating, deletion, and creation of data, allowing for efficient manipulation and analysis of large datasets. This document highlights the core SQL operations along with examples, and also outlines key concepts and functions within the analytics database.

### Code Example

#### SELECT
To retrieve data from a table, you can use the `SELECT` statement. Here's an example of how to select specific columns from a table:

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

#### UPDATE
To modify existing records in a table, the `UPDATE` statement can be used:

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

#### DELETE
To remove records from a table, use the `DELETE` statement:

```sql
DELETE FROM table_name
WHERE condition;
```

#### CREATE
To create a new table in the database, you can use the `CREATE TABLE` statement:

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Keywords and Phrases
- Using SecondSampleName and FirstSampleVariance Arguments
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Recommendations for Using Analytic Functions
- TD_FTest Input: insect2cols
- TD_FTest SQL Call
- TD_FTest Output

This concise overview provides a foundational understanding of key SQL operations and relevant analytic functions within the Teradata Vantage™ Analytics Database.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Examples-How-to-Use-TD_FTest/Using-SecondSampleName-and-FirstSampleVariance-Arguments","2024-07-27 12:24:18"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Optional-Syntax-Elements-for-TD_FTest","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_FTest - Analytics Database","58","536","ON clause Specifies the table name, view name, or query as a InputTable. FirstSampleColumn If this is specified, do not specify FirstSampleVariance. First Column to calculate variance. SecondSampleColumn If this is specified, do not specify SecondSampleVariance. Second Column to calculate variance. FirstSampleName If t...","323","2008","","0","Optional Syntax Elements for TD_FTest - Analytics Database","58","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Optional-Syntax-Elements-for-TD_FTest","","","","","","211112","13526","13526","4.795","A+","237","87","2.724","22.376","Very Hard","11.601","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.464","","","","","","1.1","## Summary

The **Teradata Analytics Database** provides a range of analytic functions and capabilities, allowing users to perform complex data analysis and modeling tasks. This includes functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. The database supports various statistical and machine learning functions, making it suitable for diverse analytical applications.

In this guide, we will provide SQL code examples for basic operations in the Teradata Analytics Database: **Select**, **Update**, **Delete**, and **Create**. This will help users understand how to manipulate data within the analytics environment effectively.

### Code Examples

#### 1. Select

To retrieve data from a table, you can use the `SELECT` statement. Here’s an example of selecting specific columns from a table:

```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE active = 'Y';
```

#### 2. Update

To modify existing records in a table, use the `UPDATE` statement. The following example updates the last name of a customer:

```sql
UPDATE customers
SET last_name = 'Doe'
WHERE customer_id = 123;
```

#### 3. Delete

To remove records from a table, utilize the `DELETE` statement. This example deletes a customer record based on the customer ID:

```sql
DELETE FROM customers
WHERE customer_id = 123;
```

#### 4. Create

To create a new table, use the `CREATE TABLE` statement. The example below creates a new table for storing customer information:

```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    active CHAR(1)
);
```

### Keywords and Phrases

- **Optional Syntax Elements for TD_FTest**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

These keywords and phrases are essential for understanding the concepts and functionalities of the Teradata Analytics Database, particularly when working with analytic functions and database operations.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Optional-Syntax-Elements-for-TD_FTest","2024-07-27 12:52:53"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Required-Syntax-Elements-for-TD_FTest","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_FTest - Analytics Database","58","540","SampleNameColumn Required for sample value input. Specifies the column that contains the names of the groups. Cannot be specified if FirstSampleColumn or SecondSampleColumn are specified. SampleValueColumn Required for sample value input. Specifies the column that contains the values for each group. Cannot be specified...","323","2063","","0","Required Syntax Elements for TD_FTest - Analytics Database","58","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Required-Syntax-Elements-for-TD_FTest","","","","","","208441","12875","12875","4.564","A+","94","45","2.089","22.915","Very Hard","11.245","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.442","","","","","","1.1","# Overview of TD_FTest - Analytics Database

The **TD_FTest** function is part of the Teradata Vantage™ Analytics Database, used primarily for hypothesis testing to determine if there are significant differences between the variances of two populations. This function is vital for statistical analysis and can assist in various fields such as data science, finance, and research.

## Summary of TD_FTest

- **Purpose**: To compare variances between two samples.
- **Input Requirements**: Requires two input samples and their respective variances.
- **Output**: Provides statistical results that help in making inferences about the populations from which the samples were drawn.

## Code Examples

### 1. Select

```sql
SELECT *
FROM your_table
WHERE condition;
```

### 2. Update

```sql
UPDATE your_table
SET column1 = value1
WHERE condition;
```

### 3. Delete

```sql
DELETE FROM your_table
WHERE condition;
```

### 4. Create

```sql
CREATE TABLE new_table AS
SELECT *
FROM existing_table
WITH NO DATA;
```

## TD_FTest Syntax Example

Below is a detailed syntax example for the TD_FTest function:

```sql
SELECT TD_FTest(
    SampleNameColumn => 'sample_name',
    SampleValueColumn => 'sample_value',
    FirstSampleName => 'Group1',
    SecondSampleName => 'Group2',
    FirstSampleVariance => 5.0,
    SecondSampleVariance => 10.0
) AS f_test_result
FROM your_data_table;
```

### Key Parameters
- **SampleNameColumn**: Specifies the column that contains the names of the groups.
- **SampleValueColumn**: Specifies the column that contains the values for each group.
- **FirstSampleName**: The name of the first sample.
- **SecondSampleName**: The name of the second sample.
- **FirstSampleVariance**: Variance of the first sample.
- **SecondSampleVariance**: Variance of the second sample.

## Keywords and Phrases

- **Required Syntax Elements for TD_FTest**
- **Analytics Database**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Data Cleaning Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Names with and without TD Prefix**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Recommendations for Using Analytic Functions**

This summary provides a foundational understanding of the TD_FTest function and its application in the context of the Teradata Vantage™ Analytics Database, alongside illustrative examples of basic SQL operations.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Required-Syntax-Elements-for-TD_FTest","2024-07-27 12:23:16"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/TD_FTest-Input","text/html;charset=UTF-8","200","","Indexable","","TD_FTest Input - Analytics Database","35","322","The input table is optional when FirstSampleVariance, SecondSampleVariance, df1 and df2 are specified. Option 1 - Multiple column input using FirstSampleColumn or SecondSampleColumn argument Input Description Comments InputTable A table containing numeric datatypes in columns. At least two columns need to be present in...","323","2062","","0","TD_FTest Input - Analytics Database","35","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/TD_FTest-Input","","","","","","213014","13434","13434","4.762","A+","154","54","2.852","18.260","Very Hard","11.211","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.937","","","","","","1.1","# Summary of Teradata Vantage Analytics Database Functions

The Teradata Vantage Analytics Database provides a comprehensive suite of analytic functions designed to handle a variety of data processing and analysis tasks. These functions cover areas such as data cleaning, exploration, feature engineering, model training, scoring, and evaluation, along with specialized functions for text analysis and hypothesis testing. This guide summarizes core operations such as selecting, updating, deleting, and creating tables or data structures within the analytics database.

## Code Example

### 1. Select

```sql
SELECT column1, column2
FROM my_table
WHERE condition;
```

### 2. Update

```sql
UPDATE my_table
SET column1 = new_value
WHERE condition;
```

### 3. Delete

```sql
DELETE FROM my_table
WHERE condition;
```

### 4. Create

```sql
CREATE TABLE my_table (
    column1 INT,
    column2 VARCHAR(100)
);
```

## Keywords and Phrases

- **TD_FTest Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Recommendations for Using Analytic Functions**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **TD_GetRowsWithoutMissingValues**
- **TD_CategoricalSummary**
- **TD_ColumnSummary**
- **TD_Histogram**
- **TD_RowNormalizeFit**

This guide serves as a foundational reference for users working with Teradata Vantage's analytics capabilities, offering essential SQL operations and highlighting key concepts related to analytic functions in the analytics database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/TD_FTest-Input","2024-07-27 11:29:15"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/TD_FTest-Output","text/html;charset=UTF-8","200","","Indexable","","TD_FTest Output - Analytics Database","36","338","Output Table Schema The function produces an output table as follows. Column Data Type Description FirstSampleVariance DOUBLE PRECISION Variance of first sample population. SecondSampleVariance DOUBLE PRECISION Variance of second sample population. VarianceRatio DOUBLE PRECISION FirstSampleVariance/SecondSampleVariance...","323","2162","","0","TD_FTest Output - Analytics Database","36","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/TD_FTest-Output","","","","","","211779","13405","13405","4.752","A+","133","46","2.891","5.440","Very Hard","11.230","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.517","","","","","","1.1","### Summary
The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions designed for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. These functions are crucial for various analytical tasks and help users derive insights from their data efficiently. The database supports multiple analytic functions that can be utilized for different use cases, including statistical testing, text analytics, and machine learning.

### Code Examples

#### 1. Create
To create a table in the Analytics Database, you can use the following SQL syntax:

```sql
CREATE TABLE SalesData (
    SaleID INT,
    ProductName VARCHAR(100),
    SaleAmount DECIMAL(10, 2),
    SaleDate DATE
);
```

#### 2. Select
To retrieve data from a table, you can use the `SELECT` statement:

```sql
SELECT ProductName, SaleAmount
FROM SalesData
WHERE SaleAmount > 100;
```

#### 3. Update
To modify existing records in a table, you can use the `UPDATE` statement:

```sql
UPDATE SalesData
SET SaleAmount = SaleAmount * 1.10
WHERE SaleDate < '2023-01-01';
```

#### 4. Delete
To remove records from a table, the `DELETE` statement can be used:

```sql
DELETE FROM SalesData
WHERE SaleAmount < 50;
```

### Keywords and Phrases
- **TD_FTest Output**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Example Usage Cases**
- **Statistical Testing**
- **Model Evaluation**
- **Feature Engineering** 

This concise guide provides an introduction to key functions and operations within the Teradata Analytics Database, along with practical code examples for common SQL tasks.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/TD_FTest-Output","2024-07-27 12:32:10"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/TD_FTest-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_FTest Syntax | F Test | Teradata Vantage - TD_FTest Syntax - Analytics Database","82","750","See the syntax of Analytics Database (SQL Engine) hypothesis testing function TD_FTest and read descriptions of its required and optional syntax elements.","154","960","","0","TD_FTest Syntax | F Test | Teradata Vantage - TD_FTest Syntax - Analytics Database","82","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/TD_FTest-Syntax","","","","","","208962","13030","13030","4.619","A+","128","57","2.246","28.085","Very Hard","11.373","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.468","","","","","","1.1","## Summary

The TD_FTest function in Teradata Vantage is used for conducting an F-test, which is a statistical test to determine if there are significant differences between the variances of two samples or populations. The function can be utilized in various ways, including within SELECT statements, CREATE TABLE statements, and CREATE VIEW statements.

### Code Examples

Below are examples demonstrating how to use the TD_FTest function in different SQL operations such as SELECT, UPDATE, DELETE, and CREATE.

### 1. Select

```sql
SELECT TD_FTest(
    ON my_table AS InputTable
    USING
        FirstSampleColumn('sample1')
        SecondSampleColumn('sample2')
        FirstSampleName('Group A')
        SecondSampleName('Group B')
    AlternativeHypothesis('two-tailed')
    Alpha(0.05)
) AS FTest_Result
FROM my_table;
```

### 2. Create Table

```sql
CREATE TABLE results AS (
    SELECT TD_FTest(
        ON my_table AS InputTable
        USING
            FirstSampleColumn('sample1')
            SecondSampleColumn('sample2')
            FirstSampleVariance(1.5)
            SecondSampleVariance(2.0)
    ) AS FTest_Result
) WITH NO DATA;
```

### 3. Create View

```sql
CREATE VIEW FTest_View AS 
SELECT TD_FTest(
    ON my_table AS InputTable
    USING
        SampleNameColumn('sample_name')
        SampleValueColumn('sample_value')
        FirstSampleVariance(1.2)
        SecondSampleVariance(2.5)
) AS FTest_Result
FROM my_table;
```

### 4. Update (Not directly applicable)

While F-tests are typically not used in UPDATE statements, you can calculate the result in a SELECT statement first and then use it in an UPDATE context.

```sql
-- Assume we previously calculated the F-test and stored it in a temporary table
UPDATE my_table
SET result_column = (
    SELECT FTest_Result
    FROM temp_table
)
WHERE some_condition;
```

### 5. Delete (Not directly applicable)

F-tests are generally not involved in DELETE operations, as they are used for statistical analysis rather than data manipulation. However, you can delete records based on conditions derived from F-test results analyzed beforehand.

```sql
DELETE FROM my_table
WHERE some_column IN (
    SELECT some_column
    FROM another_table
    WHERE condition_based_on_statistics
);
```

### Keywords and Phrases

- TD_FTest Syntax
- F Test
- Teradata Vantage - TD_FTest Syntax
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Hypothesis Testing Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Usage Notes
- Function Names with and without TD Prefix
- Function Performance
- Recommendations for Using Analytic Functions
- How to Read Syntax
- Examples: How to Use TD_FTest
- FirstSampleVariance
- SecondSampleVariance
- AlternativeHypothesis
- Alpha
- Select, Update, Delete, Create","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/TD_FTest-Syntax","2024-07-27 12:28:45"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/TD_FTest-Usage-Notes","text/html;charset=UTF-8","200","","Indexable","","TD_FTest Usage Notes | F Test - TD_FTest Usage Notes - Analytics Database","73","682","Learn about the usage considerations for the Analytics Database TD_FTest function.","82","522","","0","TD_FTest Usage Notes | F Test - TD_FTest Usage Notes - Analytics Database","73","Database Analytic Functions","27","Assumptions","11","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/TD_FTest-Usage-Notes","","","","","","358760","88448","88448","31.355","A+","601","128","4.695","76.929","Fairly Easy","7.320","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.907","","","","","","1.1","## Summary of F-Test

The F-test is a statistical hypothesis test used primarily to compare the variances of two populations. It helps determine if the variances are significantly different from each other, which can indicate differences in variability in the data sets being analyzed. The test is based on the F-distribution and can be conducted as one-tailed or two-tailed tests, depending on the research hypothesis.

### Key Points:
- **Assumptions**: The populations are normally distributed, independent, and the data is numeric.
- **Hypotheses**:
  - Null Hypothesis (H0): The variances are equal (σ²1 = σ²2).
  - Alternative Hypothesis (H1): The variances are not equal (σ²1 ≠ σ²2), or one variance is greater than the other.
- **Test Types**: One-tailed (upper/lower) or two-tailed.
- **Test Statistic**: The F-statistic is calculated as the ratio of two sample variances.

## Code Example

Below are examples of SQL commands used for performing Select, Update, Delete, and Create operations in a Teradata database.

### 1. Create Table
```sql
CREATE TABLE SampleData (
    ID INT PRIMARY KEY,
    Value1 FLOAT,
    Value2 FLOAT
);
```

### 2. Insert Data
```sql
INSERT INTO SampleData (ID, Value1, Value2) VALUES (1, 10.5, 20.1);
INSERT INTO SampleData (ID, Value1, Value2) VALUES (2, 12.5, 22.3);
```

### 3. Select Data
```sql
SELECT ID, Value1, Value2
FROM SampleData
WHERE Value1 > 10;
```

### 4. Update Data
```sql
UPDATE SampleData
SET Value1 = Value1 * 1.1
WHERE ID = 1;
```

### 5. Delete Data
```sql
DELETE FROM SampleData
WHERE ID = 2;
```

## Keywords and Phrases

- TD_FTest Usage Notes
- F Test - TD_FTest Usage Notes - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- One-tailed test
- Two-tailed test
- Null hypothesis
- Alternative hypothesis
- F-distribution
- Variance comparison
- Sample means
- Degrees of freedom
- Test statistic","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/TD_FTest-Usage-Notes","2024-07-27 11:23:43"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest","text/html;charset=UTF-8","200","","Indexable","","TD_ZTest Function | Z Test | Teradata Vantage - TD_ZTest - Analytics Database","77","705","This Analytics Database (SQL Engine) hypothesis testing function performs a Z -test.","84","522","","0","TD_ZTest Function | Z Test | Teradata Vantage - TD_ZTest - Analytics Database","77","Database Analytic Functions","27","Assumptions","11","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest","","","","","","217091","15330","15330","5.435","A+","1083","195","5.554","84.492","Easy","13.346","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.603","","","","","","1.1","## Summary of TD_ZTest Function

The TD_ZTest function in Teradata Vantage is used to perform a Z-test, a statistical hypothesis test that assesses whether two population means are different when the population variance is known. This function is essential in various fields, such as medical research, marketing analysis, quality control, education, and finance. It operates under specific assumptions, primarily that the sample distribution is normal and the data is numeric.

### Key Features of TD_ZTest:
- **Test Types**: Supports one-sample and two-sample Z-tests, as well as one-tailed and two-tailed tests.
- **Hypothesis Testing**: Involves a null hypothesis (H0) and an alternative hypothesis (H1).
- **Statistical Framework**: Computes the Z-statistic based on sample means, standard deviation, and sample size.
- **Applications**: Useful for comparing means in various contexts, like drug efficacy, product sales, process quality, and educational outcomes.

## Code Examples

### 1. **Select Statement**
```sql
SELECT *
FROM SalesData
WHERE ProductID = 101;
```
This query retrieves all records from the `SalesData` table where the `ProductID` is 101.

### 2. **Insert Statement**
```sql
INSERT INTO SalesData (ProductID, Quantity, SaleDate)
VALUES (102, 50, CURRENT_DATE);
```
This statement inserts a new record into the `SalesData` table with the specified values.

### 3. **Update Statement**
```sql
UPDATE SalesData
SET Quantity = Quantity + 10
WHERE ProductID = 101;
```
This query updates the `Quantity` of the product with `ProductID` 101, increasing it by 10.

### 4. **Delete Statement**
```sql
DELETE FROM SalesData
WHERE ProductID = 102;
```
This statement removes the record from the `SalesData` table where the `ProductID` is 102.

## Keywords and Phrases
- **TD_ZTest Function**
- **Z Test**
- **Teradata Vantage - TD_ZTest**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Hypothesis Testing Functions**
- **One-tailed or two-tailed**
- **One-sample or two-sample**
- **Standard deviation**
- **Null hypothesis**
- **Alternative hypothesis**
- **Sample distribution**
- **Statistical analysis**
- **Z-statistic**
- **Significance level**
- **p-value**
- **Statistical significance**

This summary and the code examples provide a concise overview of the TD_ZTest function and illustrate fundamental SQL operations within Teradata Vantage.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest","2024-07-27 12:12:56"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Examples-How-to-Use-TD_ZTest","text/html;charset=UTF-8","200","","Indexable","","TD_ZTest Example | Z Test | Teradata Vantage - Examples: How to Use TD_ZTest - Analytics Database","97","909","See examples of Analytics Database (SQL Engine) hypothesis testing function TD_ZTest.","85","544","","0","TD_ZTest Example | Z Test | Teradata Vantage - Examples: How to Use TD_ZTest - Analytics Database","97","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Examples-How-to-Use-TD_ZTest","","","","","","209220","13460","13460","4.772","A+","117","47","2.489","51.016","Fairly Hard","11.249","1","5","","707","707","0","99.860","714","711","0","","","","","","","","","0.469","","","","","","1.1","### Summary

The TD_ZTest function in Teradata Vantage is a powerful analytic tool used for hypothesis testing. It helps determine whether there is a significant difference between the means of two samples or between a sample mean and a known population mean. This is particularly useful in a variety of fields including business, healthcare, and social sciences, where decision-making often relies on statistical evidence.

### Code Example

Here are some basic SQL examples demonstrating how to use the `TD_ZTest` function in Teradata, alongside commands for creating, selecting, updating, and deleting data.

#### 1. Create a Sample Table

```sql
CREATE TABLE SampleData (
    ID INT,
    Value FLOAT
);
```

#### 2. Insert Sample Data

```sql
INSERT INTO SampleData (ID, Value) VALUES (1, 25.5);
INSERT INTO SampleData (ID, Value) VALUES (2, 30.2);
INSERT INTO SampleData (ID, Value) VALUES (3, 28.7);
INSERT INTO SampleData (ID, Value) VALUES (4, 32.1);
INSERT INTO SampleData (ID, Value) VALUES (5, 29.4);
```

#### 3. Select Data

```sql
SELECT * FROM SampleData;
```

#### 4. Update Data

```sql
UPDATE SampleData
SET Value = Value + 2.0
WHERE ID = 1;
```

#### 5. Delete Data

```sql
DELETE FROM SampleData
WHERE ID = 5;
```

#### 6. Perform a Z-Test

Assuming we want to test if the mean of `SampleData` differs from a known population mean of 30:

```sql
SELECT TD_ZTest(
    'SELECT Value FROM SampleData',
    30
) AS ZTestResult;
```

### Keywords and Phrases

- **TD_ZTest Example**
- **Z Test**
- **Teradata Vantage - Examples**
- **How to Use TD_ZTest**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Function Names with and without TD Prefix**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables** 

This example and the keywords provided should give you a solid starting point for working with the TD_ZTest function in Teradata Vantage and understanding its context within the broader capabilities of the analytics database.","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Examples-How-to-Use-TD_ZTest","2024-07-27 12:39:19"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Examples-How-to-Use-TD_ZTest/Using-One-Sample","text/html;charset=UTF-8","200","","Indexable","","Using One Sample - Analytics Database","37","351","TD_ZTest Input: boston2cols The following example assumes the boston2cols input table exists: groupName     groupValue
---------     ----------
RM            -0.2276075065
RM            -0.4401326616
RM            -1.1572243415
RM             2.4224510607
RM             0.1294925842
...            ...
NOX           -0....","323","1525","","0","Using One Sample - Analytics Database","37","Database Analytic Functions","27","TD_ZTest Input: boston2cols","27","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Examples-How-to-Use-TD_ZTest/Using-One-Sample","","","","","","208934","13253","13253","4.698","A+","136","75","1.813","68.764","Normal","11.539","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.535","","","","","","1.1","# Summary of Analytics Database Analytic Functions

The Analytical Database provided by Teradata Vantage™ offers a suite of analytic functions that cater to various data manipulation and analysis needs. This includes functions for data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analysis. Each function has its syntax, input requirements, and output specifications, making it crucial for users to understand how to effectively utilize these functions in their workflows.

## Code Examples

### Create
To create a new table in the Analytics Database:

```sql
CREATE TABLE boston2cols (
    groupName VARCHAR(50),
    groupValue FLOAT
);
```

### Insert
Inserting data into the newly created table:

```sql
INSERT INTO boston2cols (groupName, groupValue) VALUES 
('RM', -0.2276075065),
('RM', -0.4401326616),
('NOX', 1.1684487614);
```

### Select
Using the `SELECT` statement to retrieve data from the table:

```sql
SELECT * FROM boston2cols;
```

### Update
Updating existing records based on a condition:

```sql
UPDATE boston2cols
SET groupValue = groupValue + 1
WHERE groupName = 'RM';
```

### Delete
Deleting records from the table:

```sql
DELETE FROM boston2cols
WHERE groupValue < 0;
```

### Example of Using Analytic Function
Using the `TD_ZTest` function to perform a statistical test on the data:

```sql
SELECT * FROM TD_ZTest(
    ON boston2cols AS InputTable
    USING
        SampleNameColumn('groupName')
        SampleValueColumn('groupValue')
        FirstSampleName('NOX')
) AS dt;
```

## Keywords and Phrases

- **Using One Sample**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **How to Read Syntax**
- **Input Table**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Recommendations for Using Analytic Functions**

This overview should assist users in understanding the capabilities and functionalities of the Analytics Database, as well as provide a starting point for executing fundamental SQL operations.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Examples-How-to-Use-TD_ZTest/Using-One-Sample","2024-07-27 12:50:30"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Examples-How-to-Use-TD_ZTest/Using-Two-Samples","text/html;charset=UTF-8","200","","Indexable","","Using Two Samples - Analytics Database","38","363","TD_ZTest Input: boston2cols The following example assumes the boston2cols input table exists: groupName     groupValue
---------     ----------
RM            -0.2276075065
RM            -0.4401326616
RM            -1.1572243415
RM             2.4224510607
RM             0.1294925842
...            ...
NOX           -0....","323","1525","","0","Using Two Samples - Analytics Database","38","Database Analytic Functions","27","TD_ZTest Input: boston2cols","27","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Examples-How-to-Use-TD_ZTest/Using-Two-Samples","","","","","","209049","13302","13302","4.716","A+","143","77","1.857","67.697","Normal","11.581","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.614","","","","","","1.1","# Analytics Database Analytic Functions Overview

The Analytics Database from Teradata Vantage™ provides a rich set of analytic functions aimed at data cleaning, exploration, feature engineering, model training, scoring, and evaluation. These functions are designed to work efficiently with large data sets, offering users powerful tools for data manipulation and analysis.

## Code Example Section

### Select
To retrieve data from a table, we use the `SELECT` statement. Below is an example that selects specific columns from a table named `customer_data`.

```sql
SELECT customer_id, first_name, last_name
FROM customer_data
WHERE country = 'USA';
```

### Update
The `UPDATE` statement allows for modifying existing records within a table. Here’s how to update the email address of a specific customer.

```sql
UPDATE customer_data
SET email = 'new_email@example.com'
WHERE customer_id = 12345;
```

### Delete
To remove records from a table, we use the `DELETE` statement. The example below deletes a customer record based on their ID.

```sql
DELETE FROM customer_data
WHERE customer_id = 12345;
```

### Create
To create a new table in the database, we use the `CREATE TABLE` statement. Here’s an example of creating a new table for product information.

```sql
CREATE TABLE product_data (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    price DECIMAL(10, 2),
    in_stock INT
);
```

## Summary
The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions tailored for advanced data manipulation and analysis. Users can efficiently perform operations such as selecting, updating, deleting, and creating tables as shown in the examples above.

### Keywords and Phrases
- **Analytics Database**
- **Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Teradata Vantage™**
- **SQL Syntax**
- **Select, Update, Delete, Create statements**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Data Analysis**
- **Statistical Functions**
- **Hypothesis Testing Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Last Update: April 2024**","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Examples-How-to-Use-TD_ZTest/Using-Two-Samples","2024-07-27 11:20:53"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Examples-How-to-Use-TD_ZTest/Using-Two-tailed-Test","text/html;charset=UTF-8","200","","Indexable","","TD_ZTest Example | Z Test | Teradata Vantage - Using Two-tailed Test - Analytics Database","89","813","See an example of Analytics Database (SQL Engine) hypothesis testing function TD_ZTest.","87","556","","0","TD_ZTest Example | Z Test | Teradata Vantage - Using Two-tailed Test - Analytics Database","89","Database Analytic Functions","27","TD_ZTest Input: example_table","29","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Examples-How-to-Use-TD_ZTest/Using-Two-tailed-Test","","","","","","210083","13281","13281","4.708","A+","236","117","2.017","75.737","Fairly Easy","11.983","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.627","","","","","","1.1","### Summary

Teradata Vantage™ offers a rich set of analytic functions suitable for various data analysis tasks. Among these functions, the **TD_ZTest** is particularly useful for conducting hypothesis tests, allowing data analysts to compare sample means and assess whether observed differences are statistically significant. This function can handle both one-sample and two-sample tests, making it versatile for different use cases.

In addition, Teradata Vantage supports various SQL operations such as **SELECT**, **UPDATE**, **DELETE**, and **CREATE**, which are fundamental to database manipulation. Below are examples demonstrating these SQL commands alongside the usage of the **TD_ZTest** function.

### Code Example

#### 1. Create a Table
```sql
CREATE TABLE example_table (
    col1 INTEGER,
    col2 INTEGER
);
```

#### 2. Insert Data
```sql
INSERT INTO example_table (col1, col2) VALUES 
(93, 12),
(NULL, 12),
(22, 4),
(NULL, 87),
(1, 10),
(NULL, 43),
(92, 31),
(NULL, 23),
(2, 3),
(NULL, 52),
(21, 65),
(NULL, 49),
(NULL, 17),
(NULL, 17),
(NULL, 14),
(NULL, 24),
(53, 20),
(85, 9),
(50, 11),
(86, 1);
```

#### 3. Select Data
```sql
SELECT * FROM example_table WHERE col1 IS NOT NULL;
```

#### 4. Update Data
```sql
UPDATE example_table SET col1 = 30 WHERE col2 = 12;
```

#### 5. Delete Data
```sql
DELETE FROM example_table WHERE col1 IS NULL;
```

#### 6. Using TD_ZTest
```sql
SELECT * FROM TD_ZTest (
  ON example_table AS InputTable
  USING
  FirstSampleColumn ('col1')
  SecondSampleColumn ('col2')
  FirstSampleVariance (0.5)
  SecondSampleVariance (0.7)
  AlternativeHypothesis ('two-tailed')
  MeanUnderH0 (-20)
  Alpha (0.05)
) AS dt;
```

### Keywords and Phrases

- TD_ZTest Example
- Z Test
- Teradata Vantage - Using Two-tailed Test
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- SQL SELECT
- SQL UPDATE
- SQL DELETE
- SQL CREATE
- Input Table
- Output Table
- Statistical Analysis
- Hypothesis Testing
- One-sample Test
- Two-sample Test
- p-value
- Null Hypothesis
- Alternative Hypothesis
- z_score
- Confidence Level
- Critical Value
- Alpha Level","27","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Examples-How-to-Use-TD_ZTest/Using-Two-tailed-Test","2024-07-27 12:29:59"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Optional-Syntax-Elements-for-TD_ZTest","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_ZTest - Analytics Database","58","537","SecondSampleColumn Specifies the input column name that contains the data for the second sample population. SecondSampleName Specifies the second sample name, must exist in SampleColumn. FirstSampleVariance [Required if first sample size is less than 30, optional otherwise.] Specifies the variance of the first sample p...","323","2033","","0","Optional Syntax Elements for TD_ZTest - Analytics Database","58","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Optional-Syntax-Elements-for-TD_ZTest","","","","","","211884","13835","13835","4.905","A+","315","96","3.281","53.373","Fairly Hard","11.746","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.447","","","","","","1.1","### Summary

This document provides an overview of the optional syntax elements for the TD_ZTest function, which is part of the Teradata Vantage™ Analytics Database. The TD_ZTest function is used for hypothesis testing, specifically for comparing the means of one or two sample populations. This document includes details on the required and optional syntax elements, input and output specifications, and practical examples of how to use the function effectively.

### Code Example

Here are basic SQL code examples for common operations in the Teradata Vantage™ Analytics Database:

#### 1. **Create**
```sql
CREATE TABLE Sales (
    SaleID INT PRIMARY KEY,
    ProductName VARCHAR(100),
    SaleAmount DECIMAL(10, 2),
    SaleDate DATE
);
```

#### 2. **Select**
```sql
SELECT ProductName, SUM(SaleAmount) AS TotalSales
FROM Sales
GROUP BY ProductName
ORDER BY TotalSales DESC;
```

#### 3. **Update**
```sql
UPDATE Sales
SET SaleAmount = SaleAmount * 1.10
WHERE SaleDate < '2023-01-01';
```

#### 4. **Delete**
```sql
DELETE FROM Sales
WHERE SaleDate < '2020-01-01';
```

### Optional Syntax Elements for TD_ZTest - Analytics Database
- **SecondSampleColumn**: Specifies the input column name containing data for the second sample population.
- **SecondSampleName**: Specifies the second sample name, must exist in SampleColumn.
- **FirstSampleVariance**: Required if the first sample size is less than 30; specifies the variance of the first sample population.
- **SecondSampleVariance**: Required if specifying SecondSampleColumn and the second sample size is less than 30.
- **AlternativeHypothesis**: Specifies the alternative hypothesis ('upper-tailed', 'lower-tailed', 'two-tailed').
- **MeanUnderH0**: Specifies the mean under the null hypothesis (default is 0).
- **Alpha**: The null hypothesis is rejected if the P-value is smaller than this specified value (default is 0.05).

### Keywords and Phrases
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Teradata Vantage™**
- **Release Number 17.20**
- **Published June 2022**
- **Language: English (United States)**
- **Last Update April 2024**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **TD_ZTest**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Optional-Syntax-Elements-for-TD_ZTest","2024-07-27 12:24:32"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Required-Syntax-Elements-for-TD_ZTest","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_ZTest - Analytics Database","58","541","ON clause Specifies the table name, view name or query. FirstSampleColumn Specifies the input column name that contains the data for the first sample population. SampleNameColumn Required for sample-value input format. Cannot be specified if FirstSampleColumn is specified. Specifies the column that contains the groups ...","323","2029","","0","Required Syntax Elements for TD_ZTest - Analytics Database","58","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Required-Syntax-Elements-for-TD_ZTest","","","","","","208442","12922","12922","4.581","A+","128","54","2.370","31.924","Hard","11.360","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.847","","","","","","1.1","# Teradata Vantage™ Analytics Database Overview

Teradata Vantage™ offers a robust platform for analytics, featuring a variety of functions for data analysis, model training, and evaluation. This guide focuses on the essential SQL commands—`SELECT`, `UPDATE`, `DELETE`, and `CREATE`—that are fundamental to interacting with the Analytics Database.

## Code Examples

### 1. **SELECT**
The `SELECT` statement is used to query data from a database.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

**Example:**
```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE country = 'USA';
```

### 2. **UPDATE**
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example:**
```sql
UPDATE customers
SET last_name = 'Smith'
WHERE customer_id = 1;
```

### 3. **DELETE**
The `DELETE` statement removes records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

**Example:**
```sql
DELETE FROM customers
WHERE customer_id = 1;
```

### 4. **CREATE**
The `CREATE` statement is used to create new tables or databases.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example:**
```sql
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    country VARCHAR(50)
);
```

## Summary
The above SQL commands are essential for managing data within the Teradata Vantage™ Analytics Database. They enable users to retrieve, update, delete, and create data structures effectively.

## Keywords and Phrases 
- Required Syntax Elements for TD_ZTest - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Hypothesis Testing Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Usage Notes
- How to Read Syntax
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns

This structured guide provides essential insights into SQL operations and relevant terminology for effective use of the Teradata Vantage™ Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Required-Syntax-Elements-for-TD_ZTest","2024-07-27 12:40:23"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/TD_ZTest-Input","text/html;charset=UTF-8","200","","Indexable","","TD_ZTest Input - Analytics Database","35","323","Option 1 - Multiple Column Input Using FirstSampleColumn or SecondSampleColumn Argument Input Description InputTable A table that contains columns of samples. Input Table Schema Column Data Type Description FirstSampleColumn DOUBLE Numerical value used to calculate ZTest. SecondSampleColumn DOUBLE Numerical value used ...","323","2126","","0","TD_ZTest Input - Analytics Database","35","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/TD_ZTest-Input","","","","","","212473","13315","13315","4.720","A+","133","51","2.608","12.089","Very Hard","11.176","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.663","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a robust framework for performing various analytical functions. This includes capabilities for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. The database supports a variety of analytic functions to help users manipulate and analyze data efficiently. In this document, we will cover the basic SQL operations of selecting, updating, deleting, and creating records in the context of the analytics database.

## Code Example

### 1. Select

The `SELECT` statement retrieves data from one or more tables. 

```sql
SELECT sample_name_column, sample_value_column
FROM InputTable
WHERE sample_value_column > 10;
```

### 2. Update 

The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE InputTable
SET sample_value_column = sample_value_column * 1.1
WHERE sample_name_column = 'Sample A';
```

### 3. Delete 

The `DELETE` statement removes records from a table.

```sql
DELETE FROM InputTable
WHERE sample_value_column < 5;
```

### 4. Create 

The `CREATE` statement creates a new table in the database.

```sql
CREATE TABLE NewTable (
    sample_name_column VARCHAR(255),
    sample_value_column DOUBLE
);
```

## Keywords and Phrases

- **TD_ZTest Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**: gjn1627595495337.ditamap
- **dita:ditavalPath**: ayr1485454803741.ditaval
- **dita:id**: jmh1512506877710
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Limitations When Using PARTITION BY**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/TD_ZTest-Input","2024-07-27 11:29:37"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/TD_ZTest-Output","text/html;charset=UTF-8","200","","Indexable","","TD_ZTest Output - Analytics Database","36","339","Output Table Schema Column Data Type Description sample_column_1 VARCHAR Data for first sample population. sample_column_2 VARCHAR [Column appears only if you specify SecondSampleColumn.] Data for second sample population. N1 INTEGER Size of first sample. N2 INTEGER [Column appears only if you specify SecondSampleColum...","323","2142","","0","TD_ZTest Output - Analytics Database","36","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/TD_ZTest-Output","","","","","","213429","13656","13656","4.841","A+","219","67","3.269","26.591","Very Hard","11.409","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.550","","","","","","1.1","## Summary

The Teradata Analytics Database provides a comprehensive set of analytic functions that enable data manipulation, exploration, and statistical analysis. These functions enhance capabilities in data cleaning, feature engineering, model training, and evaluation, among others. Below are examples of fundamental SQL operations—Select, Update, Delete, and Create—that you can perform within the context of the Teradata Analytics Database.

## Code Examples

### Select
To retrieve data from a specific table, you can use the `SELECT` statement. 

```sql
SELECT sample_column_1, sample_column_2
FROM analytics_table
WHERE condition;
```

### Update
To modify existing records in a table, use the `UPDATE` statement.

```sql
UPDATE analytics_table
SET sample_column_1 = 'New Value'
WHERE condition;
```

### Delete
To remove records from a table, the `DELETE` statement is used.

```sql
DELETE FROM analytics_table
WHERE condition;
```

### Create
To create a new table, you can use the `CREATE TABLE` statement, specifying the desired columns and their data types.

```sql
CREATE TABLE new_analytics_table (
    sample_column_1 VARCHAR(255),
    sample_column_2 INTEGER,
    N1 INTEGER,
    N2 INTEGER
);
```

## Keywords and Phrases
- TD_ZTest Output
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Workload Management Configuration
- Non-Deterministic Behavior
- Input Table Rows Redistribution
- AMP Configuration Impact
- Recommendations for Using Analytic Functions
- Example Functions: TD_ConvertTo, TD_GetRowsWithMissingValues, TD_SimpleImputeFit, TD_ZTest 
- Analytical Operations: Select, Update, Delete, Create","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/TD_ZTest-Output","2024-07-27 12:09:55"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/TD_ZTest-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_ZTest Syntax | Z Test | Teradata Vantage - TD_ZTest Syntax - Analytics Database","82","753","See the syntax of Analytics Database (SQL Engine) hypothesis testing function TD_ZTest and read descriptions of its required and optional syntax elements.","154","960","","0","TD_ZTest Syntax | Z Test | Teradata Vantage - TD_ZTest Syntax - Analytics Database","82","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/TD_ZTest-Syntax","","","","","","208856","13011","13011","4.612","A+","117","56","2.089","2.253","Very Hard","11.384","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.792","","","","","","1.1","## Overview of Teradata Vantage - TD_ZTest

The **TD_ZTest** function in Teradata Vantage is a statistical function used for hypothesis testing to determine if there is a significant difference between sample means. It can be applied to one sample or two samples, and it allows for specifying different hypotheses, variances, and significance levels. 

### Code Examples

Here are examples demonstrating how to use the TD_ZTest function in various SQL operations:

#### Select

```sql
SELECT 
    TD_ZTest(
        ON (SELECT FirstSampleColumn, SecondSampleColumn FROM SampleTable)
        USING 
            FirstSampleColumn('Sample1')
            SecondSampleColumn('Sample2')
            FirstSampleVariance(4.0)
            SecondSampleVariance(5.0)
            AlternativeHypothesis('two-tailed')
            Alpha(0.05)
    ) AS ZTestResult
FROM DUAL;
```

#### Update

```sql
UPDATE SampleResults
SET ZTestResult = TD_ZTest(
        ON (SELECT FirstSampleColumn, SecondSampleColumn FROM SampleTable)
        USING 
            FirstSampleColumn('Sample1')
            SecondSampleColumn('Sample2')
            FirstSampleVariance(4.0)
            SecondSampleVariance(5.0)
            AlternativeHypothesis('two-tailed')
            Alpha(0.05)
    )
WHERE SampleID = 1;
```

#### Delete

```sql
DELETE FROM SampleResults
WHERE SampleID IN (
    SELECT SampleID 
    FROM SampleTable 
    WHERE TD_ZTest(
        ON (SELECT FirstSampleColumn, SecondSampleColumn FROM SampleTable)
        USING 
            FirstSampleColumn('Sample1')
            SecondSampleColumn('Sample2')
            FirstSampleVariance(4.0)
            SecondSampleVariance(5.0)
            AlternativeHypothesis('two-tailed')
            Alpha(0.05)
    ) < 0.05
);
```

#### Create

```sql
CREATE TABLE ZTestResults AS (
    SELECT 
        SampleID,
        TD_ZTest(
            ON (SELECT FirstSampleColumn, SecondSampleColumn FROM SampleTable)
            USING 
                FirstSampleColumn('Sample1')
                SecondSampleColumn('Sample2')
                FirstSampleVariance(4.0)
                SecondSampleVariance(5.0)
                AlternativeHypothesis('two-tailed')
                Alpha(0.05)
        ) AS ZTestResult
    FROM SampleTable
) WITH DATA;
```

### Summary

The TD_ZTest function is a versatile tool for conducting hypothesis tests in Teradata Vantage. It can be used in SELECT, UPDATE, DELETE, and CREATE statements, making it highly applicable in various scenarios involving statistical analysis.

### Keywords and Phrases

- TD_ZTest Syntax
- Z Test
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Hypothesis Testing Functions
- Statistical Functions
- Sample Means
- Variance
- One Sample Test
- Two Sample Test
- Significance Level
- Alpha
- Alternative Hypothesis","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/TD_ZTest-Syntax","2024-07-27 12:11:53"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/TD_ZTest-Usage-Notes","text/html;charset=UTF-8","200","","Indexable","","TD_ZTest Usage Notes | Z Test - TD_ZTest Usage Notes - Analytics Database","73","685","Learn about the usage considerations for the Analytics Database TD_ZTest function.","82","522","","0","TD_ZTest Usage Notes | Z Test - TD_ZTest Usage Notes - Analytics Database","73","Database Analytic Functions","27","One Sample Z-Tests","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/TD_ZTest-Usage-Notes","","","","","","251218","31819","31819","11.280","A+","552","130","4.246","100.000","Very Easy","10.207","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.680","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database is designed to support complex data analysis and processing functions. It includes a comprehensive set of analytic functions that cater to various tasks such as data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This document provides an overview of the key features and usage notes for the TD_ZTest function, which is essential for performing hypothesis testing, especially in scenarios involving large samples. The Z-Test is particularly useful when the population variance is known, allowing for efficient statistical comparisons between means.

### Code Example Section

Here are examples of SQL statements demonstrating common operations (Select, Update, Delete, Create) that can be executed in the Teradata environment, focusing on the TD_ZTest function as well as basic SQL operations:

#### 1. Create Example Table
```sql
CREATE TABLE SampleData (
    SampleID INT,
    SampleValue FLOAT
);
```

#### 2. Insert Data into the Table
```sql
INSERT INTO SampleData (SampleID, SampleValue) VALUES
(1, 23.4),
(2, 25.1),
(3, 22.8),
(4, 24.3),
(5, 26.2);
```

#### 3. Select Data from the Table
```sql
SELECT * FROM SampleData;
```

#### 4. Update Data in the Table
```sql
UPDATE SampleData
SET SampleValue = SampleValue + 1.0
WHERE SampleID = 2;
```

#### 5. Delete Data from the Table
```sql
DELETE FROM SampleData
WHERE SampleID = 1;
```

#### 6. Perform Z-Test
```sql
SELECT TD_ZTest(
    SampleValue,             -- Column with sample values
    25.0,                    -- Hypothesized population mean
    0.5                      -- Population standard deviation
) AS ZTestResult
FROM SampleData;
```

## Keywords and Phrases
- TD_ZTest Usage Notes
- Z Test
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Enterprise Edition
- IntelliFlex
- VMware
- Product: Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Hypothesis Testing Functions
- One Sample Z-Tests
- Two Sample Z-Tests
- Test Statistic
- Null Hypothesis (H0)
- Alternative Hypothesis (H1)
- Z-statistic
- Sample Size
- Statistical Significance
- Population Mean
- Variance
- Standard Deviation
- Query Size Limitations
- Function Syntax Descriptions
- Input Table Rows Redistribution
- Workload Management Configuration
- Recommendations for Using Analytic Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Data Cleaning Functions

This structured outline provides a clear understanding of the TD_ZTest function and its context within the Teradata Vantage Analytics Database framework, as well as practical examples of SQL operations.","25","4","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/TD_ZTest-Usage-Notes","2024-07-27 11:31:06"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions","text/html;charset=UTF-8","200","","Indexable","","Introduction to Analytics Database Analytic Functions - Analytics Database","74","661","The Advanced Analytics functions is a suite of scalable and distributed machine learning analytic functions to perform analytics on your dataset. Using the Analytics Database Analytical Content The content describes the advanced analytic functions used for feature engineering, training, scoring, evaluation, pattern rec...","323","1971","","0","Introduction to Analytics Database Analytic Functions - Analytics Database","74","Database Analytic Functions","27","Using the Analytics Database Analytical Content","47","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions","","","","","","210516","13650","13650","4.839","A+","301","71","4.239","50.758","Fairly Hard","11.735","1","3","","707","707","0","99.860","713","711","0","","","","","","","","","0.697","","","","","","1.1","## Summary

The Analytics Database provides a comprehensive suite of analytic functions that facilitate various data operations, including data cleaning, exploration, feature engineering, and model training. This functionality is essential for users looking to derive insights from their datasets in a structured and efficient manner. This guide outlines key SQL operations—Select, Update, Delete, and Create—alongside examples to demonstrate their application in the context of an Analytics Database.

### Code Example

#### 1. Select
The `SELECT` statement is used to query data from a database. 

```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE country = 'USA';
```

#### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE customers
SET email = 'newemail@example.com'
WHERE customer_id = 12345;
```

#### 3. Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM customers
WHERE last_purchase_date < '2022-01-01';
```

#### 4. Create
The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE sales (
    sale_id INT PRIMARY KEY,
    customer_id INT,
    amount DECIMAL(10, 2),
    sale_date DATE
);
```

### Keywords and Phrases

- Introduction to Analytics Database
- Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Workload Management
- Non-Deterministic Behavior
- Spool Space Exhaustion
- Recommendations for Using Analytic Functions
- TD_ConvertTo
- TD_GetRowsWithoutMissingValues
- TD_SimpleImputeFit
- TD_Histogram
- TD_DecisionForest
- TD_XGBoost
- TD_GLMPredict
- TD_Silhouette
- NGramSplitter
- Sessionize

This overview and code examples should help users understand the fundamental operations available in an Analytics Database and how to effectively implement them in their own data analysis workflows.","27","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions","2024-07-27 12:13:46"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories","text/html;charset=UTF-8","200","","Indexable","","Analytics Database | Teradata Vantage - Analytics Database Analytic Function Categories - Analytics Database","108","981","See categories of Analytics Database (SQL Engine) analytic functions with links to topics with their short descriptions.","120","725","","0","Analytics Database | Teradata Vantage - Analytics Database Analytic Function Categories - Analytics Database","108","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories","","","","","","209380","12960","12960","4.594","A+","93","44","2.114","14.567","Very Hard","11.178","1","4","","707","707","0","99.860","720","718","0","","","","","","","","","1.788","","","","","","1.1","## Summary

Teradata Vantage™ provides a robust Analytics Database that supports a variety of analytical functions designed to facilitate data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analysis. This guide highlights essential SQL operations such as selecting, updating, deleting, and creating records within this powerful database environment, particularly focusing on the application of analytic functions.

## Code Example

### Select

To retrieve data from a table using basic SELECT syntax:

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

### Update

To modify existing records in a table:

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

### Delete

To remove records from a table:

```sql
DELETE FROM table_name
WHERE condition;
```

### Create

To create a new table with specified columns:

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Keywords and Phrases

- **Analytics Database**
- **Teradata Vantage**
- **Analytic Function Categories**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number 17.20**
- **Published June 2022**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions**
- **Function Syntax Descriptions**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Accumulated Columns Impact on Function Performance** 

This guide provides a clear overview of how to work effectively with Teradata Vantage's capabilities, including essential SQL commands to manage data efficiently.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories","2024-07-27 12:47:28"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Data-Cleaning-Functions","text/html;charset=UTF-8","200","","Indexable","","Data Cleaning Functions - Analytics Database","44","404","TD_GetFutileColumns Returns the futile column names. TD_OutlierFilterFit Calculates the lower_percentile, upper_percentile, count of rows, and median for the specified input table columns. TD_OutlierFilterTransform Filters outliers from the input table. TD_GetRowsWithoutMissingValues Displays the rows that have non-NUL...","323","2008","","0","Data Cleaning Functions - Analytics Database","44","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Data-Cleaning-Functions","","","","","","211721","13546","13546","4.802","A+","158","57","2.772","21.971","Very Hard","11.308","1","5","","707","707","0","99.860","720","718","0","","","","","","","","","0.472","","","","","","1.1","## Overview of Analytics Database Functions

The Analytics Database in Teradata Vantage™ provides a wide range of analytic functions designed to support data cleaning, exploration, feature engineering, model training, scoring, and evaluation. These functions enable data scientists and analysts to perform complex analytics efficiently, leveraging Teradata's powerful database capabilities.

### Code Examples

#### 1. **Create Table**
To create a new table in the database:
```sql
CREATE TABLE customer_data (
    customer_id INT,
    customer_name VARCHAR(100),
    purchase_amount DECIMAL(10, 2),
    purchase_date DATE
);
```

#### 2. **Insert Data**
To insert data into the created table:
```sql
INSERT INTO customer_data (customer_id, customer_name, purchase_amount, purchase_date)
VALUES (1, 'John Doe', 150.00, '2023-04-06');
```

#### 3. **Select Data**
To select data from the table:
```sql
SELECT customer_name, purchase_amount
FROM customer_data
WHERE purchase_amount > 100.00;
```

#### 4. **Update Data**
To update existing data in the table:
```sql
UPDATE customer_data
SET purchase_amount = purchase_amount * 1.10
WHERE purchase_date < '2023-01-01';
```

#### 5. **Delete Data**
To delete records from the table:
```sql
DELETE FROM customer_data
WHERE customer_id = 1;
```

### Summary
The Teradata Vantage™ Analytics Database provides robust functionality for data cleaning, exploration, and advanced analytics. The examples above demonstrate the basic operations (Create, Insert, Select, Update, Delete) that can be performed on a database table, illustrating its capabilities in managing and analyzing data effectively.

### Keywords and Phrases
- Data Cleaning Functions
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Function Syntax Descriptions
- Input Table Rows Redistribution
- AMP Configuration Impact on Function Execution
- Recommendations for Using Analytic Functions
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_SimpleImputeFit
- Pack
- Unpack
- StringSimilarity
- Hypothesis Testing Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- nPath
- Sessionize

This structured approach ensures that you can work effectively with Teradata's Analytics Database to derive insights from your data.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Data-Cleaning-Functions","2024-07-27 12:38:23"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Data-Exploration-Functions","text/html;charset=UTF-8","200","","Indexable","","Data Exploration Functions - Analytics Database","47","426","MovingAverage Computes average values in a series. TD_CategoricalSummary Displays the distinct values and their counts for each specified input table column. TD_ColumnSummary Displays a summary of each specified input table column. TD_GetRowsWithMissingValues Displays the rows that have NULL values in the specified inp...","323","2069","","0","Data Exploration Functions - Analytics Database","47","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Data-Exploration-Functions","","","","","","211389","13413","13413","4.755","A+","150","57","2.632","29.324","Very Hard","11.277","1","5","","707","707","0","99.860","719","717","0","","","","","","","","","0.693","","","","","","1.1","# Introduction to Analytics Database Analytic Functions

The Analytics Database offers a comprehensive suite of analytic functions designed for data exploration, feature engineering, model training, scoring, and evaluation. These functions facilitate advanced data manipulation and analysis, allowing users to extract meaningful insights from their datasets efficiently.

## Summary of Key Functions

The following sections provide examples of basic SQL operations (Select, Update, Delete, Create) within the context of an analytics database, along with a brief overview of relevant analytic functions.

## Code Examples

### 1. SELECT

The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```
*Example: Retrieve all records from the sales table where the amount is greater than 1000.*

```sql
SELECT *
FROM sales
WHERE amount > 1000;
```

### 2. UPDATE

The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```
*Example: Update the status of orders to 'Shipped' where the order date is before January 1, 2023.*

```sql
UPDATE orders
SET status = 'Shipped'
WHERE order_date < '2023-01-01';
```

### 3. DELETE

The `DELETE` statement removes records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```
*Example: Delete all records from the customers table where the last purchase was over a year ago.*

```sql
DELETE FROM customers
WHERE last_purchase < CURRENT_DATE - INTERVAL '1 year';
```

### 4. CREATE

The `CREATE` statement is used to create a new table.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```
*Example: Create a new table for storing product details.*

```sql
CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(255),
    price DECIMAL(10, 2),
    stock_quantity INT
);
```

## Keywords and Phrases

- **Data Exploration Functions** 
- **Analytics Database** 
- **Database Analytic Functions** 
- **Deployment** 
- **VantageCloud** 
- **VantageCore** 
- **Edition** 
- **Enterprise** 
- **IntelliFlex** 
- **VMware** 
- **Product** 
- **Release Number** 
- **17.20** 
- **Published** 
- **June 2022** 
- **Language** 
- **English (United States)** 
- **Last Update** 
- **2024-04-06** 
- **Product Category** 
- **Teradata Vantage™** 
- **MovingAverage** 
- **TD_CategoricalSummary** 
- **TD_ColumnSummary** 
- **TD_GetRowsWithMissingValues** 
- **TD_Histogram** 
- **TD_QQNorm** 
- **TD_UnivariateStatistics** 
- **TD_WhichMax** 
- **TD_WhichMin** 

This overview provides a foundational understanding of how to interact with an analytics database and utilize various functions for data analysis and manipulation.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Data-Exploration-Functions","2024-07-27 12:10:53"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Feature-Engineering-Transform-Functions","text/html;charset=UTF-8","200","","Indexable","","Feature Engineering Transform Functions - Analytics Database","60","557","Antiselect AntiSelect returns all columns except those specified. TD_BinCodeFit Converts numeric data to categorical data by binning the numeric data into multiple numeric bins (intervals). TD_BinCodeTransform Transforms input table columns from the BinCodeFit function output. TD_ColumnTransformer Transforms the input ...","323","2032","","0","Feature Engineering Transform Functions - Analytics Database","60","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Feature-Engineering-Transform-Functions","","","","","","217771","14581","14581","5.169","A+","378","96","3.938","3.648","Very Hard","11.887","1","5","","1414","707","0","99.860","732","730","0","","","","","","","","","0.619","","","","","","1.1","# Analytics Database Overview

The Analytics Database provides a robust environment for executing analytic functions that facilitate data exploration, transformation, and machine learning. It is designed for various operations including data cleaning, feature engineering, model training, and scoring, leveraging the capabilities of Teradata Vantage™.

## Summary of Key Features
- **Feature Engineering Transform Functions**: Functions aimed at transforming data for better machine learning model performance.
- **Model Training and Scoring Functions**: Tools for training machine learning models and scoring them against new data.
- **Data Cleaning and Exploration Functions**: Functions to prepare and analyze data effectively.
- **Hypothesis Testing Functions**: Statistical tests to analyze data and validate assumptions.
- **Deployment Capabilities**: Tools to deploy analytic models into production environments.

## Code Examples

### 1. Create
To create a new table in the Analytics Database:
```sql
CREATE TABLE SalesData (
    SaleID INT,
    ProductName VARCHAR(100),
    SaleAmount DECIMAL(10, 2),
    SaleDate DATE
);
```

### 2. Select
To retrieve data from the SalesData table:
```sql
SELECT ProductName, SUM(SaleAmount) AS TotalSales
FROM SalesData
GROUP BY ProductName
ORDER BY TotalSales DESC;
```

### 3. Update
To update the sale amount for a specific SaleID:
```sql
UPDATE SalesData
SET SaleAmount = SaleAmount * 1.1
WHERE SaleID = 123;
```

### 4. Delete
To delete a record from the SalesData table based on SaleID:
```sql
DELETE FROM SalesData
WHERE SaleID = 123;
```

### 5. Feature Engineering Example
Using a feature engineering transform function to apply one-hot encoding:
```sql
SELECT *
FROM TD_OneHotEncodingTransform(
    InputTable => SalesData,
    ColumnNames => 'ProductName'
);
```

## Keywords and Phrases
- Feature Engineering Transform Functions
- Analytics Database
- Data Cleaning Functions
- Data Exploration Functions
- Model Training Functions
- Model Scoring Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_PolynomialFeaturesFit
- TD_PolynomialFeaturesTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_RowNormalizeFit
- TD_RowNormalizeTransform

This overview and the examples provided should help you understand how to interact with the Analytics Database effectively, from basic SQL operations to advanced analytic functions.","29","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Feature-Engineering-Transform-Functions","2024-07-27 11:30:20"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Feature-Engineering-Utility-Functions","text/html;charset=UTF-8","200","","Indexable","","Feature Engineering Utility Functions - Analytics Database","58","514","TD_FillRowID Adds a column of unique row identifiers to the input table. TD_NumApply Applies a specified numeric operator to the specified input table columns. TD_RoundColumns Rounds the values of each specified input table column to a specified number of decimal places. TD_StrApply Applies a specified string operator ...","323","2005","","0","Feature Engineering Utility Functions - Analytics Database","58","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Feature-Engineering-Utility-Functions","","","","","","209281","13056","13056","4.628","A+","96","42","2.286","25.621","Very Hard","11.190","1","5","","1414","707","0","99.860","714","712","0","","","","","","","","","0.679","","","","","","1.1","# Summary

The Teradata Vantage™ Analytics Database provides a rich set of analytic functions designed for data cleaning, feature engineering, model training, and evaluation. This allows users to conduct deep data exploration and apply statistical techniques efficiently. Key features include various data transformations, model scoring, and hypothesis testing functions that facilitate a comprehensive analysis of datasets. 

The following code examples illustrate basic operations such as selecting, updating, deleting, and creating records within an analytics database.

## Code Example

### 1. Select
```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE country = 'USA';
```

### 2. Update
```sql
UPDATE customers
SET last_name = 'Smith'
WHERE customer_id = 12345;
```

### 3. Delete
```sql
DELETE FROM customers
WHERE customer_id = 12345;
```

### 4. Create
```sql
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    country VARCHAR(50)
);
```

## Keywords and Phrases
- **Feature Engineering Utility Functions**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Recommendations for Using Analytic Functions**
- **TD_FillRowID**
- **TD_NumApply**
- **TD_RoundColumns**
- **TD_StrApply**
- **TD_DecisionForest**
- **TD_GLM**
- **TD_KMeans**
- **TD_XGBoost**
- **TD_Silhouette**
- **TD_ClassificationEvaluator**
- **TD_RegressionEvaluator**
- **TD_ROC**
- **TD_TrainTestSplit** 

This overview highlights the essential components of the Teradata Vantage™ Analytics Database, emphasizing the capabilities and functionalities that support advanced data analytics and modeling.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Feature-Engineering-Utility-Functions","2024-07-27 12:31:21"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Hypothesis-Testing-Functions","text/html;charset=UTF-8","200","","Indexable","","Hypothesis Testing Functions - Analytics Database","49","450","TD_ANOVA Performs analysis of variance (ANOVA) test to analyze the difference between the means. TD_ChiSq Performs Pearson's chi-squared test for independence. TD_FTest Performs an F-test, for which the test statistic has an F-distribution under the null hypothesis. TD_ZTest Performs a Z-test, for which the distributio...","323","2008","","0","Hypothesis Testing Functions - Analytics Database","49","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Hypothesis-Testing-Functions","","","","","","209273","13120","13120","4.651","A+","101","44","2.295","31.955","Hard","11.213","1","5","","707","707","0","99.860","714","712","0","","","","","","","","","0.610","","","","","","1.1","# Introduction to Analytics Database Analytic Functions

The Analytics Database provides a comprehensive suite of analytic functions that facilitate advanced data analysis and statistical testing. This includes various functions for hypothesis testing, data cleaning, feature engineering, and model evaluation. Teradata Vantage™ supports these analytics capabilities, enabling users to derive meaningful insights from large datasets.

## Summary of Hypothesis Testing Functions

Hypothesis testing is a fundamental aspect of statistical analysis, allowing researchers to make inferences about populations based on sample data. The Analytics Database includes several key hypothesis testing functions:

- **TD_ANOVA**: Conducts analysis of variance to determine the differences between group means.
- **TD_ChiSq**: Performs Pearson's chi-squared test for independence between categorical variables.
- **TD_FTest**: Executes an F-test to compare variances across groups.
- **TD_ZTest**: Conducts a Z-test to assess the mean of a sample against a known population mean.

These functions are essential for validating assumptions and drawing conclusions from data.

## Code Examples

### Select

```sql
SELECT *
FROM sales_data
WHERE region = 'North America';
```

### Update

```sql
UPDATE sales_data
SET sales_amount = sales_amount * 1.1
WHERE sales_date < '2023-01-01';
```

### Delete

```sql
DELETE FROM sales_data
WHERE sales_date < '2020-01-01';
```

### Create

```sql
CREATE TABLE sales_data (
    sales_id INT PRIMARY KEY,
    region VARCHAR(50),
    sales_amount DECIMAL(10, 2),
    sales_date DATE
);
```

## Keywords and Phrases

- Hypothesis Testing Functions
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Usage Notes
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Hypothesis-Testing-Functions","2024-07-27 11:32:20"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Model-Evaluation-Functions","text/html;charset=UTF-8","200","","Indexable","","Model Evaluation Functions - Analytics Database","47","432","TD_Silhouette Determines how well the data is clustered among clusters. TD_ClassificationEvaluator Computes the Confusion matrix, precision, recall, and F1-score based on the observed labels (true labels) and the predicted labels. TD_RegressionEvaluator Computes metrics to evaluate and compare multiple models and summa...","323","2034","","0","Model Evaluation Functions - Analytics Database","47","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Model-Evaluation-Functions","","","","","","210351","13549","13549","4.803","A+","152","51","2.980","27.374","Very Hard","11.348","1","5","","707","707","0","99.860","716","714","0","","","","","","","","","1.302","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions that support various tasks related to data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This documentation outlines key functions in the analytics database, focusing specifically on Model Evaluation Functions which assess the performance of predictive models. These functions include metrics for classification and regression tasks, ensuring practitioners can effectively measure and improve their models' accuracy and reliability.

### Code Example

Here are some common SQL commands used to interact with the Teradata Vantage database, demonstrating how to select, update, delete, and create records.

#### 1. Select

```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE country = 'USA';
```

#### 2. Update

```sql
UPDATE customers
SET last_name = 'Smith'
WHERE customer_id = 123;
```

#### 3. Delete

```sql
DELETE FROM customers
WHERE customer_id = 123;
```

#### 4. Create

```sql
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    country VARCHAR(50)
);
```

### Keywords and Phrases

- Model Evaluation Functions
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™

#### Introduction to Analytic Functions
- Changes and Additions
- Function Categories
  - Data Cleaning Functions
  - Data Exploration Functions
  - Feature Engineering Functions
  - Model Training Functions
  - Model Scoring Functions
  - Model Evaluation Functions
  - Text Analytic Functions
  - Path and Pattern Analysis Functions
  - Hypothesis Testing Functions
- Usage Notes
- Workload Management Configuration
- Recommendations for Using Analytic Functions

#### Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit

This summary provides an overview of the Teradata Vantage Analytics Database and highlights essential keywords and phrases relevant to its functionalities, particularly focusing on model evaluation.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Model-Evaluation-Functions","2024-07-27 12:01:28"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Model-Scoring-Functions","text/html;charset=UTF-8","200","","Indexable","","Model Scoring Functions - Analytics Database","44","406","TD_XGBoostPredict Runs the predictive algorithm based on the model generated by TD_XGBoost. TD_KMeansPredict Uses the cluster centroids in the TD_KMeans function output to assign the input data points to the cluster centroids. TD_GLMPredict Predicts target values (regression) and class labels (classification) for test ...","323","2014","","0","Model Scoring Functions - Analytics Database","44","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Model-Scoring-Functions","","","","","","209840","13235","13235","4.692","A+","130","47","2.766","42.637","Hard","11.287","1","5","","707","707","0","99.860","715","713","0","","","","","","","","","0.498","","","","","","1.1","## Overview of Teradata Vantage™ Analytics Database

Teradata Vantage™ is a powerful analytics database designed to handle complex data analytics and machine learning tasks efficiently. This document provides an introduction to the key functionalities, specifically focusing on Model Scoring Functions, which are crucial for predicting outcomes based on trained models. 

The analytics database offers a range of functions that support various stages of data processing, including data cleaning, exploration, feature engineering, model training, and scoring. This guide includes examples of basic SQL operations: SELECT, UPDATE, DELETE, and CREATE, to help you get started with the database.

### Basic SQL Operations

#### 1. SELECT
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

#### 2. UPDATE
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 3. DELETE
The `DELETE` statement removes records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

#### 4. CREATE
The `CREATE` statement creates a new table in the database.

```sql
CREATE TABLE new_table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Summary of Key Functionalities in Teradata Vantage™ Analytics Database

Teradata Vantage™ provides an extensive suite of analytic functions, including:
- **Data Cleaning Functions**: For preprocessing data.
- **Data Exploration Functions**: Helps in understanding data distributions.
- **Feature Engineering Functions**: For transforming data into formats suitable for modeling.
- **Model Training Functions**: To train predictive models using various algorithms.
- **Model Scoring Functions**: To evaluate and predict outcomes based on trained models.
- **Model Evaluation Functions**: For assessing model performance and accuracy.

### Keywords and Phrases

- **Model Scoring Functions**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **Product Category**: Teradata Vantage™

#### Analytic Functions Categories
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**

#### Important Considerations
- **Input Table Rows Redistribution**
- **AMP Configuration Impact on Function Execution**
- **Recommendations for Using Analytic Functions**
- **Workload Management Configuration**

This brief overview and code examples should serve as a good foundation for working with Teradata Vantage™ and its analytics capabilities. For deeper insights, consider exploring specific functions relevant to your data needs.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Model-Scoring-Functions","2024-07-27 12:22:14"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Model-Training-Functions","text/html;charset=UTF-8","200","","Indexable","","Model Training Functions - Analytics Database","45","412","TD_XGBoost Performs classification and regression analysis on data sets and generates a model for TD_XGBoostPredict to run the predictive algorithm. TD_DecisionForest Used for classification and regression predictive modeling. TD_KMeans Groups a set of observations into k clusters in which each observation belongs to t...","323","2018","","0","Model Training Functions - Analytics Database","45","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Model-Training-Functions","","","","","","210755","13449","13449","4.768","A+","159","53","3.000","29.269","Very Hard","11.335","1","5","","707","707","0","99.860","717","715","0","","","","","","","","","0.470","","","","","","1.1","## Summary

The Analytics Database Analytic Functions in Teradata Vantage™ facilitate a wide array of functionalities for data analysis, model training, and evaluation. This includes various functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Each function has a specific syntax and usage, allowing users to manipulate and analyze data effectively. 

### Code Example Section

Here are examples of SQL commands for basic operations like Select, Update, Delete, and Create in the context of an Analytics Database:

#### 1. **Select**
```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE status = 'active';
```

#### 2. **Update**
```sql
UPDATE customers
SET status = 'inactive'
WHERE last_purchase_date < '2022-01-01';
```

#### 3. **Delete**
```sql
DELETE FROM customers
WHERE status = 'inactive' AND last_purchase_date < '2021-01-01';
```

#### 4. **Create**
```sql
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    status VARCHAR(20),
    last_purchase_date DATE
);
```

### Keywords and Phrases

- **Model Training Functions**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **Product Category**: Teradata Vantage™
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Accumulated Columns Impact on Function Performance**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This summary and examples should provide a clear understanding of how to perform basic SQL operations in the context of Teradata's Analytics Database and its functionalities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Model-Training-Functions","2024-07-27 12:35:45"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Path-and-Pattern-Analysis-Functions","text/html;charset=UTF-8","200","","Indexable","","Path and Pattern Analysis Functions - Analytics Database","56","510","Attribution Calculates attributions with a wide range of distribution models. Often used in web-page analysis. nPath Performs regular pattern matching over a sequence of rows from one or more inputs. nPath Maps each click in a clickstream to a unique session identifier.","270","1665","","0","Path and Pattern Analysis Functions - Analytics Database","56","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Path-and-Pattern-Analysis-Functions","","","","","","208797","13037","13037","4.622","A+","86","42","2.048","25.719","Very Hard","11.173","1","5","","707","707","0","99.860","713","710","0","","","","","","","","","0.520","","","","","","1.1","# Summary of Path and Pattern Analysis Functions

The **Path and Pattern Analysis Functions** within the Teradata Vantage™ Analytics Database provide robust tools for analyzing sequential data and understanding user interactions over time. Key functions include **Attribution**, which computes attribution weights for events and channels, and **nPath**, which allows for complex pattern matching across sequences of events. These functions are particularly useful for businesses seeking insights from clickstream data or any time-series data that requires sessionization and behavior analysis.

## Code Example

### 1. Create a Table
```sql
CREATE TABLE user_clicks (
    session_id INT,
    user_id INT,
    page VARCHAR(255),
    timestamp TIMESTAMP
);
```

### 2. Insert Data
```sql
INSERT INTO user_clicks (session_id, user_id, page, timestamp) VALUES
(1, 101, 'Home', '2022-06-01 10:00:00'),
(1, 101, 'Product1', '2022-06-01 10:05:00'),
(1, 101, 'Checkout', '2022-06-01 10:10:00'),
(2, 102, 'Home', '2022-06-01 10:15:00'),
(2, 102, 'Product2', '2022-06-01 10:20:00');
```

### 3. Select Data Using nPath
```sql
SELECT session_id, user_id, nPath(page ORDER BY timestamp) AS page_path
FROM user_clicks
GROUP BY session_id, user_id;
```

### 4. Update Data
```sql
UPDATE user_clicks
SET page = 'Product1 Updated'
WHERE session_id = 1 AND page = 'Product1';
```

### 5. Delete Data
```sql
DELETE FROM user_clicks
WHERE session_id = 2 AND user_id = 102;
```

## Keywords and Phrases

- Path and Pattern Analysis Functions
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- Published
- Language
- Last Update
- Product Category
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Sessionize
- Attribution
- nPath
- Clickstream Data
- Regular Pattern Matching
- Session Identification
- Clickstream Analysis
- User Interactions
- Sequential Data Analysis

This structured overview and examples provide a foundation for understanding and utilizing the Path and Pattern Analysis Functions effectively within the Teradata Analytics Database environment.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Path-and-Pattern-Analysis-Functions","2024-07-27 12:01:19"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Text-Analytic-Functions","text/html;charset=UTF-8","200","","Indexable","","Text Analytic Functions - Analytics Database","44","395","NGramSplitter Tokenizes (splits) an input stream and emits n multigrams, based on specified delimiter and reset parameters. Useful for sentiment analysis, topic identification, and document classification. TD_NaiveBayesTextClassifierTrainer Calculates the conditional probabilities for token-category pairs, the prior pr...","323","1962","","0","Text Analytic Functions - Analytics Database","44","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Text-Analytic-Functions","","","","","","209618","13345","13345","4.731","A+","124","48","2.583","8.405","Very Hard","11.295","1","5","","707","707","0","99.860","714","712","0","","","","","","","","","0.480","","","","","","1.1","## Overview of Teradata Vantage™ Analytics Database Functions

Teradata Vantage™ is a powerful analytics database that supports a wide variety of analytic functions, including text analytics and model training functionalities. This platform is designed to facilitate advanced data analysis, enabling businesses to derive insights and make data-driven decisions.

### Code Examples

Here are some basic SQL operations featuring **Select**, **Update**, **Delete**, and **Create** statements commonly utilized in Teradata Vantage:

#### 1. **Select**
Retrieve specific columns from a table.

```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE country = 'USA';
```

#### 2. **Update**
Modify existing records in a table.

```sql
UPDATE customers
SET last_name = 'Smith'
WHERE customer_id = 12345;
```

#### 3. **Delete**
Remove records from a table.

```sql
DELETE FROM customers
WHERE last_name = 'Doe' AND country = 'USA';
```

#### 4. **Create**
Create a new table in the database.

```sql
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2)
);
```

### Keywords and Phrases

- **Text Analytic Functions**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

These functions and operations serve as the backbone for efficient data management and analysis in Teradata Vantage, helping organizations leverage their data for enhanced business intelligence.","25","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Text-Analytic-Functions","2024-07-27 11:31:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Changes-and-Additions","text/html;charset=UTF-8","200","","Indexable","","Changes and Additions | Teradata Vantage 2.4/17.20 - Changes and Additions - Analytics Database","95","878","Read a list of changes and new features in Analytics Database (SQL Engine) analytic function documentation for Release 17.20.","125","788","","0","Changes and Additions | Teradata Vantage 2.4/17.20 - Changes and Additions - Analytics Database","95","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Changes-and-Additions","","","","","","260345","20378","20378","7.224","A+","1432","409","3.501","41.052","Hard","12.907","1","4","","707","707","0","99.860","825","776","0","","","","","","","","","1.034","","","","","","1.1","# Teradata Vantage: Analytics Database Functions

Teradata Vantage provides a robust set of analytic functions within its Analytics Database. This guide covers the essential SQL operations such as SELECT, INSERT, UPDATE, and DELETE, along with examples to illustrate their usage. It also outlines recent changes and additions to the Teradata Vantage 2.4/17.20 release, focusing on analytic functions and other features.

## SQL Operations Overview

### 1. SELECT
The SELECT statement retrieves data from one or more tables.

**Example:**
```sql
SELECT employee_id, first_name, last_name
FROM employees
WHERE department_id = 10;
```

### 2. INSERT
The INSERT statement adds new rows to a table.

**Example:**
```sql
INSERT INTO employees (employee_id, first_name, last_name, department_id)
VALUES (101, 'John', 'Doe', 10);
```

### 3. UPDATE
The UPDATE statement modifies existing data within a table.

**Example:**
```sql
UPDATE employees
SET last_name = 'Smith'
WHERE employee_id = 101;
```

### 4. DELETE
The DELETE statement removes rows from a table.

**Example:**
```sql
DELETE FROM employees
WHERE employee_id = 101;
```

## Summary of Changes and Additions

### Teradata Vantage 17.20 - Key Features
- **Analytics Database Functions:** Enhanced categories for data cleaning, exploration, feature engineering, and model training.
- **New Functions:** Introduction of TD_TFIDF for text analysis.
- **Modeling Enhancements:** Updates to TD_XGBoost and TD_KMeans for improved performance.
- **Input Format Flexibility:** Support for both sparse and dense data formats in several functions.
- **Partitioning Support:** Enhanced support for partitioning in functions like TD_GLM and TD_SVM.

### Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions

## Keywords and Phrases
- **Changes and Additions**
- **Teradata Vantage 2.4/17.20**
- **Analytics Database**
- **Release Number:** 17.20
- **Published:** June 2022
- **Language:** English (United States)
- **Enterprise Edition**
- **Analytics Functions**
- **Data Cleaning Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **TD_TFIDF**
- **TD_XGBoost**
- **Sparse and Dense Formats**
- **Partitioning Support**
- **Hypothesis Testing Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **IntelliFlex**
- **VMware**
- **Product Category:** Teradata Vantage™
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**

This concise overview provides foundational knowledge of SQL operations and highlights significant updates in the Teradata Vantage Analytics Database, ensuring you stay informed about the latest capabilities and enhancements.","27","27","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Changes-and-Additions","2024-07-27 11:43:42"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes","text/html;charset=UTF-8","200","","Indexable","","Usage Notes - Analytics Database","32","301","These usage notes apply to every function in this document. This function requires the UTF8 client character set for UNICODE data. This function does not support Pass Through Characters (PTCs). For information about PTCs, see International Character Set Support, B035-1125. This function does not support KanjiSJIS or Gr...","323","2018","","0","Usage Notes - Analytics Database","32","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes","","","","","","213157","14281","14281","5.063","A+","207","58","3.569","40.143","Hard","11.310","1","4","","707","707","0","99.860","728","726","0","","","","","","","","","0.532","","","","","","1.1","## Summary of Teradata Analytics Database

The Teradata Analytics Database offers a range of analytic functions tailored for data cleaning, exploration, feature engineering, and model training, among others. This document outlines the key operations (Select, Update, Delete, Create) relevant to managing data within this analytics framework, alongside detailed usage notes for functions available.

## Code Example

### 1. SELECT
```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE country = 'USA';
```

### 2. UPDATE
```sql
UPDATE customers
SET last_name = 'Smith'
WHERE customer_id = 123;
```

### 3. DELETE
```sql
DELETE FROM customers
WHERE customer_id = 456;
```

### 4. CREATE
```sql
CREATE TABLE sales (
    sale_id INT PRIMARY KEY,
    customer_id INT,
    product_id INT,
    sale_date DATE,
    sale_amount DECIMAL(10, 2)
);
```

## Keywords and Phrases

- **Usage Notes**
  - Analytics Database
  - Database Analytic Functions
  - Deployment
  - VantageCloud
  - VantageCore
  - Edition
  - Enterprise
  - IntelliFlex
  - VMware
  - Product
  - Analytics Database
  - Release Number
  - 17.20
  - Published
  - June 2022
  - Language
  - English (United States)
  - Last Update
  - 2024-04-06
  - dita:mapPath
  - gjn1627595495337.ditamap
  - dita:ditavalPath
  - ayr1485454803741.ditaval
  - dita:id
  - jmh1512506877710
  - Product Category
  - Teradata Vantage™

- **Function Categories**
  - Data Cleaning Functions
  - Data Exploration Functions
  - Feature Engineering Transform Functions
  - Model Training Functions
  - Model Scoring Functions
  - Model Evaluation Functions
  - Text Analytic Functions
  - Path and Pattern Analysis Functions
  - Hypothesis Testing Functions

- **Analytics Database Specifics**
  - How to Read Syntax
  - Function Syntax Descriptions
  - Input Table Rows Redistribution
  - AMP Configuration Impact
  - Limitations with PARTITION BY
  - Non-Deterministic Behavior
  - Recommendations for Using Analytic Functions

This information serves as a foundational guide for users interacting with the Teradata Analytics Database, offering clarity on common database operations and analytic functions.","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes","2024-07-27 11:59:46"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/AMP-Configuration-Impact-on-Function-Execution","text/html;charset=UTF-8","200","","Indexable","","AMP Configuration Impact on Function Execution | Teradata Vantage - AMP Configuration Impact on Function Execution - Analytics Database","135","1253","Learn about the execution strategy of some analytic functions for the PARTITION BY ANY syntax.","94","601","","0","AMP Configuration Impact on Function Execution | Teradata Vantage - AMP Configuration Impact on Function Execution - Analytics Database","135","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/AMP-Configuration-Impact-on-Function-Execution","","","","","","208176","12928","12928","4.583","A+","151","45","3.356","44.314","Hard","11.389","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.518","","","","","","1.1","## Summary

In Teradata Vantage, the AMP (Access Module Processor) configuration can significantly impact the execution of analytic functions. Understanding how this configuration interacts with function execution is crucial for optimizing performance and ensuring consistent results, especially when using the `PARTITION BY` clause in analytic functions.

When utilizing analytic functions, the strategy of execution can differ based on the number of AMPs involved, affecting the output. For large datasets, the results remain reliable regardless of configuration, but for smaller datasets, careful selection of the primary index may be necessary to maintain quality.

### Code Example: Select, Update, Delete, Create

#### SELECT
```sql
SELECT column1, column2
FROM my_table
WHERE condition;
```

#### UPDATE
```sql
UPDATE my_table
SET column1 = value1, column2 = value2
WHERE condition;
```

#### DELETE
```sql
DELETE FROM my_table
WHERE condition;
```

#### CREATE
```sql
CREATE TABLE my_table (
    column1 data_type,
    column2 data_type,
    ...
);
```

### Keywords and Phrases
- AMP Configuration Impact on Function Execution
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Last Update
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Workload Management Configuration
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Recommendations for Using Analytic Functions
- TD_GLM
- TD_DecisionForest
- Input Table Rows Redistribution
- Spool Space Exhaustion
- Function Syntax Descriptions
- Output Quality Consistency","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/AMP-Configuration-Impact-on-Function-Execution","2024-07-27 11:42:14"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Accumulated-Columns-Impact-on-Function-Performance","text/html;charset=UTF-8","200","","Indexable","","Accumulated Columns Impact on Function Performance | Teradata Vantage - Accumulated Columns Impact on Function Performance - Analytics Database","143","1379","Learn how functions perform if the functions display the accumulated columns as the first columns of the output.","112","700","","0","Accumulated Columns Impact on Function Performance | Teradata Vantage - Accumulated Columns Impact on Function Performance - Analytics Database","143","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Accumulated-Columns-Impact-on-Function-Performance","","","","","","209485","13178","13178","4.672","A+","237","75","3.160","46.921","Hard","11.650","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.609","","","","","","1.1","## Summary

In Teradata Vantage, analytic functions play a crucial role in processing and analyzing data efficiently. The impact of accumulated columns on function performance is significant, especially concerning how they affect execution speed and data retrieval. When designing queries using analytic functions, it's essential to be mindful of how the placement of these columns influences performance, particularly the choice of the Primary Index column.

This guide provides fundamental SQL operations—SELECT, UPDATE, DELETE, and CREATE—along with examples relevant to Teradata Vantage and insights into how accumulated columns can affect function performance.

## Code Example

### 1. SELECT
The SELECT statement is used to query data from a database.

```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE status = 'active';
```

### 2. UPDATE
The UPDATE statement is utilized to modify existing records in a table.

```sql
UPDATE customers
SET status = 'inactive'
WHERE last_purchase < '2023-01-01';
```

### 3. DELETE
The DELETE statement removes records from a table based on a condition.

```sql
DELETE FROM customers
WHERE last_purchase < '2022-01-01';
```

### 4. CREATE
The CREATE statement is used to create a new table in the database.

```sql
CREATE TABLE sales (
    sale_id INT PRIMARY KEY,
    customer_id INT,
    product_id INT,
    sale_date DATE,
    amount DECIMAL(10, 2)
);
```

## Keywords and Phrases

- **Accumulated Columns Impact on Function Performance**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **How to Read Syntax**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions**
- **Primary Index Considerations**
- **Accumulated Columns Positioning**
- **Performance Optimization** 

This structured approach to understanding SQL operations in Teradata Vantage, along with the implications of accumulated columns, helps optimize data processing and analytics workflows.","27","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Accumulated-Columns-Impact-on-Function-Performance","2024-07-27 12:45:07"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Avoid-Deadlocks-Using-Volatile-Tables","text/html;charset=UTF-8","200","","Indexable","","Avoid Deadlocks Using Volatile Tables | Teradata Vantage - Avoid Deadlocks Using Volatile Tables - Analytics Database","117","1059","How to use VOLATILE tables if deadlocks occur when using the CREATE TABLE syntax to directly save function results while running multiple queries concurrently.","159","1001","","0","Avoid Deadlocks Using Volatile Tables | Teradata Vantage - Avoid Deadlocks Using Volatile Tables - Analytics Database","117","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Avoid-Deadlocks-Using-Volatile-Tables","","","","","","208009","12897","12897","4.572","A+","135","42","3.214","47.533","Hard","11.345","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.932","","","","","","1.1","### Summary

In Teradata Vantage, efficient database operations such as selecting, updating, deleting, and creating tables are vital for managing data within your analytics environment. To avoid common issues such as deadlocks, especially when multiple queries run concurrently, using volatile tables is recommended over permanent tables. This is particularly useful when executing CREATE TABLE commands, as volatile tables do not lock the dictionary, allowing for smoother operations. 

### Code Examples

Below are examples of basic SQL operations in Teradata Vantage:

#### 1. **Select**
```sql
SELECT column1, column2
FROM my_table
WHERE condition;
```

#### 2. **Update**
```sql
UPDATE my_table
SET column1 = new_value
WHERE condition;
```

#### 3. **Delete**
```sql
DELETE FROM my_table
WHERE condition;
```

#### 4. **Create**
```sql
-- Creating a volatile table
CREATE VOLATILE TABLE temp_table AS (
    SELECT column1, column2
    FROM my_table
    WHERE condition
) WITH DATA ON COMMIT PRESERVE ROWS;

-- Creating a permanent table
CREATE TABLE permanent_table AS (
    SELECT column1, column2
    FROM temp_table
) WITH NO DATA;
```

### Keywords and Phrases

- Avoid Deadlocks Using Volatile Tables
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Language English (United States)
- Last Update 2024-04-06
- Product Category Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Workload Management Configuration
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion
- Recommendations for Using Analytic Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Deadlock Prevention
- Volatile vs Permanent Tables
- Dictionary Locks
- CREATE TABLE Syntax
- Analytics Functions Usage
- SQL Commands in Teradata
- Data Manipulation with SQL","25","2","3","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Avoid-Deadlocks-Using-Volatile-Tables","2024-07-27 12:22:47"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/BC/BCE-Timestamps","text/html;charset=UTF-8","200","","Indexable","","BC/BCE Timestamps in Analytics Database Functions | Teradata Vantage - BC/BCE Timestamps - Analytics Database","109","1042","Learn which BC and BCE timestamps Analytics Database (SQL Engine) analytic functions support.","93","607","","0","BC/BCE Timestamps in Analytics Database Functions | Teradata Vantage - BC/BCE Timestamps - Analytics Database","109","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/BC/BCE-Timestamps","","","","","","207688","12756","12756","4.522","A+","82","47","1.745","37.928","Hard","11.236","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","1.965","","","","","","1.1","## Summary of Teradata Vantage Analytics Database Functions

Teradata Vantage offers a robust set of analytic functions designed to handle various data tasks, from data cleaning and exploration to model training and evaluation. The platform supports both standard SQL operations and specialized analytic functions that allow users to manipulate and analyze data efficiently.

In the context of BC/BCE timestamps, it’s important to note that the Analytics Database functions do not support BCE timestamps, which are expressed in an alternative way to the traditional BC (Before Christ) format. This limitation is critical for users dealing with historical data, and they must ensure that timestamps are formatted correctly for compatibility.

## Code Example Section

### SELECT
To retrieve data from a table, you can use the `SELECT` statement. For example, to select all columns from a table named `customers`:

```sql
SELECT * FROM customers;
```

### UPDATE
To modify existing records in a table, the `UPDATE` statement is used. For instance, to update the email address of a customer with a specific ID:

```sql
UPDATE customers
SET email = 'newemail@example.com'
WHERE customer_id = 1;
```

### DELETE
To remove records from a table, the `DELETE` statement is employed. For example, to delete a customer record based on their ID:

```sql
DELETE FROM customers
WHERE customer_id = 1;
```

### CREATE
To create a new table, you can use the `CREATE TABLE` statement. Here’s how to create a simple `customers` table:

```sql
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100)
);
```

## Keywords and Phrases
- BC/BCE Timestamps
- Analytics Database Functions
- Teradata Vantage
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- Published
- Language
- Last Update
- Product Category
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Workload Management
- Recommendations for Using Analytic Functions
- Non-Deterministic Behavior
- Maximum Number of Columns
- Spool Space Exhaustion
- Displaying Online Help
- Syntax Elements
- Input and Output Specifications

These keywords and phrases can be useful for further exploration of Teradata Vantage and its capabilities within analytics and data processing.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/BC/BCE-Timestamps","2024-07-27 12:20:44"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Datatype-Change-in-Accumulated-Columns","text/html;charset=UTF-8","200","","Indexable","","Datatype Change in Accumulated Columns | Teradata Vantage - Datatype Change in Accumulated Columns - Analytics Database","119","1141","Learn which functions change the data type of a column in the input table to a different data type in the output table.","119","719","","0","Datatype Change in Accumulated Columns | Teradata Vantage - Datatype Change in Accumulated Columns - Analytics Database","119","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Datatype-Change-in-Accumulated-Columns","","","","","","210391","13242","13242","4.694","A+","474","84","5.643","72.423","Fairly Easy","12.143","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.613","","","","","","1.1","### Summary

In this document, we explore the SQL operations in Teradata, particularly focusing on the `SELECT`, `UPDATE`, `DELETE`, and `CREATE` commands. Teradata Vantage provides a robust environment for data analytics, allowing users to manipulate and query large datasets effectively. The SQL commands covered here are essential for managing data within Teradata's system.

### Code Examples

#### 1. SELECT
The `SELECT` statement is used to query data from a database. You can retrieve specific columns, apply conditions, and order results.

```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE country = 'USA'
ORDER BY last_name;
```

#### 2. UPDATE
The `UPDATE` statement modifies existing records in a table. You typically specify which records to update using a `WHERE` clause.

```sql
UPDATE customers
SET email = 'new_email@example.com'
WHERE customer_id = 1234;
```

#### 3. DELETE
The `DELETE` statement removes existing records from a table. Again, the `WHERE` clause is crucial to avoid deleting all records unintentionally.

```sql
DELETE FROM customers
WHERE last_purchase < '2022-01-01';
```

#### 4. CREATE
The `CREATE` statement is used to create new tables or databases. You define the table structure, including column names and data types.

```sql
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2)
);
```

### Keywords and Phrases

- **Datatype Change in Accumulated Columns**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **MovingAverage Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Limitations When Using PARTITION BY**
- **Recommendations for Using Analytic Functions**
- **TD Functions**
- **Examples of TD Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Path and Pattern Analysis Functions**
- **Sessionize**
- **nPath**
- **TD_Histogram**
- **TD_Silhouette**
- **TD_XGBoost**
- **TD_KMeans**
- **TD_SVM**
- **TD_ClassificationEvaluator**
- **TD_RegressionEvaluator**
- **TD_ANOVA**
- **TD_ChiSq**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Datatype-Change-in-Accumulated-Columns","2024-07-27 12:36:51"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Displaying-Online-Help-for-Analytics-Database-Analytic-Functions","text/html;charset=UTF-8","200","","Indexable","","Analytics Database Analytic Function Online Help | Teradata Vantage - Displaying Online Help for Analytics Database Analytic Functions - Analytics Database","155","1389","Learn how to display online help for Analytics Database (SQL Engine) analytic functions.","88","544","","0","Analytics Database Analytic Function Online Help | Teradata Vantage - Displaying Online Help for Analytics Database Analytic Functions - Analytics Database","155","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Displaying-Online-Help-for-Analytics-Database-Analytic-Functions","","","","","","208096","12785","12785","4.532","A+","80","40","2.000","9.168","Very Hard","11.207","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.580","","","","","","1.1","## Summary

The Analytics Database in Teradata Vantage provides a rich set of analytic functions designed to facilitate data exploration, feature engineering, model training, scoring, and evaluation. This functionality allows users to perform complex analytics tasks efficiently. The database supports various operations, including creating, selecting, updating, and deleting records. Understanding how to use these commands is essential for effective data manipulation in Teradata.

## Code Example

### 1. Create
To create a new table in the Analytics Database:

```sql
CREATE TABLE sales_data (
    sales_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    quantity_sold INT,
    sale_date DATE
);
```

### 2. Select
To retrieve data from the table:

```sql
SELECT product_name, quantity_sold
FROM sales_data
WHERE sale_date >= '2023-01-01';
```

### 3. Update
To update existing records in the table:

```sql
UPDATE sales_data
SET quantity_sold = quantity_sold + 10
WHERE product_name = 'Product A';
```

### 4. Delete
To delete records from the table:

```sql
DELETE FROM sales_data
WHERE sale_date < '2022-12-31';
```

## Keywords and Phrases

- **Analytics Database**
- **Analytic Function**
- **Online Help**
- **Teradata Vantage**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Syntax**
- **Function Examples**
- **Recommendations**
- **Workload Management**
- **Non-Deterministic Behavior**
- **Deadlocks**
- **Input Table Rows**
- **Partitioning**
- **Function Performance**
- **Accumulated Columns**
- **Data Types**
- **Spool Space**
- **Online Help Commands**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Displaying-Online-Help-for-Analytics-Database-Analytic-Functions","2024-07-27 12:42:09"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Function-Names-with-and-without-TD-Prefix","text/html;charset=UTF-8","200","","Indexable","","Function Names with and without the TD Prefix | Teradata Vantage - Function Names with and without TD Prefix - Analytics Database","129","1187","Learn how functions with and with the TD prefix work with ML Engine .","69","435","","0","Function Names with and without the TD Prefix | Teradata Vantage - Function Names with and without TD Prefix - Analytics Database","129","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Function-Names-with-and-without-TD-Prefix","","","","","","208218","12986","12986","4.604","A+","166","47","3.532","43.224","Hard","11.461","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.657","","","","","","1.1","### Summary

Teradata Vantage™ is an advanced analytics platform that allows users to perform a variety of functions on large data sets using SQL. This includes analytical functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Teradata’s SQL-MapReduce framework is designed to efficiently handle complex analytical tasks on massive data sets. The functions are categorized into various types, each serving a specific purpose within the data analytics lifecycle.

### Code Example

Here are some basic SQL operations using Teradata Vantage™:

#### 1. **Create Table**
```sql
CREATE TABLE Customers (
    CustomerID INT,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Email VARCHAR(100)
);
```

#### 2. **Select Data**
```sql
SELECT CustomerID, FirstName, LastName
FROM Customers
WHERE Email IS NOT NULL;
```

#### 3. **Update Data**
```sql
UPDATE Customers
SET Email = 'newemail@example.com'
WHERE CustomerID = 1;
```

#### 4. **Delete Data**
```sql
DELETE FROM Customers
WHERE CustomerID = 1;
```

### Keywords and Phrases

- **Function Names with TD Prefix**: TD_ConvertTo, TD_GetFutileColumns, TD_GetRowsWithoutMissingValues, TD_OutlierFilterFit, TD_SimpleImputeFit, etc.
- **Function Names without TD Prefix**: ConvertTo, GetFutileColumns, GetRowsWithoutMissingValues, OutlierFilterFit, SimpleImputeFit, etc.
- **Teradata Vantage**: Advanced analytics platform.
- **Analytics Database**: Contains a variety of analytic functions.
- **Function Categories**:
  - Data Cleaning Functions
  - Data Exploration Functions
  - Feature Engineering Transform Functions
  - Model Training Functions
  - Model Scoring Functions
  - Model Evaluation Functions
  - Text Analytic Functions
  - Hypothesis Testing Functions
- **Deployment Options**: VantageCloud, VantageCore, Enterprise, IntelliFlex, VMware.
- **Last Update**: April 2024.
- **Release Number**: 17.20.
- **Language**: English (United States).
- **Usage Notes**: Includes guidance for input schemas, function syntax, and limitations.
- **Performance Considerations**: Accumulated columns performance, datatype changes, input table rows redistribution.
- **Recommendations**: Best practices for using analytic functions effectively.

This overview provides foundational knowledge for working with Teradata Vantage™ and its analytics capabilities, along with examples of common SQL operations.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Function-Names-with-and-without-TD-Prefix","2024-07-27 12:15:24"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Function-Syntax-Descriptions","text/html;charset=UTF-8","200","","Indexable","","Analytics Database Analytic Function Syntax | Teradata Vantage - Function Syntax Descriptions - Analytics Database","114","1031","Read about simplifications in Analytics Database (SQL Engine) analytic function syntax descriptions (descriptions do not show every possibility).","145","891","","0","Analytics Database Analytic Function Syntax | Teradata Vantage - Function Syntax Descriptions - Analytics Database","114","Database Analytic Functions","27","SELECT Statement Clauses","24","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Function-Syntax-Descriptions","","","","","","210294","13526","13526","4.795","A+","358","79","4.532","50.523","Fairly Hard","11.916","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.588","","","","","","1.1","### Summary

This document provides an overview of the Teradata Vantage™ Analytics Database, focusing on its analytic functions, deployment options, and best practices. It covers various categories of functions, including data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Each function has a specific syntax, input, output, and usage notes, ensuring users can efficiently leverage these capabilities for analytical tasks.

### Code Example

Below are examples demonstrating common SQL operations: SELECT, UPDATE, DELETE, and CREATE.

#### 1. SELECT

```sql
SELECT 
    CustomerID, 
    FirstName, 
    LastName 
FROM 
    Customers 
WHERE 
    Country = 'USA' 
ORDER BY 
    LastName;
```

#### 2. UPDATE

```sql
UPDATE 
    Customers 
SET 
    ContactName = 'John Doe', 
    City = 'Los Angeles' 
WHERE 
    CustomerID = 1;
```

#### 3. DELETE

```sql
DELETE FROM 
    Customers 
WHERE 
    CustomerID = 2;
```

#### 4. CREATE

```sql
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    OrderDate DATE,
    TotalAmount DECIMAL(10, 2)
);
```

### Keywords and Phrases

- **Analytics Database**
- **Analytic Function Syntax**
- **Teradata Vantage**
- **Function Syntax Descriptions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Partitioning**
- **Input Table Rows Redistribution**
- **Function Execution**
- **Function Names with TD Prefix**
- **Usage Notes**
- **Workload Management**
- **Deadlocks**
- **Maximum Number of Columns**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions**
- **SQL SELECT Statement Clauses**

This structured approach ensures clarity in understanding the capabilities of the Teradata Vantage Analytics Database and its functions while providing practical SQL examples for database operations.","30","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Function-Syntax-Descriptions","2024-07-27 12:18:20"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Functions-Ignore-Disallowed-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","Disallowed Syntax in Analytics Database Analytic Functions | Teradata Vantage - Functions Ignore Disallowed Syntax Elements - Analytics Database","144","1310","Learn which functions do if you specify disallowed syntax elements in Analytics Database (SQL Engine) .","103","642","","0","Disallowed Syntax in Analytics Database Analytic Functions | Teradata Vantage - Functions Ignore Disallowed Syntax Elements - Analytics Database","144","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Functions-Ignore-Disallowed-Syntax-Elements","","","","","","207643","12650","12650","4.484","A+","74","36","2.056","11.541","Very Hard","11.207","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.625","","","","","","1.1","### Summary

In Teradata Vantage, the Analytics Database provides a range of functions for data manipulation and analysis. This includes capabilities for selecting, updating, deleting, and creating data within the database. The following sections provide code examples for each of these operations, showcasing the basic syntax and usage.

### Code Example

#### 1. Select
The `SELECT` statement is used to query data from a database.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

**Example:**
```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

#### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example:**
```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department = 'Sales';
```

#### 3. Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

**Example:**
```sql
DELETE FROM employees
WHERE hire_date < '2020-01-01';
```

#### 4. Create
The `CREATE TABLE` statement creates a new table in the database with specified columns and types.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example:**
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    hire_date DATE,
    salary DECIMAL(10, 2)
);
```

### Keywords and Phrases
- **Disallowed Syntax in Analytics Database**
- **Analytic Functions**
- **Teradata Vantage**
- **Functions Ignore Disallowed Syntax Elements**
- **Analytics Database**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product: Analytics Database**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Function Categories:**
  - Data Cleaning Functions
  - Data Exploration Functions
  - Feature Engineering Functions
  - Model Training Functions
  - Model Scoring Functions
  - Model Evaluation Functions
  - Text Analytic Functions
  - Hypothesis Testing Functions
  - Path and Pattern Analysis Functions
- **Usage Notes**
- **Limitations When Using PARTITION BY**
- **Workload Management Configuration**
- **Non-Deterministic Behavior**
- **Spool Space Exhaustion for Large Partitions** 

This overview provides a foundational understanding of basic SQL operations in Teradata Vantage's Analytics Database, along with important keywords and phrases relevant to its functionality.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Functions-Ignore-Disallowed-Syntax-Elements","2024-07-27 12:46:46"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/How-to-Read-Syntax","text/html;charset=UTF-8","200","","Indexable","","How to Read Syntax - Analytics Database","39","365","To understand the function syntax, review How to Read Syntax.","61","393","","0","How to Read Syntax - Analytics Database","39","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/How-to-Read-Syntax","","","","","","207518","12691","12691","4.499","A+","53","34","1.559","16.898","Very Hard","11.133","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.791","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides powerful analytic functions that enable users to perform data manipulation and analysis efficiently. The key operations include selecting, updating, deleting, and creating data, which are foundational tasks in any database environment. Understanding these operations and their syntax is crucial for effective data analysis and manipulation.

### Code Example

Here are simple SQL code examples demonstrating the common database operations: Select, Update, Delete, and Create.

#### Select
```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

#### Update
```sql
UPDATE employees
SET salary = salary * 1.1
WHERE performance_rating = 'Excellent';
```

#### Delete
```sql
DELETE FROM employees
WHERE termination_date < '2022-01-01';
```

#### Create
```sql
CREATE TABLE new_employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    hire_date DATE,
    salary DECIMAL(10, 2)
);
```

## Keywords and Phrases

- **How to Read Syntax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Recommendations for Using Analytic Functions**

This guide provides a foundational understanding of how to work with an analytics database and perform essential data operations. Familiarity with the syntax and functions available in Teradata Vantage™ will empower users to leverage advanced data analysis capabilities effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/How-to-Read-Syntax","2024-07-27 11:36:51"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Input-Table-Rows-Redistribution","text/html;charset=UTF-8","200","","Indexable","","Input Table Rows Redistribution - Analytics Database","52","469","To redistribute input table rows to fewer AMPs, sparse map can be used. For example, to redistribute a table to four AMPs, first create a sparse map of four AMPs named sparse_map_4 using the following command: CREATE MAP sparse_map_4 FROM td_map1 SPARSE ampcount=4; Then, create a table using this sparse map, as follows...","323","2086","","0","Input Table Rows Redistribution - Analytics Database","52","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Input-Table-Rows-Redistribution","","","","","","208431","13088","13088","4.640","A+","142","44","3.227","37.934","Hard","11.371","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.531","","","","","","1.1","## Summary

This document outlines the functionalities of the Teradata Vantage™ Analytics Database, specifically focusing on the analytic functions available for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. It highlights the capabilities of the system in processing and managing data efficiently across different analytical tasks. Furthermore, it includes essential SQL operations such as `Select`, `Update`, `Delete`, and `Create`, which are foundational for managing data within the analytics database.

## Code Example

### Select
To retrieve data from a table, you can use the `SELECT` statement:

```sql
SELECT a1, b1
FROM Table1
WHERE a1 > 10;
```

### Update
To modify existing records in a table, the `UPDATE` statement is used:

```sql
UPDATE Table1
SET b1 = b1 + 1
WHERE a1 = 5;
```

### Delete
To remove records from a table, the `DELETE` statement is utilized:

```sql
DELETE FROM Table1
WHERE a1 < 3;
```

### Create
To create a new table in the database, the `CREATE TABLE` statement is employed:

```sql
CREATE TABLE Table2 (
    id INTEGER,
    name VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## Keywords and Phrases
- Input Table Rows Redistribution
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Recommendations for Using Analytic Functions
- Sparse Map Example
- Table Creation with Sparse Map
- SQL Data Definition Language
- Teradata Database Administration

This structured approach aids in efficiently understanding the capabilities of the Teradata Vantage™ Analytics Database and the SQL operations essential for managing and analyzing data.","25","1","7","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Input-Table-Rows-Redistribution","2024-07-27 11:54:59"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Input-Table-Schemas","text/html;charset=UTF-8","200","","Indexable","","Input Table Schemas - Analytics Database","40","375","Input table schemas show only the columns that a function uses. Unless otherwise noted, input tables can have additional columns, but the function ignores them.","160","1001","","0","Input Table Schemas - Analytics Database","40","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Input-Table-Schemas","","","","","","207503","12699","12699","4.502","A+","67","37","1.811","19.382","Very Hard","11.182","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.428","","","","","","1.1","# Summary

The Analytics Database provides a range of analytic functions designed to perform data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Each function has specific syntax requirements and can interact with various input table schemas. Understanding how to use these functions effectively can enhance your data analysis capabilities and streamline workflow processes.

## Code Examples

### Select

```sql
SELECT column1, column2
FROM analytics_table
WHERE condition;
```

### Update

```sql
UPDATE analytics_table
SET column1 = new_value
WHERE condition;
```

### Delete

```sql
DELETE FROM analytics_table
WHERE condition;
```

### Create

```sql
CREATE TABLE new_table (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Keywords and Phrases

- **Input Table Schemas** 
- **Analytics Database**
- **Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **AMP Configuration Impact**
- **Limitations with PARTITION BY**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions**
- **Examples of Functions** 
- **How to Use Functions**
- **Syntax Elements**
- **Input and Output**
- **Creating, Updating, Deleting Tables** 

This overview captures key aspects of the Analytics Database analytic functions, their syntax, and essential terms for effective data analysis.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Input-Table-Schemas","2024-07-27 12:07:33"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Limitations-When-Using-PARTITION-BY","text/html;charset=UTF-8","200","","Indexable","","Limitations When Using PARTITION BY - Analytics Database","56","533","For SQLMR functions where PARTITION BY columns appear in the output schema, only LATIN columns can be used in PARTITION BY clause. UNICODE columns are not supported in such scenario.","182","1206","","0","Limitations When Using PARTITION BY - Analytics Database","56","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Limitations-When-Using-PARTITION-BY","","","","","","207591","12735","12735","4.515","A+","74","37","2.000","27.602","Very Hard","11.195","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.546","","","","","","1.1","# Summary of SQL Operations: Select, Update, Delete, Create

In SQL, four fundamental operations allow for the manipulation and management of data within a database: **Select**, **Update**, **Delete**, and **Create**. These operations form the backbone of SQL queries and are essential for interacting with data stored in relational databases.

### Code Examples

#### 1. **Select**
The `SELECT` statement is used to query the database and retrieve data from one or more tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```
*Example:*
```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

#### 2. **Update**
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```
*Example:*
```sql
UPDATE employees
SET salary = salary * 1.1
WHERE department = 'Sales';
```

#### 3. **Delete**
The `DELETE` statement removes records from a table based on a specified condition.

```sql
DELETE FROM table_name
WHERE condition;
```
*Example:*
```sql
DELETE FROM employees
WHERE last_name = 'Smith';
```

#### 4. **Create**
The `CREATE` statement is used to create a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```
*Example:*
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

### Keywords and Phrases
- Limitations When Using PARTITION BY
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- gjn1627595495337.ditamap
- dita:ditavalPath
- ayr1485454803741.ditaval
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

These keywords and phrases provide insight into the context and functionality of the analytics database, specifically in relation to the usage of PARTITION BY and its implications on data operations.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Limitations-When-Using-PARTITION-BY","2024-07-27 11:35:56"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Maximum-Number-of-Columns-in-a-Database-Table","text/html;charset=UTF-8","200","","Indexable","","Maximum Number of Columns in a Database Table - Analytics Database","66","643","A maximum of 2047 columns are allowed in a database table for analytic functions. These columns include the feature columns, response columns, id columns, partitioning/grouping, and ordering columns. Some functions have additional restrictions on the maximum allowed number of columns, which are listed in the function d...","323","2031","","0","Maximum Number of Columns in a Database Table - Analytics Database","66","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Maximum-Number-of-Columns-in-a-Database-Table","","","","","","207915","12833","12833","4.549","A+","94","40","2.350","28.050","Very Hard","11.254","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.541","","","","","","1.1","## Summary

In the context of database management, SQL (Structured Query Language) is a standard programming language utilized for managing and manipulating relational databases. The most common operations that can be performed using SQL include selecting data from tables, updating existing records, deleting records, and creating new tables or databases. Below are some fundamental examples demonstrating each of these operations.

### Code Example

#### 1. Select
To retrieve data from a table, you use the `SELECT` statement.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

**Example:**
```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

#### 2. Update
To modify existing records in a table, you use the `UPDATE` statement.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example:**
```sql
UPDATE employees
SET salary = salary * 1.10
WHERE performance_rating = 'Excellent';
```

#### 3. Delete
To remove records from a table, you use the `DELETE` statement.

```sql
DELETE FROM table_name
WHERE condition;
```

**Example:**
```sql
DELETE FROM employees
WHERE last_name = 'Smith';
```

#### 4. Create
To create a new table or database, you use the `CREATE` statement.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example:**
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    hire_date DATE,
    salary DECIMAL(10, 2)
);
```

### Keywords and Phrases

- Maximum Number of Columns in a Database Table
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Language English (United States)
- Last Update 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- DataType Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This structured presentation provides a comprehensive overview of fundamental SQL operations alongside relevant keywords that are crucial for understanding database management and analytics.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Maximum-Number-of-Columns-in-a-Database-Table","2024-07-27 12:22:22"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Non-Deterministic-Behavior","text/html;charset=UTF-8","200","","Indexable","","Non-Deterministic Behavior - Analytics Database","47","432","The output may be non-deterministic for some functions if the insertion order of the rows in the table change, or the cluster configuration (for example, different number of AMPs) changes. This is due to change in data distribution. Examples include TD_SVM, TD_GLM, TD_DecisionForest, TD_XGBoost, TD_KMeans, TD_TargetEnc...","323","2025","","0","Non-Deterministic Behavior - Analytics Database","47","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Non-Deterministic-Behavior","","","","","","208116","12977","12977","4.600","A+","121","44","2.750","40.437","Hard","11.338","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.469","","","","","","1.1","# Overview of Teradata Vantage™ Analytics Database Functions

The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions designed to facilitate data cleaning, exploration, feature engineering, model training, and evaluation. Each category of functions serves distinct purposes, allowing users to derive insights from their datasets effectively.

## Code Example

### SQL Operations: Select, Update, Delete, Create

#### 1. **Select**
```sql
SELECT customer_id, customer_name, purchase_amount
FROM customers
WHERE purchase_amount > 100;
```

#### 2. **Update**
```sql
UPDATE customers
SET purchase_amount = purchase_amount * 1.10
WHERE purchase_date >= '2023-01-01';
```

#### 3. **Delete**
```sql
DELETE FROM customers
WHERE last_purchase_date < '2022-01-01';
```

#### 4. **Create**
```sql
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    purchase_amount DECIMAL(10, 2),
    purchase_date DATE
);
```

## Summary

The Teradata Vantage™ Analytics Database offers a rich set of analytic functions that enable users to perform various tasks, such as data cleaning, exploratory analysis, feature engineering, and model deployment. Understanding how to manipulate data using SQL operations is essential for efficiently utilizing these capabilities.

## Keywords and Phrases
- Non-Deterministic Behavior - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category: Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Recommendations for Using Analytic Functions
- TD_ functions (e.g., TD_GetRowsWithoutMissingValues, TD_OneHotEncodingFit)","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Non-Deterministic-Behavior","2024-07-27 11:49:24"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Recommendations-for-Using-Analytic-Functions","text/html;charset=UTF-8","200","","Indexable","","Recommendations for Using Analytic Functions - Analytics Database","65","608","Use ASCII client collation when executing analytic functions. If your data has UNICODE characters, set the UTF8 client character set and Collation set to ASCII for the user session. See Knowledge Article KB0052472, available at https://docs.teradata.com/. You must log in before you can search for it. Multinational Coll...","323","1966","","0","Recommendations for Using Analytic Functions - Analytics Database","65","Database Analytic Functions","27","Multinational Collation","23","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Recommendations-for-Using-Analytic-Functions","","","","","","208557","13138","13138","4.657","A+","149","50","2.980","44.263","Hard","11.368","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.451","","","","","","1.1","## Summary

The Analytics Database in Teradata Vantage™ provides a rich set of analytic functions that facilitate data cleaning, exploration, feature engineering, model training, scoring, and evaluation. It supports various data types and operations, making it a powerful tool for data analysts and scientists. Each function has its own specific syntax, required and optional parameters, and output formats, allowing for extensive customization based on user needs.

This document highlights the most common operations such as selecting, updating, deleting, and creating data in an analytics context using SQL-like syntax.

## Code Example

### 1. Select
To retrieve data from a table:
```sql
SELECT column1, column2
FROM my_table
WHERE condition;
```

### 2. Update
To modify existing records in a table:
```sql
UPDATE my_table
SET column1 = value1, column2 = value2
WHERE condition;
```

### 3. Delete
To remove records from a table:
```sql
DELETE FROM my_table
WHERE condition;
```

### 4. Create
To create a new table:
```sql
CREATE TABLE my_table (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Keywords and Phrases

- Recommendations for Using Analytic Functions
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Function Names with and without TD Prefix
- Non-Deterministic Behavior
- Workload Management Configuration
- Avoid Deadlocks Using Volatile Tables
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_Histogram
- TD_QQNorm
- TD_Silhouette
- TD_XGBoostPredict

This structured approach to analytic functions enhances the usability of the Analytics Database in Teradata Vantage™, making it a robust option for organizations looking to leverage data analytics effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Recommendations-for-Using-Analytic-Functions","2024-07-27 12:06:55"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Size-of-the-Query","text/html;charset=UTF-8","200","","Indexable","","Size of the Query - Analytics Database","38","339","When the size of a query is larger than 64000 characters, the internal descriptor runs out of space and an error is reported. The workaround is to decrease the query size. If column names are being specified in the query, try using indices.","240","1446","","0","Size of the Query - Analytics Database","38","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Size-of-the-Query","","","","","","207675","12819","12819","4.544","A+","86","38","2.263","45.175","Hard","11.210","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.687","","","","","","1.1","## Summary

The Analytics Database in Teradata Vantage™ is designed to handle large-scale analytics, providing various functions that support data cleaning, exploration, feature engineering, model training, scoring, and evaluation. The database operates efficiently even with complex queries, but care must be taken to manage query sizes, especially as they approach the 64,000-character limit. Users can leverage a range of analytic functions to enhance their data processing and analysis capabilities.

## Code Example

### Create

To create a new table in the Analytics Database, you can use the `CREATE TABLE` statement. Here's an example of creating a simple table for storing customer data:

```sql
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Email VARCHAR(100),
    DateOfBirth DATE
);
```

### Select

To retrieve data from the created table, you can use the `SELECT` statement. For example, to select all customer records:

```sql
SELECT * FROM Customers;
```

### Update

To update existing records in the table, you can use the `UPDATE` statement. Here’s how to update a customer's email:

```sql
UPDATE Customers
SET Email = 'newemail@example.com'
WHERE CustomerID = 1;
```

### Delete

To delete records from the table, you can use the `DELETE` statement. For example, to remove a customer record:

```sql
DELETE FROM Customers
WHERE CustomerID = 1;
```

## Keywords and Phrases

- Size of the Query
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Size-of-the-Query","2024-07-27 11:26:12"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Spool-Space-Exhaustion-for-Large-Partitions-at-High-Concurrency","text/html;charset=UTF-8","200","","Indexable","","Spool Space Exhaustion for Large Partitions at High Concurrency - Analytics Database","84","763","If a function that operates on partitions (the query has the PARTITION BY KEY syntax in the ON clause, possibly containing the PartitionColumns argument clause), is invoked on data with large partition sizes and high concurrency, the spool space for the database user may be exhausted during partitioning of data and an ...","323","1993","","0","Spool Space Exhaustion for Large Partitions at High Concurrency - Analytics Database","84","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Spool-Space-Exhaustion-for-Large-Partitions-at-High-Concurrency","","","","","","208212","13002","13002","4.609","A+","138","43","3.209","41.121","Hard","11.356","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.907","","","","","","1.1","### Summary

This document outlines the functionality and usage of various analytic functions in Teradata Vantage, particularly focusing on the Analytics Database. It provides insights into potential issues such as spool space exhaustion that may occur when dealing with large partitions and high concurrency. Additionally, it covers the syntax and application of different analytic functions, including data cleaning, exploration, feature engineering, model training, scoring, and evaluation functions. 

### Code Example Section

Below are basic SQL code examples demonstrating the four fundamental operations: Select, Update, Delete, and Create.

#### 1. Select
```sql
-- Select data from a table
SELECT employee_id, first_name, last_name
FROM employees
WHERE department_id = 10;
```

#### 2. Update
```sql
-- Update records in a table
UPDATE employees
SET salary = salary * 1.10
WHERE department_id = 10;
```

#### 3. Delete
```sql
-- Delete records from a table
DELETE FROM employees
WHERE employee_id = 123;
```

#### 4. Create
```sql
-- Create a new table
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department_id INT,
    salary DECIMAL(10, 2)
);
```

### Keywords and Phrases

- Spool Space Exhaustion for Large Partitions at High Concurrency
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- Limitations When Using PARTITION BY
- Recommendations for Using Analytic Functions
- Example Usage of Functions like Pack, StringSimilarity, TD_ConvertTo, etc.
- Workload Management Configuration
- Non-Deterministic Behavior
- Avoid Deadlocks Using Volatile Tables
- Maximum Number of Columns in a Database Table
- Input Table Rows Redistribution
- AMP Configuration Impact on Function Execution

This structured overview should provide clarity on the subject matter and facilitate further exploration of Teradata Vantage capabilities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Spool-Space-Exhaustion-for-Large-Partitions-at-High-Concurrency","2024-07-27 11:53:21"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Workload-Management-Configuration-for-Analytics-Database-Analytic-Functions","text/html;charset=UTF-8","200","","Indexable","","Analytics Database Workload Management | Teradata Vantage - Workload Management Configuration for Analytics Database Analytic Functions - Analytics Database","156","1471","Learn to configure Workload Management throttles to limit concurrency & memory so Analytics Database analytic functions don't impact other workloads.","149","952","","0","Analytics Database Workload Management | Teradata Vantage - Workload Management Configuration for Analytics Database Analytic Functions - Analytics Database","156","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Workload-Management-Configuration-for-Analytics-Database-Analytic-Functions","","","","","","207979","12811","12811","4.542","A+","96","38","2.526","0.702","Very Hard","11.282","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.522","","","","","","1.1","## Summary

The Teradata Vantage Analytics Database provides a robust set of functionalities for analytics, including various analytic functions tailored for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This overview summarizes the core capabilities of the database, including workload management configurations that help optimize performance. The analytic functions are essential for effective data manipulation and analysis, enabling users to derive insights and perform complex calculations on large datasets.

## Code Example

Here are some basic SQL operations you can perform in Teradata Vantage, specifically focusing on `SELECT`, `UPDATE`, `DELETE`, and `CREATE` statements:

### 1. SELECT
```sql
SELECT customer_id, customer_name, purchase_amount
FROM sales_data
WHERE purchase_date >= '2023-01-01'
ORDER BY purchase_amount DESC;
```

### 2. UPDATE
```sql
UPDATE sales_data
SET purchase_amount = purchase_amount * 1.1
WHERE customer_id = 12345;
```

### 3. DELETE
```sql
DELETE FROM sales_data
WHERE purchase_date < '2022-01-01';
```

### 4. CREATE
```sql
CREATE TABLE sales_data (
    customer_id INT,
    customer_name VARCHAR(100),
    purchase_amount DECIMAL(10, 2),
    purchase_date DATE
);
```

## Keywords and Phrases

- Analytics Database Workload Management
- Teradata Vantage
- Workload Management Configuration
- Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Function Syntax Descriptions
- Input Table Rows Redistribution
- AMP Configuration Impact
- Limitations with PARTITION BY
- Non-Deterministic Behavior
- Spool Space Exhaustion
- Recommendations for Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product Category
- Release Number
- Published Date
- Language
- Last Update

This summary and examples provide a foundational understanding of how to utilize the Teradata Vantage Analytics Database and its analytic functions effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Workload-Management-Configuration-for-Analytics-Database-Analytic-Functions","2024-07-27 12:19:18"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions","text/html;charset=UTF-8","200","","Indexable","","Model Evaluation Functions | Teradata Vantage - Model Evaluation Functions - Analytics Database","95","869","Learn about the Analytics Database (SQL Engine) functions for evaluating models.","80","509","","0","Model Evaluation Functions | Teradata Vantage - Model Evaluation Functions - Analytics Database","95","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions","","","","","","208856","13072","13072","4.634","A+","58","39","1.487","0.000","Very Hard","11.101","1","3","","707","707","0","99.860","715","713","0","","","","","","","","","0.838","","","","","","1.1","## Summary

Teradata Vantage offers powerful analytic functions to assist in various stages of data analysis, including model evaluation, training, and deployment. The Model Evaluation Functions specifically help assess the performance of predictive models, ensuring that users can validate their models effectively. These functions provide comprehensive metrics that guide data scientists in enhancing model accuracy and reliability.

### Code Examples

#### 1. Create a Table
```sql
CREATE TABLE ModelResults (
    ModelID INT,
    ModelName VARCHAR(50),
    Accuracy FLOAT,
    Precision FLOAT,
    Recall FLOAT
);
```

#### 2. Insert Data into the Table
```sql
INSERT INTO ModelResults (ModelID, ModelName, Accuracy, Precision, Recall)
VALUES (1, 'Decision Forest', 0.85, 0.80, 0.75),
       (2, 'XGBoost', 0.90, 0.87, 0.82);
```

#### 3. Select Data from the Table
```sql
SELECT ModelName, Accuracy, Precision, Recall
FROM ModelResults
WHERE Accuracy > 0.80;
```

#### 4. Update Data in the Table
```sql
UPDATE ModelResults
SET Accuracy = 0.92
WHERE ModelID = 2;
```

#### 5. Delete Data from the Table
```sql
DELETE FROM ModelResults
WHERE ModelID = 1;
```

### Keywords and Phrases
- Model Evaluation Functions
- Teradata Vantage
- Analytics Database
- Model Training Functions
- Deployment
- VantageCloud
- VantageCore
- Enterprise Edition
- IntelliFlex
- VMware
- Analytics Database Release Number 17.20
- Published June 2022
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Scoring Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Non-Deterministic Behavior
- Workload Management Configuration
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency

This summary provides an overview of essential functions and operations in Teradata Vantage's Analytics Database, emphasizing the significance of model evaluation in data analytics.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions","2024-07-27 12:20:36"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator","text/html;charset=UTF-8","200","","Indexable","","TD_ClassificationEvaluator Function | ClassificationEvaluator - TD_ClassificationEvaluator - Analytics Database","111","983","This Analytics Database (SQL Engine) function uses a confusion matrix to visualize the performance of a classifier.","115","706","","0","TD_ClassificationEvaluator Function | ClassificationEvaluator - TD_ClassificationEvaluator - Analytics Database","111","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator","","","","","","211795","14063","14063","4.985","A+","404","84","4.810","34.638","Hard","12.072","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","1.708","","","","","","1.1","## Summary

The `TD_ClassificationEvaluator` function in Teradata Vantage™ is designed to evaluate the performance of classification models by generating metrics from predicted and actual labels. It can handle multi-class classification scenarios and provides both class-level metrics and aggregated metrics such as accuracy, precision, recall, and F1-score. The primary output table includes metrics for each class, while the secondary output table summarizes the overall performance across classes, utilizing various averaging methods. This function is essential for assessing model performance, guiding improvements, and making informed decisions based on the results.

## Code Example

Below are examples of SQL commands for basic database operations such as `SELECT`, `UPDATE`, `DELETE`, and `CREATE` using Teradata syntax.

### 1. **SELECT**
Retrieve data from a table:

```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE country = 'USA';
```

### 2. **UPDATE**
Modify existing records in a table:

```sql
UPDATE customers
SET email = 'new_email@example.com'
WHERE customer_id = 12345;
```

### 3. **DELETE**
Remove records from a table:

```sql
DELETE FROM customers
WHERE customer_id = 12345;
```

### 4. **CREATE**
Create a new table:

```sql
CREATE TABLE customers (
    customer_id INTEGER NOT NULL,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    country VARCHAR(50),
    PRIMARY KEY (customer_id)
);
```

## Keywords and Phrases
- TD_ClassificationEvaluator Function
- ClassificationEvaluator
- TD_ClassificationEvaluator
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Model Evaluation Functions
- Confusion Matrix
- Multi-class Scenarios
- Class-level Metrics
- Micro, Macro, Weighted Metrics
- Accuracy, Precision, Recall, F1-score
- Feature Selection
- Overfitting
- Underfitting
- Logistic Regression
- Decision Trees
- Naïve Bayes
- Model Training Functions

This comprehensive overview provides a foundational understanding of the `TD_ClassificationEvaluator` function and its utility in model performance evaluation within the Teradata Vantage environment.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator","2024-07-27 11:22:05"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/Example-How-to-Use-TD_ClassificationEvaluator","text/html;charset=UTF-8","200","","Indexable","","TD_ClassificationEvaluator Function Example | Teradata Vantage - Example: How to Use TD_ClassificationEvaluator - Analytics Database","132","1215","See an example of the Analytics Database (SQL Engine) function TD_ClassificationEvaluator.","90","571","","0","TD_ClassificationEvaluator Function Example | Teradata Vantage - Example: How to Use TD_ClassificationEvaluator - Analytics Database","132","Database Analytic Functions","27","TD_ClassificationEvaluator Input Table","38","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/Example-How-to-Use-TD_ClassificationEvaluator","","","","","","210823","13338","13338","4.728","A+","279","117","2.385","24.905","Very Hard","12.306","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.978","","","","","","1.1","### Summary

The **TD_ClassificationEvaluator** function in Teradata Vantage is designed to assess the performance of classification models by comparing the observed values against the predicted values from a model. This function provides both primary and secondary output tables containing key metrics such as precision, recall, F1 score, and accuracy that can help in evaluating how well the model performs across various classes.

### Code Example

Below are examples of SQL commands that demonstrate how to perform basic operations such as `SELECT`, `UPDATE`, `DELETE`, and `CREATE` in the context of using the **TD_ClassificationEvaluator** function.

#### 1. Create Table
```sql
CREATE TABLE iris_pred (
    id INTEGER,
    observed_value VARCHAR(50),
    predicted_value VARCHAR(50)
);
```

#### 2. Insert Data
```sql
INSERT INTO iris_pred (id, observed_value, predicted_value) VALUES
(5, 'setosa', 'setosa'),
(10, 'setosa', 'setosa'),
(15, 'setosa', 'setosa'),
(55, 'versicolor', 'versicolor'),
(105, 'virginica', 'virginica');
```

#### 3. Select Data
```sql
SELECT * FROM iris_pred;
```

#### 4. Update Data
```sql
UPDATE iris_pred
SET predicted_value = 'versicolor'
WHERE id = 15;
```

#### 5. Delete Data
```sql
DELETE FROM iris_pred
WHERE id = 5;
```

#### 6. Evaluate Classification
```sql
SELECT * FROM TD_ClassificationEvaluator (
   ON iris_pred AS InputTable
   OUT TABLE OutputTable (additional_metrics)
   USING
   ObservationColumn ('observed_value')
   PredictionColumn ('predicted_value')
   Labels ('setosa','versicolor','virginica')
) AS dt ORDER BY SeqNum;
```

### Keywords and Phrases
- **TD_ClassificationEvaluator Function Example**
- **Teradata Vantage**
- **Example: How to Use TD_ClassificationEvaluator**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language English (United States)**
- **Last Update 2024-04-06**
- **Product Category Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Model Evaluation Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Hypothesis Testing Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Teradata Links**
- **Related Documentation** 

This structure provides a clear understanding of how to utilize the **TD_ClassificationEvaluator** in conjunction with basic SQL operations within Teradata Vantage.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/Example-How-to-Use-TD_ClassificationEvaluator","2024-07-27 12:25:36"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/Optional-Syntax-Elements-for-TD_ClassificationEvaluator","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_ClassificationEvaluator - Analytics Database","76","690","OUT clause Accept the OutputTable clause. Labels Specify the list of predicted labels. NumLabels Specify the total count of labels.","131","798","","0","Optional Syntax Elements for TD_ClassificationEvaluator - Analytics Database","76","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/Optional-Syntax-Elements-for-TD_ClassificationEvaluator","","","","","","207703","12735","12735","4.515","A+","64","39","1.641","8.210","Very Hard","11.174","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.580","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a robust framework for executing various analytic functions, including data cleaning, feature engineering, model training, and evaluation. The system is designed to handle complex queries and support a wide array of applications in data analysis and machine learning.

The following sections provide code examples for essential SQL operations such as selecting, updating, deleting, and creating tables.

---

### Code Example

#### 1. Create a Table
```sql
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    HireDate DATE,
    Salary DECIMAL(10, 2)
);
```

#### 2. Select Data
```sql
SELECT FirstName, LastName, Salary
FROM Employees
WHERE Salary > 60000
ORDER BY Salary DESC;
```

#### 3. Update Data
```sql
UPDATE Employees
SET Salary = Salary * 1.10
WHERE HireDate < '2020-01-01';
```

#### 4. Delete Data
```sql
DELETE FROM Employees
WHERE HireDate < '2015-01-01';
```

---

### Keywords and Phrases

- **Optional Syntax Elements for TD_ClassificationEvaluator**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **How to Read Syntax**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Avoid Deadlocks Using Volatile Tables**
- **Examples: How to Use TD_ClassificationEvaluator**
- **TD_RegressionEvaluator**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Sessionize**
- **Data Exploration Functions**
- **Feature Engineering Utility Functions**
- **TD_OneHotEncodingTransform**
- **TD_BinCodeTransform** 

This covers a range of essential terms and functions that are relevant to Teradata's Analytics Database, facilitating both understanding and effective application of its features.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/Optional-Syntax-Elements-for-TD_ClassificationEvaluator","2024-07-27 11:50:35"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/Required-Syntax-Elements-for-TD_ClassificationEvaluator","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_ClassificationEvaluator - Analytics Database","76","694","ON clause The function accepts the InputTable clause. The function accepts only one ON clause for the InputTable. ObservationColumn Specify the column name that has observed labels. PredictionColumn Specify the column name that has predicted labels.","249","1582","","0","Required Syntax Elements for TD_ClassificationEvaluator - Analytics Database","76","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/Required-Syntax-Elements-for-TD_ClassificationEvaluator","","","","","","208077","12825","12825","4.547","A+","80","40","2.000","18.685","Very Hard","11.211","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.433","","","","","","1.1","## Summary of Teradata Vantage™ Analytics Database Analytic Functions

Teradata Vantage™ provides a comprehensive suite of analytic functions designed to facilitate various data analysis tasks. Specifically, the **Analytics Database** offers capabilities for data cleaning, exploration, feature engineering, model training, scoring, and evaluation, among others. This enables users to efficiently process and analyze large datasets within the Teradata ecosystem.

The following sections illustrate fundamental SQL operations—SELECT, UPDATE, DELETE, and CREATE—within the context of the Teradata environment.

### Code Example

#### 1. SELECT
```sql
SELECT customer_id, customer_name, order_amount
FROM orders
WHERE order_date >= '2023-01-01'
ORDER BY order_amount DESC;
```

#### 2. UPDATE
```sql
UPDATE customers
SET loyalty_points = loyalty_points + 100
WHERE customer_id = 12345;
```

#### 3. DELETE
```sql
DELETE FROM orders
WHERE order_date < '2022-01-01';
```

#### 4. CREATE
```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    sign_up_date DATE,
    loyalty_points INT DEFAULT 0
);
```

### Keywords and Phrases

- Required Syntax Elements for TD_ClassificationEvaluator
- Analytics Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Function Syntax Descriptions
- Input Table Rows Redistribution
- Limitations When Using PARTITION BY
- Recommendations for Using Analytic Functions
- TD_ConvertTo
- TD_GetRowsWithoutMissingValues
- TD_SimpleImputeTransform
- TD_Unpivoting
- TD_Silhouette
- TD_RegressionEvaluator
- Hypothesis Test Types
- nPath Syntax
- Sessionize Syntax

This structured approach to analytic functions within Teradata Vantage™ allows data professionals to leverage powerful features for sophisticated data analysis and model development.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/Required-Syntax-Elements-for-TD_ClassificationEvaluator","2024-07-27 11:36:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/TD_ClassificationEvaluator-Input","text/html;charset=UTF-8","200","","Indexable","","TD_ClassificationEvaluator Input - Analytics Database","53","476","InputTable Schema Column Data Type Description ObservationColumn BYTEINT, SHORTINT, INTEGER,CHAR, VARCHAR The InputTable column name that has observed labels. PredictionColumn BYTEINT, SHORTINT, INTEGER,CHAR, VARCHAR The InputTable column name that has predicted labels.","270","1842","","0","TD_ClassificationEvaluator Input - Analytics Database","53","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/TD_ClassificationEvaluator-Input","","","","","","209006","13039","13039","4.622","A+","73","39","1.872","0.000","Very Hard","11.160","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.441","","","","","","1.1","### Summary
The Teradata Vantage™ Analytics Database provides a variety of analytic functions to assist with data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This guide outlines the basic SQL commands—SELECT, UPDATE, DELETE, and CREATE—used in managing data within the Analytics Database, along with examples of their syntax.

### Code Examples

#### 1. SELECT
The `SELECT` statement is used to query data from a database. Here is a simple example:

```sql
SELECT *
FROM Customers
WHERE Country = 'USA';
```

#### 2. UPDATE
The `UPDATE` statement modifies existing records in a table. Below is an example:

```sql
UPDATE Customers
SET ContactName = 'John Doe'
WHERE CustomerID = 1;
```

#### 3. DELETE
The `DELETE` statement removes records from a table. Here’s how to use it:

```sql
DELETE FROM Customers
WHERE CustomerID = 1;
```

#### 4. CREATE
The `CREATE` statement is used to create a new table. Below is an example:

```sql
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    OrderDate DATE,
    CustomerID INT,
    Amount DECIMAL(10, 2)
);
```

### Keywords and Phrases
- **TD_ClassificationEvaluator Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Data Cleaning Functions**
- **Pack**
- **StringSimilarity**
- **TD_ConvertTo**
- **TD_GetFutileColumns**
- **TD_GetRowsWithoutMissingValues**
- **TD_OutlierFilterFit**
- **TD_SimpleImputeFit**
- **TD_SimpleImputeTransform**
- **Unpack**
- **Data Exploration Functions**
- **MovingAverage**
- **TD_CategoricalSummary**
- **TD_ColumnSummary**
- **TD_GetRowsWithMissingValues**
- **TD_Histogram**
- **TD_QQNorm**
- **TD_UnivariateStatistics**
- **TD_WhichMax**
- **TD_WhichMin**
- **Feature Engineering Transform Functions**
- **Antiselect**
- **TD_BinCodeFit**
- **TD_BinCodeTransform**
- **TD_ColumnTransformer**
- **TD_FunctionFit**
- **TD_FunctionTransform**
- **TD_NonLinearCombineFit**
- **TD_NonLinearCombineTransform**
- **TD_OneHotEncodingFit**
- **TD_OrdinalEncodingFit**
- **TD_Pivoting**
- **TD_PolynomialFeaturesFit**
- **TD_RandomProjectionFit**
- **TD_RowNormalizeFit**
- **TD_ScaleFit**
- **TD_TargetEncodingFit**
- **TD_Unpivoting**
- **Feature Engineering Utility Functions**
- **TD_FillRowID**
- **TD_NumApply**
- **TD_RoundColumns**
- **TD_StrApply**
- **Model Training Functions**
- **TD_DecisionForest**
- **TD_GLM**
- **TD_KMeans**
- **TD_KNN**
- **TD_OneClassSVM**
- **TD_SVM**
- **TD_XGBoost**
- **Model Scoring Functions**
- **TD_DecisionForestPredict**
- **TD_GLMPredict**
- **TD_KMeansPredict**
- **TD_OneClassSVMPredict**
- **TD_SVMPredict**
- **TD_XGBoostPredict**
- **Model Evaluation Functions**
- **TD_Silhouette**
- **TD_ClassificationEvaluator**
- **TD_RegressionEvaluator**
- **TD_ROC**
- **TD_TrainTestSplit**
- **Text Analytic Functions**
- **NGramSplitter**
- **TD_NaiveBayesTextClassifierPredict**
- **TD_NaiveBayesTextClassifierTrainer**
- **TD_SentimentExtractor**
- **TD_TextParser**
- **TD_TFIDF**
- **TD_WordEmbeddings**
- **Hypothesis Testing Functions**
- **TD_ANOVA**
- **TD_ChiSq**
- **TD_FTest**
- **TD_ZTest**
- **Path and Pattern Analysis Functions**
- **Attribution**
- **nPath**
- **Sessionize**
- **Additional Information**
- **Teradata Links**
- **Related Documentation**
- **InputTable Schema**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/TD_ClassificationEvaluator-Input","2024-07-27 12:18:33"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/TD_ClassificationEvaluator-Output","text/html;charset=UTF-8","200","","Indexable","","TD_ClassificationEvaluator Output - Analytics Database","54","492","Output Table Schema The Primary Output table is as follows: Column Data Type Description SeqNum INTEGER The sequence number of the row. Prediction VARCHAR The column name that has predicted labels. Mapping VARCHAR The mapping used for the label. Class_N BIGINT The N columns denoting N labels. Precision REAL The positiv...","323","2106","","0","TD_ClassificationEvaluator Output - Analytics Database","54","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/TD_ClassificationEvaluator-Output","","","","","","213101","13531","13531","4.797","A+","184","53","3.472","48.364","Hard","11.249","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.580","","","","","","1.1","# Teradata Vantage™ Analytics Database Overview

The **Teradata Vantage™ Analytics Database** provides a robust platform for advanced analytics, offering various functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This document outlines some essential SQL commands, along with examples for basic database operations such as **Select**, **Update**, **Delete**, and **Create**.

## Summary of SQL Commands

1. **Select**: Retrieve data from one or more tables.
2. **Update**: Modify existing data within a table.
3. **Delete**: Remove records from a table.
4. **Create**: Establish a new table or database structure.

### Code Examples

#### 1. **Select**
To select data from a table, you can use the following syntax:
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```
**Example:**
```sql
SELECT FirstName, LastName
FROM Employees
WHERE Department = 'Sales';
```

#### 2. **Update**
To update existing records in a table:
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```
**Example:**
```sql
UPDATE Employees
SET Salary = Salary * 1.10
WHERE Department = 'Sales';
```

#### 3. **Delete**
To delete records from a table:
```sql
DELETE FROM table_name
WHERE condition;
```
**Example:**
```sql
DELETE FROM Employees
WHERE LastName = 'Doe';
```

#### 4. **Create**
To create a new table in the database:
```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```
**Example:**
```sql
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Department VARCHAR(50),
    Salary DECIMAL(10, 2)
);
```

## Keywords and Phrases

- **TD_ClassificationEvaluator Output**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Workload Management Configuration**
- **Non-Deterministic Behavior**
- **Limitations When Using PARTITION BY**
- **Function Names with and without TD Prefix**
- **Recommendations for Using Analytic Functions**
- **Output Table Schema**

This document serves as a foundational guide for working with the Teradata Vantage Analytics Database, enabling users to effectively manipulate and analyze data.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/TD_ClassificationEvaluator-Output","2024-07-27 12:31:06"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/TD_ClassificationEvaluator-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_ClassificationEvaluator Syntax | ClassificationEvaluator - TD_ClassificationEvaluator Syntax - Analytics Database","116","1031","See the syntax of Analytics Database (SQL Engine) function TD_ClassificationEvaluator and read descriptions of its required and optional syntax elements.","153","952","","0","TD_ClassificationEvaluator Syntax | ClassificationEvaluator - TD_ClassificationEvaluator Syntax - Analytics Database","116","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/TD_ClassificationEvaluator-Syntax","","","","","","208471","12990","12990","4.605","A+","105","49","2.143","12.900","Very Hard","11.309","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.613","","","","","","1.1","# Teradata Vantage™: TD_ClassificationEvaluator Overview

The `TD_ClassificationEvaluator` function in Teradata Vantage™ is part of the Analytics Database and is designed to evaluate the performance of classification models. It allows users to calculate various metrics, which are essential for understanding how well a predictive model performs. This function can be used in SELECT statements, CREATE TABLE statements, or CREATE VIEW statements.

## Code Example

Below are examples demonstrating how to use SQL commands for basic operations: Select, Update, Delete, and Create, specifically in the context of using `TD_ClassificationEvaluator`.

### 1. SELECT

To evaluate a classification model using `TD_ClassificationEvaluator`, you can use a SELECT statement as follows:

```sql
SELECT *
FROM TD_ClassificationEvaluator (
   ON (SELECT * FROM my_classification_results) AS InputTable
   OUT TABLE my_evaluation_results
   USING
      ObservationColumn('actual_label')
      PredictionColumn('predicted_label')
      NumLabels(3)
);
```

### 2. UPDATE

To update an existing table with new evaluation metrics calculated from the model evaluation, you might do:

```sql
UPDATE my_evaluation_results
SET accuracy = new_accuracy_metric
WHERE evaluation_id = 1;
```

### 3. DELETE

If you need to remove outdated evaluation results from your table, you can execute:

```sql
DELETE FROM my_evaluation_results
WHERE evaluation_date < CURRENT_DATE - INTERVAL '30' DAY;
```

### 4. CREATE

You can create a new table to store the results of the classification evaluation:

```sql
CREATE TABLE my_evaluation_results (
   evaluation_id INT GENERATED BY DEFAULT AS IDENTITY,
   accuracy FLOAT,
   precision FLOAT,
   recall FLOAT,
   f1_score FLOAT,
   evaluation_date DATE DEFAULT CURRENT_DATE
);
```

## Summary

The `TD_ClassificationEvaluator` function is a powerful tool within Teradata Vantage™ for assessing the performance of classification models. By using SQL commands, users can efficiently manage and analyze their model's output.

## Keywords and Phrases

- TD_ClassificationEvaluator Syntax
- ClassificationEvaluator - TD_ClassificationEvaluator Syntax - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Language: English (United States)
- Last Update 2024-04-06
- Product Category Teradata Vantage™
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Model Training Functions
- Model Evaluation Functions
- TD_GetRowsWithoutMissingValues
- TD_Histogram
- TD_Silhouette
- Model Scoring Functions
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_SVMPredict
- TD_XGBoostPredict
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- TD_TrainTestSplit
- TD_NaiveBayesTextClassifierTrainer
- TD_SentimentExtractor

This overview and examples provide a foundational understanding of utilizing the `TD_ClassificationEvaluator` within Teradata Vantage™ for efficient model evaluation.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/TD_ClassificationEvaluator-Syntax","2024-07-27 12:27:45"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/TD_ClassificationEvaluator-Usage-Notes","text/html;charset=UTF-8","200","","Indexable","","TD_ClassificationEvaluator Usage Notes | ClassificationEvaluator - TD_ClassificationEvaluator Usage Notes - Analytics Database","126","1139","Learn about the usage considerations for the Analytics Database TD_ClassificationEvaluator function.","100","631","","0","TD_ClassificationEvaluator Usage Notes | ClassificationEvaluator - TD_ClassificationEvaluator Usage Notes - Analytics Database","126","Database Analytic Functions","27","Classification Evaluator in Teradata","36","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/TD_ClassificationEvaluator-Usage-Notes","","","","","","210333","13753","13753","4.876","A+","422","85","4.965","33.999","Hard","12.222","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.456","","","","","","1.1","### Summary

Classification is a crucial statistical analysis technique widely utilized across various fields to categorize data into distinct groups based on characteristics. The primary objective of classification algorithms, such as logistic regression, is to find decision boundaries that separate different classes in the data space. The effectiveness of these models is evaluated using various metrics, including accuracy, precision, recall, F1-score, and ROC curve.

In Teradata, the `TD_ClassificationEvaluator` function is instrumental for computing evaluation metrics that help assess and compare multiple classification models. It leverages actual and predicted values to gauge performance, providing insights not only on accuracy but also on precision, recall, and F1-scores across multiple classes.

### Code Example

Here are some SQL examples for common operations (Select, Update, Delete, Create) relevant to the context of classification and the analytics database:

#### 1. **Select**
Selecting data from a table to evaluate the model's predictions:

```sql
SELECT 
    actual_value, 
    predicted_value, 
    model_name 
FROM 
    classification_results 
WHERE 
    model_name = 'LogisticRegression';
```

#### 2. **Update**
Updating the predicted values based on new model predictions:

```sql
UPDATE 
    classification_results 
SET 
    predicted_value = 'New Prediction' 
WHERE 
    model_name = 'LogisticRegression' 
    AND actual_value IS NOT NULL;
```

#### 3. **Delete**
Deleting records of predictions that are no longer relevant:

```sql
DELETE FROM 
    classification_results 
WHERE 
    model_name = 'LogisticRegression' 
    AND timestamp < CURRENT_DATE - INTERVAL '30 days';
```

#### 4. **Create**
Creating a new table to store evaluation metrics for classification models:

```sql
CREATE TABLE classification_evaluation_metrics (
    model_name VARCHAR(50),
    accuracy DECIMAL(5,4),
    precision DECIMAL(5,4),
    recall DECIMAL(5,4),
    f1_score DECIMAL(5,4),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Keywords and Phrases

- **TD_ClassificationEvaluator Usage Notes**
- **ClassificationEvaluator - TD_ClassificationEvaluator Usage Notes**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Multi-class scenarios**
- **Evaluation metrics**
- **Accuracy**
- **Precision**
- **Recall**
- **F1-score**
- **ROC curve**
- **Decision boundary**
- **Likelihood function**
- **Gradient descent**
- **Micro, macro, and weighted-averaged metrics**
- **Class-level metrics**
- **Output tables** 

This concise overview provides a foundational understanding of classification, its evaluation, and practical SQL examples useful in working with classification results in Teradata Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/TD_ClassificationEvaluator-Usage-Notes","2024-07-27 11:37:04"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC","text/html;charset=UTF-8","200","","Indexable","","TD_ROC Function | ROC | Teradata Vantage - TD_ROC - Analytics Database","70","661","Analytics Database function accepts a set of prediction-actual pairs for a binary classification model & calculates a range of discrimination thresholds.","153","926","","0","TD_ROC Function | ROC | Teradata Vantage - TD_ROC - Analytics Database","70","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC","","","","","","211521","14015","14015","4.968","A+","427","85","5.024","56.906","Fairly Hard","12.022","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","0.481","","","","","","1.1","## Overview of Teradata Vantage and the TD_ROC Function

Teradata Vantage is an advanced analytics database that integrates various analytic functions, including data cleaning, exploration, feature engineering, model training, scoring, and evaluation. One of the critical functions in the analytics toolkit is the **TD_ROC** function. This function is used to evaluate the performance of binary classification models by calculating the Receiver Operating Characteristic (ROC) curve, which helps in assessing the model's ability to distinguish between classes.

### TD_ROC Function

The **TD_ROC** function accepts pairs of predicted and actual values, calculating metrics such as:

- True Positive Rate (TPR)
- False Positive Rate (FPR)
- Area Under the Curve (AUC)
- Gini Coefficient

The ROC curve is plotted with TPR against FPR to visually represent the trade-offs between sensitivity and specificity at different thresholds.

### Example Usage of TD_ROC

Here’s how to use the TD_ROC function in Teradata Vantage:

```sql
SELECT *
FROM TD_ROC (
    ON (SELECT actual, predicted FROM predictions_table)
    USING
    (THRESHOLDS (0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
     RETURNING PROBABILITY, TPR, FPR, AUC)
) AS roc_results;
```

### Code Examples for Basic SQL Operations

Here are standard SQL operations that you might use frequently in Teradata:

#### 1. SELECT
Retrieve data from a table.

```sql
SELECT first_name, last_name, email
FROM employees
WHERE department = 'Sales';
```

#### 2. INSERT
Add new data to a table.

```sql
INSERT INTO employees (first_name, last_name, email, department)
VALUES ('John', 'Doe', 'john.doe@example.com', 'Sales');
```

#### 3. UPDATE
Modify existing data in a table.

```sql
UPDATE employees
SET department = 'Marketing'
WHERE last_name = 'Doe';
```

#### 4. DELETE
Remove data from a table.

```sql
DELETE FROM employees
WHERE last_name = 'Doe';
```

### Summary

The **TD_ROC** function is a powerful tool in Teradata Vantage for evaluating the performance of classification models. By leveraging this function alongside standard SQL operations such as SELECT, INSERT, UPDATE, and DELETE, users can effectively manage and analyze their data.

### Keywords and Phrases

- **TD_ROC Function**
- **ROC**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language English (United States)**
- **Last Update 2024-04-06**
- **Product Category Teradata Vantage™**
- **Function Syntax Descriptions**
- **AGGREGATE MEASURE OF PERFORMANCE**
- **Area Under the Curve (AUC)**
- **True Positive Rate (TPR)**
- **False Positive Rate (FPR)**
- **Model Evaluation Functions** 
- **SQL Operations** 
- **SELECT, INSERT, UPDATE, DELETE**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC","2024-07-27 11:19:57"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/Example-How-to-Use-TD_ROC","text/html;charset=UTF-8","200","","Indexable","","TD_ROC Example | ROC | Teradata Vantage - Example: How to Use TD_ROC - Analytics Database","89","855","See an example of the Analytics Database (SQL Engine) function TD_ROC.","70","455","","0","TD_ROC Example | ROC | Teradata Vantage - Example: How to Use TD_ROC - Analytics Database","89","Database Analytic Functions","27","TD_ROC Input Table","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/Example-How-to-Use-TD_ROC","","","","","","209455","13070","13070","4.633","A+","208","139","1.496","100.000","Very Easy","11.777","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.141","","","","","","1.1","### Summary

Teradata Vantage provides a powerful analytics database designed for high-performance data processing and analytics. Among its features, it includes a variety of analytic functions, such as those for data cleaning, exploration, and model training. This guide focuses on the core SQL operations: Select, Update, Delete, and Create, which are fundamental for managing data within the Teradata environment.

### Code Examples

#### 1. **Select**
The `SELECT` statement is used to query and retrieve data from tables.

```sql
SELECT model, observation, probability 
FROM roc_input;
```

#### 2. **Update**
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE roc_input 
SET probability = 0.600000000 
WHERE model = 1 AND observation = 0;
```

#### 3. **Delete**
The `DELETE` statement is used to remove records from a table.

```sql
DELETE FROM roc_input 
WHERE model = 2 AND observation = 1;
```

#### 4. **Create**
The `CREATE` statement is used to create a new table.

```sql
CREATE TABLE roc_input (
    model INT,
    observation INT,
    probability FLOAT
);
```

### Keywords and Phrases
- TD_ROC Example
- ROC
- Teradata Vantage - Example: How to Use TD_ROC
- Analytics Database
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- TD_ROC Syntax
- Input Table
- Output Table
- AUC
- GINI","27","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/Example-How-to-Use-TD_ROC","2024-07-27 11:43:58"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/Optional-Syntax-Elements-for-TD_ROC","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_ROC - Analytics Database","56","524","OUT clause Accepts the OutputTable clause. ModelIDColumn Specifies the InputTable column name that contains the model or partition identifiers for the ROC curves. PositiveLabel Specifies the positive class label. Default: 1. NumThresholds Specifies the thresholds number for this function. The value must be in the range...","323","1990","","0","Optional Syntax Elements for TD_ROC - Analytics Database","56","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/Optional-Syntax-Elements-for-TD_ROC","","","","","","208815","13180","13180","4.672","A+","182","62","2.935","53.714","Fairly Hard","11.476","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.494","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database includes a variety of analytic functions that allow users to manipulate, analyze, and derive insights from their data. Key functionalities include data cleaning, feature engineering, model training, and evaluation. Among these is the TD_ROC function, used for calculating the Receiver Operating Characteristic (ROC) curve, which is crucial for evaluating the performance of classification models.

### Code Examples

Here are examples of basic SQL commands for selecting, updating, deleting, and creating tables in the Teradata Analytics Database.

#### Create Table
```sql
CREATE TABLE CustomerData (
    CustomerID INT,
    CustomerName VARCHAR(100),
    Email VARCHAR(100),
    Phone VARCHAR(15),
    RegistrationDate DATE
);
```

#### Insert Data
```sql
INSERT INTO CustomerData (CustomerID, CustomerName, Email, Phone, RegistrationDate)
VALUES (1, 'John Doe', 'johndoe@example.com', '123-456-7890', '2023-01-01');
```

#### Select Data
```sql
SELECT CustomerName, Email
FROM CustomerData
WHERE RegistrationDate >= '2023-01-01';
```

#### Update Data
```sql
UPDATE CustomerData
SET Email = 'john.doe@newdomain.com'
WHERE CustomerID = 1;
```

#### Delete Data
```sql
DELETE FROM CustomerData
WHERE CustomerID = 1;
```

### Keywords and Phrases

- **Optional Syntax Elements for TD_ROC** 
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This overview provides a clear understanding of how to interact with the Teradata Analytics Database and highlights the essential functions and elements relevant to data analysis and management.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/Optional-Syntax-Elements-for-TD_ROC","2024-07-27 12:37:52"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/Required-Syntax-Elements-for-TD_ROC","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_ROC - Analytics Database","56","528","ON clause Accepts the InputTable clause. ProbabilityColumn Specifies the InputTable column name that contains the probability values for predictions. ObservationColumn Specifies the InputTable column name that contains the actual classes.","238","1499","","0","Required Syntax Elements for TD_ROC - Analytics Database","56","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/Required-Syntax-Elements-for-TD_ROC","","","","","","207837","12763","12763","4.525","A+","74","40","1.850","9.463","Very Hard","11.209","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.580","","","","","","1.1","### Summary

In Teradata Vantage's Analytics Database, various operations can be performed using SQL-like commands. The fundamental operations include **Select**, **Update**, **Delete**, and **Create**. These commands allow users to manipulate and query data effectively. Below, we present examples of each operation to illustrate their usage.

### Code Examples

1. **Select**
   ```sql
   SELECT 
       customer_id, 
       first_name, 
       last_name 
   FROM 
       customers 
   WHERE 
       city = 'New York';
   ```

2. **Update**
   ```sql
   UPDATE 
       customers 
   SET 
       city = 'Los Angeles' 
   WHERE 
       customer_id = 12345;
   ```

3. **Delete**
   ```sql
   DELETE FROM 
       customers 
   WHERE 
       last_purchase_date < '2020-01-01';
   ```

4. **Create**
   ```sql
   CREATE TABLE new_customers (
       customer_id INT PRIMARY KEY,
       first_name VARCHAR(50),
       last_name VARCHAR(50),
       email VARCHAR(100)
   );
   ```

### Keywords and Phrases

- **Required Syntax Elements for TD_ROC - Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/Required-Syntax-Elements-for-TD_ROC","2024-07-27 12:07:06"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/TD_ROC-Input","text/html;charset=UTF-8","200","","Indexable","","TD_ROC Input - Analytics Database","33","310","Input Table Schema Column Data Type Description model_id_column VARCHAR, CHAR, SMALLINT, BIGINT, INTEGER The model identifier or partition for ROC curve associated with observation. probability_column NUMERIC The predicted probability that the observation is in positive class. observation_column VARCHAR, CHAR, SMALLINT...","323","2098","","0","TD_ROC Input - Analytics Database","33","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/TD_ROC-Input","","","","","","209378","13161","13161","4.666","A+","89","41","2.171","10.717","Very Hard","11.181","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.497","","","","","","1.1","## Summary of Teradata Vantage Analytics Database Functions

The Teradata Vantage Analytics Database provides a comprehensive suite of analytic functions categorized into various domains such as data cleaning, exploration, feature engineering, model training, scoring, and evaluation. These functions facilitate complex data manipulation and modeling, enabling organizations to derive meaningful insights from their data quickly and efficiently.

### Code Example Section

#### 1. Create
To create a new table in the database, you can use the following SQL command:
```sql
CREATE TABLE sales_data (
    sale_id INT,
    customer_id INT,
    sale_amount DECIMAL(10, 2),
    sale_date DATE
);
```

#### 2. Select
To retrieve data from a table, the `SELECT` statement is used:
```sql
SELECT customer_id, SUM(sale_amount) AS total_sales
FROM sales_data
GROUP BY customer_id
ORDER BY total_sales DESC;
```

#### 3. Update
To update existing records in a table, the `UPDATE` statement is utilized:
```sql
UPDATE sales_data
SET sale_amount = sale_amount * 1.10
WHERE sale_date < '2022-01-01';
```

#### 4. Delete
To remove records from a table, the `DELETE` statement is employed:
```sql
DELETE FROM sales_data
WHERE sale_date < '2020-01-01';
```

### Keywords and Phrases
- TD_ROC Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_OutlierFilterTransform
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- Unpack
- Data Exploration Functions
- MovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- Feature Engineering Transform Functions
- Antiselect
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer
- TD_FunctionFit
- TD_FunctionTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_PolynomialFeaturesFit
- TD_PolynomialFeaturesTransform
- TD_RandomProjectionFit
- TD_RandomProjectionTransform
- TD_RowNormalizeFit
- TD_RowNormalizeTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_Unpivoting
- Feature Engineering Utility Functions
- TD_FillRowID
- TD_NumApply
- TD_RoundColumns
- TD_StrApply
- Model Training Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_KNN
- TD_OneClassSVM
- TD_SVM
- TD_XGBoost
- Model Scoring Functions
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_OneClassSVMPredict
- TD_SVMPredict
- TD_XGBoostPredict
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- Text Analytic Functions
- NGramSplitter
- TD_NaiveBayesTextClassifierPredict
- TD_NaiveBayesTextClassifierTrainer
- TD_SentimentExtractor
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Testing Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Path and Pattern Analysis Functions
- Attribution
- nPath
- Sessionize
- Input Table Schema
- Column Data Type
- Description","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/TD_ROC-Input","2024-07-27 12:49:09"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/TD_ROC-Output","text/html;charset=UTF-8","200","","Indexable","","TD_ROC Output - Analytics Database","34","326","Output Table Schema If the OutputTable is given in OUT clause: Column Data Type Description Model_id VARCHAR, CHAR, SMALLINT, BIGINT, INTEGER The model identifier or partition for ROC curve associated with observation. The column is not displayed if you do not provide the ModelIdColumn syntax element. Threshold REAL Th...","323","2062","","0","TD_ROC Output - Analytics Database","34","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/TD_ROC-Output","","","","","","211806","13523","13523","4.794","A+","221","59","3.746","57.567","Fairly Hard","11.402","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.713","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database provides a suite of analytic functions that enable users to perform complex data analysis. This includes a variety of functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. The functions are designed to handle big data efficiently, leveraging Teradata’s architecture for optimal performance and scalability.

### Code Example

Here are examples of basic SQL operations (SELECT, UPDATE, DELETE, CREATE) using Teradata syntax:

#### 1. SELECT
```sql
SELECT 
    customer_id, 
    first_name, 
    last_name 
FROM 
    customers 
WHERE 
    status = 'active';
```

#### 2. UPDATE
```sql
UPDATE 
    customers 
SET 
    status = 'inactive' 
WHERE 
    last_purchase_date < CURRENT_DATE - INTERVAL '1' YEAR;
```

#### 3. DELETE
```sql
DELETE FROM 
    customers 
WHERE 
    status = 'inactive' 
    AND last_purchase_date < CURRENT_DATE - INTERVAL '6' MONTH;
```

#### 4. CREATE
```sql
CREATE TABLE customer_data (
    customer_id INTEGER NOT NULL,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    last_purchase_date DATE,
    status VARCHAR(20),
    PRIMARY KEY (customer_id)
);
```

### Keywords and Phrases

- **TD_ROC Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number** - 17.20
- **Published** - June 2022
- **Language** - English (United States)
- **Last Update** - 2024-04-06
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category** - Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/TD_ROC-Output","2024-07-27 12:05:55"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/TD_ROC-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_ROC Syntax | ROC | Teradata Vantage - TD_ROC Syntax - Analytics Database","75","709","See the syntax of Analytics Database (SQL Engine) function TD_ROC and read descriptions of its required and optional syntax elements.","133","836","","0","TD_ROC Syntax | ROC | Teradata Vantage - TD_ROC Syntax - Analytics Database","75","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/TD_ROC-Syntax","","","","","","208705","13056","13056","4.628","A+","137","49","2.796","49.618","Hard","11.356","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.128","","","","","","1.1","### Summary of Teradata Vantage: TD_ROC Syntax

Teradata Vantage provides a comprehensive set of analytic functions, one of which is `TD_ROC`. This function is particularly useful for evaluating the performance of classification models by computing the Receiver Operating Characteristic (ROC) curve, which illustrates the trade-off between sensitivity and specificity.

The syntax for the `TD_ROC` function allows users to specify various parameters such as the input table, output table, model identification column, probability column, observation column, positive label, number of thresholds, and options for AUC (Area Under the Curve) and Gini coefficient.

### Code Example Section

#### SELECT Example
```sql
SELECT *
FROM TD_ROC(
    ON my_table AS InputTable
    OUT TABLE my_output_table
    USING
    ModelIDColumn ('model_id')
    ProbabilityColumn ('probability')
    ObservationColumn ('actual')
    PositiveLabel ('1')
    NumThresholds (10)
    AUC ('true')
    Gini ('true')
);
```

#### CREATE TABLE Example
```sql
CREATE TABLE my_output_table AS (
    SELECT *
    FROM TD_ROC(
        ON my_table AS InputTable
        USING
        ModelIDColumn ('model_id')
        ProbabilityColumn ('probability')
        ObservationColumn ('actual')
        PositiveLabel ('1')
        NumThresholds (10)
        AUC ('true')
        Gini ('true')
    )
) WITH NO DATA;
```

#### UPDATE Example
```sql
UPDATE my_output_table
SET auc_value = (SELECT AUC FROM TD_ROC(...))
WHERE model_id = 'specific_model_id';
```

#### DELETE Example
```sql
DELETE FROM my_output_table
WHERE model_id = 'obsolete_model_id';
```

### Keywords and Phrases
- **TD_ROC Syntax**
- **ROC**
- **Teradata Vantage - TD_ROC Syntax - Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Product Category**
- **Teradata Vantage™**
- **Analytics Database Analytic Functions**
- **AUC**
- **Gini**
- **ModelIDColumn**
- **ProbabilityColumn**
- **ObservationColumn**
- **PositiveLabel**
- **NumThresholds**
- **InputTable**
- **OutputTable**
- **CREATE TABLE**
- **SELECT**
- **UPDATE**
- **DELETE** 

This structure ensures a clear understanding of how to implement and utilize the `TD_ROC` function effectively in Teradata Vantage.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/TD_ROC-Syntax","2024-07-27 12:45:36"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator","text/html;charset=UTF-8","200","","Indexable","","TD_RegressionEvaluator Function | RegressionEvaluator - TD_RegressionEvaluator - Analytics Database","99","917","This Analytics Database function computes metrics to evaluate & compare multiple models & summarizes how close predictions are to their expected values.","152","964","","0","TD_RegressionEvaluator Function | RegressionEvaluator - TD_RegressionEvaluator - Analytics Database","99","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator","","","","","","211274","13859","13859","4.913","A+","333","76","4.382","40.555","Hard","11.847","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.839","","","","","","1.1","## Overview of TD_RegressionEvaluator Function

The `TD_RegressionEvaluator` function is designed to evaluate and compare multiple regression models by computing various performance metrics based on the actual and predicted values of the dependent variable. This function is essential for assessing how well a model predicts outcomes and for fine-tuning model performance.

### Key Points:
- **Purpose**: To compute evaluation metrics for regression models.
- **Common Metrics**:
  - Mean Squared Error (MSE)
  - Mean Absolute Error (MAE)
  - R-squared (R²)
- **Usage**: Helps in determining the effectiveness of a regression model and identifying areas for improvement.

### Code Examples

#### 1. Create a Table
```sql
CREATE TABLE model_predictions (
    id INT,
    actual_value FLOAT,
    predicted_value FLOAT
);
```

#### 2. Insert Data
```sql
INSERT INTO model_predictions (id, actual_value, predicted_value) VALUES
(1, 100.0, 98.0),
(2, 200.0, 210.0),
(3, 300.0, 295.0);
```

#### 3. Select Data
```sql
SELECT * FROM model_predictions;
```

#### 4. Update Data
```sql
UPDATE model_predictions
SET predicted_value = 99.0
WHERE id = 1;
```

#### 5. Delete Data
```sql
DELETE FROM model_predictions
WHERE id = 2;
```

#### 6. Evaluate Model Using TD_RegressionEvaluator
```sql
SELECT TD_RegressionEvaluator(actual_value, predicted_value)
FROM model_predictions;
```

### Keywords and Phrases
- **TD_RegressionEvaluator Function**
- **RegressionEvaluator**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Evaluation Metrics**: MSE, MAE, R-squared
- **Feature Selection**
- **Overfitting and Underfitting**

This guide provides a foundational understanding of the `TD_RegressionEvaluator` function, its usage, and common database operations, empowering users to effectively evaluate regression models in Teradata.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator","2024-07-27 12:41:36"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/Example-How-to-Use-TD_RegressionEvaluator","text/html;charset=UTF-8","200","","Indexable","","TD_RegressionEvaluator Example | RegressionEvaluator - Example: How to Use TD_RegressionEvaluator - Analytics Database","118","1111","See an example of the Analytics Database (SQL Engine) function TD_RegressionEvaluator.","86","556","","0","TD_RegressionEvaluator Example | RegressionEvaluator - Example: How to Use TD_RegressionEvaluator - Analytics Database","118","Database Analytic Functions","27","TD_RegressionEvaluator InputTable","33","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/Example-How-to-Use-TD_RegressionEvaluator","","","","","","210702","14144","14144","5.014","A+","269","220","1.223","100.000","Very Easy","12.318","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.692","","","","","","1.1","# Teradata Vantage™: Introduction to Data Manipulation and Regression Evaluation

In this document, we will explore basic SQL commands commonly used in Teradata Vantage™ for data manipulation, including **Select**, **Update**, **Delete**, and **Create** operations. Additionally, we will delve into the usage of the `TD_RegressionEvaluator` function, which is essential for evaluating regression models within the Analytics Database.

## Summary

Teradata Vantage™ provides a robust platform for performing complex analytics and data manipulation. The `TD_RegressionEvaluator` function is invaluable for assessing the performance of regression models by calculating various metrics such as RMSE, R², and F-statistic.

## Code Example

### 1. Select

The `SELECT` statement retrieves data from a database.

```sql
SELECT *
FROM sales_data
WHERE region = 'North America';
```

### 2. Update

The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE sales_data
SET sales_amount = sales_amount * 1.1
WHERE sales_date >= '2023-01-01';
```

### 3. Delete

The `DELETE` statement removes records from a table.

```sql
DELETE FROM sales_data
WHERE sales_amount < 100;
```

### 4. Create

The `CREATE` statement is used to create new tables.

```sql
CREATE TABLE sales_data (
    id INT,
    product_name VARCHAR(100),
    sales_amount DECIMAL(10, 2),
    sales_date DATE
);
```

## Using TD_RegressionEvaluator

The `TD_RegressionEvaluator` function evaluates the performance of regression models based on specified metrics. Below is an example of how to use this function.

### Example SQL Call

```sql
SELECT * FROM TD_RegressionEvaluator(
    ON decision_predict_output AS InputTable
    USING
        ObservationColumn('price')
        PredictionColumn('prediction')
        Metrics('RMSE', 'R2', 'FSTAT')
        DegreesOfFreedom(5, 48)
        NUMOFINDEPENDENTVARIABLES(5)
) AS dt;
```

### TD_RegressionEvaluator Output Table

| RMSE          | R²           | F_SCORE       | F_CRITICALVALUE | P_VALUE       | F_CONCLUSION                     |
|---------------|--------------|---------------|------------------|---------------|----------------------------------|
| 9604.40592583 | 0.888090785  | 66.047306996  | 2.408514119      | 0.000000000    | Reject null hypothesis            |

## Keywords and Phrases

- TD_RegressionEvaluator Example
- RegressionEvaluator - Example: How to Use TD_RegressionEvaluator
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Evaluation Functions
- TD_RegressionEvaluator InputTable
- RMSE, R², F-statistic
- Metrics
- SQL Call
- Reject null hypothesis

This guide should serve as a foundational reference for executing basic SQL operations in Teradata and utilizing the `TD_RegressionEvaluator` for model evaluation.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/Example-How-to-Use-TD_RegressionEvaluator","2024-07-27 12:13:31"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/Optional-Syntax-Elements-in-TD_RegressionEvaluator","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements in TD_RegressionEvaluator - Analytics Database","71","659","Metrics Specifies the list of evaluation metrics. The function returns the following metrics if the list is not provided: Metrics Description MAE Mean absolute error (MAE) is the arithmetic average of the absolute errors between observed values and predicted values. MSE Mean squared error (MSE) is the average of the sq...","323","1962","","0","Optional Syntax Elements in TD_RegressionEvaluator - Analytics Database","71","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/Optional-Syntax-Elements-in-TD_RegressionEvaluator","","","","","","214930","14119","14119","5.005","A+","442","86","5.140","58.066","Fairly Hard","11.971","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.109","","","","","","1.1","## Summary of the Analytics Database Analytic Functions

The Analytics Database provides a comprehensive suite of functions designed for data analysis and model evaluation within Teradata Vantage. Key categories of functions include data cleaning, data exploration, feature engineering, model training, scoring, and evaluation. These functions leverage advanced analytic capabilities, enabling users to perform complex data manipulations and derive insights efficiently.

### Code Examples

Here are examples demonstrating the basic SQL operations: Select, Update, Delete, and Create in the context of an Analytics Database.

#### 1. **Select**
```sql
SELECT 
    customer_id, 
    first_name, 
    last_name, 
    email 
FROM 
    customers 
WHERE 
    status = 'active';
```

#### 2. **Update**
```sql
UPDATE 
    customers 
SET 
    status = 'inactive' 
WHERE 
    last_purchase_date < '2022-01-01';
```

#### 3. **Delete**
```sql
DELETE FROM 
    customers 
WHERE 
    account_balance < 0;
```

#### 4. **Create**
```sql
CREATE TABLE sales_summary (
    sale_id INT PRIMARY KEY,
    customer_id INT,
    sale_date DATE,
    total_amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);
```

---

### Keywords and Phrases

- **Optional Syntax Elements in TD_RegressionEvaluator**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Workload Management Configuration**
- **Deadlocks Using Volatile Tables**
- **Datatypes Change in Accumulated Columns**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Metrics**
- **Mean Absolute Error (MAE)**
- **Mean Squared Error (MSE)**
- **Root Mean Squared Error (RMSE)**
- **R Squared (R²)**
- **F-statistics (FSTAT)**
- **P-value**
- **F-test**
- **Adjusted R-squared (AR²)**
- **Explained Variation (EV)**

These keywords encapsulate the primary components and functionalities of the Analytics Database and its analytic functions.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/Optional-Syntax-Elements-in-TD_RegressionEvaluator","2024-07-27 12:33:38"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/Required-Syntax-Elements-for-TD_RegressionEvaluator","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_RegressionEvaluator - Analytics Database","72","672","ON clause Accepts the InputTable clause. ObservationColumn Specifies the column name that has observation values. PredictionColumn Specifies the column name that has prediction values.","184","1179","","0","Required Syntax Elements for TD_RegressionEvaluator - Analytics Database","72","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/Required-Syntax-Elements-for-TD_RegressionEvaluator","","","","","","207794","12733","12733","4.514","A+","68","39","1.744","4.762","Very Hard","11.193","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.541","","","","","","1.1","# TD_RegressionEvaluator Overview

The **TD_RegressionEvaluator** is a powerful function in the Teradata Vantage™ analytics database that allows users to evaluate the performance of regression models. It provides metrics such as R-squared, Mean Absolute Error (MAE), and Root Mean Squared Error (RMSE) to help assess how well a regression model fits the data.

## Summary of Key Features
- **Functionality**: Evaluates regression models based on predicted and actual values.
- **Output**: Provides key metrics for model performance assessment.
- **Use Cases**: Ideal for data scientists and analysts looking to validate model predictions.

## Code Examples

### 1. Create a Table
```sql
CREATE TABLE regression_data (
    id INT,
    actual_value FLOAT,
    predicted_value FLOAT
);
```

### 2. Insert Sample Data
```sql
INSERT INTO regression_data (id, actual_value, predicted_value) VALUES
(1, 10.0, 9.5),
(2, 20.0, 19.5),
(3, 30.0, 29.0),
(4, 40.0, 38.5);
```

### 3. Select Data
```sql
SELECT * FROM regression_data;
```

### 4. Update Values
```sql
UPDATE regression_data
SET predicted_value = 9.8
WHERE id = 1;
```

### 5. Delete Records
```sql
DELETE FROM regression_data
WHERE id = 4;
```

### 6. Evaluate Regression Model
```sql
SELECT TD_RegressionEvaluator(actual_value, predicted_value) AS evaluation_metrics
FROM regression_data;
```

## Keywords and Phrases

- Required Syntax Elements for TD_RegressionEvaluator
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Model Evaluation Functions
- Usage Notes
- Examples: How to Use TD_RegressionEvaluator
- R-squared
- Mean Absolute Error (MAE)
- Root Mean Squared Error (RMSE)
- Input Table Rows Redistribution
- Maximum Number of Columns in a Database Table
- Recommendations for Using Analytic Functions
- Workload Management Configuration
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Spool Space Exhaustion
- Input Table Schemas","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/Required-Syntax-Elements-for-TD_RegressionEvaluator","2024-07-27 12:04:01"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/TD_RegressionEvaluator-Input","text/html;charset=UTF-8","200","","Indexable","","TD_RegressionEvaluator Input - Analytics Database","49","454","Input Table Schema Column Data Type Description Metrics BYTEINT, SMALLINT, INTEGER, BIGINT, DECIMAL, NUMERIC, FLOAT, REAL, DOUBLE PRECISION. The observation values. Prediction_Column BYTEINT, SMALLINT, INTEGER, BIGINT, DECIMAL, NUMERIC, FLOAT, REAL, DOUBLE PRECISION. The prediction values.","290","1976","","0","TD_RegressionEvaluator Input - Analytics Database","49","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/TD_RegressionEvaluator-Input","","","","","","209114","13108","13108","4.647","A+","76","41","1.854","1.246","Very Hard","11.162","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.605","","","","","","1.1","# Overview of Teradata Vantage™ Analytics Database Analytic Functions

The Teradata Vantage™ Analytics Database provides a robust set of analytic functions that facilitate data analysis, model training, evaluation, and more. This document outlines key functionalities and provides code examples for common database operations.

## Code Example Section

### 1. Create

To create a new table in the database, use the following SQL command:

```sql
CREATE TABLE SalesData (
    SaleID INT,
    SaleAmount DECIMAL(10, 2),
    SaleDate DATE
);
```

### 2. Select

To retrieve data from a table, you can execute a SELECT statement:

```sql
SELECT SaleID, SaleAmount, SaleDate
FROM SalesData
WHERE SaleAmount > 100.00;
```

### 3. Update

To modify existing records in a table, use the UPDATE statement:

```sql
UPDATE SalesData
SET SaleAmount = SaleAmount * 1.1
WHERE SaleDate < '2023-01-01';
```

### 4. Delete

To remove records from a table, you can use the DELETE statement:

```sql
DELETE FROM SalesData
WHERE SaleAmount < 50.00;
```

## Summary

This document provides a foundational understanding of using Teradata Vantage™ Analytics Database analytic functions, including the essential SQL operations: Create, Select, Update, and Delete. These operations allow users to manage and analyze data effectively.

## Keywords and Phrases

- TD_RegressionEvaluator Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Analytic Functions Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Recommendations for Using Analytic Functions
- Usage Notes
- Example Use Cases

This list encompasses key concepts and terminologies that are crucial for understanding and utilizing the Teradata Vantage™ Analytics Database effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/TD_RegressionEvaluator-Input","2024-07-27 11:38:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/TD_RegressionEvaluator-Output","text/html;charset=UTF-8","200","","Indexable","","TD_RegressionEvaluator Output - Analytics Database","50","470","Output Table Schema Column Data Type Description Metricsi FLOAT Displays the metrics specified in the Metrics syntax element. For FSTAT, the following columns display: F_score F_Critcialvalue P_value F_Conclusion","212","1335","","0","TD_RegressionEvaluator Output - Analytics Database","50","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/TD_RegressionEvaluator-Output","","","","","","208759","13117","13117","4.650","A+","73","41","1.780","23.080","Very Hard","11.144","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.569","","","","","","1.1","### Summary of Teradata Vantage™ Analytics Database Analytic Functions

Teradata Vantage™ provides a robust platform for performing various analytic functions on datasets. These functions are categorized into data cleaning, data exploration, feature engineering, model training, scoring, and evaluation, among others. This guide highlights fundamental SQL operations (Select, Update, Delete, Create) that are commonly used in managing and querying data within the Teradata environment. 

### Code Example Section

#### 1. Select
The `SELECT` statement is used to retrieve data from a database. The basic syntax is:

```sql
SELECT column1, column2, ...
FROM table_name
WHERE condition;
```

**Example:**
```sql
SELECT employee_id, employee_name, department
FROM employees
WHERE department = 'Sales';
```

#### 2. Update
The `UPDATE` statement is used to modify existing records in a table. The syntax is:

```sql
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;
```

**Example:**
```sql
UPDATE employees
SET department = 'Marketing'
WHERE employee_id = 101;
```

#### 3. Delete
The `DELETE` statement is used to remove records from a table. The syntax is:

```sql
DELETE FROM table_name
WHERE condition;
```

**Example:**
```sql
DELETE FROM employees
WHERE employee_id = 102;
```

#### 4. Create
The `CREATE TABLE` statement is used to create a new table in the database. The syntax is:

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example:**
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    employee_name VARCHAR(100),
    department VARCHAR(50)
);
```

### Keywords and Phrases
- **TD_RegressionEvaluator Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Workload Management Configuration**
- **Non-Deterministic Behavior**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Recommendations for Using Analytic Functions**
- **Example Syntax and Usage Notes** 

This structured approach provides a clear understanding of basic SQL operations while also emphasizing the capabilities and functionalities of the Teradata Vantage™ Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/TD_RegressionEvaluator-Output","2024-07-27 11:55:29"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/TD_RegressionEvaluator-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_RegressionEvaluator Syntax | RegressionEvaluator - TD_RegressionEvaluator Syntax - Analytics Database","104","965","See the syntax of Analytics Database (SQL Engine) function TD_RegressionEvaluator and read descriptions of its required and optional syntax elements.","149","937","","0","TD_RegressionEvaluator Syntax | RegressionEvaluator - TD_RegressionEvaluator Syntax - Analytics Database","104","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/TD_RegressionEvaluator-Syntax","","","","","","208251","12970","12970","4.598","A+","97","48","2.021","8.547","Very Hard","11.297","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.656","","","","","","1.1","### Summary

The `TD_RegressionEvaluator` function in Teradata's Analytics Database is used to evaluate the performance of regression models by comparing observed values to predicted values. This function can compute various metrics to assess the model's accuracy, including metrics like Mean Absolute Error (MAE), Root Mean Square Error (RMSE), and R-squared. This makes it a valuable tool for data scientists and analysts working with regression models.

### Code Example

Here are examples demonstrating the basic SQL operations: Select, Update, Delete, and Create, using the `TD_RegressionEvaluator`.

#### 1. **Select**
```sql
SELECT 
    * 
FROM 
    TD_RegressionEvaluator(
        ON my_table AS InputTable
        USING 
        ObservationColumn('actual_values')
        PredictionColumn('predicted_values')
        Metrics('RMSE', 'MAE', 'R-squared')
    );
```

#### 2. **Update**
```sql
UPDATE my_table
SET predicted_values = new_predictions
WHERE condition_column = some_condition;
```

#### 3. **Delete**
```sql
DELETE FROM my_table
WHERE condition_column = some_condition;
```

#### 4. **Create**
```sql
CREATE TABLE my_evaluation AS (
    SELECT 
        * 
    FROM 
        TD_RegressionEvaluator(
            ON my_table AS InputTable
            USING 
            ObservationColumn('actual_values')
            PredictionColumn('predicted_values')
            Metrics('RMSE', 'MAE', 'R-squared')
        )
) WITH NO DATA;
```

### Keywords and Phrases

- **TD_RegressionEvaluator Syntax**
- **RegressionEvaluator - TD_RegressionEvaluator Syntax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/TD_RegressionEvaluator-Syntax","2024-07-27 12:34:51"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/TD_RegressionEvaluator-Usage-Notes","text/html;charset=UTF-8","200","","Indexable","","TD_RegressionEvaluator Usage Notes | Teradata Vantage - TD_RegressionEvaluator Usage Notes - Analytics Database","111","1051","Learn about the techniques with using the Analytics Database (SQL Engine) model evaluation function TD_RegressionEvaluator.","123","790","","0","TD_RegressionEvaluator Usage Notes | Teradata Vantage - TD_RegressionEvaluator Usage Notes - Analytics Database","111","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/TD_RegressionEvaluator-Usage-Notes","","","","","","244548","21759","21759","7.714","A+","314","65","4.831","62.369","Normal","11.703","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.991","","","","","","1.1","### Summary: TD_RegressionEvaluator in Teradata Vantage

The `TD_RegressionEvaluator` function in Teradata Vantage is designed to assess the performance of regression models by calculating various metrics. These metrics help determine how well the model predicts the dependent variable based on the independent variables. The function provides essential outputs such as R-squared, mean squared error (MSE), and mean absolute error (MAE), which are critical for evaluating the accuracy and reliability of the regression model.

### Code Example

Here's a set of SQL code examples demonstrating basic operations such as `SELECT`, `UPDATE`, `DELETE`, and `CREATE` related to regression evaluation in Teradata Vantage.

#### 1. **SELECT**: Retrieve regression evaluation metrics
```sql
SELECT 
    ModelID, 
    R_Squared, 
    Mean_Squared_Error, 
    Mean_Absolute_Error 
FROM 
    RegressionResults 
WHERE 
    ModelID = 'Model_1';
```

#### 2. **UPDATE**: Update regression metrics after retraining the model
```sql
UPDATE 
    RegressionResults 
SET 
    R_Squared = 0.85, 
    Mean_Squared_Error = 2.34, 
    Mean_Absolute_Error = 1.20 
WHERE 
    ModelID = 'Model_1';
```

#### 3. **DELETE**: Remove obsolete regression evaluation results
```sql
DELETE FROM 
    RegressionResults 
WHERE 
    ModelID = 'Model_1' AND 
    EvaluationDate < '2023-01-01';
```

#### 4. **CREATE**: Create a new table for storing regression results
```sql
CREATE TABLE RegressionResults (
    ModelID VARCHAR(50),
    R_Squared FLOAT,
    Mean_Squared_Error FLOAT,
    Mean_Absolute_Error FLOAT,
    EvaluationDate DATE
);
```

### Keywords and Phrases

- **TD_RegressionEvaluator Usage Notes** 
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product Category**: Teradata Vantage™ 
- **Model Evaluation Functions**
- **R-squared**
- **Mean Squared Error (MSE)**
- **Mean Absolute Error (MAE)**
- **Linear Regression**
- **Ordinary Least Squares (OLS)**
- **Gradient Descent**
- **Performance Metrics**
- **SSE (Sum of Squared Errors)**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Workload Management Configuration**
- **Non-Deterministic Behavior**
- **Recommendations for Using Analytic Functions**
- **Data Cleaning Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Training and Evaluation** 

This summary provides a concise overview of the `TD_RegressionEvaluator` and its relevant SQL operations, alongside important keywords that encapsulate its usage and context within Teradata Vantage's analytics capabilities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/TD_RegressionEvaluator-Usage-Notes","2024-07-27 11:58:34"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette","text/html;charset=UTF-8","200","","Indexable","","TD_Silhouette Function | Silhouette | Teradata Vantage - TD_Silhouette - Analytics Database","91","817","This Analytics Database (SQL Engine) function determines how well the data is clustered among clusters.","103","648","","0","TD_Silhouette Function | Silhouette | Teradata Vantage - TD_Silhouette - Analytics Database","91","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette","","","","","","220994","16125","16125","5.716","A+","1392","224","6.214","73.263","Fairly Easy","14.154","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","0.747","","","","","","1.1","## Summary
The TD_Silhouette function in Teradata Vantage is a powerful analytic tool used to assess the quality of clustering algorithms by calculating the silhouette coefficient for each data point. This coefficient measures how similar a data point is to its own cluster compared to other clusters. Ranging from -1 to 1, higher values indicate better clustering performance, while values closer to -1 suggest improper clustering. The function helps in validating clustering results and can guide the selection of the most appropriate clustering algorithm based on dataset characteristics.

### Code Example
Here is an example of how to use the TD_Silhouette function along with basic SQL operations such as SELECT, UPDATE, DELETE, and CREATE in Teradata:

```sql
-- Create a sample table to store clustering results
CREATE TABLE ClusterData (
    PointID INT,
    ClusterID INT,
    Value1 FLOAT,
    Value2 FLOAT
);

-- Insert sample data into the table
INSERT INTO ClusterData (PointID, ClusterID, Value1, Value2) VALUES
(1, 1, 1.0, 2.0),
(2, 1, 1.5, 2.5),
(3, 2, 5.0, 6.0),
(4, 2, 5.5, 6.5);

-- Select data from the table
SELECT * FROM ClusterData;

-- Update a point's cluster assignment
UPDATE ClusterData
SET ClusterID = 1
WHERE PointID = 3;

-- Delete a data point from the table
DELETE FROM ClusterData
WHERE PointID = 4;

-- Calculate Silhouette Coefficient for the remaining data points
SELECT TD_Silhouette(Value1, Value2, ClusterID) AS SilhouetteScore
FROM ClusterData;
```

### Keywords and Phrases
- **TD_Silhouette Function**
- **Silhouette**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Function Categories**
  - **Data Cleaning Functions**
  - **Data Exploration Functions**
  - **Feature Engineering Transform Functions**
  - **Model Training Functions**
  - **Model Evaluation Functions**
  - **Text Analytic Functions**
  - **Hypothesis Testing Functions**
- **Usage Notes**
- **Limitations**
- **Clustering Algorithms**
  - **K-means**
  - **Hierarchical Clustering**
  - **DBSCAN**
  - **Mean Shift**
  - **Spectral Clustering**
- **Silhouette Coefficient Calculation**
- **Intra-cluster Distance**
- **Inter-cluster Distance**
- **Clustering Quality**
- **Optimal Clustering Parameters**
- **Performance Evaluation**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette","2024-07-27 11:39:49"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/Example-How-to-Use-TD_Silhouette","text/html;charset=UTF-8","200","","Indexable","","TD_Silhouette Example | Silhouette | Teradata Vantage - Example: How to Use TD_Silhouette - Analytics Database","110","1011","See an example of the Analytics Database (SQL Engine) function TD_Silhouette.","77","489","","0","TD_Silhouette Example | Silhouette | Teradata Vantage - Example: How to Use TD_Silhouette - Analytics Database","110","Database Analytic Functions","27","TD_Silhouette InputTable","24","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/Example-How-to-Use-TD_Silhouette","","","","","","210292","13116","13116","4.650","A+","221","115","1.922","52.911","Fairly Hard","11.792","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.721","","","","","","1.1","# TD_Silhouette Example with Teradata Vantage

The TD_Silhouette function in Teradata Vantage is used to evaluate the quality of clustering results by calculating the silhouette score for each data point in a cluster. This score helps in assessing how well each point is clustered, where a higher score indicates better-defined clusters.

## Summary
The silhouette score is defined for each data point and indicates how similar an object is to its own cluster compared to other clusters. The resulting values can be used to determine the optimal number of clusters or assess the clustering quality. The function can return various output types, including individual scores for each point, average scores for each cluster, or overall scores for all points.

## Code Examples

### 1. Select (Using TD_Silhouette for SCORE)
```sql
SELECT * FROM TD_Silhouette(
    ON input_tbl AS InputTable
    USING
        IdColumn('id')
        ClusterIdColumn('clusterid')
        TargetColumns('c1', 'c2')
        OutputType('SCORE')
) AS dt;
```
*Output:*
```
silhouette_score 
---------------- 
     0.856410256
```

### 2. Select (Using TD_Silhouette for SAMPLE_SCORES)
```sql
SELECT * FROM TD_Silhouette(
    ON input_tbl AS InputTable
    USING
        IdColumn('id')
        ClusterIdColumn('clusterid')
        TargetColumns('c1', 'c2')
        OutputType('SAMPLE_SCORES')
) AS dt;
```
*Output:*
```
id clusterid a_i         b_i          silhouette_score 
-- --------- ----------- ------------ ---------------- 
 1         1 1.414213562 10.606601718      0.866666667
 4         2 1.414213562 10.606601718      0.866666667
 3         2 1.414213562  9.192388155      0.846153846
 2         1 1.414213562  9.192388155      0.846153846
```

### 3. Select (Using TD_Silhouette for CLUSTER_SCORES)
```sql
SELECT * FROM TD_Silhouette(
    ON input_tbl AS InputTable
    USING
        IdColumn('id')
        ClusterIdColumn('clusterid')
        TargetColumns('c1', 'c2')
        OutputType('CLUSTER_SCORES')
) AS dt;
```
*Output:*
```
clusterid silhouette_score 
--------- ---------------- 
        1      0.856410256
        2      0.856410256
```

### 4. Select (Using TD_Silhouette with TargetColumns)
```sql
SELECT * FROM TD_Silhouette(
    ON input_tbl AS InputTable
    USING
        IdColumn('id')
        ClusterIdColumn('clusterid')
        TargetColumns('[2:3]')
        OutputType('SCORE')
) AS dt;
```

## Keywords and Phrases
- TD_Silhouette Example
- Silhouette
- Teradata Vantage
- How to Use TD_Silhouette
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Analytics Database Analytic Functions
- Silhouette Score
- Clustering Quality
- Output Types
- Sample Scores
- Cluster Scores
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions","29","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/Example-How-to-Use-TD_Silhouette","2024-07-27 11:21:46"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/Optional-Syntax-Elements-for-TD_Silhouette","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_Silhouette - Analytics Database","63","576","OutputType Specify the output type or format. SCORE: Returns average silhouette score of all input samples. SAMPLE_SCORES: Returns silhouette score for each input sample. CLUSTER_SCORES: Returns average silhouette scores of input samples for each cluster. Default Value: SCORE Accumulate [Applicable for 'SAMPLE_SCORES' ...","323","2065","","0","Optional Syntax Elements for TD_Silhouette - Analytics Database","63","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/Optional-Syntax-Elements-for-TD_Silhouette","","","","","","208168","12965","12965","4.596","A+","102","47","2.170","27.968","Very Hard","11.270","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.545","","","","","","1.1","### Summary
The TD_Silhouette function is part of Teradata Vantage™'s Analytics Database, primarily used for assessing the quality of clusters formed by clustering algorithms. It evaluates how similar an object is to its own cluster compared to other clusters, providing a score that can guide model assessment and improvement.

### Code Examples
Here are examples of how to use common SQL commands like `SELECT`, `UPDATE`, `DELETE`, and `CREATE` in relation to the TD_Silhouette function.

#### 1. Select
To obtain silhouette scores from a clustering result:
```sql
SELECT 
    sample_id,
    silhouette_score
FROM 
    silhouette_results
WHERE 
    output_type = 'SCORE';
```

#### 2. Update
To update the silhouette scores in the results table:
```sql
UPDATE 
    silhouette_results
SET 
    silhouette_score = new_score_value
WHERE 
    sample_id = specific_sample_id;
```

#### 3. Delete
To remove entries from the silhouette results:
```sql
DELETE FROM 
    silhouette_results
WHERE 
    cluster_id = outdated_cluster_id;
```

#### 4. Create
To create a new table for storing silhouette scores:
```sql
CREATE TABLE silhouette_results (
    sample_id INT,
    silhouette_score FLOAT,
    cluster_id INT
);
```

### Keywords and Phrases
- **Optional Syntax Elements for TD_Silhouette**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Product Category: Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Accumulated Columns Impact on Function Performance**
- **Recommendations for Using Analytic Functions**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Output Types: SCORE, SAMPLE_SCORES, CLUSTER_SCORES**
- **Default Value: SCORE**

This overview provides a foundational understanding of TD_Silhouette and its usage in Teradata's Analytics Database, along with key SQL operations you might perform while working with cluster evaluation.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/Optional-Syntax-Elements-for-TD_Silhouette","2024-07-27 12:48:25"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/Required-Syntax-Elements-for-TD_Silhouette","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_Silhouette - Analytics Database","63","580","ON clause Accept the InputTable clause. IdColumn Specify the unique identifier column name. ClusterIdColumn Specify the column name that contains the assigned clusterIds for the input data points. TargetColumns Specify the features or columns for clustering.","258","1616","","0","Required Syntax Elements for TD_Silhouette - Analytics Database","63","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/Required-Syntax-Elements-for-TD_Silhouette","","","","","","207956","12830","12830","4.548","A+","80","42","1.905","18.782","Very Hard","11.216","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.488","","","","","","1.1","## Summary

The TD_Silhouette function in the Teradata Vantage™ Analytics Database is utilized to evaluate clustering results by calculating the silhouette score, which reflects how similar an object is to its own cluster compared to other clusters. A high silhouette score indicates that the object is well-clustered, while a negative score suggests that it may have been assigned to the wrong cluster.

## Code Example

### Create a Table

```sql
CREATE TABLE customer_data (
    customer_id INT,
    age INT,
    income FLOAT,
    cluster_id INT
);
```

### Insert Data

```sql
INSERT INTO customer_data (customer_id, age, income, cluster_id) VALUES 
(1, 25, 50000, 1),
(2, 35, 60000, 1),
(3, 45, 70000, 2),
(4, 55, 80000, 2);
```

### Select Data

```sql
SELECT * FROM customer_data;
```

### Update Data

```sql
UPDATE customer_data
SET income = income * 1.1
WHERE cluster_id = 1;
```

### Delete Data

```sql
DELETE FROM customer_data
WHERE customer_id = 1;
```

### Use TD_Silhouette

```sql
SELECT TD_Silhouette(
    InputTable => 'customer_data',
    IdColumn => 'customer_id',
    ClusterIdColumn => 'cluster_id',
    TargetColumns => 'age, income'
) AS silhouette_score;
```

## Keywords and Phrases

- Required Syntax Elements for TD_Silhouette
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Names with and without TD Prefix
- Model Evaluation Functions
- Clustering Metrics
- TD_Silhouette Example
- Evaluating Clustering Quality
- SQL Syntax for Analytic Functions
- Data Exploration Functions
- Model Training Functions
- Feature Engineering Utility Functions
- Hypothesis Testing Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Workload Management Configuration for Analytics Database
- Non-Deterministic Behavior
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Data Cleaning Functions
- Input Table Schemas","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/Required-Syntax-Elements-for-TD_Silhouette","2024-07-27 12:39:54"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/TD_Silhouette-Input","text/html;charset=UTF-8","200","","Indexable","","TD_Silhouette Input - Analytics Database","40","362","Input Table Schema Column Data Type Description id_column ANY The unique identifier column of the input table. clusterid_column BYTEINT, SMALLINT, INTEGER, BIGINT The column that contains the assigned cluster identifiers for the input data points. TargetColumns BYTEINT, SMALLINT,INTEGER, BIGINT, DECIMAL/NUMERIC, FLOAT,...","323","2097","","0","TD_Silhouette Input - Analytics Database","40","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/TD_Silhouette-Input","","","","","","209406","13198","13198","4.679","A+","90","40","2.250","16.551","Very Hard","11.183","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","20.941","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions designed for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. These functions are critical for data scientists and analysts working with large datasets, enabling them to extract valuable insights and make data-driven decisions.

The following code examples illustrate basic SQL operations such as selecting, updating, deleting, and creating records in the context of Teradata Vantage.

### Code Example

#### 1. Select
To retrieve data from a table:

```sql
SELECT *
FROM my_table
WHERE column_name = 'value';
```

#### 2. Update
To update existing records in a table:

```sql
UPDATE my_table
SET column_name = 'new_value'
WHERE condition_column = 'condition_value';
```

#### 3. Delete
To remove records from a table:

```sql
DELETE FROM my_table
WHERE condition_column = 'condition_value';
```

#### 4. Create
To create a new table:

```sql
CREATE TABLE new_table (
    id_column INTEGER,
    name_column VARCHAR(100),
    value_column DECIMAL(10, 2)
);
```

### Keywords and Phrases
- TD_Silhouette Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_OutlierFilterTransform
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- Unpack
- Data Exploration Functions
- MovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- Feature Engineering Transform Functions
- Antiselect
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer
- TD_FunctionFit
- TD_FunctionTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_PolynomialFeaturesFit
- TD_PolynomialFeaturesTransform
- TD_RandomProjectionFit
- TD_RandomProjectionTransform
- TD_RowNormalizeFit
- TD_RowNormalizeTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_Unpivoting
- Feature Engineering Utility Functions
- TD_FillRowID
- TD_NumApply
- TD_RoundColumns
- TD_StrApply
- Model Training Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_KNN
- TD_OneClassSVM
- TD_SVM
- TD_VectorDistance
- TD_XGBoost
- Model Scoring Functions
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_OneClassSVMPredict
- TD_SVMPredict
- TD_XGBoostPredict
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- Text Analytic Functions
- NGramSplitter
- TD_NaiveBayesTextClassifierPredict
- TD_NaiveBayesTextClassifierTrainer
- TD_SentimentExtractor
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Testing Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Path and Pattern Analysis Functions
- Attribution
- nPath
- Sessionize
- Input Table Schema
- Column Data Type Description","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/TD_Silhouette-Input","2024-07-27 12:25:09"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/TD_Silhouette-Output","text/html;charset=UTF-8","200","","Indexable","","TD_Silhouette Output - Analytics Database","41","378","Output Table Schema for SCORE Column Data Type Description Silhouette_Score REAL Silhouette Coefficient (that is, the Mean Silhouette Score) Output Table Schema for SAMPLE_SCORES Column Data Type Description id_Column ANY The unique identifier of input rows copied from the input table. clusterid_Column BYTEINT, SMALLIN...","323","2081","","0","TD_Silhouette Output - Analytics Database","41","Database Analytic Functions","27","Output Table Schema for SCORE","29","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/TD_Silhouette-Output","","","","","","213307","13478","13478","4.778","A+","181","53","3.415","44.919","Hard","11.251","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.493","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a suite of analytic functions that allow users to perform data manipulation and analysis efficiently. The functions are categorized into various segments, including data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Within these categories, users can execute operations such as creating, selecting, updating, and deleting data.

This document includes a ""Code Example"" section that illustrates how to execute basic SQL commands: Select, Update, Delete, and Create. These operations are foundational for managing data effectively within the Analytics Database.

### Code Example

#### 1. Select
To retrieve data from a specific table, the `SELECT` statement is used. 

```sql
SELECT column1, column2
FROM your_table
WHERE condition;
```

#### 2. Update
To modify existing records in a table, the `UPDATE` statement is employed. 

```sql
UPDATE your_table
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 3. Delete
To remove records from a table, the `DELETE` statement is utilized.

```sql
DELETE FROM your_table
WHERE condition;
```

#### 4. Create
To create a new table, the `CREATE TABLE` statement is used.

```sql
CREATE TABLE new_table (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Keywords and Phrases
- **TD_Silhouette Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**: gjn1627595495337.ditamap
- **dita:ditavalPath**: ayr1485454803741.ditaval
- **dita:id**: jmh1512506877710
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Workload Management Configuration**
- **Non-Deterministic Behavior**
- **Limitations When Using PARTITION BY**

This summary and examples serve as a foundational guide to understanding and utilizing the Teradata Vantage™ Analytics Database effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/TD_Silhouette-Output","2024-07-27 12:37:37"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/TD_Silhouette-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_Silhouette Syntax | Silhouette | Teradata Vantage - TD_Silhouette Syntax - Analytics Database","96","865","See the syntax of Analytics Database (SQL Engine) function TD_Silhouette and read descriptions of its required and optional syntax elements.","140","870","","0","TD_Silhouette Syntax | Silhouette | Teradata Vantage - TD_Silhouette Syntax - Analytics Database","96","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/TD_Silhouette-Syntax","","","","","","208517","12996","12996","4.607","A+","106","55","1.927","18.918","Very Hard","11.318","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.563","","","","","","1.1","## Summary

The TD_Silhouette function in Teradata Vantage is used to evaluate the quality of clusters created by clustering algorithms. It computes the silhouette score, which is a measure of how similar an object is to its own cluster compared to other clusters. Higher silhouette scores indicate better-defined clusters. This function can be utilized within various SQL statements such as SELECT, CREATE TABLE, or CREATE VIEW.

### Code Example

Below are examples demonstrating how to use the TD_Silhouette function in different SQL operations:

1. **SELECT Statement**
   ```sql
   SELECT *
   FROM TD_Silhouette (
       ON my_table AS InputTable
       USING
       IdColumn('id')
       ClusterIdColumn('cluster_id')
       TargetColumns({'feature1', 'feature2'})
       OutputType('SCORE')
   ) AS silhouette_scores;
   ```

2. **CREATE TABLE Statement**
   ```sql
   CREATE TABLE silhouette_results AS (
       SELECT *
       FROM TD_Silhouette (
           ON my_table AS InputTable
           USING
           IdColumn('id')
           ClusterIdColumn('cluster_id')
           TargetColumns({'feature1', 'feature2'})
           OutputType('SCORE')
       )
   ) WITH NO DATA;
   ```

3. **CREATE VIEW Statement**
   ```sql
   CREATE VIEW silhouette_view AS
   SELECT *
   FROM TD_Silhouette (
       ON my_table AS InputTable
       USING
       IdColumn('id')
       ClusterIdColumn('cluster_id')
       TargetColumns({'feature1', 'feature2'})
       OutputType('SCORE')
   );
   ```

4. **UPDATE Statement**
   - Note: TD_Silhouette does not directly support UPDATE operations, as it's primarily a function for generating results rather than manipulating existing data. However, you can use it in conjunction with other SQL functions to update data based on the silhouette scores if needed.

5. **DELETE Statement**
   - Similar to UPDATE, TD_Silhouette does not directly apply for DELETE operations. Instead, you might use the scores generated to identify which records to delete through a separate query.

### Keywords and Phrases
- **TD_Silhouette Syntax**
- **Silhouette**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Analytics Database**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **OutputType**
- **ClusterIdColumn**
- **TargetColumns**
- **Accumulate**
- **Model Evaluation Functions**
- **Last Update 2024-04-06**
- **Published June 2022** 

This structured overview provides a comprehensive look at the TD_Silhouette function, offering practical examples and key terms for further exploration.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/TD_Silhouette-Syntax","2024-07-27 12:02:57"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit","text/html;charset=UTF-8","200","","Indexable","","TD_TrainTestSplit Function | train_test_split | Teradata Vantage - TD_TrainTestSplit - Analytics Database","105","928","Analytics Database (SQL Engine) function simulates a model performing on new data to evaluate machine learning and validation processes.","136","868","","0","TD_TrainTestSplit Function | train_test_split | Teradata Vantage - TD_TrainTestSplit - Analytics Database","105","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit","","","","","","209671","13360","13360","4.736","A+","182","55","3.309","49.151","Hard","11.450","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","0.475","","","","","","1.1","## Summary of TD_TrainTestSplit Function

The `TD_TrainTestSplit` function in Teradata Vantage is utilized for splitting a dataset into training and testing subsets, essential for evaluating machine learning models. By randomly dividing the dataset, it allows for simulating how a model would perform on unseen data. This function is crucial for validating the effectiveness of machine learning algorithms, enabling data scientists to assess model performance based on real-world predictions.

Typically, a common practice is to allocate 75% of the data for training purposes and 25% for testing. However, this ratio can be adjusted based on specific requirements. The function ensures consistent results across multiple runs on the same machine, although variations may occur on different machines.

## Code Example

### 1. Create a Table
```sql
CREATE TABLE customer_data (
    customer_id INT,
    age INT,
    income DECIMAL(10, 2),
    purchase_amount DECIMAL(10, 2)
);
```

### 2. Insert Data
```sql
INSERT INTO customer_data (customer_id, age, income, purchase_amount) VALUES
(1, 25, 50000, 200),
(2, 30, 60000, 450),
(3, 22, 70000, 300),
(4, 35, 80000, 500),
(5, 40, 90000, 600);
```

### 3. Select Data
```sql
SELECT * FROM customer_data;
```

### 4. Update Data
```sql
UPDATE customer_data
SET purchase_amount = purchase_amount * 1.1
WHERE age > 30;
```

### 5. Delete Data
```sql
DELETE FROM customer_data
WHERE customer_id = 1;
```

### 6. Train-Test Split
```sql
CALL TD_TrainTestSplit (
    'customer_data',
    'train_data',
    'test_data',
    0.75
);
```

## Keywords and Phrases
- **TD_TrainTestSplit Function**
- **train_test_split**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language English (United States)**
- **Last Update 2024-04-06**
- **Product Category Teradata Vantage™**
- **Function Syntax Descriptions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Data Cleaning Functions**
- **Feature Engineering Functions**
- **Usage Notes**
- **Function Examples**
- **Input Table Rows Redistribution**
- **Training and Testing Subsets**
- **Machine Learning Validation**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit","2024-07-27 12:52:07"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/Optional-Syntax-Elements-for-TD_TrainTestSplit","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_TrainTestSplit - Analytics Database","67","611","IDColumn Column that contains a unique identifier for each row in the input table. Mandatory when Seed argument is present so that the output of TD_TrainTestSplit is deterministic across multiple function calls. TrainSize Size of the train dataset. It accepts float values in the (0, 1) range. Default is 0.75. TestSize ...","323","1931","","0","Optional Syntax Elements for TD_TrainTestSplit - Analytics Database","67","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/Optional-Syntax-Elements-for-TD_TrainTestSplit","","","","","","209286","13400","13400","4.750","A+","230","65","3.538","68.251","Normal","11.549","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.209","","","","","","1.1","## Summary

The Teradata Vantage™ platform offers a robust set of analytic functions designed to facilitate various data operations, including data cleaning, feature engineering, model training, and evaluation. Among these functions, the `TD_TrainTestSplit` function is crucial for splitting datasets into training and testing sets, which is essential for building and validating machine learning models. This function allows users to specify the size of the train and test sets, control randomness through a seed value, and stratify the split based on specified labels.

## Code Examples

### Select
```sql
SELECT column1, column2
FROM my_table
WHERE condition;
```

### Update
```sql
UPDATE my_table
SET column1 = new_value
WHERE condition;
```

### Delete
```sql
DELETE FROM my_table
WHERE condition;
```

### Create
```sql
CREATE TABLE my_table (
    column1 INT,
    column2 VARCHAR(100),
    column3 DATE
);
```

### Using `TD_TrainTestSplit`
```sql
SELECT *
FROM TD_TrainTestSplit(
    ON my_input_table
    USING
    IDColumn = 'unique_id',
    TrainSize = 0.75,
    TestSize = 0.25,
    Seed = 123,
    StratifyColumn = 'label_column'
) AS split_data;
```

## Keywords and Phrases
- Optional Syntax Elements for TD_TrainTestSplit
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Hypothesis Testing Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Limitations When Using PARTITION BY
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions
- Recommendations for Using Analytic Functions
- TD_ConvertTo
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_SimpleImputeFit
- TD_ColumnSummary
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_XGBoost
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_SVMPredict
- TD_ROC
- TD_TrainTestSplit
- Seed
- StratifyColumn
- TrainSize
- TestSize
- IDColumn","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/Optional-Syntax-Elements-for-TD_TrainTestSplit","2024-07-27 12:11:10"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/Required-Syntax-Elements-for-TD_TrainTestSplit","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_TrainTestSplit - Analytics Database","67","615","ON clause Accepts the InputTable clause.","40","256","","0","Required Syntax Elements for TD_TrainTestSplit - Analytics Database","67","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/Required-Syntax-Elements-for-TD_TrainTestSplit","","","","","","207379","12621","12621","4.474","A+","50","35","1.429","4.037","Very Hard","11.144","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.557","","","","","","1.1","## Summary of Teradata Vantage™ Analytics Database Functions

Teradata Vantage™ offers a comprehensive suite of analytic functions designed to facilitate data analysis, model training, scoring, and evaluation. These functions are grouped into several categories, including data cleaning, data exploration, feature engineering, model training, scoring, and evaluation. Key features include support for various data types, advanced statistical methods, and capabilities for handling complex data structures.

### Code Examples

Below are examples of SQL operations such as Select, Update, Delete, and Create, specifically tailored to the Teradata environment.

#### 1. Select
```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE status = 'active';
```

#### 2. Update
```sql
UPDATE customers
SET status = 'inactive'
WHERE last_purchase_date < '2022-01-01';
```

#### 3. Delete
```sql
DELETE FROM customers
WHERE customer_id = 12345;
```

#### 4. Create
```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    status VARCHAR(20)
);
```

### Keywords and Phrases

- **Required Syntax Elements for TD_TrainTestSplit**
- **Analytics Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Examples: How to Use...**
- **Syntax Elements**
- **Input/Output**
- **Data Exploration Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Feature Engineering Utility Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **nPath**
- **Sessionize**
- **Teradata Links**
- **Related Documentation**

These keywords and phrases encapsulate the breadth of functionality and considerations when using the Teradata Vantage™ Analytics Database, making it easier for users to find relevant information quickly.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/Required-Syntax-Elements-for-TD_TrainTestSplit","2024-07-27 12:02:54"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/TD_TrainTestSplit-Examples","text/html;charset=UTF-8","200","","Indexable","","TD_TrainTestSplit Examples | train_test_split | Teradata Vantage - TD_TrainTestSplit Examples - Analytics Database","114","1030","See examples of the Analytics Database (SQL Engine) function TD_TrainTestSplit.","79","501","","0","TD_TrainTestSplit Examples | train_test_split | Teradata Vantage - TD_TrainTestSplit Examples - Analytics Database","114","Database Analytic Functions","27","Example: StratifyColumn and Seed Do Not Exist","45","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/TD_TrainTestSplit-Examples","","","","","","231803","14360","14360","5.091","A+","457","152","3.007","92.896","Very Easy","10.948","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.272","","","","","","1.1","### Summary
In the context of Teradata Vantage, analytic functions provide capabilities for data exploration, model training, and evaluation among others. The `TD_TrainTestSplit` function is particularly useful for splitting datasets into training and testing subsets, which is a critical step in data analysis and machine learning workflows. The function allows for stratification based on categorical columns and the specification of a random seed for reproducibility.

### Code Example

Here are examples of SQL commands for common operations (Select, Update, Delete, Create) in Teradata Vantage using the `titanicDataset` input table:

#### 1. Select
```sql
SELECT * 
FROM titanicDataset 
WHERE Survived = 1;
```
This command selects all records of passengers who survived.

#### 2. Update
```sql
UPDATE titanicDataset 
SET Age = Age + 1 
WHERE PassengerId = 1;
```
This command updates the age of the passenger with `PassengerId` 1 by incrementing it by 1 year.

#### 3. Delete
```sql
DELETE FROM titanicDataset 
WHERE PassengerId = 3;
```
This command deletes the record of the passenger with `PassengerId` 3 from the dataset.

#### 4. Create
```sql
CREATE TABLE newPassengerData AS (
    SELECT PassengerId, Survived, Pclass, Name 
    FROM titanicDataset
) WITH NO DATA;
```
This command creates a new table `newPassengerData` with the same structure as the selected columns from the `titanicDataset`, but without any data.

### TD_TrainTestSplit Examples

#### Example: StratifyColumn and Seed Do Not Exist
```sql
SELECT * FROM TD_TrainTestSplit(
    ON titanicDataset AS InputTable
    USING
    IDColumn('PassengerId')
    trainSize(0.75)
    testSize(0.25)
) AS dt;
```

#### Example: StratifyColumn Does Not Exist and Seed Exists
```sql
SELECT * FROM TD_TrainTestSplit(
    ON titanicDataset AS InputTable
    USING
    IDColumn('PassengerId')
    trainSize(0.75)
    testSize(0.25)
    Seed(42)
) AS dt;
```

#### Example: StratifyColumn Exists and Seed Does Not Exist
```sql
SELECT * FROM TD_TrainTestSplit(
    ON titanicDataset AS InputTable
    USING
    IDColumn('PassengerId')
    trainSize(0.75)
    testSize(0.25)
    stratifyColumn('Survived')
) AS dt;
```

#### Example: StratifyColumn and Seed Exist
```sql
SELECT * FROM TD_TrainTestSplit(
    ON titanicDataset AS InputTable
    USING
    IDColumn('PassengerId')
    trainSize(0.75)
    testSize(0.25)
    Seed(42)
    stratifyColumn('Survived')
) AS dt;
```

### Keywords and Phrases
- TD_TrainTestSplit Examples
- train_test_split
- Teradata Vantage - TD_TrainTestSplit Examples
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Usage Notes
- Data Cleaning Functions
- Data Exploration Functions
- Model Training Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Input Table Schema
- SQL Commands
- Create, Select, Update, Delete Operations
- Reproducibility
- Stratification in Data Splitting","29","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/TD_TrainTestSplit-Examples","2024-07-27 12:01:43"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/TD_TrainTestSplit-Input","text/html;charset=UTF-8","200","","Indexable","","TD_TrainTestSplit Input - Analytics Database","44","397","The TD_TrainTestSplit function has one input table that contains the test data. Input Table Schema Column Data Type Description IDColumn VARCHAR, CHAR, SMALLINT, BIGINT, BYTEINT, INTEGER Unique row identifier. Cannot be NULL. StratifyColumn VARCHAR, CHAR, SMALLINT, BIGINT, BYTEINT, INTEGER If passed into the function, ...","323","2102","","0","TD_TrainTestSplit Input - Analytics Database","44","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/TD_TrainTestSplit-Input","","","","","","209614","13255","13255","4.699","A+","112","43","2.605","36.502","Hard","11.222","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.849","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database provides a range of analytic functions tailored for data scientists and analysts. This database supports various operations for data manipulation, including selection, updating, deletion, and creation of data. Below are examples of the fundamental SQL operations, alongside their respective syntax and examples. 

### Code Example

#### 1. **Select**
The SELECT statement is used to query data from a database.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

**Example:**
```sql
SELECT ID, Name
FROM Employees
WHERE Department = 'Sales';
```

#### 2. **Update**
The UPDATE statement is used to modify existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example:**
```sql
UPDATE Employees
SET Salary = Salary * 1.10
WHERE Department = 'Sales';
```

#### 3. **Delete**
The DELETE statement is used to remove records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

**Example:**
```sql
DELETE FROM Employees
WHERE ID = 10;
```

#### 4. **Create**
The CREATE statement is used to create a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example:**
```sql
CREATE TABLE Employees (
    ID INT PRIMARY KEY,
    Name VARCHAR(100),
    Department VARCHAR(50),
    Salary DECIMAL(10, 2)
);
```

### Keywords and Phrases
- TD_TrainTestSplit Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This concise guide aims to provide a foundational understanding of basic SQL operations and keywords related to the Teradata Vantage™ Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/TD_TrainTestSplit-Input","2024-07-27 12:24:47"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/TD_TrainTestSplit-Output","text/html;charset=UTF-8","200","","Indexable","","TD_TrainTestSplit Output - Analytics Database","45","413","Output Table Schema Column Data Type Description TD_IsTrainRow BYTEINT This column has values 0 and 1. The test rows have a value of 0, and the train rows have a value of 1. input_column Same as input table The columns copied from the input table. Create the train table and test table from the output of the TD_TrainTes...","323","2023","","0","TD_TrainTestSplit Output - Analytics Database","45","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/TD_TrainTestSplit-Output","","","","","","210704","13732","13732","4.868","A+","297","59","5.034","72.404","Fairly Easy","11.651","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.698","","","","","","1.1","### Summary

The Teradata Analytics Database provides a wide array of analytic functions to support data analysis and machine learning tasks. Among these functionalities, operations for data manipulation such as Select, Update, Delete, and Create are foundational for managing datasets effectively. The TD_TrainTestSplit function is particularly significant for preparing data for machine learning by splitting it into training and testing sets.

### Code Examples

Here are some basic SQL operations using Teradata syntax that demonstrate how to manipulate data in the Analytics Database:

#### 1. Select
```sql
SELECT column1, column2
FROM your_table
WHERE condition;
```

#### 2. Insert (Create)
```sql
CREATE TABLE new_table AS (
    SELECT *
    FROM existing_table
    WHERE condition
) WITH DATA;
```

#### 3. Update
```sql
UPDATE your_table
SET column1 = new_value
WHERE condition;
```

#### 4. Delete
```sql
DELETE FROM your_table
WHERE condition;
```

#### 5. Train-Test Split Example
Using the `TD_TrainTestSplit` function to create training and test datasets:
```sql
-- Assume TTS_OUTPUT is the output of TD_TrainTestSplit
CREATE MULTISET TABLE TrainTable AS (
    SELECT *
    FROM TTS_OUTPUT
    WHERE TD_IsTrainRow = 1
) WITH DATA;

CREATE MULTISET TABLE TestTable AS (
    SELECT *
    FROM TTS_OUTPUT
    WHERE TD_IsTrainRow = 0
) WITH DATA;
```

### Keywords and Phrases
- TD_TrainTestSplit Output
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Input Table Rows Redistribution
- Function Names with and without TD Prefix
- Displaying Online Help for Analytics Functions","27","1","4","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/TD_TrainTestSplit-Output","2024-07-27 12:15:32"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/TD_TrainTestSplit-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_TrainTestSplit Syntax | train_test_split | Teradata Vantage - TD_TrainTestSplit Syntax - Analytics Database","110","976","See the syntax of Analytics Database (SQL Engine) function TD_TrainTestSplit and read descriptions of its required and optional syntax elements.","144","894","","0","TD_TrainTestSplit Syntax | train_test_split | Teradata Vantage - TD_TrainTestSplit Syntax - Analytics Database","110","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/TD_TrainTestSplit-Syntax","","","","","","208404","12969","12969","4.598","A+","104","47","2.213","28.068","Very Hard","11.282","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.641","","","","","","1.1","## Summary

In Teradata Vantage, the `TD_TrainTestSplit` function is utilized for splitting datasets into training and testing subsets, which is crucial for building and evaluating predictive models. This function allows you to specify various parameters, such as the size of the training and testing sets, seeding for randomness, and stratification based on a specific column. The function can be used within SQL queries, as part of table or view creation, making it flexible for analytic workflows.

### Code Example

#### 1. Select
To retrieve data from a table using `TD_TrainTestSplit`:

```sql
SELECT *
FROM TD_TrainTestSplit(
    ON my_table
    USING
    [IDColumn('id')]
    [TrainSize(0.8)]
    [TestSize(0.2)]
);
```

#### 2. Update
Updating the training set size in a previously defined split:

```sql
UPDATE my_model
SET TrainSize = 0.7
WHERE ModelID = 1;
```

#### 3. Delete
Removing a specified entry from the training set:

```sql
DELETE FROM my_training_set
WHERE ID = 12345;
```

#### 4. Create
Creating a new table with the training and test splits:

```sql
CREATE TABLE my_training_set AS (
    SELECT *
    FROM TD_TrainTestSplit(
        ON my_table
        USING
        [IDColumn('id')]
        [TrainSize(0.8)]
        [TestSize(0.2)]
    )
) WITH DATA;

CREATE TABLE my_test_set AS (
    SELECT *
    FROM TD_TrainTestSplit(
        ON my_table
        USING
        [IDColumn('id')]
        [TrainSize(0.8)]
        [TestSize(0.2)]
    )
) WITH NO DATA;
```

### Keywords and Phrases
- TD_TrainTestSplit Syntax
- train_test_split
- Teradata Vantage - TD_TrainTestSplit Syntax
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Maximum Number of Columns in a Database Table
- Recommendations for Using Analytic Functions","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/TD_TrainTestSplit-Syntax","2024-07-27 12:14:52"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions","text/html;charset=UTF-8","200","","Indexable","","Model Scoring Functions | Teradata Vantage - Model Scoring Functions - Analytics Database","89","817","Learn about the Analytics Database (SQL Engine) functions for scoring models.","77","490","","0","Model Scoring Functions | Teradata Vantage - Model Scoring Functions - Analytics Database","89","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions","","","","","","209200","13086","13086","4.639","A+","60","40","1.500","10.733","Very Hard","11.090","1","3","","707","707","0","99.860","716","714","0","","","","","","","","","7.033","","","","","","1.1","## Teradata Vantage - Model Scoring Functions

Teradata Vantage provides a comprehensive suite of model scoring functions that allow users to apply various machine learning models to datasets for prediction purposes. These functions are integral to the analytics process, enabling users to leverage trained models to obtain predictions based on new or unseen data.

### Key Features
- **Model Scoring Functions**: Functions like `TD_DecisionForestPredict`, `TD_GLMPredict`, and `TD_XGBoostPredict` facilitate the application of machine learning models to datasets.
- **Analytic Functions**: These allow users to perform complex analytics on large datasets efficiently.
- **Deployment**: Supports deployment of models in production environments, enabling real-time predictions.
- **Data Preparation**: Functions for data cleaning, feature engineering, and exploration are available to prepare data before model scoring.

### Code Examples

#### 1. Select
Retrieving predicted values using a trained model.
```sql
SELECT 
    customer_id, 
    TD_DecisionForestPredict(model_table, input_data) AS predicted_value
FROM 
    customers
WHERE 
    prediction_criteria = 'new';
```

#### 2. Update
Updating records based on predicted values.
```sql
UPDATE 
    customer_predictions
SET 
    predicted_value = TD_GLMPredict(model_table, input_data)
WHERE 
    customer_id = 12345;
```

#### 3. Delete
Removing records from a predictions table that are no longer needed.
```sql
DELETE FROM 
    customer_predictions
WHERE 
    predicted_value < 0.5;
```

#### 4. Create
Creating a new table to store predictions.
```sql
CREATE TABLE customer_predictions AS (
    SELECT 
        customer_id, 
        TD_XGBoostPredict(model_table, input_data) AS predicted_value
    FROM 
        customers
) WITH NO DATA;
```

### Summary
Teradata Vantage provides powerful model scoring functions that streamline the process of predicting outcomes based on trained machine learning models. The ability to perform operations such as selection, updating, deletion, and creation of tables enhances data management and analytics capabilities.

### Keywords and Phrases
- Model Scoring Functions
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Workload Management Configuration
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Data Preparation","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions","2024-07-27 12:26:20"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict","text/html;charset=UTF-8","200","","Indexable","","TD_DecisionForestPredict Function | DecisionForestPredict - TD_DecisionForestPredict - Analytics Database","105","959","Learn about the Analytics Database (SQL Engine) function TD_DecisionForestPredict, which analyzes the data from TD_DecisionForest model.","136","875","","0","TD_DecisionForestPredict Function | DecisionForestPredict - TD_DecisionForestPredict - Analytics Database","105","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict","","","","","","209761","13286","13286","4.710","A+","140","51","2.745","20.950","Very Hard","11.347","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","1.247","","","","","","1.1","### Overview of TD_DecisionForestPredict Function

The `TD_DecisionForestPredict` function is a crucial component of Teradata Vantage's analytics capabilities. It utilizes models generated by the `TD_DecisionForest` function to make predictions based on input data. The output provides the probability that each observation belongs to a predicted class, enabling businesses to derive insights from their datasets effectively.

The performance of `TD_DecisionForestPredict` is influenced by the number of trees in the model. If the number of trees exceeds available memory, the function will cache these trees in local spool space to ensure continuity in processing.

### Code Example Section

Here's how you can perform basic database operations such as Select, Update, Delete, and Create in Teradata SQL.

#### SELECT
```sql
SELECT customer_id, customer_name, purchase_amount 
FROM customers 
WHERE purchase_amount > 100;
```

#### UPDATE
```sql
UPDATE customers 
SET purchase_amount = purchase_amount * 1.10 
WHERE customer_id = 12345;
```

#### DELETE
```sql
DELETE FROM customers 
WHERE last_purchase_date < '2022-01-01';
```

#### CREATE
```sql
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    purchase_amount DECIMAL(10, 2),
    last_purchase_date DATE
);
```

### Summary

The `TD_DecisionForestPredict` function is a powerful tool for making predictions using decision forest models in Teradata Vantage. By understanding the required syntax and input/output expectations, users can effectively implement this function in their data analysis workflows. The provided code examples demonstrate common SQL operations that can be performed within Teradata.

### Keywords and Phrases
- **TD_DecisionForestPredict Function**
- **DecisionForestPredict**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **Function Categories**: Data Cleaning, Exploration, Feature Engineering, Training, Scoring, Evaluation, Text Analytic, Hypothesis Testing
- **Usage Notes**
- **Limitations**: e.g., PARTITION BY 
- **Function Performance**
- **Non-Deterministic Behavior**
- **Workload Management**
- **Spool Space Management**
- **Input Table Rows Redistribution**
- **Teradata Vantage™**

This structured overview provides a concise understanding of the function and its applications, alongside necessary SQL examples for practical implementation.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict","2024-07-27 12:45:38"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/Example-How-to-Use-TD_DecisionForestPredict","text/html;charset=UTF-8","200","","Indexable","","TD_DecisionForestPredict Examples | DecisionForestPredict - Example: How to Use TD_DecisionForestPredict - Analytics Database","125","1163","See examples of the Analytics Database (SQL Engine) model scoring function TD_DecisionForestPredict.","100","641","","0","TD_DecisionForestPredict Examples | DecisionForestPredict - Example: How to Use TD_DecisionForestPredict - Analytics Database","125","Database Analytic Functions","27","Example: TD_DecisionForestPredict Used to Classify Home Styles","62","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/Example-How-to-Use-TD_DecisionForestPredict","","","","","","231841","14542","14542","5.155","A+","252","354","0.712","0.000","Very Hard","12.287","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.628","","","","","","1.1","### Summary

The `TD_DecisionForestPredict` function in Teradata Vantage™ is used to make predictions based on a trained Decision Forest model. This function can be particularly useful in classification tasks where the goal is to assign categories to new observations based on the characteristics of previous data. The syntax allows you to specify input tables, model tables, and various parameters to control the prediction process, such as which column to use as an identifier and how to accumulate results.

### Code Examples

#### 1. SELECT Example
This example demonstrates how to select data from the `TD_DecisionForestPredict` function, making predictions based on the input and model tables.

```sql
SELECT * FROM TD_DecisionForestPredict (
    ON input_table AS InputTable PARTITION BY ANY
    ON model_table AS ModelTable DIMENSION
    USING
      IdColumn ('sn')
      Accumulate('homestyle')
      Detailed('false')
) AS dt;
```

#### 2. UPDATE Example
To update predictions or model parameters, you typically wouldn't use `TD_DecisionForestPredict`. Instead, you would update the model based on new data. Here's a hypothetical example of updating a model table:

```sql
UPDATE model_table
SET parameter_value = new_value
WHERE model_id = 'some_id';
```

#### 3. DELETE Example
Deleting outdated predictions or data from a prediction table might look like this:

```sql
DELETE FROM prediction_table
WHERE prediction_date < CURRENT_DATE - INTERVAL '30' DAY;
```

#### 4. CREATE Example
Creating a new table for storing prediction results can be done as follows:

```sql
CREATE TABLE prediction_results (
    sn INT,
    Prediction INT,
    Confidence_Lower FLOAT,
    Confidence_Higher FLOAT,
    HomeStyle INT
);
```

### Keywords and Phrases

- **TD_DecisionForestPredict**: Function for making predictions with Decision Forest models.
- **Analytics Database**: Database containing analytic functions.
- **Deployment**: The process of making models available for use.
- **VantageCloud**: Cloud-based offering of Teradata Vantage.
- **Model Training Functions**: Functions used to train models.
- **Model Scoring Functions**: Functions used to score or predict outcomes based on trained models.
- **Prediction**: The output generated by predictive models.
- **Confidence Interval**: A range of values that is likely to contain the true value of the prediction.
- **Partitioning**: Dividing data into subsets for processing.
- **Accumulate**: A method to aggregate data over a specified dimension.
- **Input Table**: The table containing the data to be predicted.
- **Model Table**: The table containing the trained model data.
- **Detailed Output**: A parameter indicating whether detailed results should be provided or not.

These keywords and phrases can guide further investigation into the functionality and applications within the Teradata Vantage environment.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/Example-How-to-Use-TD_DecisionForestPredict","2024-07-27 12:30:54"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/Optional-Syntax-Elements-for-TD_DecisionForestPredict","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_DecisionForestPredict - Analytics Database","74","682","Detailed Indicator to output detailed information about the decision tree and the specific tree information, including the task index and the tree index for each tree. Default: false. OutputProb Indicator to output the probability for each response. If you omit Responses, the function outputs only the probability of th...","323","1927","","0","Optional Syntax Elements for TD_DecisionForestPredict - Analytics Database","74","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/Optional-Syntax-Elements-for-TD_DecisionForestPredict","","","","","","208901","13108","13108","4.647","A+","156","56","2.786","36.977","Hard","11.398","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.443","","","","","","1.1","## Summary

In this section, we'll cover fundamental SQL operations for managing data in a relational database, specifically focusing on the **Select**, **Update**, **Delete**, and **Create** statements. These operations are essential for data manipulation and retrieval in any database system, and they form the backbone of SQL querying and data management.

### Code Examples

#### 1. Select
The **SELECT** statement is used to query the database for specific data. You can retrieve data from one or more tables.

```sql
-- Select all columns from the employees table
SELECT * FROM employees;

-- Select specific columns
SELECT first_name, last_name FROM employees WHERE department = 'Sales';
```

#### 2. Update
The **UPDATE** statement is used to modify existing records in a table.

```sql
-- Update the last name of an employee
UPDATE employees
SET last_name = 'Smith'
WHERE employee_id = 101;

-- Update multiple columns
UPDATE employees
SET salary = salary * 1.10, department = 'Marketing'
WHERE department = 'Sales';
```

#### 3. Delete
The **DELETE** statement is used to remove records from a table.

```sql
-- Delete a specific employee record
DELETE FROM employees WHERE employee_id = 101;

-- Delete all employees from a department
DELETE FROM employees WHERE department = 'Intern';
```

#### 4. Create
The **CREATE** statement is used to create new tables or databases.

```sql
-- Create a new table for storing employee information
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);

-- Create a new database
CREATE DATABASE company_db;
```

### Keywords and Phrases

- **Optional Syntax Elements for TD_DecisionForestPredict**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Teradata Vantage™**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Product Category**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **AMP Configuration Impact**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytic Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions**

These SQL operations and related keywords are foundational for working with databases effectively and understanding the broader context of analytics within Teradata Vantage.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/Optional-Syntax-Elements-for-TD_DecisionForestPredict","2024-07-27 12:44:37"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/Required-Syntax-Elements-for-TD_DecisionForestPredict","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_DecisionForestPredict - Analytics Database","74","686","ON clause Specifies the table name, view name or query as an InputTable and ModelTable. IDColumn Column with a unique identifier for each test point in the test set.","165","1019","","0","Required Syntax Elements for TD_DecisionForestPredict - Analytics Database","74","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/Required-Syntax-Elements-for-TD_DecisionForestPredict","","","","","","207707","12780","12780","4.531","A+","73","38","1.921","21.778","Very Hard","11.190","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.510","","","","","","1.1","### Summary
This document provides an overview of the **Teradata Vantage™ Analytics Database** and its analytic functions. It covers a variety of functions, including data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analytics. Each function has a specific syntax and required elements, which are crucial for effective data handling and machine learning processes within the Teradata environment.

### Code Example: SQL Operations
Here are examples illustrating basic SQL operations—Select, Update, Delete, and Create—in the context of a Teradata database.

#### Select
```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE active = 'Y';
```

#### Update
```sql
UPDATE customers
SET last_purchase_date = CURRENT_DATE
WHERE customer_id = 12345;
```

#### Delete
```sql
DELETE FROM customers
WHERE last_purchase_date < DATE '2020-01-01';
```

#### Create
```sql
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    last_purchase_date DATE,
    active CHAR(1)
);
```

### Keywords and Phrases
- **Required Syntax Elements for TD_DecisionForestPredict**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions**
- **Example Syntax and Usage** 

This summary encapsulates the core elements of the Teradata Vantage™ Analytics Database, providing a foundation for further exploration of its capabilities and functions.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/Required-Syntax-Elements-for-TD_DecisionForestPredict","2024-07-27 11:41:35"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/TD_DecisionForestPredict-Input","text/html;charset=UTF-8","200","","Indexable","","TD_DecisionForestPredict Input - Analytics Database","51","468","TD_DecisionForestPredict uses the following input tables. Table Description InputTable Contains test data, for which to predict outcomes. The input table can have no partition or PARTITION BY ANY clause. ModelTable Has the same schema as the output table of TD_DecisionForest function. Model table must be a DIMENSION ta...","323","2036","","0","TD_DecisionForestPredict Input - Analytics Database","51","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/TD_DecisionForestPredict-Input","","","","","","220708","14353","14353","5.088","A+","455","103","4.417","40.960","Hard","11.740","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","2.164","","","","","","1.1","### Summary

The Teradata Vantage Analytics Database provides a suite of analytic functions that facilitate data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This includes functions such as `TD_DecisionForestPredict`, which is used for making predictions based on a previously trained decision forest model. The input to this function consists of a test dataset and a model table that contains the decision trees created during the training phase.

### Code Example

Here are basic SQL code examples for common operations: Select, Update, Delete, and Create, focusing on the context of the Teradata Vantage Analytics Database.

#### 1. **Select**
```sql
SELECT ID_Column, target_columns
FROM InputTable
WHERE target_columns IS NOT NULL;
```

#### 2. **Update**
```sql
UPDATE InputTable
SET target_columns = 0
WHERE target_columns IS NULL;
```

#### 3. **Delete**
```sql
DELETE FROM InputTable
WHERE ID_Column = 'some_id_value';
```

#### 4. **Create**
```sql
CREATE TABLE ModelTable (
    task_index SMALLINT,
    tree_num INTEGER,
    tree_order INTEGER,
    classification_tree VARCHAR(16000)
);
```

### Keywords and Phrases

- **TD_DecisionForestPredict Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**: gjn1627595495337.ditamap
- **dita:ditavalPath**: ayr1485454803741.ditaval
- **dita:id**: jmh1512506877710
- **Product Category**: Teradata Vantage™
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **StringSimilarity**
- **TD_ConvertTo**
- **TD_GetRowsWithoutMissingValues**
- **TD_DecisionForest**
- **TD_DecisionForestPredict** 
- **Classification and Regression** 
- **JSON Representation of Decision Tree**
- **AMP Configuration** 
- **Input Table Rows Redistribution** 
- **Limitations When Using PARTITION BY**
- **Accumulated Columns Impact on Function Performance** 

These keywords and phrases reflect various aspects of the Teradata Vantage Analytics Database and its functionalities, providing a comprehensive overview for users who wish to explore its capabilities further.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/TD_DecisionForestPredict-Input","2024-07-27 12:33:07"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/TD_DecisionForestPredict-Output","text/html;charset=UTF-8","200","","Indexable","","TD_DecisionForestPredict Output - Analytics Database","52","484","Output Table Schema The table has a set of predictions for each test point. Name Data Type Description id_column Same as input table Column copied from input table. It is the unique row identifier. prediction Integer for classification model FLOAT for regression model Predicted test point value or predicted class, dete...","323","1965","","0","TD_DecisionForestPredict Output - Analytics Database","52","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/TD_DecisionForestPredict-Output","","","","","","212208","13647","13647","4.838","A+","251","68","3.691","38.270","Hard","11.548","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.557","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database offers a variety of analytic functions to handle data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analysis. The functions are designed to facilitate complex data operations efficiently in an analytics environment. This summary includes core SQL operations (Select, Update, Delete, Create) as well as a high-level overview of analytic functions available in this database.

## Code Examples

### 1. **Select**
To retrieve data from a table, use the `SELECT` statement.

```sql
SELECT id_column, prediction, confidence_lower, confidence_upper
FROM predictions
WHERE confidence_lower > 0.5;
```

### 2. **Update**
To modify existing records in a table, use the `UPDATE` statement.

```sql
UPDATE predictions
SET confidence_upper = confidence_upper + 0.1
WHERE prediction = 1;
```

### 3. **Delete**
To remove records from a table, use the `DELETE` statement.

```sql
DELETE FROM predictions
WHERE prediction IS NULL;
```

### 4. **Create**
To create a new table, use the `CREATE TABLE` statement.

```sql
CREATE TABLE predictions (
    id_column INT,
    prediction INT,
    confidence_lower FLOAT,
    confidence_upper FLOAT,
    prob FLOAT,
    prob_response FLOAT
);
```

## Keywords and Phrases

- **TD_DecisionForestPredict Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number** - 17.20
- **Published** - June 2022
- **Language** - English (United States)
- **Last Update** - 2024-04-06
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category** - Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Examples: How to Use TD_DecisionForestPredict**
- **Predicted test point value or predicted class**
- **Probability that observation belongs to class prediction**","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/TD_DecisionForestPredict-Output","2024-07-27 12:47:00"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/TD_DecisionForestPredict-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_DecisionForestPredict Syntax | DecisionForestPredict - TD_DecisionForestPredict Syntax - Analytics Database","110","1007","See the syntax of function TD_DecisionForestPredict and read descriptions of its required and optional syntax elements.","119","737","","0","TD_DecisionForestPredict Syntax | DecisionForestPredict - TD_DecisionForestPredict Syntax - Analytics Database","110","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/TD_DecisionForestPredict-Syntax","","","","","","208745","13010","13010","4.612","A+","136","50","2.720","50.426","Fairly Hard","11.362","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.706","","","","","","1.1","### Summary

The `TD_DecisionForestPredict` function is a part of Teradata's Analytics Database and is used to score or predict outcomes based on a decision forest model. This function can operate on tables, views, or queries as input and model tables. It provides various options for output customization, such as whether to include detailed results or output probabilities. 

### Code Examples

Here's how you can use the `TD_DecisionForestPredict` function in different SQL operations:

#### 1. **Select Example**
```sql
SELECT 
    InputTable.id_column,
    TD_DecisionForestPredict(
        ON InputTable 
        PARTITION BY ANY
        ON ModelTable DIMENSION
        USING IDColumn ('id_column')
    ) AS Prediction
FROM InputTable
JOIN ModelTable ON InputTable.model_id = ModelTable.id;
```

#### 2. **Update Example**
While the `TD_DecisionForestPredict` function is not typically used in an `UPDATE` statement, you can use it in a context where you might want to update a derived column based on predictions. Here’s a conceptual example:
```sql
UPDATE InputTable
SET predicted_value = TD_DecisionForestPredict(
        ON InputTable 
        PARTITION BY ANY
        ON ModelTable DIMENSION
        USING IDColumn ('id_column')
    )
WHERE some_condition;
```

#### 3. **Delete Example**
Similarly, `TD_DecisionForestPredict` is not directly used in a `DELETE` statement, but you may want to delete records based on a condition derived from predictions:
```sql
DELETE FROM InputTable
WHERE TD_DecisionForestPredict(
        ON InputTable 
        PARTITION BY ANY
        ON ModelTable DIMENSION
        USING IDColumn ('id_column')
    ) = 'unwanted_prediction';
```

#### 4. **Create Example**
You can also create a view or a new table based on the predictions:
```sql
CREATE VIEW PredictionResults AS
SELECT 
    InputTable.id_column,
    TD_DecisionForestPredict(
        ON InputTable 
        PARTITION BY ANY
        ON ModelTable DIMENSION
        USING IDColumn ('id_column')
    ) AS Prediction
FROM InputTable;
```

### Keywords and Phrases
- **TD_DecisionForestPredict Syntax**
- **DecisionForestPredict**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language English (United States)**
- **Last Update 2024-04-06**
- **Data Cleaning Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Feature Engineering Functions**
- **Input Table**
- **Output Table**
- **Detailed Output**
- **Output Probabilities**
- **Responses**
- **Accumulate Columns** 

This guide provides a brief overview and examples of using `TD_DecisionForestPredict` within the Teradata Analytics Database.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/TD_DecisionForestPredict-Syntax","2024-07-27 12:01:35"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict","text/html;charset=UTF-8","200","","Indexable","","TD_GLMPredict Function | GLMPredict | Teradata Vantage - TD_GLMPredict - Analytics Database","91","862","Analytics Database (SQL Engine) function predicts target values and class labels for test data using a generalized linear model trained by TD_GLM.","146","902","","0","TD_GLMPredict Function | GLMPredict | Teradata Vantage - TD_GLMPredict - Analytics Database","91","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict","","","","","","215818","14881","14881","5.275","A+","404","84","4.810","40.083","Hard","11.872","1","4","","707","707","0","99.860","730","728","0","","","","","","","","","0.468","","","","","","1.1","### Summary of TD_GLMPredict Function

The `TD_GLMPredict` function in Teradata Vantage is used for predicting target values for regression tasks and class labels for classification tasks based on a previously fitted Generalized Linear Model (GLM) created using the `TD_GLM` function. Before utilizing `TD_GLMPredict`, it is necessary to prepare the input features, including standardizing numeric features and converting categorical features into a numeric format. 

The function handles numeric input only and ignores any observations with missing values (NULLs) in the input columns. Post-prediction evaluations can be conducted using functions like `TD_RegressionEvaluator`, `TD_ClassificationEvaluator`, or the `TD_ROC` function. The predictions generated can be used for various applications, including binary classification, count prediction, and continuous outcome prediction.

### Code Example Section

#### 1. **Create a GLM Model**
```sql
CREATE TABLE model_data (
    feature1 FLOAT,
    feature2 FLOAT,
    target_variable INTEGER
);

INSERT INTO model_data VALUES (1.1, 2.2, 0);
INSERT INTO model_data VALUES (2.3, 3.4, 1);
-- Add more data as needed

-- Fit a GLM model
CALL TD_GLM('model_name', 'model_data', 'target_variable', 'feature1, feature2');
```

#### 2. **Scale Features**
```sql
-- Scale the features
CALL TD_ScaleFit('model_data', 'scaled_data', 'feature1, feature2');
CALL TD_ScaleTransform('scaled_data', 'scaled_model_data');
```

#### 3. **Convert Categorical Features**
```sql
-- Assuming feature3 is categorical
CALL TD_OneHotEncodingFit('model_data', 'encoded_data', 'feature3');
CALL TD_OneHotEncodingTransform('encoded_data', 'final_encoded_data');
```

#### 4. **Predict using TD_GLMPredict**
```sql
-- Make predictions
SELECT *
FROM TD_GLMPredict('model_name', 'final_encoded_data') AS predictions;
```

#### 5. **Evaluate Predictions**
```sql
-- Evaluate predictions
CALL TD_ClassificationEvaluator('predictions', 'target_variable', 'predicted_variable');
```

### Keywords and Phrases

- **TD_GLMPredict Function**
- **GLMPredict**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language English (United States)**
- **Last Update 2024-04-06**
- **Function Syntax Descriptions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Maximum Number of Columns in a Database Table**
- **Imputation Functions**
- **Prediction Intervals**
- **Mean Squared Error**
- **Overfitting Evaluations**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict","2024-07-27 12:51:10"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/Examples-How-to-Use-TD_GLMPredict","text/html;charset=UTF-8","200","","Indexable","","TD_GLMPredict Examples | GLMPredict | Teradata Vantage - Examples: How to Use TD_GLMPredict - Analytics Database","112","1076","See examples of the Analytics Database (SQL Engine) function TD_GLMPredict.","75","489","","0","TD_GLMPredict Examples | GLMPredict | Teradata Vantage - Examples: How to Use TD_GLMPredict - Analytics Database","112","Database Analytic Functions","27","Example: TD_GLMPredict Using Credit Data","40","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/Examples-How-to-Use-TD_GLMPredict","","","","","","215324","13925","13925","4.936","A+","262","94","2.787","69.033","Normal","11.388","1","5","","707","707","0","99.860","715","711","0","","","","","","","","","0.611","","","","","","1.1","## Summary

The Teradata Vantage analytics database provides a robust environment for executing various analytic functions, including predictive modeling and data manipulation. The `TD_GLMPredict` function is specifically designed to make predictions based on Generalized Linear Models (GLM) that have been previously trained using the `TD_GLM` function. This guide will cover the basics of SQL operations such as SELECT, UPDATE, DELETE, and CREATE, with a focus on leveraging `TD_GLMPredict` for predictive analytics in Teradata Vantage.

## Code Example

### 1. SELECT
This operation retrieves data from a table. Below is an example of selecting predictions from a model.

```sql
SELECT ID, Prediction, Outcome
FROM vt_glm_predict_credit_ex;
```

### 2. UPDATE
Use this operation to modify existing records in a table. Here’s an example of updating a specific prediction based on an ID.

```sql
UPDATE vt_glm_predict_credit_ex
SET Prediction = 1
WHERE ID = 61;
```

### 3. DELETE
This operation removes records from a table. The following example deletes a specific entry based on an ID.

```sql
DELETE FROM vt_glm_predict_credit_ex
WHERE ID = 297;
```

### 4. CREATE
This operation allows for the creation of new tables. The following example creates a volatile table for storing predictions from a GLM model.

```sql
CREATE VOLATILE TABLE vt_glm_predict_credit_ex AS (
    SELECT * FROM TD_GLMPredict (
      ON credit_ex_merged AS INPUTTABLE
      ON td_glm_output_credit_ex AS Model DIMENSION
      USING
      IDColumn ('ID')
      Accumulate('Outcome')
    ) AS dt
) WITH DATA
ON COMMIT PRESERVE ROWS;
```

### Example of Using TD_GLMPredict
Using housing data to predict target values after scaling the data:

```sql
CREATE VOLATILE TABLE vt_predict_cal_ex AS (
    SELECT * FROM TD_GLMPredict (
      ON cal_housing_ex_scaled AS INPUTTABLE
      ON td_glm_cal_ex AS Model DIMENSION
      USING
      IDColumn ('ID')
      Accumulate('MedHouseVal')
    ) AS dt
) WITH DATA
ON COMMIT PRESERVE ROWS;
```

## Keywords and Phrases

- **TD_GLMPredict Examples**
- **GLMPredict**
- **Teradata Vantage - Examples**
- **How to Use TD_GLMPredict**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**","27","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/Examples-How-to-Use-TD_GLMPredict","2024-07-27 11:29:00"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/Optional-Syntax-Elements-for-TD_GLMPredict","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_GLMPredict - Analytics Database","63","591","Accumulate Specify the input table column names to copy to the output table. OutputProb Specify whether the function returns the probability for each response. Only applicable if family of probability distribution is BINOMIAL. The default value is false. Responses Specify the class labels if the function returns probab...","323","1960","","0","Optional Syntax Elements for TD_GLMPredict - Analytics Database","63","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/Optional-Syntax-Elements-for-TD_GLMPredict","","","","","","208453","13066","13066","4.632","A+","148","53","2.792","35.944","Hard","11.388","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.084","","","","","","1.1","### Summary
The Teradata Vantage™ Analytics Database provides a robust set of functions for data manipulation, analytics, and model building. This document outlines essential SQL operations—Select, Update, Delete, and Create—along with specific applications of the TD_GLMPredict function, which is used for scoring Generalized Linear Models (GLMs). The examples provided will assist users in understanding how to implement these operations effectively within the Teradata environment.

### Code Example

#### 1. Select
The `SELECT` statement is used to query data from a database. 

```sql
SELECT *
FROM customer_data
WHERE country = 'USA';
```

#### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE customer_data
SET status = 'active'
WHERE last_login > '2023-01-01';
```

#### 3. Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM customer_data
WHERE status = 'inactive';
```

#### 4. Create
The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE new_orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    amount DECIMAL(10, 2)
);
```

### TD_GLMPredict Example
The `TD_GLMPredict` function is utilized to predict outcomes based on a trained GLM.

```sql
SELECT *
FROM TD_GLMPredict(
    ON new_data AS input_data
    USING MODEL my_glm_model
    OUTPUT OUT predicted_results
);
```

### Keywords and Phrases
- Optional Syntax Elements for TD_GLMPredict
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Recommendations for Using Analytic Functions
- Examples of Using Various Functions
- TD_GetRowsWithoutMissingValues
- TD_OneHotEncodingTransform
- TD_SimpleImputeTransform
- TD_DecisionForestPredict
- TD_XGBoostPredict
- TD_KMeansPredict
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- Sessionize
- nPath","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/Optional-Syntax-Elements-for-TD_GLMPredict","2024-07-27 12:11:26"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/Required-Syntax-Elements-for-TD_GLMPredict","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_GLMPredict - Analytics Database","63","595","ON clause Accepts the PARTITION BY ANY and DIMENSION clauses. IDColumn Specify the column name that uniquely identifies an observation in test table.","149","962","","0","Required Syntax Elements for TD_GLMPredict - Analytics Database","63","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/Required-Syntax-Elements-for-TD_GLMPredict","","","","","","207626","12761","12761","4.524","A+","67","38","1.763","14.380","Very Hard","11.181","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.327","","","","","","1.1","# Summary

The **Analytics Database** in Teradata Vantage™ provides a rich set of analytic functions that allow users to perform various operations such as data cleaning, feature engineering, and statistical analysis. This document outlines the syntax and examples for core database operations including **Select**, **Update**, **Delete**, and **Create**, as well as the specific syntax elements required for the `TD_GLMPredict` function, which is used for model scoring.

## Code Examples

### 1. Select

The `SELECT` statement is used to query data from a database.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

### 2. Update

The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

### 3. Delete

The `DELETE` statement is used to remove records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

### 4. Create

The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Keywords and Phrases

- **Required Syntax Elements for TD_GLMPredict** 
- **Analytics Database**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Function Syntax Descriptions**
- **AMP Configuration Impact**
- **Limitations When Using PARTITION BY**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion**
- **Data Cleaning Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**

This summary provides a foundational understanding of the Teradata Analytics Database and its operations. The examples included offer a practical view of how to perform basic SQL commands, while the keywords and phrases serve as a guide to the various concepts and components associated with the Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/Required-Syntax-Elements-for-TD_GLMPredict","2024-07-27 12:01:50"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/TD_GLMPredict-Input","text/html;charset=UTF-8","200","","Indexable","","TD_GLMPredict Input - Analytics Database","40","377","Input Table Schema Column Name Data Type Description id_column Any Column that uniquely identifies an observation in test table. input_column INTEGER, BIGINT, SMALLINT, BYTEINT, FLOAT, DECIMAL, NUMBER Column used as predictors (features) for model training. partition_by_column Any Unique identifier of model for testing...","323","2069","","0","TD_GLMPredict Input - Analytics Database","40","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/TD_GLMPredict-Input","","","","","","212917","13758","13758","4.877","A+","187","55","3.400","28.755","Very Hard","11.305","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.725","","","","","","1.1","## Summary

The Analytics Database within Teradata Vantage™ provides numerous analytic functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This functionality supports a wide range of tasks aimed at enhancing data analysis and machine learning workflows. The ability to perform operations such as selecting, updating, deleting, and creating datasets is integral to efficiently managing data within this environment.

### Code Example

Here are examples demonstrating how to perform basic SQL operations—Select, Update, Delete, and Create—using Teradata SQL syntax.

#### 1. **Select**
The `SELECT` statement is used to query data from a database table.

```sql
SELECT id_column, input_column
FROM my_table
WHERE input_column > 100;
```

#### 2. **Update**
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE my_table
SET input_column = input_column * 1.1
WHERE id_column = 1;
```

#### 3. **Delete**
The `DELETE` statement is used to remove records from a table.

```sql
DELETE FROM my_table
WHERE input_column < 50;
```

#### 4. **Create**
The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE new_table (
    id_column INTEGER NOT NULL,
    input_column FLOAT,
    PRIMARY KEY (id_column)
);
```

### Keywords and Phrases
- **TD_GLMPredict Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**: gjn1627595495337.ditamap
- **dita:ditavalPath**: ayr1485454803741.ditaval
- **dita:id**: jmh1512506877710
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Limitations When Using PARTITION BY**
- **Maximum Number of Columns in a Database Table**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Recommendations for Using Analytic Functions**
- **Examples**: How to Use [Function Name]
- **Input Table Schema**
- **Column Name, Data Type, Description**
- **Model Schema**
- **Predictor Weights and Numeric Values of Metrics**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/TD_GLMPredict-Input","2024-07-27 12:12:42"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/TD_GLMPredict-Output","text/html;charset=UTF-8","200","","Indexable","","TD_GLMPredict Output - Analytics Database","41","393","Output Table Schema Column Name Data Type Description id_column Any Specified column name that uniquely identifies an observation in test table. partition_by_column CHARACTER, VARCHAR, INTEGER, BIGINT, SMALLINT, BYTEINT [Partition by key only] Unique identifier of model in InputTable. prediction FLOAT Predicted value o...","323","2067","","0","TD_GLMPredict Output - Analytics Database","41","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/TD_GLMPredict-Output","","","","","","210998","13364","13364","4.738","A+","166","51","3.255","33.312","Hard","11.327","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.698","","","","","","1.1","# Teradata Vantage™ Analytics Database Overview

Teradata Vantage™ provides a powerful analytics database that supports various analytic functions, with the ability to perform complex data operations efficiently. The analytics database facilitates tasks such as data cleaning, feature engineering, model training, and evaluation through a range of built-in functions.

## Summary

The analytics database supports a diverse set of functions that cater to various data manipulation and analysis needs. This includes functions for data cleaning, feature engineering, model training, and model scoring. Each function has specific syntax and input requirements, allowing users to clean data, build predictive models, and evaluate their performance effectively.

## Code Example Section

### SQL Code for Common Database Operations

Here are examples of basic SQL operations—Select, Update, Delete, and Create—using Teradata syntax.

#### 1. Select

To retrieve data from a table, use the `SELECT` statement.

```sql
SELECT 
    customer_id, 
    customer_name, 
    total_spent 
FROM 
    customers 
WHERE 
    total_spent > 1000;
```

#### 2. Update

To modify existing data in a table, use the `UPDATE` statement.

```sql
UPDATE 
    customers 
SET 
    total_spent = total_spent * 1.10 
WHERE 
    loyalty_member = 'Y';
```

#### 3. Delete

To remove records from a table, use the `DELETE` statement.

```sql
DELETE FROM 
    customers 
WHERE 
    last_purchase_date < '2022-01-01';
```

#### 4. Create

To create a new table, use the `CREATE TABLE` statement.

```sql
CREATE TABLE new_customers (
    customer_id INT NOT NULL,
    customer_name VARCHAR(255),
    total_spent DECIMAL(10, 2),
    registration_date DATE,
    PRIMARY KEY (customer_id)
);
```

## Keywords and Phrases

- TD_GLMPredict Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Recommendations for Using Analytic Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix

These keywords and phrases summarize the capabilities and functionalities of the Teradata Vantage™ Analytics Database, showcasing its importance in data manipulation and analysis tasks.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/TD_GLMPredict-Output","2024-07-27 12:27:32"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/TD_GLMPredict-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_GLMPredict Syntax | GLMPredict | Teradata Vantage - TD_GLMPredict Syntax - Analytics Database","96","910","See the syntax of Analytics Database (SQL Engine) function TD_GLMPredict and read descriptions of its required and optional syntax elements.","140","882","","0","TD_GLMPredict Syntax | GLMPredict | Teradata Vantage - TD_GLMPredict Syntax - Analytics Database","96","Database Analytic Functions","27","TD_GLMPredict Syntax Using Partition by Any","43","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/TD_GLMPredict-Syntax","","","","","","210384","13267","13267","4.703","A+","214","79","2.709","41.606","Hard","11.599","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.518","","","","","","1.1","### Summary of TD_GLMPredict

`TD_GLMPredict` is a function in Teradata Vantage that allows users to make predictions using a Generalized Linear Model (GLM). It can be utilized with different partitioning options to fit the model to various data structures. The syntax supports several options for input tables, model specifications, and output settings. It is particularly useful in analytics and machine learning contexts for predictive modeling.

### Code Examples

#### 1. **Select Query Using TD_GLMPredict**
```sql
SELECT
  IDColumn,
  TD_GLMPredict (
    ON input_table AS InputTable PARTITION BY partition_column
    ON model_table AS ModelTable
    USING
    IDColumn ('id_column')
    [Accumulate({'accumulate_column'})]
    [Responses ('response')]
    [Family ('Gaussian')]
  ) AS Prediction
FROM
  input_table;
```

#### 2. **Update Query Using TD_GLMPredict**
```sql
UPDATE target_table
SET Prediction = TD_GLMPredict (
    ON input_table AS InputTable PARTITION BY partition_column
    ON model_table AS ModelTable
    USING
    IDColumn ('id_column')
    [OutputProb ('true')]
  )
WHERE conditions;
```

#### 3. **Delete Query**
```sql
DELETE FROM target_table
WHERE Prediction IS NULL;
```

#### 4. **Create Table with TD_GLMPredict**
```sql
CREATE TABLE prediction_results AS (
  SELECT
    IDColumn,
    TD_GLMPredict (
      ON input_table AS InputTable
      ON model_table AS ModelTable
      USING
      IDColumn ('id_column')
      [Responses ('response')]
      [Family ('Binomial')]
    ) AS Prediction
  FROM
    input_table
) WITH NO DATA;
```

### Keywords and Phrases
- TD_GLMPredict Syntax
- GLMPredict
- Teradata Vantage - TD_GLMPredict Syntax
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Model Training Functions
- Model Scoring Functions
- Feature Engineering Transform Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- TD_GLMPredict Syntax Using Partition by Any
- TD_GLMPredict Syntax Using Partition by Key
- Functions for Predictive Modeling
- Input and Output Specifications
- Predictions in Analytics","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/TD_GLMPredict-Syntax","2024-07-27 12:25:50"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict","text/html;charset=UTF-8","200","","Indexable","","TD_KMeansPredict Function | KMeansPredict | Teradata Vantage - TD_KMeansPredict - Analytics Database","100","955","This Analytics Database (SQL Engine) function uses the cluster centroids in the TD_KMeans function output to assign input data points to the cluster centroids.","159","981","","0","TD_KMeansPredict Function | KMeansPredict | Teradata Vantage - TD_KMeansPredict - Analytics Database","100","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict","","","","","","210159","13397","13397","4.749","A+","181","63","2.873","52.948","Fairly Hard","11.410","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.460","","","","","","1.1","## Summary

The `TD_KMeansPredict` function in Teradata Vantage is used to predict the target class of new or unseen data using the k-means clustering algorithm. This function is part of the analytics database analytic functions and is designed to identify patterns in data by grouping similar data points together based on their attributes.

The k-means algorithm operates by:
1. Selecting the number of clusters (K).
2. Initializing centroids for each cluster.
3. Assigning data points to the nearest centroid based on distance.
4. Recalculating the centroids based on the current cluster assignments.
5. Repeating the assignment and recalculation steps until the assignments stabilize.
6. Finally, predicting the cluster assignments for new data points.

This process is useful for various applications, including customer segmentation, image processing, and pattern recognition.

## Code Example

Below are examples of SQL commands to demonstrate the basic operations (Select, Update, Delete, Create) in Teradata, including an illustration of using the `TD_KMeansPredict` function.

### Create Table

```sql
CREATE TABLE customer_data (
    customer_id INT,
    age INT,
    income DECIMAL(10, 2),
    cluster_id INT
);
```

### Insert Data

```sql
INSERT INTO customer_data (customer_id, age, income)
VALUES
    (1, 25, 50000),
    (2, 30, 60000),
    (3, 22, 45000),
    (4, 35, 70000);
```

### Select Data

```sql
SELECT * FROM customer_data;
```

### Update Data

```sql
UPDATE customer_data
SET income = income * 1.1
WHERE age > 30;
```

### Delete Data

```sql
DELETE FROM customer_data
WHERE customer_id = 4;
```

### Using TD_KMeansPredict

```sql
SELECT 
    customer_id, 
    age, 
    income, 
    TD_KMeansPredict(
        'my_kmeans_model', 
        age, 
        income
    ) AS predicted_cluster
FROM 
    customer_data;
```

## Keywords and Phrases

- TD_KMeansPredict Function
- KMeansPredict
- Teradata Vantage - TD_KMeansPredict
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Usage Notes
- Function Syntax Descriptions
- Model Training Functions
- Model Scoring Functions
- Example: How to Use the k-means Algorithm
- Predicting Clusters
- Cluster Assignments
- Data Points Clustering
- Centroid Initialization
- Distance Calculation
- Unseen Data Prediction","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict","2024-07-27 11:57:20"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/Example-How-to-Use-the-k-means-Algorithm","text/html;charset=UTF-8","200","","Indexable","","Using the K-Means Algorithm | Teradata Vantage - Example: How to Use the k-means Algorithm - Analytics Database","111","1038","This example shows how you can use k-means algorithm to predict an unseen data point.","85","551","","0","Using the K-Means Algorithm | Teradata Vantage - Example: How to Use the k-means Algorithm - Analytics Database","111","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/Example-How-to-Use-the-k-means-Algorithm","","","","","","396136","47483","47483","16.833","A+","203","54","3.759","68.409","Normal","10.179","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.026","","","","","","1.1","### Summary

The K-Means algorithm is a popular clustering method used to partition a dataset into distinct groups (clusters) based on feature similarity. It works by initializing a specified number of centroids and iteratively assigning data points to the nearest centroid, followed by recalculating centroids based on the assigned points. This process continues until the centroids no longer change significantly, indicating that the clusters are stable.

In a typical K-Means operation:
1. **Initialization**: Choose K initial centroids (randomly selected data points).
2. **Assignment Step**: Assign each data point to the nearest centroid.
3. **Update Step**: Recalculate centroids based on the mean of assigned points.
4. **Repeat**: Continue the assignment and update steps until convergence.

Below is an example of how to implement K-Means using Teradata Vantage, as well as basic SQL commands for handling data.

### Code Example

#### SQL Commands: Select, Update, Delete, Create

```sql
-- Create a new table to store data
CREATE TABLE sales_data (
    id INT,
    product_name VARCHAR(255),
    quantity_sold INT,
    sales_amount DECIMAL(10, 2)
);

-- Insert some sample data into the table
INSERT INTO sales_data (id, product_name, quantity_sold, sales_amount) VALUES
(1, 'Product A', 100, 2500.00),
(2, 'Product B', 150, 3750.00),
(3, 'Product C', 200, 5000.00);

-- Select all records from the table
SELECT * FROM sales_data;

-- Update a record in the table
UPDATE sales_data
SET quantity_sold = 120
WHERE id = 1;

-- Delete a record from the table
DELETE FROM sales_data
WHERE id = 2;
```

#### K-Means Algorithm Example in Teradata Vantage

```sql
-- Assuming we have a table named 'data_points' with features for clustering

-- Step 1: Fit the K-Means model
CALL TD_KMeans(
    'data_points',        -- Input table
    'output_clusters',    -- Output table for cluster assignments
    3,                    -- Number of clusters (K)
    'feature1, feature2'  -- Features used for clustering
);

-- Step 2: Predict cluster for new data
CALL TD_KMeansPredict(
    'new_data_points',    -- New data table
    'output_predictions',  -- Output table for predictions
    'output_clusters',     -- Reference to the previously computed clusters
    'feature1, feature2'   -- Features used for prediction
);
```

### Keywords and Phrases
- Using the K-Means Algorithm
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Enterprise Edition
- IntelliFlex
- VMware
- Product: Teradata Vantage
- Analytics Database Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- KMeans Predict
- SQL Commands: Select, Update, Delete, Create
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Example: How to Use TD_KMeans
- Cluster Assignment
- Centroid Calculation
- Iterative Process
- Data Clustering

This structured overview provides a foundation for understanding the K-Means algorithm and basic SQL operations, suitable for data analysis and clustering tasks within Teradata Vantage.","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/Example-How-to-Use-the-k-means-Algorithm","2024-07-27 12:46:09"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/Examples-How-to-Use-TD_KMeansPredict","text/html;charset=UTF-8","200","","Indexable","","TD_KMeansPredict Examples | KMeansPredict | Teradata Vantage - Examples: How to Use TD_KMeansPredict - Analytics Database","121","1169","This Analytics Database (SQL Engine) function uses the cluster centroids in the TD_KMeans function output to assign input data points to the cluster centroids.","159","981","","0","TD_KMeansPredict Examples | KMeansPredict | Teradata Vantage - Examples: How to Use TD_KMeansPredict - Analytics Database","121","Database Analytic Functions","27","Input Table","11","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/Examples-How-to-Use-TD_KMeansPredict","","","","","","210991","13558","13558","4.806","A+","324","106","3.057","87.799","Easy","12.245","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.892","","","","","","1.1","## Summary of TD_KMeansPredict

The `TD_KMeansPredict` function in Teradata Vantage is used to assign input data points to clusters based on the centroids obtained from a previous `TD_KMeans` clustering operation. The function takes an input table containing the data to be clustered and a model table containing the cluster centroids. It can output the distance of each point from the assigned cluster centroid and the cluster ID.

### Code Example

Here is a basic example of how to use the `TD_KMeansPredict` function, as well as examples of common SQL operations: Select, Insert, Update, and Delete.

#### 1. Select

```sql
SELECT * FROM TD_KMeansPredict (
  ON kmeans_input_table AS InputTable
  ON kmeans_model AS ModelTable DIMENSION
  USING
  OutputDistance('true')
  Accumulate('c1', 'c2')
) AS dt ORDER BY 1, 2, 3;
```

#### 2. Insert

To insert a new record into the input table before making predictions:

```sql
INSERT INTO kmeans_input_table (id, c1, c2) VALUES (5, 5, 5);
```

#### 3. Update

To update an existing record in the input table:

```sql
UPDATE kmeans_input_table
SET c1 = 7, c2 = 7
WHERE id = 1;
```

#### 4. Delete

To delete a record from the input table:

```sql
DELETE FROM kmeans_input_table WHERE id = 4;
```

### TD_KMeansPredict Output Example

When you run the `TD_KMeansPredict` function with `OutputDistance` set to 'true', the output will look like this:

```
         id   td_clusterid_kmeans      td_distance_kmeans   C1       C2 
         --   -------------------      ------------------   --       -- 
         1     0                        0.707               1        1
         2     0                        0.707               2        2
         3     1                        0.707               8        8
         4     1                        0.707               9        9
```

If you set `OutputDistance` to 'false', the output will exclude the distance column:

```
         id   td_clusterid_kmeans      C1       C2
         --  ---------------------     --       --
         1     0                       1        1
         2     0                       2        2
         3     1                       8        8
         4     1                       9        9
```

### Keywords and Phrases

- TD_KMeansPredict Examples
- KMeansPredict
- Teradata Vantage - Examples: How to Use TD_KMeansPredict
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- TD_KMeans
- TD_KMeansPredict
- TD_KMeansPredict Syntax
- Input Table
- Output Table
- Clustering
- Centroids
- SQL Operations
- Select, Update, Delete, Create","27","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/Examples-How-to-Use-TD_KMeansPredict","2024-07-27 12:53:10"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/Optional-Syntax-Elements-for-TD_KMeansPredict","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_KMeansPredict - Analytics Database","66","622","The following are the hyperparameters that you tune when using the TD_KMeansPredict function: OutputDistance Indicator to return the distance between each data point and the nearest cluster. Default: False. Accumulate Input table column names to include in the output table.","274","1717","","0","Optional Syntax Elements for TD_KMeansPredict - Analytics Database","66","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/Optional-Syntax-Elements-for-TD_KMeansPredict","","","","","","207937","12923","12923","4.581","A+","84","42","2.000","24.526","Very Hard","11.226","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.443","","","","","","1.1","### Summary
The TD_KMeansPredict function in Teradata Vantage™ is used to predict cluster assignments for new data points based on a trained k-means clustering model. This function leverages the output of a previously built k-means model to classify new data into the identified clusters.

### Code Examples

#### 1. Create a Cluster Model
```sql
CREATE TABLE data_points (
    id INT,
    feature1 FLOAT,
    feature2 FLOAT
);

INSERT INTO data_points (id, feature1, feature2) VALUES (1, 10.0, 20.0);
INSERT INTO data_points (id, feature1, feature2) VALUES (2, 30.0, 40.0);
INSERT INTO data_points (id, feature1, feature2) VALUES (3, 50.0, 60.0);

-- Train the KMeans model
CREATE MODEL kmeans_model AS
SELECT TD_KMeansFit(2, feature1, feature2) OVER () AS kmeans_model
FROM data_points;
```

#### 2. Predict Cluster Assignments
```sql
-- New data points for prediction
CREATE TABLE new_data (
    id INT,
    feature1 FLOAT,
    feature2 FLOAT
);

INSERT INTO new_data (id, feature1, feature2) VALUES (4, 12.0, 22.0);
INSERT INTO new_data (id, feature1, feature2) VALUES (5, 32.0, 42.0);

-- Predict the cluster assignments
SELECT id, 
       TD_KMeansPredict(kmeans_model, feature1, feature2) AS predicted_cluster
FROM new_data;
```

#### 3. Update Cluster Model (if necessary)
```sql
-- Assume we have more data points to update the model
INSERT INTO data_points (id, feature1, feature2) VALUES (6, 70.0, 80.0);

-- Retrain the KMeans model
CREATE MODEL kmeans_model AS
SELECT TD_KMeansFit(2, feature1, feature2) OVER () AS kmeans_model
FROM data_points;
```

#### 4. Delete a Cluster Model
```sql
-- Delete the cluster model when no longer needed
DROP MODEL kmeans_model;
```

### Keywords and Phrases
- **Optional Syntax Elements for TD_KMeansPredict**
- **Analytics Database**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Teradata Vantage™**
- **Release Number: 17.20**
- **Published: June 2022**
- **Last Update: 2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Feature Engineering Functions**
- **Hypothesis Testing Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Displaying Online Help**
- **Workload Management Configuration**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact on Function Execution**
- **TD_KMeansPredict Example**
- **OutputDistance**

This summary and examples provide a foundational understanding of how to use the TD_KMeansPredict function in Teradata Vantage for clustering tasks.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/Optional-Syntax-Elements-for-TD_KMeansPredict","2024-07-27 12:14:00"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/Required-Syntax-Elements-for-TD_KMeansPredict","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_KMeansPredict - Analytics Database","66","626","The following are the hyperparameters that you tune when using the TD_KMeansPredict function: ON clause Accepts the InputTable and ModelTable clauses.","150","969","","0","Required Syntax Elements for TD_KMeansPredict - Analytics Database","66","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/Required-Syntax-Elements-for-TD_KMeansPredict","","","","","","207604","12753","12753","4.521","A+","65","37","1.757","16.329","Very Hard","11.184","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.751","","","","","","1.1","## Summary

The **TD_KMeansPredict** function in the Teradata Vantage™ Analytics Database is used for predicting cluster memberships for new data points based on a previously trained k-means model. This function is part of the broader set of analytic functions available in Teradata's analytics database, which provides tools for data analysis, feature engineering, model training, and evaluation.

### Code Examples

Here are some basic SQL operations such as SELECT, UPDATE, DELETE, and CREATE that might be useful when interacting with databases, including those that use the TD_KMeansPredict function.

#### 1. SELECT
```sql
SELECT *
FROM Customers
WHERE Country = 'USA';
```

#### 2. UPDATE
```sql
UPDATE Customers
SET ContactName = 'Juan'
WHERE CustomerID = 1;
```

#### 3. DELETE
```sql
DELETE FROM Customers
WHERE CustomerID = 1;
```

#### 4. CREATE
```sql
CREATE TABLE Customers (
    CustomerID int,
    ContactName varchar(255),
    Country varchar(100)
);
```

### Keywords and Phrases
- **Required Syntax Elements for TD_KMeansPredict**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Language**
- **Last Update**
- **Product Category**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Example: How to Use TD_KMeansPredict**
- **Hyperparameters**
- **ON clause**
- **InputTable**
- **ModelTable**

This structured overview provides a clear foundation for understanding and utilizing the TD_KMeansPredict function along with database operations essential for data management.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/Required-Syntax-Elements-for-TD_KMeansPredict","2024-07-27 12:25:51"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/TD_KMeansPredict-Input","text/html;charset=UTF-8","200","","Indexable","","TD_KMeansPredict Input - Analytics Database","43","408","Input Table Schema Column Data Type Description IdColumn Any InputTable column name that is the unique identifier for each input table row. TargetColumns BYTEINT, SMALLINT, INTEGER,BIGINT, DECIMAL/NUMERIC, FLOAT, REAL, DOUBLE PRECISION InputTable column names used for clustering.","280","1862","","0","TD_KMeansPredict Input - Analytics Database","43","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/TD_KMeansPredict-Input","","","","","","208982","13156","13156","4.664","A+","78","39","2.000","6.320","Very Hard","11.162","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.442","","","","","","1.1","## Summary

In the context of Teradata Vantage™ and its Analytics Database, analytic functions play a crucial role in data analysis and machine learning. These functions range from data cleaning and exploration to model training and evaluation. The powerful capabilities of Teradata's analytic functions allow users to derive insights from data efficiently. This guide provides examples of basic SQL operations such as Select, Update, Delete, and Create, which are fundamental to managing data within the database.

## Code Examples

### 1. Select
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

**Example:**
```sql
SELECT customer_id, customer_name
FROM customers
WHERE country = 'USA';
```

### 2. Update
The `UPDATE` statement modifies existing data in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example:**
```sql
UPDATE customers
SET customer_name = 'John Doe'
WHERE customer_id = 1;
```

### 3. Delete
The `DELETE` statement removes rows from a table based on a condition.

```sql
DELETE FROM table_name
WHERE condition;
```

**Example:**
```sql
DELETE FROM customers
WHERE customer_id = 1;
```

### 4. Create
The `CREATE` statement creates a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example:**
```sql
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    country VARCHAR(50)
);
```

## Keywords and Phrases

- TD_KMeansPredict Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Examples: How to Use Pack
- Examples: How to Use TD_KMeansPredict
- Example: How to Use the k-means Algorithm
- Example: Using TD_GetRowsWithMissingValues to Find NULL Values
- Example: Using TD_SimpleImputeFit
- TD_OneHotEncodingTransform Input
- TD_OrdinalEncodingTransform Output
- TD_VectorDistance Syntax
- TD_XGBoostPredict Syntax
- TD_DecisionForestPredict Syntax
- TD_SVM Syntax
- TD_KNN Syntax
- TD_KMeans Syntax
- TD_GLMPredict Syntax
- TD_ClassificationEvaluator Syntax
- TD_RegressionEvaluator Syntax
- TD_ANOVA Syntax
- TD_ChiSq Syntax
- TD_ZTest Syntax
- nPath Syntax
- Sessionize Syntax 

This outline provides a concise reference for users looking to understand and utilize Teradata Vantage's analytic functions and basic SQL operations effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/TD_KMeansPredict-Input","2024-07-27 11:27:00"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/TD_KMeansPredict-Output","text/html;charset=UTF-8","200","","Indexable","","TD_KMeansPredict Output - Analytics Database","44","424","Output Table Schema Column Data Type Description Id_Column ANY Unique identifier of input rows from the input table. TD_CLUSTERID_KMEANS BIGINT Unique identifier of the cluster. TD_DISTANCE_KMEANS REAL Distance between a data point and the center of the assigned cluster. The query shows the column when you set the Outp...","323","2093","","0","TD_KMeansPredict Output - Analytics Database","44","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/TD_KMeansPredict-Output","","","","","","209911","13286","13286","4.710","A+","103","41","2.512","30.157","Hard","11.179","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.640","","","","","","1.1","## Summary

This document provides an overview of the Teradata Vantage™ Analytics Database and its analytic functions, particularly focusing on K-Means clustering and its usage. The document details various functions for data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analytics. Additionally, it includes practical examples and syntax requirements for different functions, enabling users to leverage the database’s capabilities effectively.

## Code Example

### Create Table
```sql
CREATE TABLE CustomerData (
    CustomerID INT PRIMARY KEY,
    Name VARCHAR(100),
    Age INT,
    PurchaseAmount DECIMAL(10, 2)
);
```

### Select Data
```sql
SELECT Name, Age, PurchaseAmount
FROM CustomerData
WHERE Age > 30;
```

### Update Data
```sql
UPDATE CustomerData
SET PurchaseAmount = PurchaseAmount * 1.10
WHERE Age > 30;
```

### Delete Data
```sql
DELETE FROM CustomerData
WHERE PurchaseAmount < 50.00;
```

### Create K-Means Model
```sql
CREATE MODEL CustomerClusters AS
SELECT * FROM CustomerData
USING TD_KMeans(NumClusters => 3);
```

### Predict Using K-Means
```sql
SELECT *
FROM TD_KMeansPredict(
    ON CustomerData AS InputData
    USING CustomerClusters AS Model
);
```

## Keywords and Phrases
- TD_KMeansPredict Output
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Recommendations for Using Analytic Functions
- Output Table Schema
- TD_CLUSTERID_KMEANS
- TD_DISTANCE_KMEANS","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/TD_KMeansPredict-Output","2024-07-27 11:36:25"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/TD_KMeansPredict-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_KMeansPredict Syntax | KMeansPredict | Teradata Vantage - TD_KMeansPredict Syntax - Analytics Database","105","1003","See the syntax of Analytics Database (SQL Engine) function TD_KMeansPredict and read descriptions of its required and optional syntax elements.","143","903","","0","TD_KMeansPredict Syntax | KMeansPredict | Teradata Vantage - TD_KMeansPredict Syntax - Analytics Database","105","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/TD_KMeansPredict-Syntax","","","","","","208439","12953","12953","4.592","A+","114","46","2.478","45.509","Hard","11.288","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.710","","","","","","1.1","### Summary of TD_KMeansPredict

`TD_KMeansPredict` is a Teradata Vantage analytic function used to predict cluster assignments for new data points based on a trained k-means model. This function allows users to apply clustering models to new datasets, facilitating insights into the segmentation of the data based on predefined features. The function can be utilized in various SQL statements, including `SELECT`, `CREATE TABLE`, and `CREATE VIEW`.

### Code Example

Below are several examples demonstrating how to use `TD_KMeansPredict` in SQL statements for common database operations: **Select**, **Update**, **Delete**, and **Create**.

#### 1. Select Example
Using `TD_KMeansPredict` in a `SELECT` statement to predict cluster assignments for a dataset:

```sql
SELECT 
    InputTable.*, 
    TD_KMeansPredict(
        ON InputTable 
        ON ModelTable DIMENSION 
        USING OutputDistance('true')
    ) AS PredictedCluster
FROM 
    InputTable
JOIN 
    ModelTable ON InputTable.ModelID = ModelTable.ModelID;
```

#### 2. Create Table Example
Creating a new table with predictions included using `TD_KMeansPredict`:

```sql
CREATE TABLE PredictedClusters AS (
    SELECT 
        InputTable.*, 
        TD_KMeansPredict(
            ON InputTable 
            ON ModelTable DIMENSION 
            USING OutputDistance('true')
        ) AS PredictedCluster
    FROM 
        InputTable
    JOIN 
        ModelTable ON InputTable.ModelID = ModelTable.ModelID
) WITH DATA;
```

#### 3. Update Example
Updating an existing table with predicted cluster values:

```sql
UPDATE ExistingTable
SET ClusterAssignment = (
    SELECT 
        TD_KMeansPredict(
            ON InputTable 
            ON ModelTable DIMENSION 
            USING OutputDistance('true')
        )
    FROM 
        InputTable
    JOIN 
        ModelTable ON InputTable.ModelID = ModelTable.ModelID
    WHERE 
        ExistingTable.ID = InputTable.ID
);
```

#### 4. Delete Example
Deleting entries from a table based on predicted cluster assignments:

```sql
DELETE FROM TargetTable
WHERE 
    TD_KMeansPredict(
        ON InputTable 
        ON ModelTable DIMENSION 
        USING OutputDistance('true')
    ) = 'UnwantedCluster';
```

### Keywords and Phrases

- **TD_KMeansPredict Syntax**
- **KMeansPredict**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Function Syntax Descriptions**
- **Model Scoring Functions**
- **Model Training Functions**
- **Usage Notes**
- **OutputDistance**
- **Accumulate**
- **InputTable**
- **ModelTable**
- **SELECT statement**
- **CREATE TABLE statement**
- **CREATE VIEW statement**","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/TD_KMeansPredict-Syntax","2024-07-27 11:38:24"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict","text/html;charset=UTF-8","200","","Indexable","","TD_OneClassSVM Predict Function | OneClassSVMPredict - TD_OneClassSVMPredict - Analytics Database","97","946","The TD_OneClassSVMPredict model scoring function predicts target class labels (classification) for test data.","109","673","","0","TD_OneClassSVM Predict Function | OneClassSVMPredict - TD_OneClassSVMPredict - Analytics Database","97","Database Analytic Functions","27","Assumptions","11","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict","","","","","","216001","15115","15115","5.358","A+","878","153","5.739","57.441","Fairly Hard","13.128","1","4","","707","707","0","99.860","721","719","0","","","","","","","","","0.597","","","","","","1.1","## Overview of TD_OneClassSVMPredict

The `TD_OneClassSVMPredict` function is designed to predict target class labels for test data using a one-class support vector machine (SVM) model that has been previously trained with the `TD_OneClassSVM` function. This function outputs binary values: `1` for 'normal' observations and `0` for outlier observations. 

### Key Points:
- **Input Requirements**: The input features must be standardized, and only numeric features are accepted (categorical features need conversion to numeric).
- **Handling Missing Values**: Rows with missing values are excluded from the predictions.
- **Postprocessing**: For evaluating prediction results, functions such as `TD_ClassificationEvaluator` or `TD_ROC` can be employed.

### Use Cases
OneClassSVM is particularly useful in applications like fraud detection, intrusion detection, and fault detection, where identifying anomalies is crucial for system safety and reliability.

---

## Code Example Section

### SQL Commands for Data Manipulation

Here are basic SQL commands demonstrating how to `SELECT`, `UPDATE`, `DELETE`, and `CREATE` in the context of Teradata's SQL:

### 1. SELECT
```sql
SELECT *
FROM customer_data
WHERE account_status = 'active';
```

### 2. UPDATE
```sql
UPDATE customer_data
SET account_status = 'inactive'
WHERE last_login < CURRENT_DATE - INTERVAL '1 year';
```

### 3. DELETE
```sql
DELETE FROM customer_data
WHERE account_status = 'inactive' AND last_login < CURRENT_DATE - INTERVAL '2 years';
```

### 4. CREATE
```sql
CREATE TABLE customer_data (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    account_status VARCHAR(20),
    last_login DATE
);
```

---

## Summary

In summary, the `TD_OneClassSVMPredict` function is a powerful tool for predicting class labels in datasets, particularly for detecting anomalies. Its effectiveness lies in its ability to learn the normal behavior of data and identify deviations.

### Keywords and Phrases:
- TD_OneClassSVM Predict Function
- OneClassSVMPredict
- TD_OneClassSVMPredict
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- English (United States)
- Last Update
- 2024-04-06
- Function Information
- Input Features Standardization
- Outlier Detection
- Anomaly Detection
- Fraud Detection
- Intrusion Detection
- Fault Detection
- OneClassSVM
- Hyperplane
- Parameter Tuning
- Model Evaluation
- Data Preprocessing
- Training
- Prediction
- Postprocessing Metrics","27","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict","2024-07-27 12:38:20"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/Example-How-to-Use-TD_OneClassSVMPredict","text/html;charset=UTF-8","200","","Indexable","","TD_OneClassSVMPredict Example | OneClassSVMPredict - Example: How to Use TD_OneClassSVMPredict - Analytics Database","115","1135","See an example of the Analytics Database (SQL Engine) model scoring function TD_OneClassSVMPredict.","99","649","","0","TD_OneClassSVMPredict Example | OneClassSVMPredict - Example: How to Use TD_OneClassSVMPredict - Analytics Database","115","Database Analytic Functions","27","TD_OneClassSVMPredict Example: Outlier/Novelty Detection","56","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/Example-How-to-Use-TD_OneClassSVMPredict","","","","","","242811","15402","15402","5.460","A+","470","192","2.448","100.000","Very Easy","10.506","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.453","","","","","","1.1","## Summary

In this document, we explore the use of the `TD_OneClassSVMPredict` function within the Teradata Vantage™ Analytics Database, focusing on its application for outlier and novelty detection. The `TD_OneClassSVMPredict` function leverages a trained One-Class SVM model to predict whether data points in a test dataset are normal observations or outliers. The examples provided demonstrate how to create a prediction table, input test data, and interpret the outputs.

### Code Examples

#### Create Table
To create a table to store predictions from the One-Class SVM model, use the following SQL command:

```sql
CREATE MULTISET TABLE prediction AS (
    SELECT * FROM TD_OneClassSVMPredict(
        ON diabetes_test_scaled AS InputTable PARTITION BY ANY
        ON oneclasssvm_model AS ModelTable DIMENSION
        USING
        IDColumn('id')
    ) AS dt
) WITH DATA;
```

#### Select Predictions
To select the predictions from the predictions table, you can execute:

```sql
SELECT * FROM prediction;
```

#### Update Predictions
If you need to update specific predictions based on certain conditions, you can use:

```sql
UPDATE prediction
SET prediction = 0
WHERE ID = 16; -- Example to set prediction to outlier for a specific ID
```

#### Delete Outliers
To delete entries classified as outliers, you can run:

```sql
DELETE FROM prediction
WHERE prediction = 0; -- Deleting all outlier predictions
```

#### Count Normal vs. Outlier
To count how many predictions are classified as normal versus outlier, use:

```sql
SELECT CASE prediction
        WHEN 1 THEN 'normal'
        WHEN 0 THEN 'outlier'
        END AS SIGN,
        COUNT(*) AS counter
FROM prediction
GROUP BY prediction;
```

### Keywords and Phrases
- TD_OneClassSVMPredict Example
- OneClassSVMPredict - Example: How to Use TD_OneClassSVMPredict
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Model Training Functions
- Model Scoring Functions
- Outlier Detection
- Data Exploration Functions
- Hypothesis Testing Functions
- Feature Engineering Functions
- SQL Syntax
- Create, Select, Update, Delete
- Analytics Database Analytic Functions
- TD_OneClassSVM
- TD_OneClassSVMPredict Call
- Prediction Table
- Data Cleaning Functions
- K-Means
- Decision Forest
- GLM
- XGBoost
- Machine Learning Functions
- Outlier/Novelty Detection","27","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/Example-How-to-Use-TD_OneClassSVMPredict","2024-07-27 12:23:31"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/Optional-Syntax-Elements-for-TD_OneClassSVMPredict","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_OneClassSVMPredict - Analytics Database","71","676","Accumulate Specify the names of the input table columns that need to be copied from input test table to output. OutputProb Specify whether the function outputs the probability for each response. Only applicable if ModelType is CLASSIFICATION. Default value is false. Responses Specify the class labels to output probabil...","323","1991","","0","Optional Syntax Elements for TD_OneClassSVMPredict - Analytics Database","71","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/Optional-Syntax-Elements-for-TD_OneClassSVMPredict","","","","","","208215","13000","13000","4.609","A+","118","47","2.511","33.653","Hard","11.308","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.517","","","","","","1.1","# Summary of Teradata Vantage™ Analytics Database Functions

The Teradata Vantage™ Analytics Database provides a rich set of analytic functions that are essential for data processing, feature engineering, model training, and evaluation. These functions enable users to perform complex data manipulations, statistical analyses, and machine learning tasks directly within the database. The functions are organized into categories such as data cleaning, data exploration, model training, and evaluation functions, among others.

In this guide, we will cover common SQL operations such as Select, Update, Delete, and Create, along with examples for each to illustrate their use within the context of the Teradata Vantage™ platform.

## Code Example: SQL Operations

### 1. **Select**
The `SELECT` statement is used to query data from a database.

```sql
SELECT customer_id, customer_name, order_total
FROM orders
WHERE order_date >= '2023-01-01';
```

### 2. **Update**
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE orders
SET order_total = order_total * 1.10
WHERE order_date < '2023-01-01';
```

### 3. **Delete**
The `DELETE` statement is used to remove records from a table.

```sql
DELETE FROM orders
WHERE order_status = 'Cancelled';
```

### 4. **Create**
The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE customer_feedback (
    feedback_id INT GENERATED ALWAYS AS IDENTITY,
    customer_id INT,
    feedback_text VARCHAR(255),
    feedback_date DATE,
    PRIMARY KEY (feedback_id)
);
```

## Keywords and Phrases

- Optional Syntax Elements for TD_OneClassSVMPredict
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Release Number
- Published
- Language
- Last Update
- Product Category
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- TD_OneClassSVM
- TD_OneClassSVMPredict
- Required Syntax Elements for TD_OneClassSVMPredict
- TD_SVMPredict
- TD_XGBoostPredict
- TD_DecisionForest
- TD_KMeans
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_FTest
- TD_ZTest

This overview serves as a foundation for understanding the essential SQL operations and analytic functions available in the Teradata Vantage™ Analytics Database. By leveraging these capabilities, users can efficiently analyze and derive insights from their data.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/Optional-Syntax-Elements-for-TD_OneClassSVMPredict","2024-07-27 12:48:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/Required-Syntax-Elements-for-TD_OneClassSVMPredict","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_OneClassSVMPredict - Analytics Database","71","680","ON clause Accepts the InputTable and ModelTable clauses. IDColumn Specify the name of the column that uniquely identifies an observation in test table.","151","944","","0","Required Syntax Elements for TD_OneClassSVMPredict - Analytics Database","71","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/Required-Syntax-Elements-for-TD_OneClassSVMPredict","","","","","","207662","12753","12753","4.521","A+","67","38","1.763","10.592","Very Hard","11.184","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.714","","","","","","1.1","## Summary

In this document, we cover essential SQL operations such as SELECT, UPDATE, DELETE, and CREATE, specifically tailored for managing and querying an Analytics Database in Teradata Vantage™. These operations form the foundation of data manipulation and retrieval, enabling users to perform essential tasks such as querying data, updating records, and managing database structures.

### Code Examples

#### 1. SELECT
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT customer_id, customer_name, purchase_amount
FROM sales
WHERE purchase_date >= '2023-01-01';
```

#### 2. UPDATE
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE sales
SET purchase_amount = purchase_amount * 1.10
WHERE customer_id = 12345;
```

#### 3. DELETE
The `DELETE` statement removes records from a table.

```sql
DELETE FROM sales
WHERE purchase_date < '2022-01-01';
```

#### 4. CREATE
The `CREATE` statement creates a new table in the database.

```sql
CREATE TABLE sales_summary (
    summary_id INT GENERATED ALWAYS AS IDENTITY,
    total_sales DECIMAL(10, 2),
    sales_date DATE,
    PRIMARY KEY (summary_id)
);
```

### Keywords and Phrases

- **Required Syntax Elements for TD_OneClassSVMPredict**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact**
- **Limitations Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Displaying Online Help**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions** 

This summary provides a concise overview of the essential SQL operations and related keywords and phrases relevant to working in an Analytics Database, particularly within the Teradata Vantage™ environment.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/Required-Syntax-Elements-for-TD_OneClassSVMPredict","2024-07-27 11:44:11"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/TD_OneClassSVMPredict-Input","text/html;charset=UTF-8","200","","Indexable","","TD_OneClassSVMPredict Input - Analytics Database","48","462","TD_OneClassSVMPredict accepts two inputs: InputTable containing test input data set. ModelTable containing an SVM model trained by TD_OneClassSVM. Input Table Schema Column Name Data Type Description id_column ANY Unique row identifier of input observations. target_column INTEGER, BIGINT, SMALLINT, BYTEINT, DOUBLE PREC...","323","2125","","0","TD_OneClassSVMPredict Input - Analytics Database","48","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/TD_OneClassSVMPredict-Input","","","","","","212034","13535","13535","4.798","A+","168","51","3.294","29.759","Very Hard","11.290","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.523","","","","","","1.1","### Summary
In the context of Teradata's Analytics Database, various SQL operations can be performed to manage data effectively. This includes creating new tables, selecting data, updating existing records, and deleting unwanted entries. The following examples illustrate these basic SQL commands.

### Code Examples

#### CREATE
To create a new table named `CustomerData` with specified columns:

```sql
CREATE TABLE CustomerData (
    id_column BIGINT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    created_date DATE
);
```

#### SELECT
To select all records from the `CustomerData` table:

```sql
SELECT * FROM CustomerData;
```

To select specific columns:

```sql
SELECT name, email FROM CustomerData WHERE created_date >= '2023-01-01';
```

#### UPDATE
To update an existing record in the `CustomerData` table:

```sql
UPDATE CustomerData
SET email = 'newemail@example.com'
WHERE id_column = 1;
```

#### DELETE
To delete a record from the `CustomerData` table:

```sql
DELETE FROM CustomerData WHERE id_column = 1;
```

### Keywords and Phrases
- TD_OneClassSVMPredict Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This overview provides a solid foundation for understanding basic SQL operations within Teradata's Analytics Database environment, along with relevant keywords that may assist in further exploration or documentation review.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/TD_OneClassSVMPredict-Input","2024-07-27 12:11:57"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/TD_OneClassSVMPredict-Output","text/html;charset=UTF-8","200","","Indexable","","TD_OneClassSVMPredict Output - Analytics Database","49","478","Model Output Schema Column Data Type Description prediction FLOAT Predicted value of the test observation. prob FLOAT Probability that observation belongs to predicted class. Only appears if OutputProb is true and Responses is not specified. prob_0 FLOAT Probability that observation belongs to class 0. Only appears if ...","323","2014","","0","TD_OneClassSVMPredict Output - Analytics Database","49","Database Analytic Functions","27","Model Output Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/TD_OneClassSVMPredict-Output","","","","","","210124","13155","13155","4.664","A+","113","46","2.457","23.912","Very Hard","11.208","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.650","","","","","","1.1","# Overview of Teradata Vantage™ Analytics Database Functions

Teradata Vantage™ provides a robust set of analytic functions that streamline data processing and enhance data analysis capabilities. These functions are divided into various categories, including data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analytics. This guide will provide an overview of key SQL operations (Select, Update, Delete, Create) and highlight relevant features of the Analytics Database.

## Code Example Section

### 1. Select Statement
The `SELECT` statement is used to retrieve data from a table.

```sql
-- Selecting specific columns from a table
SELECT column1, column2, column3
FROM your_table
WHERE condition;
```

### 2. Update Statement
The `UPDATE` statement modifies existing records in a table.

```sql
-- Updating specific columns in a table
UPDATE your_table
SET column1 = new_value
WHERE condition;
```

### 3. Delete Statement
The `DELETE` statement removes existing records from a table.

```sql
-- Deleting records from a table
DELETE FROM your_table
WHERE condition;
```

### 4. Create Statement
The `CREATE` statement is used to create a new table or other database objects.

```sql
-- Creating a new table
CREATE TABLE new_table (
    column1 datatype,
    column2 datatype,
    column3 datatype
);
```

## Summary
Teradata Vantage™ provides a comprehensive suite of analytic functions aimed at enhancing data manipulation and analysis capabilities. These functions support various data-related tasks, from cleaning and exploration to model evaluation and scoring. The SQL examples provided illustrate fundamental operations that form the backbone of data management.

## Keywords and Phrases
- **TD_OneClassSVMPredict Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**: Teradata Vantage™
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions**
- **Recommendations for Using Analytic Functions** 

This comprehensive overview and the provided SQL code snippets will assist users in effectively leveraging Teradata's powerful analytic capabilities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/TD_OneClassSVMPredict-Output","2024-07-27 11:51:56"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/TD_OneClassSVMPredict-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_OneClassSVMPredict Syntax | OneClassSVMPredict - TD_OneClassSVMPredict Syntax - Analytics Database","101","989","See the syntax of the TD_OneClassSVMPredict function and read descriptions of its required and optional syntax elements.","120","756","","0","TD_OneClassSVMPredict Syntax | OneClassSVMPredict - TD_OneClassSVMPredict Syntax - Analytics Database","101","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/TD_OneClassSVMPredict-Syntax","","","","","","208432","12982","12982","4.602","A+","115","49","2.347","33.782","Hard","11.325","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.533","","","","","","1.1","## Summary of TD_OneClassSVMPredict

The `TD_OneClassSVMPredict` function in Teradata Vantage is used for making predictions based on a trained One-Class SVM (Support Vector Machine) model. This function is particularly useful for anomaly detection tasks where the model is trained on a dataset with a single class. The syntax allows for different configurations, including specifying the input and model tables, handling accumulated columns, and defining output probabilities.

### Code Example

Here are code examples demonstrating the usage of `SELECT`, `UPDATE`, `DELETE`, and `CREATE` statements in the context of `TD_OneClassSVMPredict`.

#### 1. SELECT Example
```sql
SELECT 
    id_column,
    TD_OneClassSVMPredict(
        ON input_table AS InputTable PARTITION BY ANY
        ON model_table AS ModelTable DIMENSION
        USING IDColumn ('id_column')
    ) AS Prediction
FROM input_table;
```

#### 2. CREATE Example
```sql
CREATE TABLE predictions AS (
    SELECT 
        id_column,
        TD_OneClassSVMPredict(
            ON input_table AS InputTable PARTITION BY ANY
            ON model_table AS ModelTable DIMENSION
            USING IDColumn ('id_column')
        ) AS Prediction
    FROM input_table
) WITH NO DATA;
```

#### 3. UPDATE Example
```sql
UPDATE predictions
SET Prediction = TD_OneClassSVMPredict(
        ON input_table AS InputTable PARTITION BY ANY
        ON model_table AS ModelTable DIMENSION
        USING IDColumn ('id_column')
    )
WHERE id_column IS NOT NULL;
```

#### 4. DELETE Example
```sql
DELETE FROM predictions
WHERE Prediction = 'anomaly';
```

### Keywords and Phrases
- **TD_OneClassSVMPredict Syntax**
- **OneClassSVMPredict - TD_OneClassSVMPredict Syntax - Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Functions Ignore Disallowed Syntax Elements**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

These keywords and phrases can help you navigate related documentation or resources for further understanding of the `TD_OneClassSVMPredict` function and its context within the Teradata Vantage environment.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/TD_OneClassSVMPredict-Syntax","2024-07-27 12:43:20"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict","text/html;charset=UTF-8","200","","Indexable","","TD_SVMPredict Function | SVMPredict | Teradata Vantage - TD_SVMPredict - Analytics Database","91","862","The TD_SVMPredict function Analytics Database predicts target values (regression) and class labels (classification) for test data using an SVM model.","149","924","","0","TD_SVMPredict Function | SVMPredict | Teradata Vantage - TD_SVMPredict - Analytics Database","91","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict","","","","","","211723","13840","13840","4.906","A+","162","56","2.893","37.310","Hard","11.307","1","4","","707","707","0","99.860","723","721","0","","","","","","","","","0.593","","","","","","1.1","## Summary

The `TD_SVMPredict` function in Teradata Vantage allows users to make predictions based on a trained Support Vector Machine (SVM) model. This function can predict target values for regression tasks and class labels for classification tasks. Prior to using `TD_SVMPredict`, it is essential to standardize input features using functions like `TD_ScaleFit` and `TD_ScaleTransform`. The function only accepts numeric features; therefore, categorical features must be encoded as numeric values beforehand. Rows with missing values are ignored during the prediction process, and various evaluation functions can be applied to assess the prediction results.

### Code Example

Here are examples of basic SQL operations: Select, Update, Delete, and Create, tailored for Teradata environments.

#### 1. **Select**
```sql
SELECT *
FROM Customer
WHERE Country = 'USA';
```

#### 2. **Update**
```sql
UPDATE Customer
SET Email = 'newemail@example.com'
WHERE CustomerID = 12345;
```

#### 3. **Delete**
```sql
DELETE FROM Customer
WHERE CustomerID = 12345;
```

#### 4. **Create**
```sql
CREATE TABLE Customer (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Email VARCHAR(100),
    Country VARCHAR(50)
);
```

### Keywords and Phrases
- TD_SVMPredict Function
- SVMPredict
- Teradata Vantage - TD_SVMPredict
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Function Information
- Required Syntax Elements
- Optional Syntax Elements
- Input
- Output
- Usage Notes
- Examples
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- Text Analytic Functions
- TD_SVM
- TD_ScaleFit
- TD_ScaleTransform
- TD_RegressionEvaluator
- TD_ClassificationEvaluator
- TD_ROC
- Numeric Features
- Categorical Features
- Missing Values
- Prediction Results","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict","2024-07-27 11:50:13"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/Examples-How-to-Use-TD_SVMPredict","text/html;charset=UTF-8","200","","Indexable","","TD_SVMPredict Examples | SVMPredict | Teradata Vantage - Examples: How to Use TD_SVMPredict - Analytics Database","112","1076","See examples of the Analytics Database (SQL Engine) model training function TD_SVMPredict.","90","580","","0","TD_SVMPredict Examples | SVMPredict | Teradata Vantage - Examples: How to Use TD_SVMPredict - Analytics Database","112","Database Analytic Functions","27","Model","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/Examples-How-to-Use-TD_SVMPredict","","","","","","255833","16290","16290","5.775","A+","623","374","1.666","100.000","Very Easy","10.469","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.222","","","","","","1.1","## Summary

The `TD_SVMPredict` function in Teradata Vantage enables users to make predictions using Support Vector Machine (SVM) models. This function can be used for both regression and classification tasks, depending on the model and data provided. 

**Key Features:**
- **InputTable**: The dataset on which predictions will be made.
- **ModelTable**: The SVM model used for predictions.
- **IDColumn**: The identifier column in the input table.
- **Accumulate**: Specify the target variable for regression or label for classification.
- **OutputProb**: Option to output probabilities for classification tasks.
- **Responses**: Define the class labels for classification predictions.

### Code Examples

#### 1. Create Table for Regression Predictions

```sql
CREATE VOLATILE TABLE svm_model_predict_cal_housing AS (
SELECT * FROM TD_SVMPredict (
      ON cal_housing_ex_scaled AS INPUTTABLE
      ON svm_model_cal_housing AS ModelTable DIMENSION
      USING
      IDColumn ('id')
      Accumulate('MedHouseVal')
) AS dt
) WITH DATA
ON COMMIT PRESERVE ROWS;
```

#### 2. Output for Regression

The output for regression using `TD_SVMPredict` would include columns for the prediction and the actual value.

| id    | prediction | MedHouseVal |
|-------|------------|-------------|
| 18760 | 1.268192   | 1.28300     |
| 244   | 1.815538   | 1.11700     |
| ...   | ...        | ...         |

#### 3. Create Table for Classification Predictions

```sql
CREATE VOLATILE TABLE svm_model_predict_iris_data AS (
SELECT * FROM TD_SVMPredict (
 ON iris_data AS INPUTTABLE
 ON svm_model_iris_data AS ModelTable DIMENSION
 USING
 IdColumn('id')
 Accumulate('label')
 OutputProb('true')
 Responses('0','1')
 ) AS dt
 ) WITH DATA
ON COMMIT PRESERVE ROWS;
```

#### 4. Output for Classification

The output for classification predictions includes the predicted class, probabilities, and the actual label.

| id    | prediction | prob_0    | prob_1    | label |
|-------|------------|-----------|-----------|-------|
| 61    | 0.0        | 0.916982  | 0.083018  | 0     |
| 51    | 0.0        | 0.947352  | 0.052648  | 0     |
| ...   | ...        | ...       | ...       | ...   |

### Keywords and Phrases
- TD_SVMPredict
- SVMPredict
- Teradata Vantage
- Analytics Database
- Regression
- Classification
- Model Training
- Model Scoring
- Data Exploration Functions
- Analytics Database Analytic Functions
- Predictive Analytics
- Feature Engineering
- Data Cleaning Functions
- VantageCloud
- VantageCore
- Deployment
- Enterprise Edition
- IntelliFlex
- VMware
- Spool Space Exhaustion
- Deadlocks
- Volatile Tables
- Hypothesis Testing Functions
- Data Exploration Functions
- Moving Average
- OneClass SVM
- XGBoost
- Decision Forest
- KMeans
- GLM
- Naive Bayes
- Sentiment Analysis","27","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/Examples-How-to-Use-TD_SVMPredict","2024-07-27 12:10:38"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/Optional-Syntax-Elements-for-TD_SVMPredict","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_SVMPredict - Analytics Database","63","591","Accumulate Specifies the names of the input table columns that need to be copied from input test table to output. OutputProb Specifies whether the function outputs the probability for each response. Only applicable if ModelType is Classification. Default: false Responses Specifies the class labels to output probabiliti...","323","1958","","0","Optional Syntax Elements for TD_SVMPredict - Analytics Database","63","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/Optional-Syntax-Elements-for-TD_SVMPredict","","","","","","208438","13052","13052","4.627","A+","135","54","2.500","35.098","Hard","11.360","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.696","","","","","","1.1","### Summary

The **Teradata Vantage™ Analytics Database** provides a range of functions tailored for various analytics tasks, including data cleaning, exploration, feature engineering, model training, and evaluation. The **TD_SVMPredict** function is one of the pivotal analytic functions used for making predictions using support vector machines (SVM). This function can be employed for both classification and regression tasks based on the model type specified.

### Code Examples

Below are examples for the key operations: **Select**, **Update**, **Delete**, and **Create**.

#### Select Example
```sql
SELECT * 
FROM Employees 
WHERE Department = 'Sales';
```

#### Update Example
```sql
UPDATE Employees 
SET Salary = Salary * 1.10 
WHERE PerformanceRating = 'Excellent';
```

#### Delete Example
```sql
DELETE FROM Employees 
WHERE TerminationDate < '2023-01-01';
```

#### Create Example
```sql
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Department VARCHAR(50),
    Salary DECIMAL(10, 2),
    HireDate DATE
);
```

### Keywords and Phrases

- **Optional Syntax Elements for TD_SVMPredict**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Language**
- **Last Update**
- **Product Category**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Accumulated Columns Impact on Function Performance**
- **Function Names with and without TD Prefix**
- **Example: How to Use TD_SVMPredict**
- **ModelType**
- **OutputProb**
- **Responses**
- **Back to home page**

This summary and examples provide a foundational understanding of how to interact with the Teradata Vantage™ Analytics Database, particularly focusing on the functionality of the TD_SVMPredict function and essential SQL operations.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/Optional-Syntax-Elements-for-TD_SVMPredict","2024-07-27 11:20:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/Required-Syntax-Elements-for-TD_SVMPredict","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_SVMPredict - Analytics Database","63","595","ON clause Accepts the InputTable and ModelTable clauses. IDColumn Specifies the name of the column that uniquely identifies an observation in the test table.","157","977","","0","Required Syntax Elements for TD_SVMPredict - Analytics Database","63","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/Required-Syntax-Elements-for-TD_SVMPredict","","","","","","207642","12750","12750","4.520","A+","68","38","1.789","17.157","Very Hard","11.184","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.617","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a wide array of analytic functions tailored for data manipulation, modeling, and evaluation. This includes capabilities for data cleaning, feature engineering, model training, scoring, and evaluation, all designed to enhance the analytics workflow. The following code examples illustrate the basic SQL operations—Select, Update, Delete, and Create—within this context.

### Code Examples

#### 1. Select
To retrieve data from a table, you can use the SELECT statement. Here’s an example of how to select specific columns from a table.

```sql
SELECT column1, column2
FROM my_table
WHERE condition;
```

#### 2. Update
The UPDATE statement is used to modify existing records in a table. The following example updates a specific column for all records that meet a certain condition.

```sql
UPDATE my_table
SET column1 = new_value
WHERE condition;
```

#### 3. Delete
To remove records from a table, the DELETE statement is employed. Below is an example that deletes records based on a specified condition.

```sql
DELETE FROM my_table
WHERE condition;
```

#### 4. Create
The CREATE statement is used to create a new table. The example below demonstrates how to create a new table with specified columns.

```sql
CREATE TABLE new_table (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Keywords and Phrases
- **Required Syntax Elements for TD_SVMPredict**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Input Table Schemas**
- **Accumulated Columns Impact on Function Performance**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration**
- **Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior** 

This broad framework of functions and examples can significantly streamline the analytics process, ensuring effective data handling and insightful analysis.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/Required-Syntax-Elements-for-TD_SVMPredict","2024-07-27 12:00:26"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/TD_SVMPredict-Input","text/html;charset=UTF-8","200","","Indexable","","TD_SVMPredict Input - Analytics Database","40","377","TD_SVMPredict accepts two inputs: InputTable containing test input data set. ModelTable containing an SVM model trained by TD_SVM. TD_SVMPredict InputTable Schema Column Name Data Type Description id_column ANY Unique row identifier of input observations. target_column INTEGER, BIGINT, SMALLINT, BYTEINT, DOUBLE PRECISI...","323","2119","","0","TD_SVMPredict Input - Analytics Database","40","Database Analytic Functions","27","TD_SVMPredict InputTable Schema","31","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/TD_SVMPredict-Input","","","","","","212324","13686","13686","4.852","A+","175","53","3.302","34.284","Hard","11.292","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.630","","","","","","1.1","## Summary

The **TD_SVMPredict** function is part of the Teradata Vantage™ Analytics Database and is utilized for making predictions based on a trained Support Vector Machine (SVM) model. It takes two inputs: one containing the test dataset and another containing the trained SVM model. The function outputs predictions based on the input data using the model parameters.

### Code Example

Below are examples of SQL commands demonstrating how to perform basic database operations: SELECT, UPDATE, DELETE, and CREATE.

#### 1. SELECT
```sql
SELECT id_column, target_column
FROM InputTable
WHERE target_column > 10;
```

#### 2. UPDATE
```sql
UPDATE InputTable
SET target_column = target_column + 1
WHERE id_column = 1001;
```

#### 3. DELETE
```sql
DELETE FROM InputTable
WHERE target_column < 5;
```

#### 4. CREATE
```sql
CREATE TABLE InputTable (
    id_column INTEGER NOT NULL,
    target_column DOUBLE PRECISION,
    accumulate_column VARCHAR(255)
);
```

### Keywords and Phrases
- **TD_SVMPredict Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**: Teradata Vantage™
- **Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Accumulative Columns Impact on Function Performance**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/TD_SVMPredict-Input","2024-07-27 11:50:28"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/TD_SVMPredict-Output","text/html;charset=UTF-8","200","","Indexable","","TD_SVMPredict Output - Analytics Database","41","393","The output schema is as follows: Column Data Type Description id_column Same as input table Unique row identifier of input observations. prediction SMALLINIT, FLOAT Predicted value of the test observation. prob FLOAT Probability that observation belongs to predicted class. Only appears if OutputProb is true and Respons...","323","2017","","0","TD_SVMPredict Output - Analytics Database","41","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/TD_SVMPredict-Output","","","","","","210457","13247","13247","4.696","A+","128","47","2.723","28.261","Very Hard","11.234","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.483","","","","","","1.1","# Teradata Vantage™ Analytics Database: SQL Commands Overview

The Teradata Vantage™ Analytics Database provides essential capabilities for handling data analytics tasks. Here, we will cover the foundational SQL commands: `SELECT`, `INSERT`, `UPDATE`, and `DELETE`, which are fundamental for interacting with the database.

## Summary of SQL Commands

### 1. **SELECT**
The `SELECT` statement is used to retrieve data from one or more tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

### 2. **INSERT**
The `INSERT` statement is used to add new rows to a table.

```sql
INSERT INTO table_name (column1, column2)
VALUES (value1, value2);
```

### 3. **UPDATE**
The `UPDATE` statement modifies existing data within a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

### 4. **DELETE**
The `DELETE` statement removes rows from a table based on a specified condition.

```sql
DELETE FROM table_name
WHERE condition;
```

## Code Example Section

### SELECT Example
```sql
SELECT id, name, prediction
FROM customer_predictions
WHERE prediction >= 0.5;
```

### INSERT Example
```sql
INSERT INTO customer_predictions (id, name, prediction)
VALUES (101, 'John Doe', 0.85);
```

### UPDATE Example
```sql
UPDATE customer_predictions
SET prediction = 0.90
WHERE id = 101;
```

### DELETE Example
```sql
DELETE FROM customer_predictions
WHERE id = 101;
```

## Keywords and Phrases
- TD_SVMPredict Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Recommendations for Using Analytic Functions

This overview provides a good foundation for understanding how to perform basic operations in Teradata Vantage™ Analytics Database. Always refer to the official documentation for more detailed information and best practices.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/TD_SVMPredict-Output","2024-07-27 12:45:21"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/TD_SVMPredict-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_SVMPredict Syntax | SVMPredict | Teradata Vantage - TD_SVMPredict Syntax - Analytics Database","96","910","See the syntax of the TD_SVMPredict function and read descriptions of its required and optional syntax elements.","112","697","","0","TD_SVMPredict Syntax | SVMPredict | Teradata Vantage - TD_SVMPredict Syntax - Analytics Database","96","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/TD_SVMPredict-Syntax","","","","","","208362","12892","12892","4.570","A+","92","46","2.000","19.053","Very Hard","11.279","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.526","","","","","","1.1","### Summary

The `TD_SVMPredict` function in Teradata Vantage is designed for scoring data based on a trained Support Vector Machine (SVM) model. It allows users to input a dataset and obtain predictions based on the specified model. This function supports various optional parameters that enhance its functionality, including the ability to specify ID columns, accumulate results, and define output probabilities.

### Code Examples

#### 1. **Select**
To retrieve predictions from a model using `TD_SVMPredict`, you can use a SELECT statement as follows:

```sql
SELECT 
    IDColumn,
    TD_SVMPredict(
        ON InputTable AS InputTable PARTITION BY ANY
        ON ModelTable AS ModelTable DIMENSION
        USING IDColumn ('id')
        Accumulate('result_column')
        OutputProb('true')
        ModelType ('Classification')
    ) AS Prediction
FROM InputData;
```

#### 2. **Update**
Updating records based on predictions can be done using an UPDATE statement:

```sql
UPDATE InputData
SET Prediction = TD_SVMPredict(
        ON InputTable AS InputTable PARTITION BY ANY
        ON ModelTable AS ModelTable DIMENSION
        USING IDColumn ('id')
        OutputProb('true')
        ModelType ('Regression')
    )
WHERE SomeCondition = true;
```

#### 3. **Delete**
To remove entries that meet specific criteria after prediction:

```sql
DELETE FROM InputData
WHERE TD_SVMPredict(
        ON InputTable AS InputTable PARTITION BY ANY
        ON ModelTable AS ModelTable DIMENSION
        USING IDColumn ('id')
        OutputProb('false')
    ) = 'UnwantedPrediction';
```

#### 4. **Create**
Creating a new table to store predictions:

```sql
CREATE TABLE Predictions AS (
    SELECT 
        IDColumn,
        TD_SVMPredict(
            ON InputTable AS InputTable PARTITION BY ANY
            ON ModelTable AS ModelTable DIMENSION
            USING IDColumn ('id')
            OutputProb('true')
            ModelType ('Classification')
        ) AS Prediction
    FROM InputData
) WITH NO DATA;
```

### Keywords and Phrases
- TD_SVMPredict Syntax
- SVMPredict
- Teradata Vantage - TD_SVMPredict Syntax
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Function Syntax Descriptions
- Usage Notes
- Input Table Rows Redistribution
- Function Names with and without TD Prefix
- Recommendations for Using Analytic Functions
- Model Scoring Functions
- Example: How to Use TD_SVMPredict","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/TD_SVMPredict-Syntax","2024-07-27 12:04:54"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/TD_SVMPredict-Usage-Notes","text/html;charset=UTF-8","200","","Indexable","","TD_SVMPredict Usage Notes | Teradata Vantage - TD_SVMPredict Usage Notes - Analytics Database","93","897","Learn about the usage considerations for the Analytics Database model training function TD_SVMPredict.","102","652","","0","TD_SVMPredict Usage Notes | Teradata Vantage - TD_SVMPredict Usage Notes - Analytics Database","93","Database Analytic Functions","27","SVM Optimization","16","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/TD_SVMPredict-Usage-Notes","","","","","","210077","13456","13456","4.770","A+","336","85","3.953","57.794","Fairly Hard","11.871","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.661","","","","","","1.1","### Summary of TD_SVMPredict Function in Teradata Vantage

The `TD_SVMPredict` function in Teradata Vantage is used for making predictions using a Support Vector Machine (SVM) model that has been previously trained. This function can handle both classification and regression tasks. When using `TD_SVMPredict`, the function extracts relevant features from unseen data points and calculates the appropriate outputs based on the learned hyperplane established during the training phase. The predictions include a decision rule indicating class membership for classification tasks and a predicted value for regression tasks. Additionally, the function provides confidence estimates based on the distance of the new data points from the hyperplane.

### Code Example

Here's a demonstration of basic SQL operations (Select, Update, Delete, Create) relevant to Teradata and the usage of the `TD_SVMPredict` function:

#### Create
```sql
CREATE TABLE svm_model (
    id INT PRIMARY KEY,
    feature1 FLOAT,
    feature2 FLOAT,
    target VARCHAR(50)
);
```

#### Insert Data
```sql
INSERT INTO svm_model (id, feature1, feature2, target) VALUES
(1, 2.5, 3.5, 'ClassA'),
(2, 1.0, 5.0, 'ClassB');
```

#### Select
```sql
SELECT * FROM svm_model WHERE target = 'ClassA';
```

#### Update
```sql
UPDATE svm_model
SET feature1 = feature1 * 1.1
WHERE id = 1;
```

#### Delete
```sql
DELETE FROM svm_model WHERE id = 2;
```

#### TD_SVMPredict Example
```sql
SELECT 
    id,
    TD_SVMPredict('svm_model', feature1, feature2) AS prediction
FROM 
    svm_model;
```

### Keywords and Phrases
- **TD_SVMPredict Usage Notes**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware Product**
- **Release Number 17.20**
- **Published June 2022**
- **Last Update April 2024**
- **Data Cleaning Functions**
- **Feature Engineering Functions**
- **Model Training and Scoring Functions**
- **Non-Deterministic Behavior**
- **Data Exploration Functions**
- **Hypothesis Testing Functions**
- **Text Analytic Functions**
- **Model Evaluation Functions**
- **Support Vector Machine (SVM)**
- **Classification and Regression Tasks**
- **Confidence Estimation**
- **Hyperplane Calculation**
- **Distance Calculation**
- **Kernel Trick** 

This summary and examples provide a foundational understanding of how to utilize the `TD_SVMPredict` function within the Teradata Vantage environment, along with basic SQL operations for managing data.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/TD_SVMPredict-Usage-Notes","2024-07-27 11:23:16"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict","text/html;charset=UTF-8","200","","Indexable","","TD_XGBoostPredict Function | XGBoostPredict | Teradata Vantage - TD_XGBoostPredict - Analytics Database","103","970","This Analytics Database (SQL Engine) mode scoring function runs the predictive algorithm based on the model generated by TD_XGBoost.","132","849","","0","TD_XGBoostPredict Function | XGBoostPredict | Teradata Vantage - TD_XGBoostPredict - Analytics Database","103","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict","","","","","","210187","13458","13458","4.771","A+","204","62","3.290","48.395","Hard","11.505","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.914","","","","","","1.1","## Summary

The `TD_XGBoostPredict` function in Teradata Vantage allows users to perform predictive analysis based on models trained using the `TD_XGBoost` function. This functionality is essential for classification and regression tasks in analytics, leveraging eXtreme Gradient Boosting (XGBoost) to generate robust predictive models. The predictions generated by `TD_XGBoostPredict` are based on test input data that must align in structure with the training data, ensuring consistency in the model's application.

### Code Example

Here are some SQL code examples demonstrating the core operations: Select, Update, Delete, and Create, along with examples relevant to `TD_XGBoostPredict`.

#### SELECT Example

```sql
-- Selecting data from a table
SELECT *
FROM customer_data
WHERE region = 'North America';
```

#### UPDATE Example

```sql
-- Updating a specific customer's information
UPDATE customer_data
SET email = 'new_email@example.com'
WHERE customer_id = 12345;
```

#### DELETE Example

```sql
-- Deleting a customer from the database
DELETE FROM customer_data
WHERE customer_id = 12345;
```

#### CREATE Example

```sql
-- Creating a new table for storing customer data
CREATE TABLE customer_data (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    region VARCHAR(50)
);
```

#### TD_XGBoostPredict Example

```sql
-- Using TD_XGBoostPredict to score new data based on a trained model
SELECT
    customer_id,
    TD_XGBoostPredict(model_name, input_features) AS prediction
FROM
    new_customer_data;
```

### Keywords and Phrases

- TD_XGBoostPredict Function
- XGBoostPredict
- Teradata Vantage - TD_XGBoostPredict - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Language English (United States)
- Last Update 2024-04-06
- Product Category Teradata Vantage™
- Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Recommendations for Using Analytic Functions
- TD_XGBoost
- TD_XGBoostPredict Syntax
- Required Syntax Elements for TD_XGBoostPredict
- Optional Syntax Elements for TD_XGBoostPredict
- TD_XGBoostPredict Input
- TD_XGBoostPredict Output
- Examples: How to Use TD_XGBoostPredict
- Predictive modeling with eXtreme Gradient Boosting
- Classification and regression analysis
- Majority vote for prediction
- Prediction probability based on model trees","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict","2024-07-27 11:45:34"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/Examples-How-to-Use-TD_XGBoostPredict","text/html;charset=UTF-8","200","","Indexable","","TD_XGBoostPredict Function Examples | Teradata Vantage - Examples: How to Use TD_XGBoostPredict - Analytics Database","116","1109","See examples of the Analytics Database (SQL Engine) model training function TD_XGBoost.","87","563","","0","TD_XGBoostPredict Function Examples | Teradata Vantage - Examples: How to Use TD_XGBoostPredict - Analytics Database","116","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/Examples-How-to-Use-TD_XGBoostPredict","","","","","","209010","13401","13401","4.751","A+","112","46","2.435","39.696","Hard","11.273","1","5","","707","707","0","99.860","713","710","0","","","","","","","","","0.582","","","","","","1.1","### Overview of Teradata Vantage's TD_XGBoostPredict Function

The `TD_XGBoostPredict` function in Teradata Vantage is utilized for making predictions using models built with the XGBoost algorithm. This function is particularly useful in data analytics applications where machine learning models need to be deployed for classification or regression tasks. 

### Summary

- **Functionality**: Predicts outcomes based on pre-trained XGBoost models.
- **Use Cases**: Ideal for tasks such as classification (e.g., predicting categories) and regression (e.g., predicting numeric values).
- **Environment**: Part of the Teradata Vantage platform, which supports advanced analytics through various analytic functions.

### Code Example

Here are examples demonstrating the use of basic SQL commands (Select, Update, Delete, Create) along with how to use the `TD_XGBoostPredict` function in Teradata Vantage.

#### Create Table

```sql
CREATE TABLE customer_data (
    customer_id INT,
    age INT,
    income DECIMAL(10, 2),
    category VARCHAR(50)
);
```

#### Insert Data

```sql
INSERT INTO customer_data (customer_id, age, income, category) VALUES (1, 25, 50000.00, 'A');
INSERT INTO customer_data (customer_id, age, income, category) VALUES (2, 30, 60000.00, 'B');
```

#### Select Data

```sql
SELECT * FROM customer_data WHERE income > 55000;
```

#### Update Data

```sql
UPDATE customer_data SET category = 'C' WHERE customer_id = 1;
```

#### Delete Data

```sql
DELETE FROM customer_data WHERE customer_id = 2;
```

#### Using TD_XGBoostPredict

**Example for Classification:**

```sql
SELECT 
    customer_id, 
    TD_XGBoostPredict(model_table => 'xgboost_model', 
                      input_table => 'customer_data', 
                      output_column => 'predicted_category') AS predicted_category
FROM customer_data;
```

**Example for Regression:**

```sql
SELECT 
    customer_id, 
    TD_XGBoostPredict(model_table => 'xgboost_model', 
                      input_table => 'customer_data', 
                      output_column => 'predicted_income') AS predicted_income
FROM customer_data;
```

### Keywords and Phrases

- TD_XGBoostPredict Function Examples
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Enterprise Edition
- IntelliFlex
- VMware Product
- Analytics Database Release Number 17.20
- Published June 2022
- Language English (United States)
- Last Update April 2024
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- TD_XGBoost for Classification
- TD_XGBoost for Regression

This structured overview should provide a clear understanding of how to utilize the `TD_XGBoostPredict` function alongside basic SQL commands in Teradata Vantage.","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/Examples-How-to-Use-TD_XGBoostPredict","2024-07-27 11:34:34"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/Examples-How-to-Use-TD_XGBoostPredict/XGBoostPredict-for-Classification","text/html;charset=UTF-8","200","","Indexable","","XGBoostPredict for Classification - Analytics Database","54","485","This example shows how to use XGBoost for classification: first use TD_XGBoost to train a classification model, and then use TD_XGBoostPredict to test the model. The following sectoins show the input table, SQL query, and output model table when training a classification model using TD_XGBoost. Input Table: xgboostTrai...","323","2011","","0","XGBoostPredict for Classification - Analytics Database","54","Database Analytic Functions","27","Input Table: xgboostTrain","25","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/Examples-How-to-Use-TD_XGBoostPredict/XGBoostPredict-for-Classification","","","","","","239084","15186","15186","5.384","A+","353","659","0.536","0.000","Very Hard","13.640","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.459","","","","","","1.1","### Summary

This document provides an overview of how to leverage the XGBoost algorithm for classification tasks within the Teradata Vantage™ Analytics Database. It details the process of training a classification model using the `TD_XGBoost` function and then applying the model to make predictions with the `TD_XGBoostPredict` function. The examples illustrate the input tables, SQL function calls, and output tables generated during both the training and prediction phases.

### Code Example

#### 1. Create (Training a Classification Model)

```sql
CREATE TABLE xgboost_classification_model AS (
    SELECT * FROM TD_XGBoost (
        ON xgboostTrain AS inputtable PARTITION BY ANY
        USING
        ResponseColumn('homestyle')
        InputColumns('rent', 'lotsize', 'bedrooms', 'bathrms', 'driveway')
        MaxDepth(3)
        NumBoostedTrees(1)
        ModelType('classification')
        Seed(1)
        IterNum(2)
    ) AS dt
) WITH DATA;
```

#### 2. Select (Using the Model to Make Predictions)

```sql
SELECT * FROM TD_XGBoostPredict(
    ON xgboostTest AS inputtable PARTITION BY ANY
    ON xgboost_classification_model AS modeltable DIMENSION
    USING
      IdColumn('id')
      ModelType('Classification')
      OutputProb('t')
      Responses('1', '2', '3')
) AS dt;
```

#### 3. Update (Modify Model Parameters or Data)

Updating a table in Teradata is typically done through the `UPDATE` statement, but in the context of XGBoost, you may want to retrain the model with new data or parameters. For example:

```sql
UPDATE xgboost_classification_model
SET MaxDepth = 4, NumBoostedTrees = 2
WHERE task_index = 0;
```

#### 4. Delete (Remove Unwanted Models)

To delete a model or data that is no longer needed, you can use the `DELETE` statement:

```sql
DELETE FROM xgboost_classification_model
WHERE task_index = 0;
```

### Keywords and Phrases

- **XGBoostPredict for Classification** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**: gjn1627595495337.ditamap
- **dita:ditavalPath**: ayr1485454803741.ditaval
- **dita:id**: jmh1512506877710
- **Product Category**: Teradata Vantage™
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **TD_XGBoost**
- **TD_XGBoostPredict**
- **Classification Model**
- **Input Table**
- **Output Table**
- **SQL Function Call**
- **ResponseColumn**
- **InputColumns**
- **MaxDepth**
- **NumBoostedTrees**
- **Seed**
- **IterNum**
- **Probabilities** 

This structured approach helps in understanding the capabilities of Teradata Vantage™ for applying advanced analytics in practical scenarios.","27","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/Examples-How-to-Use-TD_XGBoostPredict/XGBoostPredict-for-Classification","2024-07-27 12:20:28"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/Examples-How-to-Use-TD_XGBoostPredict/XGBoostPredict-for-Regression","text/html;charset=UTF-8","200","","Indexable","","XGBoostPredict for Regression - Analytics Database","50","463","This example shows how to use XGBoost for regression: first use TD_XGBoost to train a regression model, and then use TD_XGBoostPredict to test the model. The following section shows the Output (xgboost_results) table that was generated as described in TD_XGBoost for Regression. It serves as the input regression model t...","323","2025","","0","XGBoostPredict for Regression - Analytics Database","50","Database Analytic Functions","27","Input Model Table: xgboost_res","30","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/Examples-How-to-Use-TD_XGBoostPredict/XGBoostPredict-for-Regression","","","","","","233553","15454","15454","5.479","A+","294","655","0.449","0.000","Very Hard","13.707","1","6","","707","707","0","99.860","711","709","0","","","","","","","","","1.041","","","","","","1.1","### Summary

This document provides an overview of using XGBoost for regression tasks within the Teradata Vantage™ Analytics Database. It covers the process of training a regression model using the `TD_XGBoost` function and then applying that model to make predictions using the `TD_XGBoostPredict` function. The document also outlines the structure of input and output tables involved in these operations.

### Code Example

#### Create a Regression Model

To create a regression model, you would typically use the `TD_XGBoost` function as follows:

```sql
SELECT * FROM TD_XGBoost(
    ON input_data AS inputtable
    USING
      TargetColumn('medv')
      IdColumn('id')
      ModelType('Regression')
) AS model_results;
```

#### Predict Using the Model

Once the model is created, you can use it to make predictions on new data with the `TD_XGBoostPredict` function. Here’s how the prediction query might look:

```sql
SELECT * FROM TD_XGBoostPredict(
    ON xgboost_reg_test AS inputtable PARTITION BY ANY
    ON xgboost_res AS modeltable DIMENSION
    USING
      IdColumn('id')
      ModelType('Regression')
) AS predictions;
```

#### Sample Data for Input and Output

**Input Table: `xgboost_reg_test`**
```plaintext
 id | medv | col_1 | col_2 | col_3
----+------+-------+-------+-------
  3 | 17.9 |     4 |  5.45 | 0.97022
  1 | 23.9 |    18 |  4.14 | 0.54054
  2 | 14.0 |    29 |  9.97 | 0.26351
```

**Output Table**
```plaintext
 id |     Prediction     |   Confidence_Lower   |    Confidence_upper
----+--------------------+----------------------+----------------------
  3 | 20.592225          | 20.58509094229030    | 20.599359057709700
  1 | 20.602868666666700 | 20.58788390759070    | 20.61785342574260
  2 | 20.602868666666700 | 20.58788390759070    | 20.61785342574260
```

### Keywords and Phrases

- **XGBoostPredict for Regression** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **gjn1627595495337.ditamap**
- **dita:ditavalPath**
- **ayr1485454803741.ditaval**
- **dita:id**
- **jmh1512506877710**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/Examples-How-to-Use-TD_XGBoostPredict/XGBoostPredict-for-Regression","2024-07-27 11:33:18"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/Optional-Syntax-Elements-for-TD_XGBoostPredict","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_XGBoostPredict - Analytics Database","67","627","NumParallelTrees Specifies how many boosted trees to use to make predictions. A combination of both task_Index and tree_num in the model table determines the ampID and number of trees generated by that AMP. As the model table is ordered with these two arguments, the number of boosted trees that are loaded are based on ...","323","2044","","0","Optional Syntax Elements for TD_XGBoostPredict - Analytics Database","67","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/Optional-Syntax-Elements-for-TD_XGBoostPredict","","","","","","212525","14133","14133","5.010","A+","557","111","5.018","65.805","Normal","12.352","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.357","","","","","","1.1","### Summary
The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions that facilitate data cleaning, exploration, feature engineering, and model training. The TD_XGBoostPredict function is particularly powerful for making predictions using XGBoost models. This guide outlines the syntax and usage of basic SQL commands—Select, Update, Delete, and Create—alongside an overview of the optional syntax elements specific to TD_XGBoostPredict.

### Code Example

#### 1. Select
The `SELECT` statement retrieves data from a database.
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

#### 2. Update
The `UPDATE` statement modifies existing data within a table.
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 3. Delete
The `DELETE` statement removes rows from a table based on a condition.
```sql
DELETE FROM table_name
WHERE condition;
```

#### 4. Create
The `CREATE` statement is used to create a new table or database.
```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

### TD_XGBoostPredict - Optional Syntax Elements
- **NumParallelTrees**: Specifies how many boosted trees to use for predictions.
- **NumBoostRounds**: Specifies how many iterations to load for each boosted tree.
- **ModelType**: Determines if the output is categorical (Classification) or continuous (Regression).
- **OutputProb**: Indicates whether to output the probability for each response.
- **Responses**: Specifies the classes for which to output probabilities.
- **Accumulate**: Defines input columns to copy to the output table.

### Keywords and Phrases
- **Teradata Vantage™**
- **Analytics Database**
- **Model Training Functions**
- **TD_XGBoostPredict**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering**
- **Model Evaluation Functions**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration**
- **Workload Management**
- **Non-Deterministic Behavior**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions**
- **Hypothesis Testing Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**

This structure provides a clear overview of basic SQL operations and highlights the optional syntax elements for the TD_XGBoostPredict function, helping users understand how to leverage these tools effectively within the Teradata Vantage environment.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/Optional-Syntax-Elements-for-TD_XGBoostPredict","2024-07-27 12:15:45"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/Required-Syntax-Elements-for-TD_XGBoostPredict","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_XGBoostPredict - Analytics Database","67","631","ON clause Specifies the table name, view name or query as an InputTable and ModelTable. IDColumn Specifies the column that contains a unique identifier for each test point in the test set. Input column names with double quotation marks are not allowed for this function.","270","1669","","0","Required Syntax Elements for TD_XGBoostPredict - Analytics Database","67","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/Required-Syntax-Elements-for-TD_XGBoostPredict","","","","","","208060","12949","12949","4.590","A+","89","41","2.171","33.531","Hard","11.218","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.635","","","","","","1.1","## Summary

The Teradata Vantage™ platform provides a comprehensive suite of analytic functions within its Analytics Database. These functions cater to various tasks, including data cleaning, feature engineering, model training, scoring, and evaluation. The `TD_XGBoostPredict` function is particularly notable for its ability to make predictions based on models trained using XGBoost. This document outlines the required syntax elements, provides examples for common SQL operations, and highlights key features relevant to users of the Analytics Database.

## Code Examples

### 1. Select
```sql
SELECT column1, column2 
FROM my_table 
WHERE condition;
```

### 2. Update
```sql
UPDATE my_table 
SET column1 = value1 
WHERE condition;
```

### 3. Delete
```sql
DELETE FROM my_table 
WHERE condition;
```

### 4. Create
```sql
CREATE TABLE my_table (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Keywords and Phrases

- **Required Syntax Elements for TD_XGBoostPredict**
- **Analytics Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Limitations When Using PARTITION BY**
- **Function Names with and without TD Prefix**
- **Example: How to Use TD_XGBoostPredict**
- **XGBoostPredict for Classification**
- **XGBoostPredict for Regression**

This structured approach will help users understand the capabilities and syntax of the Teradata Analytics Database, particularly focusing on the powerful `TD_XGBoostPredict` function and how it integrates with other analytic functions.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/Required-Syntax-Elements-for-TD_XGBoostPredict","2024-07-27 12:30:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/TD_XGBoostPredict-Input","text/html;charset=UTF-8","200","","Indexable","","TD_XGBoostPredict Input - Analytics Database","44","413","InputTable Schema Column Name Data Type Description ID_Column Any Unique test point identifier. Cannot be NULL. target_column(s) INTEGER, BIGINT, SMALLINT, BYTEINT, FLOAT, DECIMAL, NUMBER Column appears once for each specified target_column. Predictor variable. Cannot be NULL. accumulate_column(s) Any Column appears on...","323","2137","","0","TD_XGBoostPredict Input - Analytics Database","44","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/TD_XGBoostPredict-Input","","","","","","219495","14388","14388","5.101","A+","482","108","4.463","51.008","Fairly Hard","11.835","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.969","","","","","","1.1","## Summary

This document provides a comprehensive overview of the Teradata Vantage™ Analytics Database and its associated analytic functions. It covers various categories of functions, including data cleaning, exploration, feature engineering, model training, scoring, evaluation, text analytics, and hypothesis testing. Each function is documented with its syntax, required and optional elements, input/output specifications, and usage examples. This information is vital for users aiming to leverage the full capabilities of Teradata Vantage for advanced analytics.

## Code Example

### SQL Operations: Create, Select, Update, Delete

Here are basic SQL examples demonstrating common operations: Create, Select, Update, and Delete.

#### Create Table
```sql
CREATE TABLE customers (
    customer_id INTEGER PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

#### Select Data
```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE created_at >= '2022-01-01';
```

#### Update Data
```sql
UPDATE customers
SET email = 'newemail@example.com'
WHERE customer_id = 1;
```

#### Delete Data
```sql
DELETE FROM customers
WHERE customer_id = 1;
```

## Keywords and Phrases
- TD_XGBoostPredict Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Examples
- Syntax Elements
- Required Syntax Elements
- Optional Syntax Elements
- Input and Output
- Usage Notes
- Model Table Schema
- JSON Representation
- Types of Functions
- Classifications and Predictions
- Training and Testing Functions","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/TD_XGBoostPredict-Input","2024-07-27 11:58:42"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/TD_XGBoostPredict-Output","text/html;charset=UTF-8","200","","Indexable","","TD_XGBoostPredict Output - Analytics Database","45","429","Output Table Schema Column Data Type Description id_column Same as in input table Column copied from input table. Unique row identifier. prediction Double Precision /Integer Predicted test point value or predicted class, determined by model. Datatype double precision by default. If ModelType is set to classification, t...","323","1974","","0","TD_XGBoostPredict Output - Analytics Database","45","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/TD_XGBoostPredict-Output","","","","","","211572","13481","13481","4.779","A+","216","64","3.375","26.376","Very Hard","11.501","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.762","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions designed for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. The platform supports a variety of database operations, including creating, selecting, updating, and deleting data, which can be efficiently performed using SQL commands.

This document outlines how to use basic SQL commands within the context of Teradata, particularly focusing on the operations that are essential for managing and manipulating data in an analytics database.

## Code Example

### 1. Create
To create a new table:

```sql
CREATE TABLE sales_data (
    sale_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    sale_date DATE,
    sale_amount DECIMAL(10,2)
);
```

### 2. Select
To select data from the table:

```sql
SELECT product_name, sale_amount
FROM sales_data
WHERE sale_date > '2023-01-01';
```

### 3. Update
To update existing records in the table:

```sql
UPDATE sales_data
SET sale_amount = sale_amount * 1.1
WHERE sale_date < '2023-01-01';
```

### 4. Delete
To delete records from the table:

```sql
DELETE FROM sales_data
WHERE sale_date < '2022-01-01';
```

## Keywords and Phrases

- **TD_XGBoostPredict Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number** - 17.20
- **Published** - June 2022
- **Language** - English (United States)
- **Last Update** - 2024-04-06
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category** - Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/TD_XGBoostPredict-Output","2024-07-27 11:59:30"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/TD_XGBoostPredict-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_XGBoostPredict Syntax | XGBoostPredict | Teradata Vantage - TD_XGBoostPredict Syntax - Analytics Database","108","1018","See the syntax of the Analytics Database (SQL Engine) function TD_XGBoostPredict and read descriptions of its required and optional syntax elements.","148","931","","0","TD_XGBoostPredict Syntax | XGBoostPredict | Teradata Vantage - TD_XGBoostPredict Syntax - Analytics Database","108","Database Analytic Functions","27","For Regression","14","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/TD_XGBoostPredict-Syntax","","","","","","210239","13167","13167","4.668","A+","194","65","2.985","51.613","Fairly Hard","11.482","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.607","","","","","","1.1","## Summary of TD_XGBoostPredict in Teradata Vantage

The `TD_XGBoostPredict` function in Teradata Vantage is designed for making predictions using models generated by the XGBoost algorithm. This function can handle both classification and regression tasks, allowing users to leverage powerful ensemble learning techniques for their analytics.

### Code Example

Here are examples of how to use `TD_XGBoostPredict` for different operations, including selecting predictions, creating tables, and updating records.

#### 1. **Select Predictions for Regression**
```sql
SELECT 
    id_column,
    TD_XGBoostPredict(
        ON my_input_table AS InputTable
        ON my_model_table AS ModelTable DIMENSION
        USING
            IDColumn (id_column)
            NumBoostRounds (100)
            ModelType ('regression')
    ) AS predicted_value
FROM my_input_table;
```

#### 2. **Select Predictions for Classification**
```sql
SELECT 
    id_column,
    TD_XGBoostPredict(
        ON my_input_table AS InputTable
        ON my_model_table AS ModelTable DIMENSION
        USING
            IDColumn (id_column)
            NumBoostRounds (100)
            ModelType ('classification')
            OutputProb ('true')
            Responses ('class1', 'class2')
    ) AS predicted_class
FROM my_input_table;
```

#### 3. **Create a New Table with Predictions**
```sql
CREATE TABLE predictions AS (
    SELECT 
        id_column,
        TD_XGBoostPredict(
            ON my_input_table AS InputTable
            ON my_model_table AS ModelTable DIMENSION
            USING
                IDColumn (id_column)
                NumBoostRounds (100)
                ModelType ('regression')
        ) AS predicted_value
    FROM my_input_table
) WITH NO DATA;
```

#### 4. **Update Existing Records with Predictions**
```sql
UPDATE my_table
SET predicted_value = (
    SELECT 
        TD_XGBoostPredict(
            ON my_input_table AS InputTable
            ON my_model_table AS ModelTable DIMENSION
            USING
                IDColumn (id_column)
                NumBoostRounds (100)
                ModelType ('regression')
        )
    FROM my_input_table
    WHERE my_table.id_column = my_input_table.id_column
)
WHERE EXISTS (
    SELECT 1
    FROM my_input_table
    WHERE my_table.id_column = my_input_table.id_column
);
```

### Keywords and Phrases
- TD_XGBoostPredict Syntax
- XGBoostPredict
- Teradata Vantage - TD_XGBoostPredict Syntax
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Feature Engineering Utility Functions
- Data Cleaning Functions
- Data Exploration Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- Non-Deterministic Behavior
- Workload Management Configuration for Analytics
- Avoid Deadlocks Using Volatile Tables
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Required Syntax Elements for TD_XGBoostPredict
- Optional Syntax Elements for TD_XGBoostPredict","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/TD_XGBoostPredict-Syntax","2024-07-27 12:50:10"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions","text/html;charset=UTF-8","200","","Indexable","","Model Training Functions | Teradata Vantage - Model Training Functions - Analytics Database","91","829","Learn about the Analytics Database (SQL Engine) functions for training models.","78","492","","0","Model Training Functions | Teradata Vantage - Model Training Functions - Analytics Database","91","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions","","","","","","209867","13246","13246","4.696","A+","64","42","1.524","33.445","Hard","11.048","1","3","","707","707","0","99.860","718","716","0","","","","","","","","","0.585","","","","","","1.1","## Summary
The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions, including model training, scoring, and evaluation functions. These functions facilitate data cleaning, exploration, feature engineering, and hypothesis testing, enabling advanced analytics and machine learning capabilities directly within the database. This document covers fundamental SQL operations such as Create, Select, Update, and Delete, along with examples of their usage in the context of Teradata Vantage.

## Code Example

### 1. Create
To create a new table in Teradata, you can use the `CREATE TABLE` statement. For example, the following SQL command creates a table for storing customer data:

```sql
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Email VARCHAR(100),
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### 2. Select
The `SELECT` statement is used to query data from a table. The following example retrieves all records from the `Customers` table:

```sql
SELECT * FROM Customers;
```

To select specific columns, you can specify them as follows:

```sql
SELECT FirstName, LastName FROM Customers WHERE Email IS NOT NULL;
```

### 3. Update
To modify existing records in a table, use the `UPDATE` statement. The following example updates the email address of a customer:

```sql
UPDATE Customers
SET Email = 'newemail@example.com'
WHERE CustomerID = 1;
```

### 4. Delete
To remove records from a table, the `DELETE` statement can be used. The following command deletes a customer record based on the `CustomerID`:

```sql
DELETE FROM Customers
WHERE CustomerID = 1;
```

## Keywords and Phrases
- Model Training Functions
- Teradata Vantage 
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- Published
- Language
- Last Update
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Workload Management
- Non-Deterministic Behavior
- Data Transformation
- SQL Operations
- Create, Select, Update, Delete (CRUD)
- Teradata Functions
- Analytics Database Analytic Functions","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions","2024-07-27 11:58:20"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest","text/html;charset=UTF-8","200","","Indexable","","TD_DecisionForest Function | DecisionForest | Teradata Vantage - TD_DecisionForest - Analytics Database","103","943","This Analytics Database (SQL Engine) data model function is used for classification and regression predictive modeling.","119","735","","0","TD_DecisionForest Function | DecisionForest | Teradata Vantage - TD_DecisionForest - Analytics Database","103","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest","","","","","","214201","14706","14706","5.213","A+","689","125","5.512","59.176","Fairly Hard","12.682","1","4","","707","707","0","99.860","718","715","0","","","","","","","","","0.545","","","","","","1.1","## Summary of TD_DecisionForest Function

The `TD_DecisionForest` function in Teradata Vantage is a powerful analytic tool used for building predictive models through an ensemble of decision trees. This function facilitates both classification and regression tasks and employs an algorithm known as bootstrap aggregation (bagging) to enhance prediction accuracy by utilizing a random subset of features at each split point in the decision trees.

### Key Features:
- Supports binary and multi-class classification, as well as regression.
- Requires numerical input features; categorical features must be converted to numeric beforehand.
- Can handle up to 500 classes for classification tasks.
- Skips observations with missing values in input columns unless addressed with preprocessing functions like `TD_SimpleImpute`.
- Offers flexibility in tuning parameters such as the number of trees, maximum depth, and minimum samples required to split nodes.

The function is designed to work efficiently in parallel across available AMPs, optimizing resource usage and performance. The `TD_DecisionForestPredict` function is then used to make predictions based on the trained model.

## Code Example

### Create
```sql
-- Create a training dataset with features and a response variable
CREATE TABLE training_data (
    feature1 FLOAT,
    feature2 FLOAT,
    feature3 FLOAT,
    response INTEGER
);
```

### Select
```sql
-- Select features and response variable from the training dataset
SELECT feature1, feature2, feature3, response
FROM training_data
WHERE response IS NOT NULL;
```

### Update
```sql
-- Update a specific row in the training dataset
UPDATE training_data
SET feature1 = 5.0
WHERE response = 1 AND feature2 = 3.0;
```

### Delete
```sql
-- Delete records with missing values in the response variable
DELETE FROM training_data
WHERE response IS NULL;
```

### Using TD_DecisionForest
```sql
-- Using TD_DecisionForest to create a predictive model
CALL TD_DecisionForest (
    'training_data',           -- Input dataset
    'response',                -- Response variable
    'feature1, feature2, feature3', -- Predictor variables
    NumTrees => 100,          -- Number of trees in the forest
    MaxDepth => 10,           -- Maximum depth of each tree
    MinSamplesSplit => 5      -- Minimum samples required to split a node
);
```

### Using TD_DecisionForestPredict
```sql
-- Making predictions using the trained model
CALL TD_DecisionForestPredict (
    'model_name',             -- Name of the model created
    'new_data'                -- New dataset for predictions
);
```

## Keywords and Phrases
- **TD_DecisionForest Function**
- **DecisionForest**
- **Teradata Vantage - TD_DecisionForest**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware Product**
- **Release Number 17.20**
- **Published June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Product Category: Teradata Vantage™**
- **Data Cleaning Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Hypothesis Testing Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**","27","1","6","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest","2024-07-27 12:20:51"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/Optional-Syntax-Elements-for-TD_DecisionForest","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_DecisionForest - Analytics Database","67","618","The following elements are optional when using TD_DecisionForest: MaxDepth Specify the maximum depth of a tree. The algorithm stops splitting a node beyond this depth. Decision trees can grow to 2(max_depth+1)-1 nodes. The default value is 5. You must specify a non-negative integer value. NumTrees Specify the number of...","323","2030","","0","Optional Syntax Elements for TD_DecisionForest - Analytics Database","67","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/Optional-Syntax-Elements-for-TD_DecisionForest","","","","","","210745","13755","13755","4.876","A+","439","103","4.262","68.960","Normal","12.061","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.342","","","","","","1.1","## Summary

The **Analytics Database** within Teradata Vantage™ supports various analytic functions, including data cleaning, feature engineering, model training, and evaluation. One of the key functionalities offered is the **TD_DecisionForest** function, which is utilized for building decision forest models for both regression and classification tasks. This function allows users to specify various optional syntax elements to tune the performance of the model, such as tree depth, the number of trees, and the minimum node size.

### Code Example

Below are examples demonstrating basic SQL operations: `SELECT`, `UPDATE`, `DELETE`, and `CREATE` within the context of an Analytics Database.

#### 1. **SELECT**
Retrieve data from a table named `CustomerData`.

```sql
SELECT CustomerID, FirstName, LastName
FROM CustomerData
WHERE Country = 'US';
```

#### 2. **UPDATE**
Update the `Email` field for a specific customer in the `CustomerData` table.

```sql
UPDATE CustomerData
SET Email = 'newemail@example.com'
WHERE CustomerID = 12345;
```

#### 3. **DELETE**
Delete a customer record from the `CustomerData` table based on `CustomerID`.

```sql
DELETE FROM CustomerData
WHERE CustomerID = 12345;
```

#### 4. **CREATE**
Create a new table named `SalesData` to store sales records.

```sql
CREATE TABLE SalesData (
    SaleID INT PRIMARY KEY,
    ProductID INT,
    Quantity INT,
    SaleDate DATE,
    TotalAmount DECIMAL(10, 2)
);
```

### Optional Syntax Elements for TD_DecisionForest
- **MaxDepth**: Maximum depth of a tree (default is 5).
- **NumTrees**: Number of trees in the forest (default is -1).
- **MinNodeSize**: Minimum number of observations in a node (default is 1).
- **Mtry**: Number of features to evaluate for best split (default is -1).
- **MtrySeed**: Random seed for Mtry (default is 1).
- **Seed**: Random seed for repeatable results (default is 1).
- **ModelType**: Type of analysis (Regression or Classification, default is Regression).
- **TreeSize**: Number of rows for each tree (default is -1).
- **MinImpurity**: Minimum impurity for a tree node (default is 0.0).

### Keywords and Phrases
- **Analytics Database**
- **Decision Forest**
- **Model Training Functions**
- **SQL Operations**
- **Data Cleaning Functions**
- **Feature Engineering Transform Functions**
- **Regression and Classification**
- **Teradata Vantage**
- **Data Exploration Functions**
- **Hypothesis Testing Functions**
- **Deployment**
- **VantageCloud**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Last Update**: 2024-04-06
- **Product Category**: Teradata Vantage™
- **Release Number**: 17.20
- **Language**: English (United States)
- **Examples**: TD_DecisionForest, TD_GetRowsWithMissingValues, TD_Histogram

This structured approach to understanding the functionalities of Teradata's Analytics Database will assist users in efficiently utilizing its analytic capabilities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/Optional-Syntax-Elements-for-TD_DecisionForest","2024-07-27 12:14:19"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/Required-Syntax-Elements-for-TD_DecisionForest","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_DecisionForest - Analytics Database","67","622","The following elements are required when using TD_DecisionForest: InputColumns Specify the input table column names for training the model (predictors, features, or independent variables). Input column names with double quotation marks are not allowed for this function. ResponseColumn Specify the column name that conta...","323","2036","","0","Required Syntax Elements for TD_DecisionForest - Analytics Database","67","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/Required-Syntax-Elements-for-TD_DecisionForest","","","","","","208359","13092","13092","4.641","A+","123","48","2.562","26.780","Very Hard","11.339","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.530","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a suite of analytic functions tailored for data processing, model training, scoring, and evaluation. These functions facilitate various data manipulation tasks such as selection, updating, deletion, and creation of data, leveraging advanced analytics capabilities in a scalable cloud environment. This document outlines key aspects of the TD_DecisionForest function, including its required syntax, optional syntax elements, and examples of its usage.

### Code Examples

Here are examples of SQL commands relevant to operations like SELECT, UPDATE, DELETE, and CREATE within the context of the Teradata Vantage Analytics Database:

#### SELECT
```sql
SELECT 
    InputColumn1, 
    InputColumn2, 
    ResponseColumn 
FROM 
    TrainingData 
WHERE 
    Condition = 'Value';
```

#### UPDATE
```sql
UPDATE 
    TrainingData 
SET 
    InputColumn1 = 'NewValue' 
WHERE 
    ResponseColumn = 'TargetValue';
```

#### DELETE
```sql
DELETE FROM 
    TrainingData 
WHERE 
    InputColumn1 IS NULL;
```

#### CREATE
```sql
CREATE TABLE NewTrainingData (
    InputColumn1 VARCHAR(100),
    InputColumn2 INTEGER,
    ResponseColumn VARCHAR(50)
);
```

### Keywords and Phrases

- **Required Syntax Elements for TD_DecisionForest**
  - InputColumns
  - ResponseColumn
  - CoverageFactor

- **Database Analytic Functions**
  - Data Cleaning Functions
  - Data Exploration Functions
  - Feature Engineering Functions
  - Model Training Functions
  - Model Scoring Functions

- **Deployment**
  - VantageCloud
  - VantageCore
  - Edition
  - Enterprise
  - IntelliFlex
  - VMware

- **Product Information**
  - Analytics Database
  - Release Number: 17.20
  - Published: June 2022
  - Language: English (United States)
  - Last Update: 2024-04-06

- **Function Categories**
  - Text Analytic Functions
  - Hypothesis Testing Functions
  - Path and Pattern Analysis Functions
  - Model Evaluation Functions

This structured overview encapsulates the essential elements of using the Teradata Vantage™ Analytics Database for analytic operations, and provides foundational examples to guide users in effectively applying its capabilities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/Required-Syntax-Elements-for-TD_DecisionForest","2024-07-27 11:54:12"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/TD_DecisionForest-Examples","text/html;charset=UTF-8","200","","Indexable","","TD_DecisionForest Examples | DecisionForest | Teradata Vantage - TD_DecisionForest Examples - Analytics Database","112","1045","See examples of the Analytics Database (SQL Engine) model training function TD_DecisionForest.","94","599","","0","TD_DecisionForest Examples | DecisionForest | Teradata Vantage - TD_DecisionForest Examples - Analytics Database","112","Database Analytic Functions","27","Example: TD_DecisionForest Classification","41","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/TD_DecisionForest-Examples","","","","","","230315","14997","14997","5.317","A+","318","321","0.991","18.273","Very Hard","11.658","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.554","","","","","","1.1","## Summary

In this documentation, we have explored various SQL commands related to the Teradata Vantage's `TD_DecisionForest`, focusing on data manipulation and analytic functions. The `TD_DecisionForest` function is used for both classification and regression tasks in machine learning, allowing users to build and utilize decision forest models effectively.

### Code Examples

#### 1. **Create**
To create a volatile table for storing the output of the `TD_DecisionForest` function, you can use the following SQL command:

```sql
CREATE VOLATILE TABLE DecisionForestOutput AS (
SELECT * FROM TD_DecisionForest(
  ON DT_Input AS PARTITION BY ANY
  USING
    ResponseColumn('encoded')
    InputColumns('[2:12]')
    TreeType('CLASSIFICATION')
) AS dt
) WITH DATA
ON COMMIT PRESERVE ROWS;
```

#### 2. **Select**
To retrieve the results from the generated `DecisionForestOutput` table, the following command can be executed:

```sql
SELECT * FROM DecisionForestOutput;
```

#### 3. **Update**
Although the `UPDATE` operation isn't commonly used with outputs of analytic functions, you can update values in a regular table as follows:

```sql
UPDATE DecisionForestOutput
SET tree_num = tree_num + 1
WHERE task_index = 24;
```

#### 4. **Delete**
To delete specific rows from a table based on a condition, you can use the following command:

```sql
DELETE FROM DecisionForestOutput
WHERE task_index = 35 AND tree_num = 0;
```

### Keywords and Phrases

- **TD_DecisionForest Examples**
- **DecisionForest**
- **Teradata Vantage - TD_DecisionForest Examples**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Hypothesis Testing Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Model Scoring Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Function Names with and without TD Prefix**
- **Analytics Database Analytic Function Categories** 

This summary and examples guide provides a concise overview of the `TD_DecisionForest` functionality, along with essential SQL operations for managing and querying data in Teradata Vantage.","28","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/TD_DecisionForest-Examples","2024-07-27 11:34:06"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/TD_DecisionForest-Input","text/html;charset=UTF-8","200","","Indexable","","TD_DecisionForest Input - Analytics Database","44","404","Column Name Data Type Description input_column INTEGER, BIGINT, SMALLINT, BYTEINT, FLOAT, DECIMAL, or NUMBER The columns that the function uses to train the DecisionForest model. response_column INTEGER, SMALLINT, BYTEINT, FLOAT, DECIMAL, or NUMBER The column that contains the response value for an observation. For reg...","323","2143","","0","TD_DecisionForest Input - Analytics Database","44","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/TD_DecisionForest-Input","","","","","","209173","13167","13167","4.668","A+","102","42","2.429","21.070","Very Hard","11.230","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.550","","","","","","1.1","## Summary

This document provides an overview of the Teradata Vantage™ Analytics Database Analytic Functions, focusing particularly on the TD_DecisionForest function, which is used for model training in both regression and classification tasks. The TD_DecisionForest function allows users to train a decision forest model using specified input and response columns. Additionally, this document outlines the general structure and syntax for various database operations, including Select, Update, Delete, and Create.

## Code Example

### 1. Select
To retrieve data from a table, you can use the `SELECT` statement. 

```sql
SELECT input_column, response_column
FROM analytics_table
WHERE input_column > 100;
```

### 2. Update
To modify existing records in a table, you can use the `UPDATE` statement.

```sql
UPDATE analytics_table
SET input_column = input_column + 10
WHERE response_column = 'specific_value';
```

### 3. Delete
To remove records from a table, you can use the `DELETE` statement.

```sql
DELETE FROM analytics_table
WHERE input_column < 50;
```

### 4. Create
To create a new table, you can use the `CREATE TABLE` statement.

```sql
CREATE TABLE new_analytics_table (
    input_column INTEGER,
    response_column FLOAT
);
```

## Keywords and Phrases

- **TD_DecisionForest Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**: gjn1627595495337.ditamap
- **dita:ditavalPath**: ayr1485454803741.ditaval
- **dita:id**: jmh1512506877710
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/TD_DecisionForest-Input","2024-07-27 11:40:17"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/TD_DecisionForest-Output","text/html;charset=UTF-8","200","","Indexable","","TD_DecisionForest Output - Analytics Database","45","420","The function produces a model and a JSON representation of the decision tree. The model output is as follows: Column Name Data Type Description task_index SMALLINT The AMP that produces the decision tree. tree_num SMALLINT The identified decision tree within an AMP. tree_order SMALLINT Identifier of a complete JSON ord...","323","2057","","0","TD_DecisionForest Output - Analytics Database","45","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/TD_DecisionForest-Output","","","","","","215039","13846","13846","4.908","A+","357","82","4.354","64.023","Normal","11.645","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.583","","","","","","1.1","## Teradata Vantage™ Analytics Database Overview

The Teradata Vantage™ Analytics Database provides robust analytic functions to support various tasks in data analysis, including data cleaning, feature engineering, model training, and evaluation. This guide will cover the basic operations (Select, Update, Delete, Create) commonly used within this database, specifically focusing on the TD_DecisionForest output and other analytic functionalities.

### Summary of Functions

- **Select**: Retrieve data from the database.
- **Update**: Modify existing records in the database.
- **Delete**: Remove records from the database.
- **Create**: Add new tables or data to the database.

### Code Examples

#### 1. Select
```sql
SELECT task_index, tree_num, regression_tree
FROM TD_DecisionForest
WHERE tree_num = 1;
```

#### 2. Update
```sql
UPDATE TD_DecisionForest
SET tree_num = 2
WHERE task_index = 1;
```

#### 3. Delete
```sql
DELETE FROM TD_DecisionForest
WHERE task_index = 1 AND tree_num = 1;
```

#### 4. Create
```sql
CREATE TABLE TD_DecisionForest (
    task_index SMALLINT,
    tree_num SMALLINT,
    tree_order SMALLINT,
    regression_tree VARCHAR(32000) 
);
```

### Keywords and Phrases

- **TD_DecisionForest Output**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **Product Category**: Teradata Vantage™
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This summary gives insights into the primary operations and functionalities available within the Teradata Vantage™ Analytics Database, serving as a foundational guide for users looking to harness its analytic capabilities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/TD_DecisionForest-Output","2024-07-27 12:52:40"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/TD_DecisionForest-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_DecisionForest Syntax | DecisionForest | Teradata Vantage - TD_DecisionForest Syntax - Analytics Database","108","991","See the syntax of the Analytics Database (SQL Engine) function TD_DecisionForest and read descriptions of its required and optional syntax elements.","148","923","","0","TD_DecisionForest Syntax | DecisionForest | Teradata Vantage - TD_DecisionForest Syntax - Analytics Database","108","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/TD_DecisionForest-Syntax","","","","","","208755","13070","13070","4.633","A+","138","54","2.556","41.172","Hard","11.372","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.481","","","","","","1.1","## Summary

The TD_DecisionForest function is a powerful analytic function in Teradata Vantage designed for building decision forest models, which can be used for classification and regression tasks. This function allows users to specify various parameters such as input columns, response columns, tree depth, and the number of trees, among others. It can be integrated into SELECT statements, CREATE TABLE statements, or CREATE VIEW statements, making it versatile for data manipulation and modeling tasks.

### Code Examples

Below are examples of how to use the TD_DecisionForest function in various contexts, including SELECT, UPDATE, DELETE, and CREATE operations.

#### 1. **CREATE TABLE Example**

This example demonstrates how to create a new table that contains the results from a decision forest model.

```sql
CREATE TABLE DecisionForestResults AS (
    SELECT 
        TD_DecisionForest (
            ON my_table AS InputTable
            USING 
                InputColumns ('feature1', 'feature2', 'feature3')
                ResponseColumn ('target')
                MaxDepth (10)
                NumTrees (100)
                ModelType ('classification')
        ) AS ModelOutput
) WITH DATA;
```

#### 2. **SELECT Example**

This example shows how to use the TD_DecisionForest function within a SELECT statement to generate predictions.

```sql
SELECT 
    *,
    TD_DecisionForest (
        ON my_table AS InputTable
        USING 
            InputColumns ('feature1', 'feature2', 'feature3')
            ResponseColumn ('target')
            NumTrees (50)
    ) AS Prediction
FROM my_table;
```

#### 3. **UPDATE Example**

This example updates existing records in a table based on predictions from the decision forest model.

```sql
UPDATE my_table
SET prediction = TD_DecisionForest (
    ON my_table AS InputTable
    USING 
        InputColumns ('feature1', 'feature2', 'feature3')
        ResponseColumn ('target')
) 
WHERE some_condition;
```

#### 4. **DELETE Example**

This example deletes records from a table based on certain criteria, which could involve model predictions.

```sql
DELETE FROM my_table
WHERE prediction = 'unwanted_value';
```

### Keywords and Phrases

- TD_DecisionForest Syntax
- DecisionForest
- Teradata Vantage
- TD_DecisionForest Syntax
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- Usage Notes
- Function Syntax Descriptions
- Input Table Rows Redistribution
- Function Names with and without TD Prefix
- Recommendations for Using Analytic Functions
- Model Type ('classification'|'regression')
- MaxDepth
- NumTrees
- ResponseColumn
- InputColumns
- CREATE TABLE
- SELECT
- UPDATE
- DELETE

This structured overview provides clarity on the use of the TD_DecisionForest function and its integration into Teradata Vantage for effective data analysis and modeling.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/TD_DecisionForest-Syntax","2024-07-27 12:08:23"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM","text/html;charset=UTF-8","200","","Indexable","","TD_GLM Function | GLM | Teradata Vantage - TD_GLM - Analytics Database","70","670","This Analytics Database (SQL Engine) function performs regression analysis on data sets where the response follows an exponential family distribution.","150","935","","0","TD_GLM Function | GLM | Teradata Vantage - TD_GLM - Analytics Database","70","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM","","","","","","216388","15550","15550","5.513","A+","836","150","5.573","55.557","Fairly Hard","13.053","1","4","","707","707","0","99.860","722","720","0","","","","","","","","","0.843","","","","","","1.1","## Summary of TD_GLM Function

The **TD_GLM** function in Teradata Vantage is a powerful tool for performing generalized linear modeling, which includes regression and classification analyses. It allows users to model data where the response variable follows an exponential family distribution. The function supports various types of models, including:

- **Regression**: Uses the Gaussian family with a squared error loss function.
- **Binary Classification**: Uses the Binomial family with a logistic loss function, suitable for binary outcomes.

The components of a GLM include the linear predictor, link function, and probability distribution, allowing flexibility in modeling a variety of response variables (e.g., binary, count, continuous). The function employs **Minibatch Stochastic Gradient Descent (SGD)** for optimization, supporting regularization methods and convergence criteria.

### Key Features of TD_GLM
- **Supports multiple distributions**: Normal, Binomial, Poisson, etc.
- **Flexible modeling**: Can handle various types of response variables.
- **Regularization**: Options for L1, L2, and Elastic Net.
- **Local SGD**: Optimizes communication costs during training.
- **Output model statistics**: Includes MSE, Loglikelihood, AIC, and BIC for model evaluation.

### Code Examples

Here are some basic SQL code examples that demonstrate the `SELECT`, `UPDATE`, `DELETE`, and `CREATE` operations in Teradata Vantage:

#### 1. **SELECT**
```sql
SELECT customer_id, purchase_amount, purchase_date
FROM sales
WHERE purchase_date >= '2023-01-01'
ORDER BY purchase_date DESC;
```

#### 2. **UPDATE**
```sql
UPDATE customers
SET status = 'inactive'
WHERE last_purchase_date < '2022-01-01';
```

#### 3. **DELETE**
```sql
DELETE FROM orders
WHERE order_status = 'cancelled' AND order_date < '2022-01-01';
```

#### 4. **CREATE**
```sql
CREATE TABLE sales (
    sale_id INTEGER NOT NULL,
    customer_id INTEGER,
    purchase_amount DECIMAL(10, 2),
    purchase_date DATE,
    PRIMARY KEY (sale_id)
);
```

### Keywords and Phrases

- **TD_GLM Function**
- **GLM**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Product Category: Teradata Vantage™**
- **Data Cleaning Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **LocalSGD**
- **Regularization**
- **Stochastic Gradient Descent**
- **Minibatch Learning**
- **Model Statistics: MSE, Loglikelihood, AIC, BIC**
- **TD_GLMPredict**
- **TD_RegressionEvaluator**
- **TD_ClassificationEvaluator**
- **TD_ROC**
- **Imputation Functions**
- **Partition by Key**
- **Partition by Any** 

This summary and examples serve as a foundational understanding of the TD_GLM function and its applications within Teradata Vantage, along with fundamental SQL commands for data manipulation.","25","2","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM","2024-07-27 11:37:25"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/Examples-How-to-Use-TD_GLM","text/html;charset=UTF-8","200","","Indexable","","TD_GLM Examples | GLM | Teradata Vantage - Examples: How to Use TD_GLM - Analytics Database","91","884","See examples of the Analytics Database (SQL Engine) model training function TD_GLM.","83","537","","0","TD_GLM Examples | GLM | Teradata Vantage - Examples: How to Use TD_GLM - Analytics Database","91","Database Analytic Functions","27","Input Table for train_dataset","29","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/Examples-How-to-Use-TD_GLM","","","","","","350533","22412","22412","7.945","A+","1887","746","2.529","100.000","Very Easy","10.139","1","5","","707","707","0","99.860","712","710","0","","","","","","","","","0.710","","","","","","1.1","### Summary

In this guide, we explore the functionality of the TD_GLM (Generalized Linear Model) in Teradata Vantage, focusing on its capabilities for regression and classification tasks. We provide examples of various SQL commands such as `SELECT`, `UPDATE`, `DELETE`, and `CREATE`, specifically tailored to work with the TD_GLM function and demonstrate its application in both credit and housing datasets.

### Code Examples

#### 1. **Select**
Using TD_GLM to select data from a credit dataset:
```sql
SELECT * FROM TD_GLM (
    ON credit_ex_merged AS InputTable
    USING
    InputColumns('a1', 'a2', 'a7', ...)
    ResponseColumn('Outcome')
    Family('Binomial')
) AS result;
```

#### 2. **Update**
Updating the parameters of a TD_GLM model:
```sql
UPDATE td_glm_parameters
SET LearningRate = 'optimal', MaxIterNum = 500
WHERE ModelID = 1;
```

#### 3. **Delete**
Deleting a specific TD_GLM output based on certain criteria:
```sql
DELETE FROM td_glm_output_credit_ex
WHERE BIC > 200;
```

#### 4. **Create**
Creating a volatile table to store the output of a TD_GLM operation:
```sql
CREATE VOLATILE TABLE td_glm_output_credit_ex AS (
    SELECT * FROM TD_GLM (
        ON credit_ex_merged AS InputTable
        USING
        InputColumns('a1', 'a2', 'a7', ...)
        ResponseColumn('Outcome')
        Family('Binomial')
        BatchSize(10)
    ) AS dt
) WITH DATA
ON COMMIT PRESERVE ROWS;
```

### Keywords and Phrases
- TD_GLM Examples
- GLM
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_XGBoost
- TD_SVM
- Family ('Gaussian', 'Binomial')
- InputColumns
- ResponseColumn
- BatchSize
- LearningRate
- RegularizationLambda
- MaxIterNum
- TD_ScaleFit
- TD_ScaleTransform

This guide serves as a foundational resource for utilizing the TD_GLM function for data analysis within Teradata Vantage, showcasing how to structure SQL commands effectively for various operations.","37","1","3","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/Examples-How-to-Use-TD_GLM","2024-07-27 12:32:36"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/Optional-TD_GLM-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","Optional TD_GLM Syntax Elements - Analytics Database","52","497","PartitionColumn Name of the InputTable columns on which to partition the input. The name must be consistent with the partition_by_column in the ON clause. If the partition_by_column is unicode with foreign language characters, then it is necessary to specify PartitionColumn argument. Family Specify the distribution exp...","323","1997","","0","Optional TD_GLM Syntax Elements - Analytics Database","52","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/Optional-TD_GLM-Syntax-Elements","","","","","","215088","15055","15055","5.337","A+","1009","239","4.222","63.870","Normal","13.501","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.538","","","","","","1.1","## Summary of Teradata Vantage™ Analytics Database

Teradata Vantage™ provides a robust analytics database that supports various analytic functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. It is designed to handle extensive datasets efficiently, making it suitable for enterprises that require advanced analytics capabilities. This document outlines essential SQL commands (SELECT, UPDATE, DELETE, CREATE) along with specific syntax elements related to the analytics functions in Teradata Vantage.

### Code Examples

#### 1. SELECT
The `SELECT` statement is used to query data from a database.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

#### 2. UPDATE
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 3. DELETE
The `DELETE` statement removes records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

#### 4. CREATE
The `CREATE` statement creates a new table or database.

```sql
CREATE TABLE new_table (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Keywords and Phrases

- **Optional TD_GLM Syntax Elements**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number:** 17.20
- **Published:** June 2022
- **Language:** English (United States)
- **Last Update:** 2024-04-06
- **Product Category:** Teradata Vantage™
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Workload Management Configuration**
- **Non-Deterministic Behavior**
- **Spool Space Exhaustion for Large Partitions**
- **Recommendations for Using Analytic Functions**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Function Names with and without TD Prefix**

This overview provides foundational knowledge of the SQL operations and specific syntax elements relevant to Teradata Vantage's analytics capabilities, enabling users to effectively manage and analyze their data.","29","3","0","1","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/Optional-TD_GLM-Syntax-Elements","2024-07-27 11:43:20"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/Required-Syntax-Elements-for-TD_GLM","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_GLM - Analytics Database","56","531","ON clause Accepts the PARTITION BY ANY clause. OUT clause Accepts the TABLE clause. InputColumns Specify the input table column names for training the model (predictors, features or independent variables). ResponseColumn Specify the column name containing the class label for classification or target value (dependent va...","323","2037","","0","Required Syntax Elements for TD_GLM - Analytics Database","56","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/Required-Syntax-Elements-for-TD_GLM","","","","","","208075","12908","12908","4.576","A+","92","43","2.140","21.670","Very Hard","11.247","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.617","","","","","","1.1","# Teradata Vantage™ Analytics Database Functions Overview

Teradata Vantage provides a powerful platform for analytics, offering a range of functions that support data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This document summarizes the primary SQL operations—Select, Update, Delete, and Create—and provides examples for each.

## Summary of SQL Operations

### 1. **Select**
The `SELECT` statement is used to query data from a database and retrieve specific information.

**Example**:
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

### 2. **Update**
The `UPDATE` statement modifies existing records in a table.

**Example**:
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

### 3. **Delete**
The `DELETE` statement removes records from a table based on a condition.

**Example**:
```sql
DELETE FROM table_name
WHERE condition;
```

### 4. **Create**
The `CREATE` statement is used to create a new table or database within the SQL environment.

**Example**:
```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

---

## Keywords and Phrases

- **Required Syntax Elements for TD_GLM**
- **Analytics Database**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This concise overview provides a foundation for utilizing Teradata Vantage's analytic capabilities effectively. For detailed syntax and specific implementations, refer to the official documentation or database reference materials.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/Required-Syntax-Elements-for-TD_GLM","2024-07-27 11:59:02"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/TD_GLM-Input","text/html;charset=UTF-8","200","","Indexable","","TD_GLM Input - Analytics Database","33","313","Column Data Type Description partition_by_column CHARACTER, VARCHAR, INTEGER, BIGINT, SMALLINT, BYTEINT Unique model identifier. id_column CHARACTER, VARCHAR, INTEGER, BIGINT, SMALLINT, BYTEINT Unique identifier for each row. input_column INTEGER, BIGINT, SMALLINT, BYTEINT, FLOAT, DECIMAL, NUMBER The input table column...","323","2185","","0","TD_GLM Input - Analytics Database","33","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/TD_GLM-Input","","","","","","214061","13692","13692","4.854","A+","220","73","3.014","23.424","Very Hard","11.391","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.494","","","","","","1.1","## Summary

This document provides an overview of the Teradata Vantage™ Analytics Database, focusing on its analytic functions and their applications. Teradata's Analytics Database is designed for advanced data analysis, supporting various use cases including data cleaning, feature engineering, model training, and evaluation. The document outlines different analytic function categories and provides examples of how to use key functions, such as the Generalized Linear Model (GLM) and various data exploration methods.

### Code Examples

#### 1. Create
To create a table in Teradata, you can use the following SQL command:
```sql
CREATE TABLE SalesData (
    SaleID INT,
    ProductName VARCHAR(50),
    SaleAmount DECIMAL(10, 2),
    SaleDate DATE
);
```

#### 2. Select
Selecting data from the newly created table:
```sql
SELECT * FROM SalesData WHERE SaleAmount > 100;
```

#### 3. Update
To update records in the table, use:
```sql
UPDATE SalesData
SET SaleAmount = SaleAmount * 1.1
WHERE SaleDate < '2023-01-01';
```

#### 4. Delete
To delete records from the table, execute:
```sql
DELETE FROM SalesData
WHERE SaleAmount < 50;
```

### Keywords and Phrases
- TD_GLM Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Examples of various functions (e.g., Pack, StringSimilarity, TD_ConvertTo, TD_GetRowsWithoutMissingValues, etc.)
- Model Training Functions (e.g., TD_DecisionForest, TD_GLM, TD_KMeans)
- Model Evaluation Functions (e.g., TD_Silhouette, TD_ClassificationEvaluator)
- Text Analytic Functions (e.g., TD_NaiveBayesTextClassifierPredict, TD_TFIDF)
- Hypothesis Testing Functions (e.g., TD_ANOVA, TD_ChiSq)
- Path and Pattern Analysis Functions (e.g., nPath, Sessionize)

This structured overview provides valuable insights into the functionality and capabilities of the Teradata Vantage™ Analytics Database, facilitating effective data analysis and decision-making.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/TD_GLM-Input","2024-07-27 11:31:49"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/TD_GLM-Output","text/html;charset=UTF-8","200","","Indexable","","TD_GLM Output - Analytics Database","34","329","TD_GLM produces the following outputs: Model (Primary output): Contains the trained model with model statistics. The following model statistics are stored in the model: Loss Function MSE (Gaussian) Loglikelihood (Logistic) Number of Observations AIC BIC Number of Iterations Regularization Alpha (L1/L2/Elasticnet) Learn...","323","2021","","0","TD_GLM Output - Analytics Database","34","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/TD_GLM-Output","","","","","","218819","14432","14432","5.116","A+","489","104","4.702","43.070","Hard","11.910","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.557","","","","","","1.1","# Teradata Vantage™ Analytics Database: Overview and SQL Operations

The Teradata Vantage Analytics Database provides a robust platform for performing various analytical tasks. It includes numerous analytic functions that facilitate data cleaning, exploration, feature engineering, model training, scoring, and evaluation.

This document provides a summary of basic SQL operations (Select, Update, Delete, Create) as well as some important keywords and phrases related to the Analytics Database and its functions.

## Summary of SQL Operations

### 1. Create
The `CREATE` statement is used to create new tables or databases. 

**Example:**
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    hire_date DATE
);
```

### 2. Select
The `SELECT` statement retrieves data from one or more tables.

**Example:**
```sql
SELECT first_name, last_name
FROM employees
WHERE hire_date > '2020-01-01';
```

### 3. Update
The `UPDATE` statement modifies existing data in a table.

**Example:**
```sql
UPDATE employees
SET hire_date = '2022-01-15'
WHERE employee_id = 1;
```

### 4. Delete
The `DELETE` statement removes records from a table.

**Example:**
```sql
DELETE FROM employees
WHERE employee_id = 1;
```

## Code Example Summary
- **Create**: Defines a new table structure.
- **Select**: Queries data based on specified conditions.
- **Update**: Modifies existing records in a table.
- **Delete**: Removes specified records from a table.

## Keywords and Phrases
- **TD_GLM Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**: gjn1627595495337.ditamap
- **dita:ditavalPath**: ayr1485454803741.ditaval
- **dita:id**: jmh1512506877710
- **Product Category**: Teradata Vantage™
- **Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Workload Management Configuration**
- **Non-Deterministic Behavior**
- **Input Table Rows Redistribution**
- **Input Table Schemas**
- **Function Syntax Descriptions**
- **Recommendations for Using Analytic Functions**

This structure provides a foundational understanding of how to interact with the Teradata Vantage Analytics Database through SQL operations and highlights essential concepts and functionalities available within the system.","25","1","0","2","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/TD_GLM-Output","2024-07-27 12:27:03"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/TD_GLM-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_GLM Syntax | GLM | Teradata Vantage - TD_GLM Syntax - Analytics Database","75","718","See the syntax of the Analytics Database (SQL Engine) function TD_GLM and read descriptions of its required and optional syntax elements.","137","861","","0","TD_GLM Syntax | GLM | Teradata Vantage - TD_GLM Syntax - Analytics Database","75","Database Analytic Functions","27","TD_GLM Syntax Using Partition by Any","36","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/TD_GLM-Syntax","","","","","","212601","13811","13811","4.896","A+","387","104","3.721","54.407","Fairly Hard","12.024","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.526","","","","","","1.1","### Summary

Teradata Vantage provides a comprehensive suite of analytic functions designed for various data operations, including data cleaning, exploration, feature engineering, model training, and evaluation. The TD_GLM function is particularly notable for its capabilities in generalized linear modeling, allowing users to specify a range of parameters to fit models on datasets effectively. This functionality, along with others, is critical for data scientists and analysts working with large datasets in the Teradata ecosystem.

### Code Example

Here are examples of basic SQL operations (SELECT, UPDATE, DELETE, CREATE) using Teradata syntax:

#### SELECT
```sql
SELECT column1, column2
FROM my_table
WHERE condition;
```

#### UPDATE
```sql
UPDATE my_table
SET column1 = value1, column2 = value2
WHERE condition;
```

#### DELETE
```sql
DELETE FROM my_table
WHERE condition;
```

#### CREATE
```sql
CREATE TABLE my_table (
    column1 INT,
    column2 VARCHAR(255),
    column3 DATE
);
```

### Keywords and Phrases

- **TD_GLM Syntax**
- **GLM**
- **Teradata Vantage™**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number 17.20**
- **Published June 2022**
- **Language: English (United States)**
- **Last Update 2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Analytics Database Analytic Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Function Syntax Descriptions**
- **AMP Configuration Impact**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions**
- **Recommendations for Using Analytic Functions**
- **Input Table Rows Redistribution** 

This structured overview should serve as both a reference and a learning tool for users engaging with Teradata Vantage and its analytics capabilities.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/TD_GLM-Syntax","2024-07-27 12:32:08"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/Using-Partition-by-Any","text/html;charset=UTF-8","200","","Indexable","","Using Partition by Any - Analytics Database","43","382","When it is used as partition-by-any function to train the whole data sets as a single model, the function also supports LocalSGD, a variant of SGD, that uses LocalSGDIterations on each AMP to run multiple batch iterations locally followed by a global iteration. The weights from all mappers are aggregated in a reduce ph...","323","1966","","0","Using Partition by Any - Analytics Database","43","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/Using-Partition-by-Any","","","","","","208298","13188","13188","4.675","A+","179","49","3.653","44.325","Hard","11.482","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.523","","","","","","1.1","# Summary

This document provides an overview of the analytics capabilities of Teradata Vantage™ and its Analytics Database Analytic Functions. It covers various functions for data manipulation, machine learning, and analytics, including data cleaning, feature engineering, model training, and evaluation. The document highlights the use of partitioning in analytic functions, particularly the ""Partition by Any"" option, which allows for efficient processing of large datasets.

## Code Examples

### 1. Create a Table
```sql
CREATE TABLE sales_data (
    sale_id INT,
    sale_amount DECIMAL(10, 2),
    sale_date DATE
);
```

### 2. Insert Data into the Table
```sql
INSERT INTO sales_data (sale_id, sale_amount, sale_date)
VALUES (1, 200.00, '2023-01-01'),
       (2, 150.00, '2023-01-02'),
       (3, 300.00, '2023-01-03');
```

### 3. Select Data from the Table
```sql
SELECT * FROM sales_data
WHERE sale_amount > 100;
```

### 4. Update Data in the Table
```sql
UPDATE sales_data
SET sale_amount = sale_amount * 1.1
WHERE sale_date < '2023-01-03';
```

### 5. Delete Data from the Table
```sql
DELETE FROM sales_data
WHERE sale_id = 2;
```

## Keywords and Phrases

- Using Partition by Any
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Workload Management
- Avoid Deadlocks
- Non-Deterministic Behavior
- Spool Space Exhaustion
- Recommendations for Analytic Functions
- TD Functions (e.g., TD_GetRowsWithMissingValues, TD_SVM)
- LocalSGD and Iteration Methods
- Model Evaluation Metrics (MSE, Loglikelihood, AIC, BIC)","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/Using-Partition-by-Any","2024-07-27 11:34:16"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/Using-Partition-by-Key-Micromodeling","text/html;charset=UTF-8","200","","Indexable","","Using Partition by Key (Micromodeling) - Analytics Database","59","534","When it is used as partition-by-key function to train each partition as a single model, the function accepts the following inputs: InputTable is required, containing an input dataset to be used for training GLM per segment model. AttributeTable is optional, defining a subset of features to be used with respect to each ...","323","1935","","0","Using Partition by Key (Micromodeling) - Analytics Database","59","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/Using-Partition-by-Key-Micromodeling","","","","","","209966","13494","13494","4.784","A+","210","58","3.621","54.909","Fairly Hard","11.457","1","5","","707","707","0","99.860","716","714","0","","","","","","","","","1.201","","","","","","1.1","### Summary
This document provides an overview of the analytic functions available in the Teradata Vantage™ Analytics Database, focusing on the use of partitioning by key (micromodeling) for training models. The functions cover various aspects of data analytics including data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Additionally, it emphasizes the importance of using the ORDER BY clause to maintain deterministic results during model training.

### Code Examples

#### Create
To create a new table in the Analytics Database:
```sql
CREATE TABLE SalesData (
    SaleID INT,
    Product VARCHAR(50),
    SaleAmount DECIMAL(10,2),
    SaleDate DATE
);
```

#### Select
To retrieve data from the SalesData table:
```sql
SELECT Product, SUM(SaleAmount) AS TotalSales
FROM SalesData
GROUP BY Product;
```

#### Update
To update the sale amount for a specific SaleID:
```sql
UPDATE SalesData
SET SaleAmount = 150.00
WHERE SaleID = 1;
```

#### Delete
To delete records from the SalesData table where the sale amount is less than a specified value:
```sql
DELETE FROM SalesData
WHERE SaleAmount < 10.00;
```

### Keywords and Phrases
- Using Partition by Key (Micromodeling)
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Limitations When Using PARTITION BY
- Recommendations for Using Analytic Functions
- Deterministic Results
- ORDER BY Clause
- Batch Size
- Input Table
- Attribute Table
- Parameter Table

This structured format provides clarity around the capabilities of the Teradata Vantage™ Analytics Database, specifically regarding its analytic functions and model training techniques.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/Using-Partition-by-Key-Micromodeling","2024-07-27 12:42:14"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans","text/html;charset=UTF-8","200","","Indexable","","TD_KMeans Function | kmeans | Teradata Vantage - TD_KMeans - Analytics Database","79","761","This Analytics Database (SQL Engine) function groups a set of observations into k clusters - each of which belongs to the cluster with the nearest mean.","152","934","","0","TD_KMeans Function | kmeans | Teradata Vantage - TD_KMeans - Analytics Database","79","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans","","","","","","212123","14197","14197","5.033","A+","447","90","4.967","59.469","Fairly Hard","12.093","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.559","","","","","","1.1","### Summary

The TD_KMeans function in Teradata Vantage is an implementation of the k-means clustering algorithm, which groups observations into k clusters based on the proximity of each observation to the cluster centroids. The algorithm iteratively refines the positions of the centroids and assigns data points to the nearest centroid until convergence is achieved. Notably, it can utilize the KMeans++ method for selecting initial centroids, enhancing clustering quality and convergence speed.

### Code Example

Below are examples of SQL commands for basic operations (SELECT, UPDATE, DELETE, CREATE) in Teradata Vantage, demonstrating how to interact with data effectively.

#### 1. Create a Table
```sql
CREATE TABLE CustomerData (
    CustomerID INT PRIMARY KEY,
    CustomerName VARCHAR(100),
    Age INT,
    City VARCHAR(100)
);
```

#### 2. Insert Data into the Table
```sql
INSERT INTO CustomerData (CustomerID, CustomerName, Age, City)
VALUES (1, 'John Doe', 30, 'New York'),
       (2, 'Jane Smith', 25, 'Los Angeles'),
       (3, 'Sam Brown', 35, 'Chicago');
```

#### 3. Select Data from the Table
```sql
SELECT CustomerID, CustomerName, Age, City
FROM CustomerData
WHERE Age > 30;
```

#### 4. Update Data in the Table
```sql
UPDATE CustomerData
SET City = 'San Francisco'
WHERE CustomerID = 2;
```

#### 5. Delete Data from the Table
```sql
DELETE FROM CustomerData
WHERE CustomerID = 1;
```

### Keywords and Phrases
- TD_KMeans Function
- kmeans
- Teradata Vantage - TD_KMeans
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- TD_KMeans Syntax
- Required Syntax Elements for TD_KMeans
- Optional Syntax Elements for TD_KMeans
- TD_KMeans Input
- TD_KMeans Output
- Example: How to Use TD_KMeans
- KMeans++
- Elbow method
- Deterministic output
- UTF8 client character set
- Pass Through Characters (PTCs)
- International Character Set Support","29","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans","2024-07-27 11:25:40"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/Example-How-to-Use-TD_KMeans","text/html;charset=UTF-8","200","","Indexable","","TD_KMeans Examples | kmeans | Teradata Vantage - Example: How to Use TD_KMeans - Analytics Database","99","965","See examples of the Analytics Database (SQL Engine) model training function TD_Kmeans.","86","558","","0","TD_KMeans Examples | kmeans | Teradata Vantage - Example: How to Use TD_KMeans - Analytics Database","99","Database Analytic Functions","27","InputTable","10","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/Example-How-to-Use-TD_KMeans","","","","","","216339","13999","13999","4.963","A+","782","260","3.008","75.692","Fairly Easy","13.733","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.460","","","","","","1.1","### Summary

Teradata Vantage™ offers robust analytic capabilities, including the TD_KMeans function, which facilitates the clustering of data. This function is particularly useful in scenarios where you need to group similar data points based on specified features. In this documentation, we explore various SQL examples to demonstrate how to create, update, delete, and select data using the TD_KMeans function, along with some essential table operations.

### Code Example

#### 1. Create Table

```sql
CREATE TABLE kmeans_input_table (id INT, c1 INT, c2 INT);
```

#### 2. Insert Data

```sql
INSERT INTO kmeans_input_table VALUES (1, 1, 1);
INSERT INTO kmeans_input_table VALUES (2, 2, 2);
INSERT INTO kmeans_input_table VALUES (3, 8, 8);
INSERT INTO kmeans_input_table VALUES (4, 9, 9);
```

#### 3. Select Data

```sql
SELECT * FROM kmeans_input_table;
```

#### 4. Update Data

```sql
UPDATE kmeans_input_table
SET c1 = 10, c2 = 10
WHERE id = 1;
```

#### 5. Delete Data

```sql
DELETE FROM kmeans_input_table
WHERE id = 4;
```

#### 6. Using TD_KMeans

Example: Using TD_KMeans with InitialCentroidsTable Not Provided

```sql
SELECT * FROM TD_KMeans (
  ON kmeans_input_table AS InputTable 
  USING
  IdColumn('id') 
  TargetColumns('c1','c2') 
  NumClusters(2)
  Seed(0) 
  StopThreshold(0.0395) 
  MaxIterNum(3)
) AS dt;
```

Example: Using TD_KMeans with InitialCentroidsTable Provided

```sql
CREATE TABLE kmeans_initial_centroids_table AS (
  SELECT * FROM kmeans_input_table WHERE id IN (2, 4)
) WITH DATA;

SELECT * FROM TD_KMeans (
  ON kmeans_input_table AS InputTable
  ON kmeans_initial_centroids_table AS InitialCentroidsTable DIMENSION
  USING
  IdColumn('id')
  TargetColumns('c1','c2')
  StopThreshold(0.0395)
  MaxIterNum(3)
) AS dt;
```

### Keywords and Phrases

- **TD_KMeans Examples**
- **kmeans**
- **Teradata Vantage - Example: How to Use TD_KMeans**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Function Names with and without TD Prefix**
- **Examples of TD_KMeans**
- **KMeans Clustering**","31","1","3","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/Example-How-to-Use-TD_KMeans","2024-07-27 12:08:08"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/Optional-Syntax-Elements-for-TD_KMeans","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_KMeans - Analytics Database","59","558","The following are the hyperparameters that you tune when using the TD_KMeans function: ModelTable Specifies the ModelTable name to save the clustering data model. If specified, then a model containing centroids of clusters is saved in the specified ModelTable name. InitialCentroidsMethod Specifies the initialization me...","323","1995","","0","Optional Syntax Elements for TD_KMeans - Analytics Database","59","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/Optional-Syntax-Elements-for-TD_KMeans","","","","","","209958","13439","13439","4.764","A+","283","88","3.216","42.143","Hard","11.798","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.524","","","","","","1.1","## Summary

The TD_KMeans function in Teradata's Analytics Database allows users to perform clustering analysis on datasets. This function is part of a broader suite of analytic functions designed to facilitate data exploration, cleaning, and modeling. K-Means clustering is particularly useful for identifying groups within data based on similarity, which can be essential for various data analysis tasks.

When using TD_KMeans, several hyperparameters can be adjusted to optimize the clustering process, including the method for initializing centroids, the number of clusters, and convergence criteria. The selection of these parameters can significantly affect the results of the clustering analysis.

### Code Examples

Below are code examples for the basic SQL operations: Select, Update, Delete, and Create, which are commonly used in database management.

#### Select
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

#### Update
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

#### Delete
```sql
DELETE FROM table_name
WHERE condition;
```

#### Create
```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Keywords and Phrases

- Optional Syntax Elements for TD_KMeans
- Analytics Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- AMP Configuration Impact on Function Execution
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Recommendations for Using Analytic Functions
- TD_KMeans Syntax
- Required Syntax Elements for TD_KMeans
- Hyperparameters in TD_KMeans
- ModelTable
- InitialCentroidsMethod
- NumClusters
- Seed
- StopThreshold
- MaxIterNum
- NumInit
- OutputClusterAssignment

This structured overview provides a concise introduction to the K-Means function along with essential SQL operations and relevant keywords, ensuring clarity in implementation and exploration of the Teradata Analytics Database.","29","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/Optional-Syntax-Elements-for-TD_KMeans","2024-07-27 11:29:10"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/Required-Syntax-Elements-for-TD_KMeans","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_KMeans - Analytics Database","59","562","IdColumn Specifies the input table column name that has the unique identifier for each input table row. TargetColumns Specifies the input table columns for clustering.","167","1025","","0","Required Syntax Elements for TD_KMeans - Analytics Database","59","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/Required-Syntax-Elements-for-TD_KMeans","","","","","","207696","12728","12728","4.512","A+","69","38","1.816","18.627","Very Hard","11.184","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.627","","","","","","1.1","# Summary of Teradata Vantage™ Analytics Database

Teradata Vantage™ provides an advanced analytics database with a suite of functions designed for various data manipulation and analysis tasks. The database supports a range of analytic functions, including data cleaning, exploration, feature engineering, model training, and evaluation. The latest version, released in June 2022, includes significant improvements and a broad set of functions suited for both traditional and advanced analytics.

## Code Examples

### 1. Create Table
```sql
CREATE TABLE customer_data (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### 2. Select Data
```sql
SELECT first_name, last_name, email
FROM customer_data
WHERE created_at > '2023-01-01'
ORDER BY created_at DESC;
```

### 3. Update Data
```sql
UPDATE customer_data
SET email = 'new_email@example.com'
WHERE customer_id = 1;
```

### 4. Delete Data
```sql
DELETE FROM customer_data
WHERE customer_id = 1;
```

## Keywords and Phrases

- **Required Syntax Elements for TD_KMeans**: Specifies necessary components for the TD_KMeans function.
- **Analytics Database**: The system that provides the analytic capabilities.
- **Database Analytic Functions**: Functions available within the database for data manipulation and analysis.
- **Deployment**: Refers to implementing solutions on VantageCloud or VantageCore.
- **VantageCloud**: The cloud-based version of Teradata Vantage.
- **VantageCore**: The on-premises version of Teradata Vantage.
- **Edition**: Refers to specific versions of the Teradata product, such as Enterprise.
- **IntelliFlex**: A feature that optimizes resource allocation in Teradata environments.
- **VMware**: Compatibility with VMware for virtualization.
- **Release Number**: The specific version of the software (17.20).
- **Published**: The date of publication (June 2022).
- **Language**: The language of the documentation (English - United States).
- **Last Update**: The most recent update to the documentation (2024-04-06).
- **Product Category**: Defines the category under which Teradata Vantage falls.

This structure provides a comprehensive overview of the capabilities of Teradata Vantage™ while also offering practical SQL examples for common database operations.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/Required-Syntax-Elements-for-TD_KMeans","2024-07-27 11:48:06"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/TD_KMeans-Input","text/html;charset=UTF-8","200","","Indexable","","TD_KMeans Input - Analytics Database","36","344","InputTable Schema Column Data Type Description IdColumn Any The InputTable column name that has the unique identifier for each input table row. TargetColumns BYTEINT, SMALLINT, INTEGER, BIGINT, DECIMAL, NUMERIC, FLOAT, REAL, DOUBLE PRECISION The InputTable columns for clustering. InitialCentroids Table Schema Column Da...","323","2126","","0","TD_KMeans Input - Analytics Database","36","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/TD_KMeans-Input","","","","","","210725","13306","13306","4.717","A+","120","45","2.667","14.483","Very Hard","11.228","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.604","","","","","","1.1","# Teradata Vantage™ - Analytics Database Analytic Functions

## Summary
The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions designed to support various data analysis tasks, including data cleaning, feature engineering, model training, and evaluation. These functions facilitate advanced analytics and machine learning operations, allowing users to derive insights from their data efficiently.

This document outlines key SQL operations (Select, Update, Delete, Create) commonly used within the context of the Analytics Database, along with the syntax and examples for each operation.

## Code Examples

### 1. Select

The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT *
FROM employees
WHERE department = 'Sales';
```

### 2. Update

The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department = 'Sales';
```

### 3. Delete

The `DELETE` statement removes records from a table.

```sql
DELETE FROM employees
WHERE last_review_date < '2022-01-01';
```

### 4. Create

The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE new_employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

## Keywords and Phrases
- **TD_KMeans Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number** - 17.20
- **Published** - June 2022
- **Language** - English (United States)
- **Last Update** - 2024-04-06
- **dita:mapPath** - gjn1627595495337.ditamap
- **dita:ditavalPath** - ayr1485454803741.ditaval
- **dita:id** - jmh1512506877710
- **Product Category** - Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Function Syntax Descriptions**
- **Recommendations for Using Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **TD_KMeans** - Example Usage
- **TD_DecisionForest** - Example Usage
- **TD_GLMPredict** - Example Usage
- **TD_Silhouette** - Example Usage
- **Sessionize** - Example Usage

This structured overview provides foundational SQL operations and highlights relevant keywords associated with the Teradata Vantage™ Analytics Database, catering to users looking to leverage its analytic capabilities for data-driven decision-making.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/TD_KMeans-Input","2024-07-27 12:16:46"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/TD_KMeans-Output","text/html;charset=UTF-8","200","","Indexable","","TD_KMeans Output - Analytics Database","37","360","Output Table Schema If the OutputClusterAssignment value is set to False: Column Data Type Description TD_CLUSTERID_KMEANS BIGINT The unique identifier of the cluster. TargetColumns REAL The columns that contain the centroid value for each feature. TD_SIZE_KMEANS BIGINT The number of points in the cluster. TD_WITHINSS_...","323","2083","","0","TD_KMeans Output - Analytics Database","37","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/TD_KMeans-Output","","","","","","212739","13758","13758","4.877","A+","254","66","3.848","53.713","Fairly Hard","11.509","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.987","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions that facilitate data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This database enhances data analytics capabilities with functions like KMeans for clustering, various statistical tests, and text analytics. The functionality is designed for high-performance data processing and supports a range of deployment options including VantageCloud and VantageCore.

### Code Examples

Below are examples of common SQL operations: `SELECT`, `UPDATE`, `DELETE`, and `CREATE` in the context of a Teradata Analytics Database.

#### 1. **SELECT**
To retrieve data from a table, you can use the following SQL statement:

```sql
SELECT Id, TD_CLUSTERID_KMEANS, TD_WITHINSS_KMEANS
FROM YourClusterTable
WHERE TD_SIZE_KMEANS > 10;
```

#### 2. **UPDATE**
To update existing records in a table, use the `UPDATE` statement:

```sql
UPDATE YourClusterTable
SET TD_WITHINSS_KMEANS = TD_WITHINSS_KMEANS * 1.1
WHERE TD_SIZE_KMEANS < 5;
```

#### 3. **DELETE**
To remove records from a table, apply the `DELETE` statement:

```sql
DELETE FROM YourClusterTable
WHERE TD_CLUSTERID_KMEANS IS NULL;
```

#### 4. **CREATE**
To create a new table, use the `CREATE TABLE` syntax:

```sql
CREATE TABLE YourNewClusterTable (
    Id_Column BYTEINT,
    TD_CLUSTERID_KMEANS BIGINT,
    TargetColumns REAL,
    TD_SIZE_KMEANS BIGINT,
    TD_WITHINSS_KMEANS REAL
);
```

### Keywords and Phrases
- **TD_KMeans Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **TD_KMeans Syntax**
- **TD_KMeans Input**
- **TD_KMeans Output**
- **TD_KMeans Usage Notes**
- **TD_KMeansPredict**
- **TD_KMeansPredict Syntax**
- **TD_KMeansPredict Input**
- **TD_KMeansPredict Output**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/TD_KMeans-Output","2024-07-27 11:48:19"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/TD_KMeans-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_KMeans Syntax | kmeans | Teradata Vantage - TD_KMeans Syntax - Analytics Database","84","809","See the syntax of the Analytics Database (SQL Engine) function TD_KMeans and read descriptions of its required and optional syntax elements.","140","882","","0","TD_KMeans Syntax | kmeans | Teradata Vantage - TD_KMeans Syntax - Analytics Database","84","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/TD_KMeans-Syntax","","","","","","209038","13135","13135","4.656","A+","139","54","2.574","33.805","Hard","11.390","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.488","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a robust environment for data analysis, including various analytic functions that facilitate data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Among these functions, the `TD_KMeans` is particularly useful for clustering analysis. This function allows users to segment data into distinct groups based on similarity, making it a valuable tool for data scientists and analysts.

### Code Examples

Here are some examples illustrating the common SQL operations: Select, Update, Delete, and Create in the context of Teradata.

#### 1. Select
```sql
SELECT *
FROM customers
WHERE region = 'North America';
```
This query selects all columns from the customers table where the region is 'North America'.

#### 2. Update
```sql
UPDATE customers
SET status = 'active'
WHERE last_purchase_date >= CURRENT_DATE - INTERVAL '30' DAY;
```
This query updates the status of customers to 'active' if they made a purchase in the last 30 days.

#### 3. Delete
```sql
DELETE FROM customers
WHERE status = 'inactive';
```
This query deletes all records from the customers table where the status is 'inactive'.

#### 4. Create
```sql
CREATE TABLE new_customers (
    customer_id INT,
    customer_name VARCHAR(255),
    registration_date DATE
);
```
This query creates a new table called `new_customers` with specified columns: customer_id, customer_name, and registration_date.

### Keywords and Phrases
- TD_KMeans Syntax
- kmeans
- Teradata Vantage - TD_KMeans Syntax
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Displaying Online Help for Analytics Database Analytic Functions
- Workload Management Configuration for Analytics Database Analytic Functions
- Recommendations for Using Analytic Functions
- TD_KMeans
- Example: How to Use TD_KMeans
- ModelTable
- OutputClusterAssignment
- NumClusters
- InitialCentroidsMethod
- Seed
- StopThreshold
- MaxIterNum
- NumInit

This overview provides a concise understanding of the `TD_KMeans` function and SQL operations in Teradata, valuable for engaging with data effectively.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/TD_KMeans-Syntax","2024-07-27 12:38:37"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/TD_KMeans-Usage-Notes","text/html;charset=UTF-8","200","","Indexable","","TD_KMeans Usage Notes - Analytics Database","42","413","K-means is an algorithm that does unsupervised clustering. This method groups a set of n observations into k clusters based on their proximity to the cluster centers. The objective of the algorithm is to minimize the within-cluster variance, meaning that similar observations belong to the same cluster. The goal is to a...","323","1949","","0","TD_KMeans Usage Notes - Analytics Database","42","Database Analytic Functions","27","Why Use K-Means","15","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/TD_KMeans-Usage-Notes","","","","","","246690","21260","21260","7.537","A+","540","99","5.455","58.105","Fairly Hard","12.399","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.560","","","","","","1.1","### Summary
K-means is a widely-used unsupervised learning algorithm that clusters data points into distinct groups (clusters) based on their proximity to centroids (the center points of each cluster). It iteratively assigns data points to the nearest cluster and updates the centroids until convergence. The algorithm is efficient but sensitive to outliers and the scale of the data. Applications for k-means include market segmentation, document clustering, and image segmentation.

### Code Example: K-Means Operations
Below are code examples demonstrating basic SQL operations (Select, Update, Delete, Create) related to managing a k-means clustering use case in a database.

```sql
-- Create a table to store clustering results
CREATE TABLE KMeansResults (
    ClusterID INT,
    DataPointID INT,
    CentroidX FLOAT,
    CentroidY FLOAT,
    DistanceToCentroid FLOAT
);

-- Insert sample data into the KMeansResults table
INSERT INTO KMeansResults (ClusterID, DataPointID, CentroidX, CentroidY, DistanceToCentroid)
VALUES (1, 101, 5.2, 3.4, 1.2), 
       (1, 102, 5.1, 3.5, 0.8),
       (2, 201, 2.1, 1.8, 0.9),
       (2, 202, 2.0, 1.7, 1.1);

-- Select all results from KMeansResults
SELECT * FROM KMeansResults;

-- Update the distance for a specific data point
UPDATE KMeansResults
SET DistanceToCentroid = 0.7
WHERE DataPointID = 102;

-- Delete entries for clusters with a specific condition
DELETE FROM KMeansResults
WHERE ClusterID = 2;
```

### Keywords and Phrases
- **TD_KMeans Usage Notes**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Recommendations for Using Analytic Functions**
- **K-Means Algorithm**
- **Unsupervised Clustering**
- **Market Segmentation**
- **Document Clustering**
- **Image Segmentation**
- **Distance Calculation**
- **Centroid Update**
- **Elbow Method**
- **Silhouette Method**","25","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/TD_KMeans-Usage-Notes","2024-07-27 11:55:49"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN","text/html;charset=UTF-8","200","","Indexable","","TD_KNN Function | kNN | Teradata Vantage - TD_KNN - Analytics Database","70","664","This Analytics Database (SQL Engine) function predicts the test data by computing nearest neighbors from training data based on a similarity (distance) metric.","159","984","","0","TD_KNN Function | kNN | Teradata Vantage - TD_KNN - Analytics Database","70","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN","","","","","","211526","14115","14115","5.004","A+","420","84","5.000","68.011","Normal","11.988","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.651","","","","","","1.1","### Summary of TD_KNN Function

The **TD_KNN** function in Teradata Vantage is a powerful analytic tool for implementing the k-nearest neighbors (k-NN) algorithm. This supervised learning method is utilized for both classification and regression problems by predicting new data points based on the distances to trained data points. The function supports a variety of distance metrics and is capable of processing up to 2018 features and 1000 labels, making it versatile for various data science tasks.

### Code Example Section

Below are examples demonstrating basic SQL operations commonly used in Teradata, including SELECT, UPDATE, DELETE, and CREATE statements.

#### 1. SELECT
```sql
SELECT customer_id, customer_name
FROM customers
WHERE status = 'active';
```

#### 2. UPDATE
```sql
UPDATE customers
SET status = 'inactive'
WHERE last_purchase_date < '2023-01-01';
```

#### 3. DELETE
```sql
DELETE FROM customers
WHERE customer_id = 12345;
```

#### 4. CREATE
```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    email VARCHAR(100),
    registration_date DATE
);
```

### Keywords and Phrases
- TD_KNN Function
- kNN
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Model Training Functions
- Model Scoring Functions
- Feature Engineering Transform Functions
- Classification
- Regression
- Neighbors Model Types
- K-value
- Distance Metrics
- Euclidean Distance
- Manhattan Distance
- Majority Vote
- Mean Similarity
- Performance Considerations
- Computational Complexity
- Alternative Algorithms
- User Spool Limitations

This structured overview provides a solid foundation for understanding the TD_KNN function and its application within Teradata Vantage, alongside essential SQL operations.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN","2024-07-27 11:31:22"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Examples-How-to-Use-TD_KNN","text/html;charset=UTF-8","200","","Indexable","","TD_KNN Examples | kNN | Teradata Vantage - Examples: How to Use TD_KNN - Analytics Database","91","878","See examples of the Analytics Database (SQL Engine) model training function TD_KNN.","83","536","","0","TD_KNN Examples | kNN | Teradata Vantage - Examples: How to Use TD_KNN - Analytics Database","91","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Examples-How-to-Use-TD_KNN","","","","","","208332","12867","12867","4.561","A+","74","41","1.805","38.090","Hard","11.153","1","5","","707","707","0","99.860","713","711","0","","","","","","","","","17.068","","","","","","1.1","## Overview

Teradata Vantage™ provides a powerful platform for analytics and data management, enabling users to perform various operations, including data selection, updating, deletion, and creation. This guide will cover the basic SQL operations—SELECT, UPDATE, DELETE, and CREATE—within the context of Teradata Vantage.

## Code Examples

### 1. SELECT Statement

The SELECT statement is used to retrieve data from one or more tables.

```sql
SELECT customer_id, first_name, last_name 
FROM customers 
WHERE country = 'USA';
```

### 2. UPDATE Statement

The UPDATE statement modifies existing records in a table.

```sql
UPDATE customers 
SET last_name = 'Smith' 
WHERE customer_id = 1;
```

### 3. DELETE Statement

The DELETE statement removes records from a table.

```sql
DELETE FROM customers 
WHERE customer_id = 1;
```

### 4. CREATE Statement

The CREATE statement is used to create a new table.

```sql
CREATE TABLE new_customers (
    customer_id INTEGER GENERATED ALWAYS AS IDENTITY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    country VARCHAR(50)
);
```

## Summary

The above examples illustrate basic SQL operations in Teradata Vantage. Understanding how to manipulate data using SELECT, UPDATE, DELETE, and CREATE statements is essential for effective data management and analytics.

## Keywords and Phrases

- TD_KNN Examples
- kNN
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Data Cleaning Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Usage Notes
- Examples
- TD_OneHotEncodingFit
- TD_SVM
- TD_XGBoost
- Hypothesis Testing Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Sessionize
- nPath
- TD_FillRowID
- TD_KNN
- TD_DecisionForest
- TD_GLM
- TD_CategoricalSummary
- TD_Histogram
- TD_UnivariateStatistics
- TD_TrainTestSplit
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator

This concise structure should assist in quickly grasping the fundamental SQL operations in Teradata Vantage, along with relevant keywords for further exploration of its functionalities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Examples-How-to-Use-TD_KNN","2024-07-27 12:25:05"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Examples-How-to-Use-TD_KNN/Example-Using-TD_KNN-To-Predict-Weight-Based-on-Height-and-Age","text/html;charset=UTF-8","200","","Indexable","","TD_KNN Regression Example | kNN | Teradata Vantage - Example: Using TD_KNN To Predict Weight Based on Height and Age - Analytics Database","137","1304","See a Regression example for using the Analytics Database (SQL Engine) model training function TD_KNN.","102","654","","0","TD_KNN Regression Example | kNN | Teradata Vantage - Example: Using TD_KNN To Predict Weight Based on Height and Age - Analytics Database","137","Database Analytic Functions","27","TD_KNN Input Table for Regression Example","41","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Examples-How-to-Use-TD_KNN/Example-Using-TD_KNN-To-Predict-Weight-Based-on-Height-and-Age","","","","","","213667","13535","13535","4.798","A+","149","69","2.159","67.807","Normal","11.116","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.561","","","","","","1.1","## Summary of TD_KNN Regression Example

The TD_KNN function in Teradata Vantage is used for performing K-Nearest Neighbors (kNN) analysis, which can be applied for both classification and regression tasks. In this example, we will focus on using the TD_KNN function to predict a person's weight based on their height and age. The following SQL code demonstrates how to set up the KNN model for regression, using a training dataset of individuals' heights, ages, and weights. 

### Code Example

#### 1. Create a Sample Training Table
```sql
CREATE TABLE person_train (
    id INT,
    height FLOAT,
    age INT,
    weight FLOAT
);

INSERT INTO person_train (id, height, age, weight) VALUES
(0, 5.0, 32, 67),
(1, 5.11, 45, 98),
(2, 5.9, 46, 78),
(3, 4.8, 35, 86),
(4, 5.8, 22, 70);
```

#### 2. Create a Sample Test Table
```sql
CREATE TABLE person_test (
    id INT,
    height FLOAT,
    age INT
);

INSERT INTO person_test (id, height, age) VALUES
(11, 5.5, 30),
(12, 5.2, 40);
```

#### 3. Using TD_KNN for Regression
```sql
SELECT * FROM TD_KNN(
    ON person_test AS TestTable PARTITION BY ANY
    ON person_train AS TrainingTable DIMENSION
    USING
    K(2)
    ResponseColumn('weight')
    InputColumns('height', 'age')
    IDColumn('id')
    ModelType('regression')
    EmitNeighbors('true')
    EmitDistances('true')
) AS dt;
```

#### 4. Output Table Structure
The output table from the TD_KNN function will look like this:
```
id  prediction  neighbor_id1  neighbor_dist1  neighbor_id2  neighbor_dist2
11  88.0       4             0.7             2             1.004
12  80.0       8             20.00           4             41.00
```

### Keywords and Phrases
- **TD_KNN Regression Example**
- **kNN**
- **Teradata Vantage**
- **Predict Weight Based on Height and Age**
- **Analytics Database**
- **Create Table**
- **Insert Data**
- **K-Nearest Neighbors**
- **Training Table**
- **Test Table**
- **Response Column**
- **Input Columns**
- **ID Column**
- **Model Type**
- **Emit Neighbors**
- **Emit Distances**
- **Prediction Output**
- **Neighbor Identification**
- **Distance Metrics**","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Examples-How-to-Use-TD_KNN/Example-Using-TD_KNN-To-Predict-Weight-Based-on-Height-and-Age","2024-07-27 12:36:36"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Examples-How-to-Use-TD_KNN/Example-Using-TD_KNN-with-Classification","text/html;charset=UTF-8","200","","Indexable","","TD_KNN Classification Example | kNN | Teradata Vantage - Example: Using TD_KNN with Classification - Analytics Database","119","1101","See a Classification example for using the Analytics Database (SQL Engine) model training function TD_KNN.","106","669","","0","TD_KNN Classification Example | kNN | Teradata Vantage - Example: Using TD_KNN with Classification - Analytics Database","119","Database Analytic Functions","27","TD_KNN Input Table for Classification","37","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Examples-How-to-Use-TD_KNN/Example-Using-TD_KNN-with-Classification","","","","","","216317","13582","13582","4.815","A+","203","99","2.051","82.646","Easy","11.189","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.638","","","","","","1.1","### Summary

This document provides an overview of the TD_KNN function for classification in Teradata Vantage, detailing how to use the k-nearest neighbors algorithm for predictive modeling. It includes examples of SQL calls for creating volatile tables, performing predictions, and retrieving results with confidence probabilities.

### Code Examples

#### 1. Create a Volatile Table for KNN
The following SQL command demonstrates how to create a volatile table that utilizes the TD_KNN function for classification purposes.

```sql
CREATE VOLATILE TABLE KNN AS (
    SELECT * FROM TD_KNN (
        ON test_dataset AS TestTable PARTITION BY ANY
        ON train_dataset AS TrainingTable DIMENSION
        USING
            K(3)
            ResponseColumn('encoded')
            InputColumns('[2:7]')
            IDColumn('Row_I')
            Accumulate ('encoded')
            ModelType('Classification')
            OutputProb('true')
            EmitNeighbors('true')
            Responses('0', '1')
    ) AS dt
) WITH DATA
ON COMMIT PRESERVE ROWS;
```

#### 2. Select Predictions from the KNN Table
Once the volatile table is created, you can select the predictions and related probabilities as follows:

```sql
SELECT * FROM KNN;
```

#### 3. Update a Row in KNN Table
To update a prediction in the KNN table, you might use a command like this:

```sql
UPDATE KNN
SET prediction = 1
WHERE ROW_I = 43;
```

#### 4. Delete a Record from the KNN Table
If you want to delete a specific record from the KNN table, you would use:

```sql
DELETE FROM KNN
WHERE ROW_I = 101;
```

### Keywords and Phrases
- TD_KNN Classification Example
- kNN
- Teradata Vantage
- Example: Using TD_KNN with Classification
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- TD_KNN Input Table
- TD_KNN SQL Call
- TD_KNN Output Table
- Predictions
- Probabilities
- Neighbors
- Classification Model
- Volatile Tables","27","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Examples-How-to-Use-TD_KNN/Example-Using-TD_KNN-with-Classification","2024-07-27 12:14:37"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Examples-How-to-Use-TD_KNN/Example-Using-TD_KNN-with-Neighbors","text/html;charset=UTF-8","200","","Indexable","","TD_KNN Neighbors Example | kNN | Teradata Vantage - Example: Using TD_KNN with Neighbors - Analytics Database","109","1041","See a Neighbors example for using the Analytics Database (SQL Engine) model training function TD_KNN.","101","649","","0","TD_KNN Neighbors Example | kNN | Teradata Vantage - Example: Using TD_KNN with Neighbors - Analytics Database","109","Database Analytic Functions","27","TD_KNN Input Table for Neighbors","32","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Examples-How-to-Use-TD_KNN/Example-Using-TD_KNN-with-Neighbors","","","","","","215877","13460","13460","4.772","A+","183","67","2.731","98.659","Very Easy","11.049","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","2.060","","","","","","1.1","### Summary

Teradata Vantage™ offers a comprehensive suite of analytic functions, which allows users to perform a wide range of data manipulation and analysis tasks. Among these functions is the TD_KNN function, which facilitates the application of the k-nearest neighbors (kNN) algorithm for tasks such as classification and regression. This guide will provide an overview of key SQL operations—Select, Update, Delete, and Create—alongside a detailed example of utilizing the TD_KNN function with neighbors.

### Code Examples

#### 1. Select
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT *
FROM housing_train
WHERE SaleCondition = 'Normal';
```

#### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE housing_train
SET SalePrice = SalePrice * 1.05
WHERE SaleCondition = 'Normal';
```

#### 3. Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM housing_train
WHERE SalePrice < 200000;
```

#### 4. Create
The `CREATE` statement defines a new table.

```sql
CREATE TABLE housing_train (
    Id INT,
    MSSubClass INT,
    MSZoning VARCHAR(2),
    LotFrontage FLOAT,
    LotArea INT,
    SaleCondition VARCHAR(10),
    SalePrice FLOAT
);
```

### Example: Using TD_KNN with Neighbors

The following SQL example demonstrates how to use the `TD_KNN` function to retrieve the nearest neighbors based on specified input columns.

```sql
SELECT * FROM TD_KNN(
    ON housing_train AS TestTable PARTITION BY ANY
    ON housing_train AS TrainingTable DIMENSION
    USING     
    k(5)
    InputColumns('[1:5]') 
    IDColumn('Id')     
    ModelType('Neighbors')  
) AS dt;
```

#### Output Table for Neighbors

The output will provide the nearest neighbor IDs for each record in the test set:

| sn | neighbor_id1 | neighbor_id2 | neighbor_id3 | neighbor_id4 | neighbor_id5 |
|----|---------------|---------------|---------------|---------------|---------------|
| 1  | 106           | 28            | 27            | 18            | 1             |
| 2  | 23            | 55            | 2             | 24            | 15            |
| 3  | 3             | 83            | 134           | 81            | 33            |
| 4  | 4             | 5             | 66            | 35            | 87            |
| 5  | 35            | 4             | 5             | 87            | 66            |

### Keywords and Phrases

- TD_KNN Neighbors Example
- kNN
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- TD_KNN Syntax
- TD_KNN Input
- TD_KNN Output
- Nearest Neighbors
- Data Manipulation
- SQL Operations
- Select
- Update
- Delete
- Create","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Examples-How-to-Use-TD_KNN/Example-Using-TD_KNN-with-Neighbors","2024-07-27 12:00:39"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Optional-Syntax-Elements-for-TD_KNN","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_KNN - Analytics Database","56","526","ModelType Specifies the model type for the KNN function. Accepted Values: Regression, Classification, or Neighbors. Default Value: Classification K Specifies the number of nearest neighbors to use in the algorithm. Select any positive integer value greater than 0 or less than or equal to 100. Default Value: 5 Accumulat...","323","1959","","0","Optional Syntax Elements for TD_KNN - Analytics Database","56","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Optional-Syntax-Elements-for-TD_KNN","","","","","","211064","13693","13693","4.854","A+","424","101","4.198","58.714","Fairly Hard","12.123","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.957","","","","","","1.1","### Summary of TD_KNN - Analytics Database

The TD_KNN function in Teradata Vantage™ is used to perform K-Nearest Neighbors (KNN) classification or regression. This function is beneficial for predictive analytics, allowing users to classify data points based on the proximity to other data points in the feature space. The key parameters include the model type (classification, regression, or neighbors), the number of neighbors (K), response columns for predictions, and options for output probability and distances.

### Code Example

Here are examples of the basic SQL operations: Select, Update, Delete, and Create in the context of using the TD_KNN function.

#### 1. **Create Table Example**
```sql
CREATE TABLE training_data (
    id INT,
    feature1 FLOAT,
    feature2 FLOAT,
    response INT
);
```

#### 2. **Insert Data Example**
```sql
INSERT INTO training_data (id, feature1, feature2, response) VALUES
(1, 5.1, 3.5, 0),
(2, 4.9, 3.0, 0),
(3, 6.2, 3.4, 1),
(4, 5.9, 3.0, 1);
```

#### 3. **Select Query Example**
```sql
SELECT * FROM training_data;
```

#### 4. **Update Example**
```sql
UPDATE training_data
SET response = 1
WHERE id = 1;
```

#### 5. **Delete Example**
```sql
DELETE FROM training_data
WHERE id = 2;
```

#### 6. **Using TD_KNN for Prediction Example**
```sql
SELECT * FROM TD_KNN (
    ON training_data AS Train
    USING
        ModelType = 'Classification',
        K = 3,
        ResponseColumn = 'response',
        Tolerance = 0.0001
) AS Result;
```

### Keywords and Phrases

- **Optional Syntax Elements for TD_KNN**
- **Model Type**: Specifies the model type (Regression, Classification, Neighbors).
- **K**: Number of nearest neighbors.
- **Accumulate**: Column names to copy to the output.
- **ResponseColumn**: Column for numeric response variable.
- **VotingWeight**: Weighting for distance-based voting.
- **Tolerance**: Defines the smallest distance.
- **OutputProb**: Specifies returning probabilities for classification.
- **Responses**: Class labels for returning probabilities.
- **EmitNeighbors**: Display neighbors in the output.
- **EmitDistances**: Display neighbor distances in the output.

### Database Analytic Functions
- **Deployment**: VantageCloud, VantageCore.
- **Edition**: Enterprise, IntelliFlex.
- **Product Category**: Teradata Vantage™.
- **Release Number**: 17.20 (Published June 2022).
- **Last Update**: 2024-04-06.
- **Language**: English (United States). 

This structured approach provides clarity on how to use the TD_KNN function within the Teradata Vantage ecosystem and integrates fundamental SQL operations essential for data manipulation.","27","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Optional-Syntax-Elements-for-TD_KNN","2024-07-27 11:27:18"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Required-Syntax-Elements-for-TD_KNN","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_KNN - Analytics Database","56","530","ON clause Accepts the TestTable and TrainingTable clauses. IDColumn Specifies the column name that uniquely identifies a data object in the training and the test table. Each entry in the column must be unique, otherwise an error appears. InputColumns Specifies the training table column names that the function uses to c...","323","1992","","0","Required Syntax Elements for TD_KNN - Analytics Database","56","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Required-Syntax-Elements-for-TD_KNN","","","","","","208132","12939","12939","4.587","A+","117","45","2.600","44.396","Hard","11.296","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.552","","","","","","1.1","## Summary

Teradata's Analytics Database offers a robust suite of analytic functions, particularly designed for data preparation, modeling, and evaluation. The functions are structured to enable users to manipulate and analyze large datasets efficiently, supporting a variety of tasks from data cleaning to model training and evaluation. This guide focuses on the key SQL operations: **Select, Update, Delete, and Create**. Each operation is demonstrated with clear examples relevant to the Teradata environment.

## Code Example

### 1. SELECT
The `SELECT` statement is used to query data from a database.

```sql
SELECT 
    customer_id, 
    first_name, 
    last_name 
FROM 
    customers 
WHERE 
    status = 'active';
```

### 2. UPDATE
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE 
    customers 
SET 
    status = 'inactive' 
WHERE 
    last_purchase_date < '2022-01-01';
```

### 3. DELETE
The `DELETE` statement is used to remove records from a table.

```sql
DELETE FROM 
    orders 
WHERE 
    order_date < '2023-01-01';
```

### 4. CREATE
The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## Keywords and Phrases
- **Required Syntax Elements for TD_KNN**: Specific elements necessary for K-Nearest Neighbors function.
- **Database Analytic Functions**: Functions specifically for data analysis within databases.
- **Deployment**: The process of making applications or services available for use.
- **VantageCloud**: Teradata's cloud solution for analytics.
- **VantageCore**: Core functionalities of Teradata Vantage for data analytics.
- **Edition**: Variants of the Teradata software.
- **Enterprise**: Large-scale business solutions offered by Teradata.
- **IntelliFlex**: Teradata's flexible cloud solutions.
- **VMware**: Virtualization technology for deploying cloud services.
- **Product**: Teradata Vantage™.
- **Analytics Database**: A specialized database for analytic functions.
- **Release Number**: 17.20.
- **Published**: June 2022.
- **Language**: English (United States).
- **Last Update**: 2024-04-06.
- **Product Category**: Teradata Vantage™.
- **Data Cleaning Functions**: Functions used for preparing data for analysis.
- **Model Training Functions**: Functions used to train predictive models.
- **Model Evaluation Functions**: Functions to assess the performance of models.
- **Text Analytic Functions**: Functions for analyzing textual data.
- **Hypothesis Testing Functions**: Functions for statistical hypothesis tests.
- **Usage Notes**: Important notes regarding the application of functions.
- **Input Table Rows Redistribution**: How data rows are distributed across tables.
- **Function Syntax Descriptions**: Detailed syntax of available functions.
- **Limitations When Using PARTITION BY**: Constraints related to data partitioning.
- **Non-Deterministic Behavior**: Outcomes that may vary due to certain conditions.
- **Recommendations for Using Analytic Functions**: Best practices for function usage. 

This concise summary and examples provide a foundational understanding of SQL operations in the context of Teradata's Analytics Database, along with relevant technical terms for further exploration.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Required-Syntax-Elements-for-TD_KNN","2024-07-27 11:51:42"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/TD_KNN-Input","text/html;charset=UTF-8","200","","Indexable","","TD_KNN Input - Analytics Database","33","312","The function accepts only two ON clauses for input tables, where the Test table uses the PARTITION BY ANY clause, and the training table uses the dimension clause. Both the test and training tables are required. TrainingTable Schema Column Data Type Description IDColumn BYTEINT,SMALLINT,INTEGER,BIGINT The unique identi...","323","2050","","0","TD_KNN Input - Analytics Database","33","Database Analytic Functions","27","TrainingTable Schema","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/TD_KNN-Input","","","","","","211580","13481","13481","4.779","A+","200","56","3.571","42.470","Hard","11.409","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.550","","","","","","1.1","# Teradata Vantage™ Analytics Database Overview

The Teradata Vantage™ Analytics Database provides a robust environment for executing various analytic functions, including data cleaning, feature engineering, model training, and evaluation. The database supports complex queries and analytic functions across large datasets, allowing for efficient data exploration and analysis. This document covers key SQL operations such as selecting, updating, deleting, and creating records in the context of the Teradata Vantage™ environment.

## SQL Operations: Select, Update, Delete, Create

### 1. SELECT

The `SELECT` statement is used to query data from one or more tables. You can also apply analytic functions to aggregate and filter results.

**Example:**
```sql
SELECT CustomerID, COUNT(OrderID) AS OrderCount
FROM Orders
GROUP BY CustomerID
ORDER BY OrderCount DESC;
```

### 2. UPDATE

The `UPDATE` statement modifies existing records in a table based on specified conditions.

**Example:**
```sql
UPDATE Customers
SET Status = 'Active'
WHERE LastPurchaseDate >= CURRENT_DATE - INTERVAL '1 YEAR';
```

### 3. DELETE

The `DELETE` statement removes records from a table based on specified conditions.

**Example:**
```sql
DELETE FROM Orders
WHERE OrderDate < CURRENT_DATE - INTERVAL '2 YEARS';
```

### 4. CREATE

The `CREATE` statement is used to create new tables or other database objects.

**Example:**
```sql
CREATE TABLE NewCustomers (
    CustomerID INT PRIMARY KEY,
    CustomerName VARCHAR(100),
    JoinDate DATE
);
```

## Summary

The Teradata Vantage™ Analytics Database is equipped with comprehensive analytic functions that can enhance data analysis and decision-making capabilities. The SQL operations discussed above form the foundation for interacting with the database, enabling users to efficiently manage and analyze their data.

## Keywords and Phrases

- **TD_KNN Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**: gjn1627595495337.ditamap
- **dita:ditavalPath**: ayr1485454803741.ditaval
- **dita:id**: jmh1512506877710
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/TD_KNN-Input","2024-07-27 12:36:44"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/TD_KNN-Output","text/html;charset=UTF-8","200","","Indexable","","TD_KNN Output - Analytics Database","34","328","Output Table Schema Column Data Type Description id_column Same as IDColumn in test table The unique identifier from the test table. prediction Same as ResponseColumn in training table The predicted response value calculated by the KNN regression or classification model type. prob Double Precision The probability of th...","323","2010","","0","TD_KNN Output - Analytics Database","34","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/TD_KNN-Output","","","","","","211070","13398","13398","4.750","A+","187","52","3.596","50.724","Fairly Hard","11.367","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.451","","","","","","1.1","# Teradata Vantage™ Analytics Database: CRUD Operations

Teradata Vantage™ is an advanced analytics database that integrates various analytic functions to streamline data processing and analysis. The following sections provide a concise overview and code examples for the basic CRUD operations: Select, Insert (Create), Update, and Delete.

## Summary

- **Select**: Retrieve data from one or more tables.
- **Insert (Create)**: Add new records to a table.
- **Update**: Modify existing records in a table.
- **Delete**: Remove records from a table.

## Code Examples

### 1. Select

The `SELECT` statement is used to query data from a database.

```sql
SELECT column1, column2
FROM your_table
WHERE condition;
```

### 2. Insert (Create)

The `INSERT` statement is used to add new rows to a table.

```sql
INSERT INTO your_table (column1, column2)
VALUES (value1, value2);
```

### 3. Update

The `UPDATE` statement is used to modify existing records.

```sql
UPDATE your_table
SET column1 = value1, column2 = value2
WHERE condition;
```

### 4. Delete

The `DELETE` statement is used to remove records from a table.

```sql
DELETE FROM your_table
WHERE condition;
```

## Keywords and Phrases

- **TD_KNN Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**: gjn1627595495337.ditamap
- **dita:ditavalPath**: ayr1485454803741.ditaval
- **dita:id**: jmh1512506877710
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This guide serves as an introductory reference to the basic operations and functionalities available within the Teradata Vantage™ environment, specifically focusing on CRUD operations and associated keywords.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/TD_KNN-Output","2024-07-27 12:37:20"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/TD_KNN-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_KNN Syntax | kNN | Teradata Vantage - TD_KNN Syntax - Analytics Database","75","712","See the syntax of the Analytics Database (SQL Engine) function TD_KNN and read descriptions of its required and optional syntax elements.","137","860","","0","TD_KNN Syntax | kNN | Teradata Vantage - TD_KNN Syntax - Analytics Database","75","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/TD_KNN-Syntax","","","","","","208733","13089","13089","4.640","A+","145","56","2.589","33.257","Hard","11.489","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.579","","","","","","1.1","### Summary

Teradata Vantage provides a robust framework for handling data analytics, including various functions for data manipulation and model training. Among these is the k-Nearest Neighbors (kNN) algorithm, which can be employed for both classification and regression tasks. The TD_KNN function is particularly useful for predicting outcomes based on historical data, allowing users to specify parameters such as the number of neighbors (k), the type of model (classification or regression), and various input and output options.

### Code Example: TD_KNN Syntax

Here is a breakdown of how to use the `TD_KNN` function, along with examples for creating, selecting, updating, and deleting data.

#### 1. Create Table

```sql
CREATE TABLE TrainingData (
    id_col_name INT,
    target_column FLOAT,
    feature1 FLOAT,
    feature2 FLOAT
);
```

#### 2. Insert Data

```sql
INSERT INTO TrainingData (id_col_name, target_column, feature1, feature2) 
VALUES (1, 3.5, 1.0, 2.0),
       (2, 4.0, 1.5, 2.5),
       (3, 1.5, 2.0, 3.0);
```

#### 3. Select with TD_KNN

```sql
SELECT *
FROM TD_KNN(
    ON TrainingData AS TestTable PARTITION BY ANY
    ON TrainingData AS TrainingTable DIMENSION
    USING
    IDColumn('id_col_name')
    InputColumns({'target_column'})
    ModelType('regression')
    K(3)
) AS dt;
```

#### 4. Update Data

```sql
UPDATE TrainingData
SET feature1 = feature1 * 1.1
WHERE id_col_name = 1;
```

#### 5. Delete Data

```sql
DELETE FROM TrainingData
WHERE id_col_name = 3;
```

### Keywords and Phrases

- **TD_KNN Syntax**
- **kNN**
- **Teradata Vantage - TD_KNN Syntax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Feature Engineering Utility Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**

This structured approach to using TD_KNN and related SQL commands will help in efficiently managing and analyzing data within the Teradata Vantage platform.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/TD_KNN-Syntax","2024-07-27 11:51:27"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/TD_KNN-Usage-Notes","text/html;charset=UTF-8","200","","Indexable","","TD_KNN Usage Notes | kNN | Teradata Vantage - TD_KNN Usage Notes - Analytics Database","85","820","Learn about the usage considerations for the Analytics Database TD_KNN function.","80","516","","0","TD_KNN Usage Notes | kNN | Teradata Vantage - TD_KNN Usage Notes - Analytics Database","85","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/TD_KNN-Usage-Notes","","","","","","265452","55811","55811","19.785","A+","401","76","5.276","68.145","Normal","9.498","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.683","","","","","","1.1","### Summary of K-Nearest Neighbors (KNN)

K-Nearest Neighbors (KNN) is a widely used supervised learning algorithm for classification and regression tasks. It operates based on the principle of similarity, classifying a sample based on the majority class of its ""k"" nearest neighbors in the feature space. The algorithm computes distances between the new sample and existing samples, selects the closest neighbors, and assigns a class label based on majority voting.

#### Key Characteristics of KNN:
- **Distance Metric**: Often uses Euclidean distance, but other metrics can be applied.
- **Parameter ""k""**: The number of neighbors to consider is a user-defined integer.
- **Instance-based Learning**: Does not have a training phase; it classifies based on the stored instances.
- **Versatility**: Applicable to classification, regression, and anomaly detection tasks.
- **Sensitivity**: Performance can be affected by the choice of distance metric, the value of ""k"", and the presence of irrelevant features.

#### Benefits:
- Simple and easy to implement.
- No explicit training phase required.
- Capable of handling multi-class problems.

### KNN Code Examples

Here are some SQL-style operations that you might perform in a database context when working with KNN:

#### 1. Create a Table for Training Data
```sql
CREATE TABLE training_data (
    id INT PRIMARY KEY,
    feature1 FLOAT,
    feature2 FLOAT,
    label VARCHAR(50)
);
```

#### 2. Insert Sample Data
```sql
INSERT INTO training_data (id, feature1, feature2, label) VALUES
(1, 5.1, 3.5, 'setosa'),
(2, 4.9, 3.0, 'setosa'),
(3, 6.3, 3.3, 'virginica'),
(4, 5.8, 2.7, 'versicolor');
```

#### 3. Query to Select Nearest Neighbors
```sql
SELECT label, 
       (POWER(feature1 - 5.0, 2) + POWER(feature2 - 3.0, 2)) AS distance
FROM training_data
ORDER BY distance
LIMIT 3;
```

#### 4. Update a Sample Data Point
```sql
UPDATE training_data
SET feature1 = 5.2, feature2 = 3.4
WHERE id = 1;
```

#### 5. Delete a Sample Data Point
```sql
DELETE FROM training_data
WHERE id = 4;
```

### Keywords and Phrases

- **TD_KNN Usage Notes**
- **kNN**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Analytics Database Release Number 17.20**
- **Published June 2022**
- **English (United States)**
- **Last Update April 2024**
- **Data Cleaning Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Hypothesis Testing Functions**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Limitations** 
- **Workload Management Configuration**
- **Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions**
- **StringSimilarity**
- **TD_KMeans**
- **TD_SVM**
- **TD_XGBoost**
- **TD_DecisionForest**
- **TD_ClassificationEvaluator**
- **TD_RegressionEvaluator**
- **Model Scoring Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**

These keywords encompass key concepts and functionalities related to KNN and its implementation within Teradata Vantage, providing a framework for understanding its application and context within data analytics.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/TD_KNN-Usage-Notes","2024-07-27 11:22:58"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM","text/html;charset=UTF-8","200","","Indexable","","TD_OneClassSVM Function | OneClassSVM | Teradata Vantage - TD_OneClassSVM - Analytics Database","94","925","This Analytics Database model training function performs classification analysis on data sets to identify outliers or novelty in the data.","138","826","","0","TD_OneClassSVM Function | OneClassSVM | Teradata Vantage - TD_OneClassSVM - Analytics Database","94","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM","","","","","","211500","14139","14139","5.012","A+","396","84","4.714","52.291","Fairly Hard","11.979","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.535","","","","","","1.1","### Summary of TD_OneClassSVM

The `TD_OneClassSVM` function in Teradata Vantage is a machine learning tool designed for anomaly detection. It performs classification analysis by treating all input data as belonging to a single class, thus enabling it to identify outliers or novel observations in datasets. This function utilizes the Minibatch Stochastic Gradient Descent (SGD) algorithm, making it efficient for large datasets.

The output of `TD_OneClassSVM` is a trained model that can be used with `TD_OneClassSVMPredict` for making predictions. The model's predictions are binary, with a value of 1 indicating a normal observation and 0 indicating an outlier. This approach is particularly useful in applications such as fraud detection and intrusion detection, where identifying anomalies is crucial.

### Code Examples

Below are SQL code examples demonstrating the basic operations associated with the `TD_OneClassSVM` function, along with examples for creating, selecting, updating, and deleting entries in a Teradata database.

#### 1. Create a Table

```sql
CREATE TABLE customer_data (
    customer_id INT,
    purchase_amount DECIMAL(10, 2),
    purchase_date DATE
);
```

#### 2. Insert Data

```sql
INSERT INTO customer_data (customer_id, purchase_amount, purchase_date)
VALUES (1, 150.00, '2023-01-10'),
       (2, 200.00, '2023-01-15'),
       (3, 50.00, '2023-01-20');
```

#### 3. Select Data

```sql
SELECT * FROM customer_data;
```

#### 4. Update Data

```sql
UPDATE customer_data
SET purchase_amount = 180.00
WHERE customer_id = 1;
```

#### 5. Delete Data

```sql
DELETE FROM customer_data
WHERE customer_id = 3;
```

#### 6. Using TD_OneClassSVM

```sql
-- Training the One-Class SVM model
CREATE TABLE one_class_model AS (
    SELECT *
    FROM TD_OneClassSVM(
        ON customer_data
        USING (
            purchase_amount
        )
        RETURNING MODEL
    )
) WITH DATA;

-- Predicting using the trained model
SELECT *
FROM TD_OneClassSVMPredict(
    ON (SELECT purchase_amount
        FROM customer_data) 
    USING MODEL one_class_model
);
```

### Keywords and Phrases

- TD_OneClassSVM Function
- OneClassSVM
- Teradata Vantage
- TD_OneClassSVM - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Anomaly Detection
- Machine Learning
- Minibatch Stochastic Gradient Descent (SGD)
- Hyperplane
- Kernel Function
- Fraud Detection
- Intrusion Detection
- Security Applications
- Outlier Detection
- One-Class SVM
- Prediction
- SQL Operations
- Create
- Select
- Update
- Delete

This comprehensive overview provides insights into the TD_OneClassSVM function, including its purpose, usage, and relevant SQL operations in a Teradata environment.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM","2024-07-27 11:25:55"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/Example-How-to-Use-TD_OneClassSVM","text/html;charset=UTF-8","200","","Indexable","","TD_OneClassSVM Example | OneClassSVM | Teradata Vantage - Example: How to Use TD_OneClassSVM - Analytics Database","113","1119","See an example for using the Analytics Database (SQL Engine) model training function TD_OneClassSVM.","100","649","","0","TD_OneClassSVM Example | OneClassSVM | Teradata Vantage - Example: How to Use TD_OneClassSVM - Analytics Database","113","Database Analytic Functions","27","Example: TD_OneClassSVM Using LearningRate Constant","51","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/Example-How-to-Use-TD_OneClassSVM","","","","","","242782","16410","16410","5.817","A+","404","343","1.178","100.000","Very Easy","11.469","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.054","","","","","","1.1","## Overview of TD_OneClassSVM in Teradata Vantage

The `TD_OneClassSVM` function in Teradata Vantage is used for anomaly detection by learning from the ""normal"" data and identifying deviations from this pattern. This method is particularly useful in scenarios where the dataset is heavily imbalanced with only a few instances of the target class.

### Summary

- **Functionality**: Identifies anomalies in datasets by learning from a single class of data.
- **Use Cases**: Fraud detection, network security, and fault detection, among others.
- **Parameters**: Includes options for input columns, learning rate, batch size, regularization, and maximum iterations.

### Code Examples

#### 1. SELECT

To retrieve predictions from a model trained using the `TD_OneClassSVM` function, you can use the following SQL command:

```sql
SELECT * FROM TD_OneClassSVM(
  ON diabetes_train_scaled AS InputTable
  USING
    InputColumns('[1:8]')
    Tolerance(1e-7)
    BatchSize(30)
    LearningRate('constant')
    InitialEta(0.01)
    RegularizationLambda(0.1)
    Alpha(0)
    Momentum(0.0)
    Nesterov('false')
    MaxIterNum(100)
) AS dt;
```

#### 2. UPDATE

In Teradata, you typically do not update models directly. Instead, you would re-train the model with new parameters or data and replace the existing model.

```sql
-- Assume you are updating the model by re-running the training process.
SELECT * FROM TD_OneClassSVM(
  ON diabetes_train_scaled AS InputTable
  USING
    InputColumns('[1:8]')
    Tolerance(1e-6)  -- Updated tolerance
    BatchSize(50)    -- Updated batch size
    LearningRate('adaptive')  -- Changed learning rate type
    InitialEta(0.005)  -- Updated initial learning rate
    RegularizationLambda(0.05)
    Alpha(0.01)
    Momentum(0.5)
    Nesterov('true')
    MaxIterNum(150)
) AS dt;
```

#### 3. DELETE

Deleting a model is not a typical operation in Teradata. However, you can drop tables or views if you want to remove any temporary results or models.

```sql
DROP TABLE IF EXISTS temp_model_results;
```

#### 4. CREATE

You can create a new table to store the results or model outputs. For example:

```sql
CREATE TABLE model_results AS (
  SELECT * FROM TD_OneClassSVM(
    ON diabetes_train_scaled AS InputTable
    USING
      InputColumns('[1:8]')
      Tolerance(1e-7)
      BatchSize(30)
      LearningRate('constant')
      InitialEta(0.01)
      RegularizationLambda(0.1)
      Alpha(0)
      Momentum(0.0)
      Nesterov('false')
      MaxIterNum(100)
  )
) WITH NO DATA; -- Create table structure without data
```

### Keywords and Phrases

- **TD_OneClassSVM Example**
- **OneClassSVM**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language English (United States)**
- **Last Update April 2024**
- **Data Cleaning Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **OneClass SVM Usage**
- **Anomaly Detection**
- **Learning Rate Constant**
- **Batch Size**
- **Regularization Lambda**
- **Momentum**
- **Max Iterations**
- **Predictor Estimates**","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/Example-How-to-Use-TD_OneClassSVM","2024-07-27 11:26:32"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/TD_OneClassSVM-Input","text/html;charset=UTF-8","200","","Indexable","","TD_OneClassSVM Input - Analytics Database","41","398","TD_OneClassSVM accepts one input table containing all input columns. No response column is needed. Column Name Data Type Description input_column INTEGER, BIGINT, SMALLINT, BYTEINT, DOUBLE PRECISION Column that this function uses to train the SVM model.","253","1670","","0","TD_OneClassSVM Input - Analytics Database","41","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/TD_OneClassSVM-Input","","","","","","208623","13091","13091","4.641","A+","77","39","1.974","20.249","Very Hard","11.167","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.454","","","","","","1.1","## Summary of Teradata Vantage™ Analytics Database Functions

Teradata Vantage™ provides a comprehensive suite of analytic functions designed for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Among these functions, the TD_OneClassSVM function is notable for its ability to perform one-class classification, which is particularly useful for anomaly detection tasks.

The following sections outline the basic database operations—Select, Update, Delete, and Create—along with examples relevant to the Teradata Analytics Database environment.

## Code Example

### 1. Select
To retrieve data from a table, use the `SELECT` statement. Here’s how to select specific columns from a table.

```sql
SELECT input_column
FROM input_table
WHERE input_column > 10;
```

### 2. Update
To modify existing records in a table, use the `UPDATE` statement. This example updates a column based on a condition.

```sql
UPDATE input_table
SET input_column = input_column * 2
WHERE input_column < 5;
```

### 3. Delete
To remove records from a table, use the `DELETE` statement. This example deletes rows where the condition is met.

```sql
DELETE FROM input_table
WHERE input_column IS NULL;
```

### 4. Create
To create a new table, use the `CREATE TABLE` statement. Here’s how to create a new table with specific columns.

```sql
CREATE TABLE new_table (
    input_column INTEGER,
    another_column VARCHAR(100)
);
```

## Keywords and Phrases
- **TD_OneClassSVM Input** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language English (United States)**
- **Last Update 2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This structured approach ensures clarity in understanding the functionalities of the Teradata Vantage™ Analytics Database while providing practical examples of SQL operations.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/TD_OneClassSVM-Input","2024-07-27 12:39:26"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/TD_OneClassSVM-Output","text/html;charset=UTF-8","200","","Indexable","","TD_OneClassSVM Output - Analytics Database","42","414","TD_OneClassSVM produces two outputs: Model (Primary output): Contains the trained model along with model statistics. These model statistics will be stored in the model: Loss Function MSE Number of Observations Loglik AIC BIC Regularization Alpha (L1/L2/Elasticnet) Number of Iterations Learning Rate (Initial) Learning R...","323","2022","","0","TD_OneClassSVM Output - Analytics Database","42","Database Analytic Functions","27","Model Output Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/TD_OneClassSVM-Output","","","","","","213294","13737","13737","4.870","A+","240","73","3.288","43.463","Hard","11.429","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.521","","","","","","1.1","### Summary

The **TD_OneClassSVM** function in Teradata Vantage™ is a powerful tool for anomaly detection based on a one-class support vector machine algorithm. It outputs two main components: the trained model along with its statistics and an optional meta-information table that tracks the training process over epochs. The model metrics include various statistical measures such as Mean Squared Error (MSE), log-likelihood, and regularization parameters, providing insights into the model's performance and training dynamics.

### Code Example

Here are examples of SQL commands for basic database operations: Select, Update, Delete, and Create.

#### 1. Select
```sql
SELECT *
FROM customers
WHERE country = 'USA';
```

#### 2. Update
```sql
UPDATE customers
SET city = 'San Francisco'
WHERE customer_id = 101;
```

#### 3. Delete
```sql
DELETE FROM customers
WHERE customer_id = 101;
```

#### 4. Create
```sql
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    country VARCHAR(50)
);
```

### Keywords and Phrases
- TD_OneClassSVM Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Model Output Schema
- MetaInformationTable Output Schema
- Iteration
- Loss Function
- MSE
- Number of Observations
- Loglik
- AIC
- BIC
- Regularization
- Alpha (L1/L2/Elasticnet)
- Number of Iterations
- Learning Rate (Initial)
- Learning Rate (Final)
- Momentum
- Nesterov
- LocalSGD Iterations

This summary and code examples provide a foundational understanding of the TD_OneClassSVM function and general SQL operations.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/TD_OneClassSVM-Output","2024-07-27 12:01:02"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/TD_OneClassSVM-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_OneClassSVM Syntax | OneClassSVM | Teradata Vantage - TD_OneClassSVM Syntax - Analytics Database","99","973","See the syntax of the TD_OneClassSVM function here.","51","332","","0","TD_OneClassSVM Syntax | OneClassSVM | Teradata Vantage - TD_OneClassSVM Syntax - Analytics Database","99","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/TD_OneClassSVM-Syntax","","","","","","209046","13282","13282","4.709","A+","209","66","3.167","55.065","Fairly Hard","11.566","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.451","","","","","","1.1","## Summary

The `TD_OneClassSVM` function in Teradata Vantage is used for anomaly detection using the One-Class Support Vector Machine (SVM) algorithm. It facilitates the modeling of data by identifying patterns and outliers in a dataset. This function is part of the Analytics Database and includes several parameters to customize the learning process, such as batch size, the number of iterations, regularization, and learning rate settings. 

### Code Examples

Here are examples of common SQL operations (Select, Update, Delete, Create) in the context of using `TD_OneClassSVM`:

#### 1. Select
```sql
SELECT * 
FROM TD_OneClassSVM (
    ON your_input_table AS InputTable
    USING InputColumns (input_column1, input_column2)
);
```

#### 2. Update
```sql
UPDATE your_table
SET model_output = (
    SELECT prediction 
    FROM TD_OneClassSVM (
        ON your_input_table AS InputTable
        USING InputColumns (input_column1, input_column2)
    )
)
WHERE condition;
```

#### 3. Delete
```sql
DELETE FROM your_table
WHERE id IN (
    SELECT id 
    FROM TD_OneClassSVM (
        ON your_input_table AS InputTable
        USING InputColumns (input_column1, input_column2)
    )
    WHERE anomaly_score > threshold_value
);
```

#### 4. Create
```sql
CREATE TABLE your_output_table AS (
    SELECT * 
    FROM TD_OneClassSVM (
        ON your_input_table AS InputTable
        USING InputColumns (input_column1, input_column2)
    )
) WITH NO DATA;
```

### Keywords and Phrases
- TD_OneClassSVM Syntax
- OneClassSVM
- Teradata Vantage - TD_OneClassSVM Syntax
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/TD_OneClassSVM-Syntax","2024-07-27 12:44:22"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/TD_OneClassSVM-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","TD_OneClassSVM Syntax Elements - Analytics Database","51","502","InputColumns Specify the names of the input table columns that need to be used for training the model (predictors, features or independent variables). MaxIterNum [Optional] Specify the maximum number of iterations (minibatches) over the training data batches. Value is a positive integer less than 10,000,000. Default va...","323","1991","","0","TD_OneClassSVM Syntax Elements - Analytics Database","51","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/TD_OneClassSVM-Syntax-Elements","","","","","","212273","14159","14159","5.019","A+","616","163","3.779","53.164","Fairly Hard","12.580","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.536","","","","","","1.1","# Teradata Vantage™: Code Examples and Summary

Teradata Vantage™ is a powerful analytics database that provides a suite of analytic functions for data manipulation, model training, and evaluation. Below are fundamental SQL operations: Select, Update, Delete, and Create, which are essential for managing data within the Teradata environment.

## Code Example

### 1. SELECT
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT customer_id, first_name, last_name 
FROM customers 
WHERE city = 'Los Angeles';
```

### 2. UPDATE
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE customers 
SET city = 'San Francisco' 
WHERE customer_id = 101;
```

### 3. DELETE
The `DELETE` statement removes records from a table.

```sql
DELETE FROM customers 
WHERE last_purchase_date < '2020-01-01';
```

### 4. CREATE
The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100)
);
```

## Summary
These basic SQL commands are foundational for interacting with the Teradata Vantage™ database. The `SELECT` command retrieves data, `UPDATE` modifies records, `DELETE` removes records, and `CREATE` establishes new tables. Each of these commands can be further enhanced with analytic functions and other advanced SQL features offered by Teradata.

## Keywords and Phrases
- TD_OneClassSVM Syntax Elements
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Maximum Number of Columns in a Database Table
- Recommendations for Using Analytic Functions
- Example Queries
- SQL Operations
- Data Manipulation
- Database Management

This summary provides a glimpse into the capabilities of Teradata Vantage™ and the variety of functions available for extensive data analytics.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/TD_OneClassSVM-Syntax-Elements","2024-07-27 11:44:47"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/TD_OneClassSVM-Usage-Notes","text/html;charset=UTF-8","200","","Indexable","","TD_OneClassSVM Usage Notes | OneClassSVM | Teradata Vantage - TD_OneClassSVM Usage Notes - Analytics Database","109","1081","Learn about the usage considerations for the Analytics Database TD_OneClassSVM function.","88","575","","0","TD_OneClassSVM Usage Notes | OneClassSVM | Teradata Vantage - TD_OneClassSVM Usage Notes - Analytics Database","109","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/TD_OneClassSVM-Usage-Notes","","","","","","208252","12994","12994","4.606","A+","161","50","3.220","35.943","Hard","11.465","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.446","","","","","","1.1","### Summary
The `TD_OneClassSVM` function in Teradata Vantage is used for anomaly detection within a dataset. It operates by training on a dataset that contains primarily one class of data and can identify outliers that do not conform to this class. It is important to preprocess data before using this function, which may include standardizing features and handling missing values. This function supports only linear SVMs, and there are limitations on the number of features that can be used due to database constraints.

### Code Examples
Here are examples for the basic SQL operations (Select, Update, Delete, and Create) that can be executed in Teradata.

#### Create Table
```sql
CREATE TABLE Customers (
    CustomerID INT,
    FirstName VARCHAR(255),
    LastName VARCHAR(255),
    Email VARCHAR(255),
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

#### Insert Data
```sql
INSERT INTO Customers (CustomerID, FirstName, LastName, Email) 
VALUES (1, 'John', 'Doe', 'john.doe@example.com');
```

#### Select Data
```sql
SELECT * FROM Customers WHERE LastName = 'Doe';
```

#### Update Data
```sql
UPDATE Customers 
SET Email = 'john.newemail@example.com' 
WHERE CustomerID = 1;
```

#### Delete Data
```sql
DELETE FROM Customers WHERE CustomerID = 1;
```

### Keywords and Phrases
- **TD_OneClassSVM Usage Notes**
- **OneClassSVM**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product Category**
- **Release Number 17.20**
- **Published June 2022**
- **Last Update April 2024**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Hypothesis Testing Functions**
- **Feature Engineering Transform Functions**
- **Teradata Links**
- **Related Documentation**
- **Missing Values Handling**
- **Standardization Preprocessing**
- **Maximum Feature Limitations**
- **Linear SVMs Only**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Spool Space Exhaustion**
- **Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/TD_OneClassSVM-Usage-Notes","2024-07-27 11:55:54"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM","text/html;charset=UTF-8","200","","Indexable","","TD_SVM Function | SVM | Teradata Vantage - TD_SVM - Analytics Database","70","670","This Analytics Database (SQL Engine) model training function performs classification and regression analysis on datasets.","121","755","","0","TD_SVM Function | SVM | Teradata Vantage - TD_SVM - Analytics Database","70","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM","","","","","","212235","14168","14168","5.023","A+","248","71","3.493","48.076","Hard","11.539","1","4","","707","707","0","99.860","722","720","0","","","","","","","","","0.945","","","","","","1.1","# Summary of TD_SVM Function in Teradata Vantage

The `TD_SVM` function in Teradata Vantage is a powerful tool for performing classification and regression analysis using Support Vector Machines (SVM). It leverages the Minibatch Stochastic Gradient Descent (SGD) algorithm, which makes it suitable for handling large datasets. The function is designed for binary classification tasks (where the response values are either 0 or 1) and supports regression using an epsilon-insensitive loss function.

**Key Features:**
- **Scalability:** Designed to efficiently handle large datasets.
- **Sensitivity to Scaling:** Requires standardization of input features using `TD_ScaleFit` and `TD_ScaleTransform`.
- **Input Requirements:** Only accepts numeric features and ignores rows with missing values during training.
- **Output:** Produces a trained SVM model along with model statistics like mean squared error (MSE), Akaike information criterion (AIC), and Bayesian information criterion (BIC).

The model can be evaluated further using additional functions such as `TD_RegressionEvaluator`, `TD_ClassificationEvaluator`, and `TD_ROC`.

## Code Examples

### SELECT
Retrieve the SVM model statistics after training:
```sql
SELECT 
    model_id,
    mse,
    aic,
    bic
FROM 
    svm_model_statistics
WHERE 
    model_id = 'your_model_id';
```

### INSERT (CREATE)
Create a new SVM model using `TD_SVM`:
```sql
INSERT INTO svm_model_statistics 
SELECT 
    TD_SVM(
        input_table => 'your_input_table',
        target_column => 'target_column'
    ) AS model_id
FROM 
    your_input_table;
```

### UPDATE
Update an existing SVM model with new data:
```sql
UPDATE svm_model_statistics
SET model = TD_SVM(
        input_table => 'new_input_table',
        target_column => 'target_column'
    )
WHERE model_id = 'your_model_id';
```

### DELETE
Delete a specific SVM model from the statistics table:
```sql
DELETE FROM svm_model_statistics
WHERE model_id = 'your_model_id';
```

## Keywords and Phrases
- TD_SVM Function
- SVM
- Teradata Vantage
- TD_SVM
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Model Training Functions
- Model Evaluation Functions
- Regression
- Classification
- Binary Classification
- Minibatch Stochastic Gradient Descent (SGD)
- Feature Scaling
- TD_SVMPredict
- Mean Squared Error (MSE)
- Akaike Information Criterion (AIC)
- Bayesian Information Criterion (BIC)
- TD_RegressionEvaluator
- TD_ClassificationEvaluator
- TD_ROC","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM","2024-07-27 12:41:27"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM/Examples-How-to-Use-TD_SVM","text/html;charset=UTF-8","200","","Indexable","","TD_SVM Examples | SVM | Teradata Vantage - Examples: How to Use TD_SVM - Analytics Database","91","884","See examples of the Analytics Database (SQL Engine) model training function TD_SVM.","83","536","","0","TD_SVM Examples | SVM | Teradata Vantage - Examples: How to Use TD_SVM - Analytics Database","91","Database Analytic Functions","27","Example: Cal Housing Data Set","29","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM/Examples-How-to-Use-TD_SVM","","","","","","222737","17977","17977","6.373","A+","1874","905","2.071","100.000","Very Easy","16.507","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.594","","","","","","1.1","# Teradata Vantage: TD_SVM Examples

## Summary
Teradata Vantage provides a powerful framework for machine learning and analytics, including support for Support Vector Machines (SVM) through the `TD_SVM` function. This guide covers basic SQL commands such as `SELECT`, `UPDATE`, `DELETE`, and `CREATE`, as well as practical examples of using `TD_SVM` for both regression and classification tasks.

### Code Example

#### 1. SELECT
This query retrieves data from a table, showcasing how to extract relevant columns for further analysis.
```sql
SELECT id, MedInc, HouseAge, MedHouseVal 
FROM cal_housing_ex_raw 
WHERE MedHouseVal IS NOT NULL;
```

#### 2. UPDATE
This query updates the `MedHouseVal` column in the `cal_housing_ex_raw` table based on certain conditions.
```sql
UPDATE cal_housing_ex_raw 
SET MedHouseVal = MedHouseVal * 1.1 
WHERE HouseAge > 30;
```

#### 3. DELETE
This command deletes records from the `cal_housing_ex_raw` table where the `MedHouseVal` is below a certain threshold.
```sql
DELETE FROM cal_housing_ex_raw 
WHERE MedHouseVal < 1.0;
```

#### 4. CREATE
This command creates a new table that will hold scaled data from the original housing data.
```sql
CREATE MULTISET TABLE cal_housing_ex_scaled AS (
    SELECT * FROM TD_ScaleTransform(
        ON cal_housing_ex_raw AS InputTable
        ON scaleFitOut_cal_ex AS FitTable DIMENSION
        USING
        Accumulate('id', 'MedHouseVal')
    ) AS dt
) WITH DATA;
```

### Using TD_SVM for Regression
#### Example: Standardizing Data and Creating SVM Model
```sql
CREATE VOLATILE TABLE svm_model_cal_housing AS (
    SELECT * FROM TD_SVM (
        ON cal_housing_ex_scaled AS InputTable
        USING
        InputColumns('medinc', 'houseage', 'averooms', 'avebedrms', 'population', 'aveoccup', 'latitude', 'longitude')
        ResponseColumn('MedHouseVal')
        ModelType('Regression')
        BatchSize(10)
        MaxIterNum(300)
    ) AS dt
) WITH DATA ON COMMIT PRESERVE ROWS;
```

### Using TD_SVM for Classification
#### Example: Credit Data Classification
```sql
SELECT * FROM TD_SVM (
    ON credit_ex_merged AS InputTable
    USING
    InputColumns('[1:39]')
    ResponseColumn('Outcome')
    ModelType('Classification')
    BatchSize(10)
    MaxIterNum(300)
) AS dt;
```

## Keywords and Phrases
- TD_SVM Examples
- SVM
- Teradata Vantage - Examples: How to Use TD_SVM
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Recommendations for Using Analytic Functions
- TD_ConvertTo
- TD_GetRowsWithMissingValues
- TD_SimpleImputeFit
- TD_ScaleFit
- TD_ScaleTransform
- TD_OneClassSVM
- TD_SVMPredict
- TD_XGBoost
- Classification
- Regression
- Analytics Database Analytic Functions","29","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM/Examples-How-to-Use-TD_SVM","2024-07-27 11:20:21"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM/TD_SVM-Input","text/html;charset=UTF-8","200","","Indexable","","TD_SVM Input - Analytics Database","33","313","InputTable Schema Column Name Data Type Description input_column INTEGER, BIGINT, SMALLINT, BYTEINT, FLOAT, DECIMAL, NUMBER Column used to train the SVM model. response_column INTEGER, BIGINT, SMALLINT, BYTEINT, FLOAT, DECIMAL, NUMBER Column containing the response value for an observation.","291","1985","","0","TD_SVM Input - Analytics Database","33","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM/TD_SVM-Input","","","","","","208979","13097","13097","4.643","A+","79","39","2.026","17.374","Very Hard","11.162","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.458","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a robust set of analytic functions designed to facilitate data exploration, feature engineering, model training, and evaluation. This includes various data cleaning functions, model scoring functionalities, and specialized utilities for text analytics and hypothesis testing. The capability to manage diverse data types and execute complex queries efficiently makes it a powerful tool for data analysts and data scientists.

### Code Example Section

In this section, we will cover basic SQL commands that are commonly used in managing data within the Teradata Vantage™ environment. 

#### 1. **Create Table**

```sql
CREATE TABLE customer_data (
    customer_id INTEGER PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    signup_date DATE
);
```

#### 2. **Select Data**

```sql
SELECT first_name, last_name, email
FROM customer_data
WHERE signup_date >= '2023-01-01';
```

#### 3. **Update Data**

```sql
UPDATE customer_data
SET email = 'new_email@example.com'
WHERE customer_id = 123;
```

#### 4. **Delete Data**

```sql
DELETE FROM customer_data
WHERE customer_id = 123;
```

### Keywords and Phrases

- **TD_SVM Input** 
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number** 
- **17.20**
- **Published** 
- **June 2022**
- **Language** 
- **English (United States)**
- **Last Update** 
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category** 
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Input Table Schemas**
- **Accumulated Columns Impact on Function Performance**
- **Data Type Change in Accumulated Columns**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Examples** 
- **How to Use [Function Name]** 
- **Syntax Elements** 
- **Required Syntax Elements** 
- **Optional Syntax Elements**

This provides a foundational understanding of the capabilities of the Teradata Vantage™ Analytics Database, along with essential SQL operations for data management.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM/TD_SVM-Input","2024-07-27 12:17:44"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM/TD_SVM-Output","text/html;charset=UTF-8","200","","Indexable","","TD_SVM Output - Analytics Database","34","329","TD_SVM produces two outputs: Model (Primary output): Contains the trained model along with model statics. The model stores the following model statistics: Loss Function MSE Number of Observations AIC BIC Number of Iterations Regularization Alpha (L1/L2/Elasticnet) Learning Rate (Initial) Learning Rate (Final) Momentum ...","323","2039","","0","TD_SVM Output - Analytics Database","34","Database Analytic Functions","27","Model Output Table Schema","25","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM/TD_SVM-Output","","","","","","213301","13760","13760","4.878","A+","240","71","3.380","43.017","Hard","11.434","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.862","","","","","","1.1","### Summary
Teradata Vantage™ provides a robust Analytics Database that includes a variety of analytic functions to support data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Among these functions is the **TD_SVM** (Support Vector Machine), which serves both classification and regression tasks, generating model statistics and optional training progress information.

### Code Example

Here's a brief overview of SQL commands to manage a database, focusing on select, update, delete, and create operations.

#### Select
```sql
SELECT predictor, estimate
FROM ModelOutput
WHERE attribute >= 0;
```

#### Update
```sql
UPDATE ModelOutput
SET estimate = estimate * 1.1
WHERE predictor = 'SomePredictor';
```

#### Delete
```sql
DELETE FROM ModelOutput
WHERE attribute < 0;
```

#### Create
```sql
CREATE TABLE ModelOutput (
    attribute SMALLINT,
    predictor VARCHAR(100),
    estimate FLOAT,
    value VARCHAR(100)
);
```

### Keywords and Phrases
- **TD_SVM Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number** - 17.20
- **Published** - June 2022
- **Language** - English (United States)
- **Last Update** - 2024-04-06
- **dita:mapPath** - gjn1627595495337.ditamap
- **dita:ditavalPath** - ayr1485454803741.ditaval
- **dita:id** - jmh1512506877710
- **Product Category** - Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM/TD_SVM-Output","2024-07-27 11:43:18"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM/TD_SVM-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_SVM Syntax | SVM | Teradata Vantage - TD_SVM Syntax - Analytics Database","75","718","See the syntax of the Analytics Database (SQL Engine) function TD_SVM and read descriptions of its required and optional syntax elements.","137","860","","0","TD_SVM Syntax | SVM | Teradata Vantage - TD_SVM Syntax - Analytics Database","75","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM/TD_SVM-Syntax","","","","","","209229","13390","13390","4.747","A+","222","71","3.127","56.564","Fairly Hard","11.604","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.592","","","","","","1.1","### Overview of TD_SVM in Teradata Vantage

The `TD_SVM` function in Teradata Vantage is used for implementing Support Vector Machine (SVM) algorithms, which are widely used for classification and regression tasks in machine learning. This function allows users to specify various parameters to control the behavior of the SVM model, including input columns, response columns, and hyperparameters like regularization and learning rate.

### Code Examples

Here are examples demonstrating how to use the `TD_SVM` function in different SQL statements: SELECT, UPDATE, DELETE, and CREATE.

#### 1. SELECT Example

```sql
SELECT *
FROM TD_SVM (
    ON my_table AS InputTable
    PARTITION BY ANY
    USING
    InputColumns (column1, column2)
    ResponseColumn('target_column')
    ModelType ('Classification')
    BatchSize (100)
)
```

#### 2. CREATE TABLE Example

```sql
CREATE TABLE svm_model AS (
    SELECT *
    FROM TD_SVM (
        ON my_data AS InputTable
        PARTITION BY ANY
        USING
        InputColumns ('feature1', 'feature2', 'feature3')
        ResponseColumn('label')
        ModelType ('Regression')
        MaxIterNum (500)
        RegularizationLambda (0.1)
    )
) WITH NO DATA;
```

#### 3. UPDATE Example

While `TD_SVM` does not directly support an UPDATE operation, you can use it in a query to create a new table, which can then be used to update existing records:

```sql
CREATE TABLE updated_data AS (
    SELECT a.*, b.predicted_value
    FROM my_data AS a
    JOIN (
        SELECT *
        FROM TD_SVM (
            ON my_data AS InputTable
            PARTITION BY ANY
            USING
            InputColumns ('feature1', 'feature2')
            ResponseColumn('label')
        )
    ) AS b ON a.id = b.id
) WITH NO DATA;
```

#### 4. DELETE Example

Similar to UPDATE, you would typically not use `TD_SVM` within a DELETE statement directly. However, you could identify records to delete based on the results of the SVM model:

```sql
DELETE FROM my_data
WHERE id IN (
    SELECT id
    FROM TD_SVM (
        ON my_data AS InputTable
        PARTITION BY ANY
        USING
        InputColumns ('feature1', 'feature2')
        ResponseColumn('label')
        ModelType ('Classification')
    )
    WHERE predicted_value = 'unwanted_class'
);
```

### Keywords and Phrases

- **TD_SVM Syntax**
- **SVM**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware Product**
- **Release Number 17.20**
- **Published June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Analytics Database Analytic Function Categories**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **LearningRate Options**
- **RegularizationLambda**
- **MaxIterNum**
- **BatchSize**
- **ResponseColumn**
- **InputColumns**
- **Classification**
- **Regression**
- **Epsilon**
- **Alpha**
- **Intercept Options**
- **ClassWeights**
- **Momentum**
- **LocalSGDIterations**

This summary and examples provide a fundamental understanding of how to implement SVM in Teradata Vantage using SQL.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM/TD_SVM-Syntax","2024-07-27 11:45:04"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM/TD_SVM-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","TD_SVM Syntax Elements - Analytics Database","43","417","InputColumns Specify the names of the input table columns that need to be used for training the model (predictors, features, or independent variables). ResponseColumn Specify the name of the column that contains the class label for classification or target value (dependent variable) for regression. ModelType [Optional]...","323","1984","","0","TD_SVM Syntax Elements - Analytics Database","43","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM/TD_SVM-Syntax-Elements","","","","","","213737","14463","14463","5.127","A+","718","213","3.371","54.362","Fairly Hard","12.849","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.438","","","","","","1.1","# Teradata Vantage™ Analytics Database Functions

The Teradata Vantage™ Analytics Database provides a variety of analytic functions that allow users to perform complex data analysis, modeling, and evaluation. This document highlights some of the key functionalities, including the syntax for creating, selecting, updating, and deleting data within the database.

### Summary

Teradata Vantage™ supports a range of analytic functions for tasks such as data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This enables users to efficiently manage and analyze large datasets, derive insights, and build predictive models. The following sections demonstrate the basic SQL commands (Select, Update, Delete, Create) commonly used in the analytics database.

### Code Example

#### 1. Create a Table

```sql
CREATE TABLE SalesData (
    SaleID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ProductName VARCHAR(100),
    SaleAmount DECIMAL(10, 2),
    SaleDate DATE
);
```

#### 2. Insert Data

```sql
INSERT INTO SalesData (ProductName, SaleAmount, SaleDate)
VALUES ('Product A', 150.00, '2023-01-15'),
       ('Product B', 200.00, '2023-01-16');
```

#### 3. Select Data

```sql
SELECT * FROM SalesData;
```

#### 4. Update Data

```sql
UPDATE SalesData
SET SaleAmount = SaleAmount * 1.10
WHERE SaleDate = '2023-01-15';
```

#### 5. Delete Data

```sql
DELETE FROM SalesData
WHERE SaleID = 1;
```

### Keywords and Phrases

- **TD_SVM Syntax Elements**
- **Analytics Database**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number:** 17.20
- **Published:** June 2022
- **Language:** English (United States)
- **Last Update:** 2024-04-06
- **Product Category:** Teradata Vantage™
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Workload Management Configuration**
- **Non-Deterministic Behavior**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Database Analytic Functions**
- **Examples of Usage**
- **Recommendations for Using Analytic Functions** 

This summary and code examples provide a foundational understanding of how to perform basic operations in Teradata Vantage™ Analytics Database. For advanced functionalities, consult the relevant documentation or resources.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM/TD_SVM-Syntax-Elements","2024-07-27 12:23:01"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance","text/html;charset=UTF-8","200","","Indexable","","TD_VectorDistance Function | VectorDistance | Teradata Vantage - TD_VectorDistance - Analytics Database","103","955","This Analytics Database (SQL Engine) function calculates the distance between vectors. It calculates the cosine, Euclidean, and Manhattan distances.","148","922","","0","TD_VectorDistance Function | VectorDistance | Teradata Vantage - TD_VectorDistance - Analytics Database","103","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance","","","","","","211571","14001","14001","4.963","A+","435","84","5.179","51.633","Fairly Hard","12.101","1","4","","707","707","0","99.860","715","713","0","","","","","","","","","0.590","","","","","","1.1","### TD_VectorDistance Function Overview

The **TD_VectorDistance** function in Teradata Vantage is designed to compute the distance between pairs of target and reference vectors, allowing the user to analyze the similarity or dissimilarity between different data points represented in a multidimensional space. This function can be crucial for tasks such as clustering, classification, and various data analysis techniques in machine learning.

#### Key Features:
- Computes distances using multiple metrics, including Euclidean, Manhattan, and Cosine distances.
- Handles inputs from either one or two tables, with specific requirements for column alignment.
- Efficiently ignores NULL, NAN, or INF values during distance calculation.
- Can return a comprehensive output table when configured with a TopK value of -1.

### Code Examples

Here are basic SQL examples demonstrating how to use the **TD_VectorDistance** function alongside common SQL operations like SELECT, UPDATE, DELETE, and CREATE.

#### 1. **SELECT** Example

To select the distances between target and reference vectors:

```sql
SELECT *
FROM TD_VectorDistance(
    ON target_vectors AS target
    ON reference_vectors AS reference
    USING
    TargetFeatureColumns ('feature1', 'feature2', 'feature3')
    RefFeatureColumns ('feature1', 'feature2', 'feature3')
) AS result;
```

#### 2. **UPDATE** Example

To update a table based on calculated distances, you might first compute and then update:

```sql
UPDATE target_vectors
SET distance = (
    SELECT distance
    FROM TD_VectorDistance(
        ON target_vectors AS target
        ON reference_vectors AS reference
        USING
        TargetFeatureColumns ('feature1', 'feature2', 'feature3')
        RefFeatureColumns ('feature1', 'feature2', 'feature3')
    )
    WHERE target.id = target_vectors.id
);
```

#### 3. **DELETE** Example

To delete rows from a table based on a condition related to vector distances:

```sql
DELETE FROM target_vectors
WHERE id IN (
    SELECT target.id
    FROM TD_VectorDistance(
        ON target_vectors AS target
        ON reference_vectors AS reference
        USING
        TargetFeatureColumns ('feature1', 'feature2', 'feature3')
        RefFeatureColumns ('feature1', 'feature2', 'feature3')
    )
    WHERE distance > 10  -- Example condition
);
```

#### 4. **CREATE** Example

To create a new table for storing results from the distance calculation:

```sql
CREATE TABLE distance_results AS (
    SELECT *
    FROM TD_VectorDistance(
        ON target_vectors AS target
        ON reference_vectors AS reference
        USING
        TargetFeatureColumns ('feature1', 'feature2', 'feature3')
        RefFeatureColumns ('feature1', 'feature2', 'feature3')
    )
) WITH NO DATA;  -- Use WITH DATA if you want to populate it immediately
```

### Summary
The **TD_VectorDistance** function is a powerful tool in Teradata Vantage for analyzing the distance between vectors. By leveraging this function in SQL, users can perform various operations to manage and analyze their data efficiently.

### Keywords and Phrases
- **TD_VectorDistance Function**
- **VectorDistance**
- **Teradata Vantage - TD_VectorDistance**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Function Syntax Descriptions**
- **Distance Metrics** (Euclidean, Manhattan, Cosine)
- **Machine Learning**
- **Data Analysis**
- **Cluster Analysis**
- **Similarity Measure**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance","2024-07-27 12:34:11"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance/Example-TD_VectorDistance-Using-Euclidean-Manhattan-and-Cosine","text/html;charset=UTF-8","200","","Indexable","","TD_VectorDistance Example | VectorDistance | Teradata Vantage - Example: TD_VectorDistance Using Euclidean, Manhattan, and Cosine - Analytics Database","150","1402","See an example of the Analytics Database (SQL Engine) model training function TD_VectorDistance.","96","614","","0","TD_VectorDistance Example | VectorDistance | Teradata Vantage - Example: TD_VectorDistance Using Euclidean, Manhattan, and Cosine - Analytics Database","150","Database Analytic Functions","27","Target Table","12","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance/Example-TD_VectorDistance-Using-Euclidean-Manhattan-and-Cosine","","","","","","213635","13783","13783","4.886","A+","235","128","1.836","67.812","Normal","11.554","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.551","","","","","","1.1","## Summary

Teradata Vantage™ provides a robust platform for performing various analytical functions, including data cleaning, exploration, feature engineering, and model training. Among these functions is `TD_VectorDistance`, which calculates the distance between vectors in a high-dimensional space. This is particularly useful in analytics where similarity or dissimilarity between data points needs to be evaluated.

The `TD_VectorDistance` function supports various distance measures, including Euclidean, Manhattan, and Cosine distances, and can be applied to datasets structured in Teradata.

### Code Example

Here are some examples covering basic SQL operations in Teradata:

1. **Select**
   ```sql
   SELECT Userid, CallDuration, DataCounter, SMS 
   FROM target_mobile_data_dense 
   WHERE CallDuration > 0.1;
   ```

2. **Insert**
   ```sql
   INSERT INTO target_mobile_data_dense (Userid, CallDuration, DataCounter, SMS) 
   VALUES (8, 0.5, 0.6, 0.4);
   ```

3. **Update**
   ```sql
   UPDATE target_mobile_data_dense 
   SET CallDuration = CallDuration + 0.1 
   WHERE Userid = 2;
   ```

4. **Delete**
   ```sql
   DELETE FROM target_mobile_data_dense 
   WHERE Userid = 4;
   ```

5. **Using TD_VectorDistance**
   ```sql
   SELECT target_id, reference_id, distancetype, 
          CAST(distance AS DECIMAL(36,8)) AS distance 
   FROM TD_VectorDistance (
       ON target_mobile_data_dense AS TargetTable
       ON ref_mobile_data_dense AS ReferenceTable DIMENSION
       USING
       TargetIDColumn('userid')
       TargetFeatureColumns('CallDuration','DataCounter','SMS')
       RefIDColumn('userid')
       RefFeatureColumns('CallDuration','DataCounter','SMS')
       DistanceMeasure('euclidean','cosine','manhattan')
       topk(2)
   ) AS dt 
   ORDER BY 3, 1, 2, 4;
   ```

### Output Example
The output of the `TD_VectorDistance` function may look like this:

| Target_ID | Reference_ID | DistanceType | Distance    |
|-----------|--------------|--------------|-------------|
| 1         | 5            | cosine       | 0.45486518  |
| 1         | 7            | cosine       | 0.32604815  |
| 2         | 5            | cosine       | 0.02608923  |
| 2         | 7            | cosine       | 0.00797609  |
| ...       | ...          | ...          | ...         |

### Keywords and Phrases

- TD_VectorDistance Example
- VectorDistance
- Teradata Vantage
- Example: TD_VectorDistance Using Euclidean, Manhattan, and Cosine
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- TD_VectorDistance Syntax
- TD_VectorDistance Input
- TD_VectorDistance Output
- Example: Using TD_VectorDistance with Different Distance Measures","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance/Example-TD_VectorDistance-Using-Euclidean-Manhattan-and-Cosine","2024-07-27 12:20:59"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance/TD_VectorDistance-Input","text/html;charset=UTF-8","200","","Indexable","","TD_VectorDistance Input - Analytics Database","44","408","Target Table Schema Column Data Type Description target_id_column BYTEINT, SMALLINT, BIGINT, INTEGER The target table column name that contains target table vector identifiers. target_feature_column BYTEINT, SMALLINT, BIGINT, INTEGER, DECIMAL, NUMBER, FLOAT, REAL, DOUBLE PRECISION The target table column names that con...","323","2136","","0","TD_VectorDistance Input - Analytics Database","44","Database Analytic Functions","27","Target Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance/TD_VectorDistance-Input","","","","","","210888","13251","13251","4.698","A+","137","47","2.915","17.386","Very Hard","11.281","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.503","","","","","","1.1","### Summary of Teradata Vantage™ Analytics Database Functions

Teradata Vantage™ provides a comprehensive suite of analytic functions that facilitate various data operations, including data cleaning, feature engineering, model training, and evaluation. These functions are designed to enhance data analytics capabilities within the Teradata environment, enabling users to extract meaningful insights and apply advanced analytical techniques efficiently.

### Code Examples

Below are examples using SQL syntax for common operations such as SELECT, UPDATE, DELETE, and CREATE in the context of the Teradata Vantage™ Analytics Database.

#### 1. **SELECT**
```sql
SELECT target_id_column, target_feature_column
FROM target_table
WHERE target_id_column = 1;
```

#### 2. **UPDATE**
```sql
UPDATE target_table
SET target_feature_column = target_feature_column + 10
WHERE target_id_column = 1;
```

#### 3. **DELETE**
```sql
DELETE FROM target_table
WHERE target_id_column = 1;
```

#### 4. **CREATE**
```sql
CREATE TABLE target_table (
    target_id_column INTEGER,
    target_feature_column DECIMAL(10, 2),
    PRIMARY KEY (target_id_column)
);
```

### Keywords and Phrases
- TD_VectorDistance Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Examples: How to Use [specific functions]","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance/TD_VectorDistance-Input","2024-07-27 11:46:38"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance/TD_VectorDistance-Output","text/html;charset=UTF-8","200","","Indexable","","TD_VectorDistance Output - Analytics Database","45","424","The function produces a table with the distances between the target and reference vectors. Column Data Type Description Target_ID BIGINT The specified target table column name. Reference_ID BIGINT The specified reference vector. DistanceType VARCHAR The specified distance type. Distance FLOAT The distance between the t...","323","2047","","0","TD_VectorDistance Output - Analytics Database","45","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance/TD_VectorDistance-Output","","","","","","209671","13111","13111","4.648","A+","90","40","2.250","25.951","Very Hard","11.160","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.652","","","","","","1.1","# Summary of Teradata Vantage™ Analytics Database

Teradata Vantage™ offers a comprehensive suite of analytic functions designed for data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analysis. It provides a robust framework for handling complex data analysis tasks, allowing users to extract insights efficiently from large datasets. The Analytics Database features various built-in functions that support capabilities like moving averages, statistical analysis, and machine learning algorithms, empowering analysts and data scientists to derive meaningful conclusions from their data.

## Code Examples

### 1. Create
```sql
CREATE TABLE my_table (
    Target_ID BIGINT,
    Reference_ID BIGINT,
    DistanceType VARCHAR(50),
    Distance FLOAT
);
```

### 2. Insert
```sql
INSERT INTO my_table (Target_ID, Reference_ID, DistanceType, Distance) 
VALUES (1, 1001, 'Euclidean', 0.5);
```

### 3. Select
```sql
SELECT Target_ID, Reference_ID, Distance 
FROM my_table 
WHERE DistanceType = 'Euclidean';
```

### 4. Update
```sql
UPDATE my_table 
SET Distance = 0.7 
WHERE Target_ID = 1 AND Reference_ID = 1001;
```

### 5. Delete
```sql
DELETE FROM my_table 
WHERE Target_ID = 1 AND Reference_ID = 1001;
```

## Keywords and Phrases

- **TD_VectorDistance Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**: gjn1627595495337.ditamap
- **dita:ditavalPath**: ayr1485454803741.ditaval
- **dita:id**: jmh1512506877710
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **TD_VectorDistance Syntax**
- **TD_VectorDistance Input**
- **TD_VectorDistance Output**
- **Example: TD_VectorDistance Using Euclidean, Manhattan, and Cosine** 

This comprehensive overview provides essential SQL operations along with relevant keywords that encapsulate the capabilities of the Teradata Vantage™ Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance/TD_VectorDistance-Output","2024-07-27 12:28:02"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance/TD_VectorDistance-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_VectorDistance Syntax | VectorDistance | Teradata Vantage - TD_VectorDistance Syntax - Analytics Database","108","1003","See the syntax of the Analytics Database (SQL Engine) function TD_VectorDistance and read descriptions of its required and optional syntax elements.","148","926","","0","TD_VectorDistance Syntax | VectorDistance | Teradata Vantage - TD_VectorDistance Syntax - Analytics Database","108","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance/TD_VectorDistance-Syntax","","","","","","208822","13056","13056","4.628","A+","129","52","2.481","25.280","Very Hard","11.373","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.557","","","","","","1.1","### Summary

Teradata Vantage provides a robust set of analytic functions, including the `TD_VectorDistance` function, which calculates the distance between vectors based on various distance measures such as Cosine, Euclidean, and Manhattan. This function can be utilized in various contexts, including SELECT queries, table creation, and view creation. The analytic functions in Teradata are designed to support data exploration, feature engineering, model training, and evaluation, making it a powerful tool for data analysts and scientists.

### Code Examples

#### 1. **SELECT**
```sql
SELECT
    target_id_column,
    ref_id_column,
    TD_VectorDistance(
        ON target_table AS TARGETTABLE
        PARTITION BY ANY
        ON reference_table AS REFERENCETABLE DIMENSION
        USING
            TargetIDColumn ('target_id_column')
            TargetFeatureColumns ('feature1', 'feature2')
            RefIDColumn ('ref_id_column')
            RefFeatureColumns ('ref_feature1', 'ref_feature2')
            DistanceMeasure ('Euclidean')
        ) AS distance
FROM
    target_table
JOIN
    reference_table
ON
    target_table.target_id_column = reference_table.ref_id_column;
```

#### 2. **UPDATE**
```sql
UPDATE target_table
SET distance = TD_VectorDistance(
        ON target_table AS TARGETTABLE
        PARTITION BY ANY
        ON reference_table AS REFERENCETABLE DIMENSION
        USING
            TargetIDColumn ('target_id_column')
            TargetFeatureColumns ('feature1', 'feature2')
            RefIDColumn ('ref_id_column')
            RefFeatureColumns ('ref_feature1', 'ref_feature2')
            DistanceMeasure ('Manhattan')
        )
WHERE target_id_column IS NOT NULL;
```

#### 3. **DELETE**
```sql
DELETE FROM target_table
WHERE TD_VectorDistance(
        ON target_table AS TARGETTABLE
        PARTITION BY ANY
        ON reference_table AS REFERENCETABLE DIMENSION
        USING
            TargetIDColumn ('target_id_column')
            TargetFeatureColumns ('feature1', 'feature2')
            RefIDColumn ('ref_id_column')
            RefFeatureColumns ('ref_feature1', 'ref_feature2')
            DistanceMeasure ('Cosine')
        ) < threshold_value;
```

#### 4. **CREATE**
```sql
CREATE TABLE distance_results AS (
    SELECT
        target_id_column,
        ref_id_column,
        TD_VectorDistance(
            ON target_table AS TARGETTABLE
            PARTITION BY ANY
            ON reference_table AS REFERENCETABLE DIMENSION
            USING
                TargetIDColumn ('target_id_column')
                TargetFeatureColumns ('feature1', 'feature2')
                RefIDColumn ('ref_id_column')
                RefFeatureColumns ('ref_feature1', 'ref_feature2')
                DistanceMeasure ('Euclidean')
        ) AS distance
    FROM
        target_table
    JOIN
        reference_table
    ON
        target_table.target_id_column = reference_table.ref_id_column
) WITH NO DATA;
```

### Keywords and Phrases
- TD_VectorDistance Syntax
- VectorDistance
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Data Exploration Functions
- Example Usage
- Teradata Vantage™","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance/TD_VectorDistance-Syntax","2024-07-27 12:29:54"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance/TD_VectorDistance-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","TD_VectorDistance Syntax Elements - Analytics Database","54","512","TargetIDColumn Specify the target table column name that contains identifiers of the target table vectors. TargetFeatureColumns Specify the target table column names that contain features of the target table vectors. You can specify up to 2018 feature columns. RefIDColumn [Optional] Specify the reference table column n...","323","2005","","0","TD_VectorDistance Syntax Elements - Analytics Database","54","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance/TD_VectorDistance-Syntax-Elements","","","","","","209296","13112","13112","4.648","A+","206","65","3.169","43.453","Hard","11.539","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.463","","","","","","1.1","## Overview

The Teradata Vantage™ Analytics Database provides powerful analytic functions to perform various operations on data. You can utilize SQL commands to manipulate data within the database, including selecting, updating, deleting, and creating records in tables. Below, we provide a summary of these operations along with code examples for each.

### Code Example Section

#### 1. SELECT
The `SELECT` statement is used to query data from a database.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

**Example:**
```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

#### 2. UPDATE
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

**Example:**
```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department = 'Sales';
```

#### 3. DELETE
The `DELETE` statement removes existing records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

**Example:**
```sql
DELETE FROM employees
WHERE last_name = 'Doe';
```

#### 4. CREATE
The `CREATE` statement is used to create a new table.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

**Example:**
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

### Summary
The SQL operations covered above are foundational to managing data within the Teradata Vantage Analytics Database. You can use these commands to retrieve, modify, and manage the data effectively for your analytical needs.

### Keywords and Phrases
- **TD_VectorDistance Syntax Elements**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **ditamap Path**
- **ditaval Path**
- **Product Category**
- **Teradata Vantage™**
- **Analytics Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This comprehensive set of keywords and phrases can serve as a reference for further exploration of the Teradata Vantage Analytics Database functionalities and features.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance/TD_VectorDistance-Syntax-Elements","2024-07-27 11:25:59"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost","text/html;charset=UTF-8","200","","Indexable","","TD_XGBoost Function | XGBoost | Teradata Vantage - TD_XGBoost - Analytics Database","82","778","Analytics Database (SQL Engine) model training function performs analysis on datasets to generate a model for TD_XGBoostPredict to run the predictive algorithm.","160","1008","","0","TD_XGBoost Function | XGBoost | Teradata Vantage - TD_XGBoost - Analytics Database","82","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost","","","","","","214497","15172","15172","5.379","A+","800","145","5.517","61.857","Normal","12.982","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","1.445","","","","","","1.1","## Summary

The `TD_XGBoost` function in Teradata Vantage represents an advanced implementation of eXtreme Gradient Boosting (XGBoost), designed for efficient machine learning performance in regression and classification tasks. This function optimizes a loss function while utilizing weak learners in an additive model to minimize errors iteratively. XGBoost is especially beneficial for handling complex datasets and offers flexibility through support for various loss functions. By managing parameters such as the number of trees and iteration depth, one can significantly influence both model accuracy and execution time.

### Code Examples

Here are basic SQL code examples for common operations (`SELECT`, `UPDATE`, `DELETE`, `CREATE`) you can perform in Teradata.

#### SELECT
```sql
SELECT *
FROM my_table
WHERE condition_column = 'some_value';
```

#### UPDATE
```sql
UPDATE my_table
SET column_to_update = 'new_value'
WHERE condition_column = 'some_value';
```

#### DELETE
```sql
DELETE FROM my_table
WHERE condition_column = 'some_value';
```

#### CREATE
```sql
CREATE TABLE my_new_table (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Keywords and Phrases
- TD_XGBoost Function
- XGBoost
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- Dita:mapPath
- Dita:ditavalPath
- Product Category
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Recommendations for Using Analytic Functions
- TD_XGBoost for Regression
- TD_XGBoost for Classification
- Boosted Trees
- Processing Time Control
- AMPs (Access Module Processors)
- Imbalanced Datasets
- Training Sample Quality
- Function Syntax
- Required Syntax Elements
- Optional Syntax Elements
- Input and Output Examples","28","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost","2024-07-27 11:20:34"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Examples-How-to-Use-TD_XGBoost","text/html;charset=UTF-8","200","","Indexable","","TD_XGBoost Function Examples | Teradata Vantage - Examples: How to Use TD_XGBoost - Analytics Database","102","981","See examples of the Analytics Database (SQL Engine) model training function TD_XGBoost.","87","563","","0","TD_XGBoost Function Examples | Teradata Vantage - Examples: How to Use TD_XGBoost - Analytics Database","102","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Examples-How-to-Use-TD_XGBoost","","","","","","209555","13512","13512","4.790","A+","119","47","2.532","49.995","Hard","11.251","1","5","","707","707","0","99.860","714","711","0","","","","","","","","","0.537","","","","","","1.1","# Summary

The TD_XGBoost function in Teradata Vantage is a powerful tool for building machine learning models using the XGBoost algorithm. This function supports both classification and regression tasks, allowing users to train models that can predict outcomes based on input features. Teradata Vantage provides robust functionalities for data manipulation and model evaluation, making it easier to integrate advanced analytics into data workflows.

## Code Examples

### 1. Create
To create a table for input data:

```sql
CREATE TABLE input_data (
    id INT,
    feature1 FLOAT,
    feature2 FLOAT,
    label INT
);
```

### 2. Insert
To insert sample data into the table:

```sql
INSERT INTO input_data (id, feature1, feature2, label) VALUES
(1, 0.5, 1.2, 0),
(2, 1.5, 1.8, 1),
(3, 2.1, 2.5, 0);
```

### 3. Select
To select data for training:

```sql
SELECT feature1, feature2, label FROM input_data;
```

### 4. Update
To update a specific record in the table:

```sql
UPDATE input_data
SET feature1 = 1.0
WHERE id = 1;
```

### 5. Delete
To delete a record from the table:

```sql
DELETE FROM input_data
WHERE id = 3;
```

### 6. TD_XGBoost for Classification
Using the TD_XGBoost function for a classification task:

```sql
CALL TD_XGBoost(
    DataTable => 'input_data',
    TargetColumn => 'label',
    Features => 'feature1, feature2',
    ModelOutput => 'model_output'
);
```

### 7. TD_XGBoost for Regression
Using the TD_XGBoost function for a regression task:

```sql
CALL TD_XGBoost(
    DataTable => 'input_data',
    TargetColumn => 'label',
    Features => 'feature1, feature2',
    ModelType => 'regression',
    ModelOutput => 'model_output'
);
```

## Keywords and Phrases
- TD_XGBoost Function Examples
- Teradata Vantage
- Examples: How to Use TD_XGBoost
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- Workload Management Configuration
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- SQL Examples
- Machine Learning Models
- Data Manipulation
- Analytics Workflows","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Examples-How-to-Use-TD_XGBoost","2024-07-27 12:48:09"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Examples-How-to-Use-TD_XGBoost/TD_XGBoost-for-Classification","text/html;charset=UTF-8","200","","Indexable","","Example: XGBoost for Classification | TD_XGBoost | Teradata Vantage - TD_XGBoost for Classification - Analytics Database","120","1095","See example of how the Analytics Database (SQL Engine) model training function TD_XGBoost is used for classification.","117","738","","0","Example: XGBoost for Classification | TD_XGBoost | Teradata Vantage - TD_XGBoost for Classification - Analytics Database","120","Database Analytic Functions","27","InputTable","10","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Examples-How-to-Use-TD_XGBoost/TD_XGBoost-for-Classification","","","","","","216692","14170","14170","5.023","A+","261","230","1.135","22.869","Very Hard","12.074","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.443","","","","","","1.1","### Summary

In this guide, we cover basic SQL operations such as `SELECT`, `UPDATE`, `DELETE`, and `CREATE`. These foundational commands are crucial for interacting with databases, allowing users to retrieve, modify, and organize data effectively.

### Code Examples

#### 1. `SELECT`
The `SELECT` statement is used to query data from a database. You can specify which columns to retrieve and filter results using a `WHERE` clause.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

*Example: Retrieve names and ages from the users table where age is greater than 20.*

```sql
SELECT name, age
FROM users
WHERE age > 20;
```

#### 2. `UPDATE`
The `UPDATE` statement modifies existing records in a table based on a specified condition.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

*Example: Update the email of a user with a specific id.*

```sql
UPDATE users
SET email = 'new_email@example.com'
WHERE id = 1;
```

#### 3. `DELETE`
The `DELETE` statement removes records from a table based on a condition.

```sql
DELETE FROM table_name
WHERE condition;
```

*Example: Delete users who have not verified their email.*

```sql
DELETE FROM users
WHERE email_verified = false;
```

#### 4. `CREATE`
The `CREATE` statement creates a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

*Example: Create a new users table with various fields.*

```sql
CREATE TABLE users (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    age INT,
    email_verified BOOLEAN
);
```

### Keywords and Phrases

- SQL Commands
- `SELECT`, `UPDATE`, `DELETE`, `CREATE`
- Data Retrieval
- Record Modification
- Database Management
- Querying Data
- Conditional Statements
- Data Manipulation Language (DML)
- Database Structure
- Table Creation
- SQL Syntax
- Filtering Results
- Updating Records
- Deleting Records
- Defining Data Types

This comprehensive overview provides the basics you need to get started with SQL and manage your data effectively.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Examples-How-to-Use-TD_XGBoost/TD_XGBoost-for-Classification","2024-07-27 11:52:26"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Examples-How-to-Use-TD_XGBoost/TD_XGBoost-for-JSON-Tree-Model-String","text/html;charset=UTF-8","200","","Indexable","","Example: XGBoost for Classification | TD_XGBoost | Teradata Vantage - TD_XGBoost for JSON Tree Model String - Analytics Database","128","1189","See example of how the Analytics Database (SQL Engine) model training function TD_XGBoost is used for a JSON tree model string.","127","810","","0","Example: XGBoost for Classification | TD_XGBoost | Teradata Vantage - TD_XGBoost for JSON Tree Model String - Analytics Database","128","Database Analytic Functions","27","InputTable","10","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Examples-How-to-Use-TD_XGBoost/TD_XGBoost-for-JSON-Tree-Model-String","","","","","","372002","27949","27949","9.908","A+","1004","7488","0.134","0.000","Very Hard","38.002","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","1.149","","","","","","1.1","# Introduction to Teradata Vantage - SQL Operations

Teradata Vantage is a powerful analytics platform that supports various data manipulation operations. This guide covers fundamental SQL operations such as **Select**, **Update**, **Delete**, and **Create** statements in Teradata. These operations are essential for interacting with databases and managing data effectively.

## SQL Operations

### 1. Select
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```
**Example:**
```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```
**Example:**
```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department = 'Sales';
```

### 3. Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```
**Example:**
```sql
DELETE FROM employees
WHERE last_name = 'Smith';
```

### 4. Create
The `CREATE` statement creates a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```
**Example:**
```sql
CREATE TABLE employees (
    employee_id INT,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

## Summary
The basic SQL operations in Teradata Vantage allow users to efficiently manage and manipulate data. The `SELECT`, `UPDATE`, `DELETE`, and `CREATE` commands are foundational for any data interaction.

## Keywords and Phrases
- **SQL Operations** 
- **Select Statement** | **Update Statement** | **Delete Statement** | **Create Statement**
- **Teradata Vantage**
- **Analytics Database**
- **Data Management**
- **Data Manipulation Language (DML)**
- **First Name** | **Last Name**
- **Employee Salary**
- **Department Management**
- **Table Creation**
- **Data Retrieval**
- **Record Modification**
- **Record Deletion**
- **Database Schema** 
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Analytics Database Release Number 17.20**
- **Published June 2022**
- **Last Update April 2024**","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Examples-How-to-Use-TD_XGBoost/TD_XGBoost-for-JSON-Tree-Model-String","2024-07-27 12:17:58"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Examples-How-to-Use-TD_XGBoost/TD_XGBoost-for-Regression","text/html;charset=UTF-8","200","","Indexable","","Example: XGBoost for Regression | TD_XGBoost | Teradata Vantage - TD_XGBoost for Regression - Analytics Database","112","1051","See example of how the Analytics Database (SQL Engine) model training function TD_XGBoost is used for regression.","113","721","","0","Example: XGBoost for Regression | TD_XGBoost | Teradata Vantage - TD_XGBoost for Regression - Analytics Database","112","Database Analytic Functions","27","InputTable","10","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Examples-How-to-Use-TD_XGBoost/TD_XGBoost-for-Regression","","","","","","225686","15158","15158","5.374","A+","272","649","0.419","0.000","Very Hard","14.238","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.548","","","","","","1.1","## Summary

In this guide, we will cover the essential SQL operations for managing data in a database. We will explore how to create, select, update, and delete records using SQL statements. These operations are fundamental for database manipulation, allowing users to manage data effectively.

### Code Example

#### 1. Create
To create a new table in a database, you can use the `CREATE TABLE` statement. In this example, we will create a table called `employees`.

```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    hire_date DATE,
    salary DECIMAL(10, 2)
);
```

#### 2. Select
The `SELECT` statement is used to retrieve data from a database. Here is how to select all records from the `employees` table.

```sql
SELECT * FROM employees;
```

To select specific columns:

```sql
SELECT first_name, last_name FROM employees;
```

#### 3. Update
To modify existing records, you can use the `UPDATE` statement. The following SQL command updates the salary of a specific employee.

```sql
UPDATE employees
SET salary = salary * 1.10
WHERE employee_id = 1;
```

#### 4. Delete
To remove records from a table, use the `DELETE` statement. Here is how to delete an employee record based on their ID.

```sql
DELETE FROM employees
WHERE employee_id = 1;
```

### Keywords and Phrases

- Create Table
- SQL Operations
- Select Statement
- Update Statement
- Delete Statement
- Database Management
- Employee Table
- Data Retrieval
- Data Manipulation
- SQL Syntax
- Primary Key
- Data Types
- Record Modification
- Data Deletion
- Database Query
- SQL Example
- SQL Commands

These examples provide a foundational understanding of how to interact with a database using SQL. By mastering these commands, you will be well-equipped to handle data effectively in relational databases.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Examples-How-to-Use-TD_XGBoost/TD_XGBoost-for-Regression","2024-07-27 11:41:04"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Optional-Syntax-Elements-for-TD_XGBoost","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_XGBoost - Analytics Database","60","563","ModelType Specifies whether the analysis is a regression (continuous response variable) or a multiple-class classification (predicting result from the number of classes). Only Regression and Classification are accepted values. Default: Regression. MaxDepth Specifies a decision tree stopping criterion. If the tree reach...","323","1952","","0","Optional Syntax Elements for TD_XGBoost - Analytics Database","60","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Optional-Syntax-Elements-for-TD_XGBoost","","","","","","213711","14651","14651","5.194","A+","744","171","4.351","68.583","Normal","12.844","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.203","","","","","","1.1","### Summary

In Teradata Vantage, the Analytics Database provides a robust set of functions for data manipulation, model training, and evaluation. This guide will cover the basic SQL operations—Select, Update, Delete, and Create—along with specific examples related to the TD_XGBoost function, which is used for advanced predictive modeling. These operations are fundamental for managing data in an Analytics Database environment, allowing users to efficiently interact with their datasets.

### Code Examples

#### 1. Select
The `SELECT` statement is used to retrieve data from a database.

```sql
SELECT customer_id, customer_name, order_amount
FROM orders
WHERE order_date >= '2023-01-01';
```

#### 2. Update
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE customers
SET status = 'inactive'
WHERE last_order_date < '2023-01-01';
```

#### 3. Delete
The `DELETE` statement is used to remove records from a table.

```sql
DELETE FROM orders
WHERE order_status = 'cancelled';
```

#### 4. Create
The `CREATE` statement is used to create a new table.

```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    email VARCHAR(100),
    registration_date DATE
);
```

#### TD_XGBoost Example
The TD_XGBoost function is a pivotal tool for creating predictive models based on structured data.

```sql
CALL TD_XGBoost(
    'SELECT * FROM training_data',
    'model_output',
    ModelType => 'Classification',
    MaxDepth => 5,
    NumBoostRounds => 10
);
```

### Keywords and Phrases
- **Optional Syntax Elements for TD_XGBoost**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This structured overview provides a foundational understanding of how to interact with an Analytics Database and apply advanced functions like TD_XGBoost for predictive modeling, essential for data scientists and analysts working with Teradata Vantage.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Optional-Syntax-Elements-for-TD_XGBoost","2024-07-27 12:09:00"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Required-Syntax-Elements-for-TD_XGBoost","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_XGBoost - Analytics Database","60","567","InputColumns Specifies the input table columns name that need to be used for training the model (predictors, features, or independent variables). Input column names with double quotation marks are not allowed for this function. ResponseColumn Specifies the column name that contains the class label for classification or...","323","1998","","0","Required Syntax Elements for TD_XGBoost - Analytics Database","60","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Required-Syntax-Elements-for-TD_XGBoost","","","","","","208153","12996","12996","4.607","A+","97","41","2.366","27.384","Very Hard","11.257","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.455","","","","","","1.1","### Summary
The Teradata Vantage™ Analytics Database provides a comprehensive set of analytic functions that facilitate various data manipulation tasks, including selecting, updating, deleting, and creating records in the database. This guide covers the essential SQL commands and their syntax in the context of the Analytics Database, specifically tailored for Teradata's XGBoost and other analytic capabilities.

### Code Examples

#### 1. SELECT
```sql
SELECT column1, column2
FROM my_table
WHERE condition;
```

#### 2. UPDATE
```sql
UPDATE my_table
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 3. DELETE
```sql
DELETE FROM my_table
WHERE condition;
```

#### 4. CREATE
```sql
CREATE TABLE my_table (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Keywords and Phrases
- **Required Syntax Elements for TD_XGBoost** 
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Product Category: Teradata Vantage™**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Workload Management Configuration**
- **Data Cleaning Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Hypothesis Testing Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Function Names with and without TD Prefix**
- **Usage Notes**
- **Examples: How to Use TD_XGBoost**
- **XGBoostPredict for Classification**
- **XGBoostPredict for Regression**
- **TD_DecisionForestPredict**
- **TD_GLMPredict**
- **TD_KMeansPredict**
- **TD_SVMPredict**
- **TD_ClassificationEvaluator**
- **TD_RegressionEvaluator** 

This structured approach makes it easier to navigate the capabilities of the Teradata Vantage™ Analytics Database and understand the functions available for performing data analysis.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Required-Syntax-Elements-for-TD_XGBoost","2024-07-27 11:31:36"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/TD_XGBoost-Input","text/html;charset=UTF-8","200","","Indexable","","TD_XGBoost Input - Analytics Database","37","349","InputTable Schema Column Name Data Type Description input_column INTEGER, BIGINT, SMALLINT, BYTEINT, FLOAT, DECIMAL, NUMBER Columns that function uses to train a XGBoost model. response_column (regression) FLOAT, DECIMAL, NUMBER, INTEGER, BIGINT, SMALLINT, BYTEINT Column that contains the response value for an observat...","323","2174","","0","TD_XGBoost Input - Analytics Database","37","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/TD_XGBoost-Input","","","","","","209460","13177","13177","4.671","A+","98","41","2.390","16.217","Very Hard","11.215","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.579","","","","","","1.1","# Introduction to Analytics Database Analytic Functions

Teradata Vantage™ offers a powerful Analytics Database that supports a variety of analytic functions crucial for data exploration, feature engineering, model training, and evaluation. This document outlines key functions and their applications, enabling users to leverage the full capabilities of Teradata Vantage for advanced analytics.

## Summary of Key Functions

1. **Data Cleaning Functions**: Functions like `Pack` and `StringSimilarity` help in cleaning and preparing data for analysis.
2. **Data Exploration Functions**: Functions such as `MovingAverage` and `TD_CategoricalSummary` facilitate the exploration of data patterns and distributions.
3. **Feature Engineering**: Functions like `TD_OneHotEncoding` and `TD_BinCodeTransform` support the transformation of data into formats suitable for modeling.
4. **Model Training and Scoring**: The platform includes functions like `TD_XGBoost` for model training and `TD_XGBoostPredict` for generating predictions.
5. **Model Evaluation**: Functions such as `TD_Silhouette` and `TD_ClassificationEvaluator` help assess the performance of models.

## Code Examples

### 1. Create
Creating a new table in the Analytics Database to store cleaned data:

```sql
CREATE TABLE cleaned_data (
    id INTEGER,
    name VARCHAR(100),
    value FLOAT
);
```

### 2. Select
Selecting data from the cleaned_data table to analyze values:

```sql
SELECT id, name, value
FROM cleaned_data
WHERE value IS NOT NULL;
```

### 3. Update
Updating a specific record in the cleaned_data table:

```sql
UPDATE cleaned_data
SET value = 100.0
WHERE id = 1;
```

### 4. Delete
Deleting records from the cleaned_data table where value is less than 0:

```sql
DELETE FROM cleaned_data
WHERE value < 0;
```

## Keywords and Phrases
- TD_XGBoost Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Workload Management Configuration
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions

This overview provides a solid foundation for utilizing Teradata’s analytic functions effectively. For further details, refer to the specific function documentation.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/TD_XGBoost-Input","2024-07-27 11:31:24"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/TD_XGBoost-Output","text/html;charset=UTF-8","200","","Indexable","","TD_XGBoost Output - Analytics Database","38","365","Output Table Schema Column Data Type Description task_index SMALLINT Identifier of AMP that produced a boosting tree. tree_num SMALLINT Identifier of boosted tree. Number of unique tree_id values depends on NumBoostedTrees syntax element value and number of AMPs. iter SMALLINT Iteration (boosting round) number. class_n...","323","2090","","0","TD_XGBoost Output - Analytics Database","38","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/TD_XGBoost-Output","","","","","","220287","14558","14558","5.161","A+","578","115","5.026","49.805","Hard","12.092","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.869","","","","","","1.1","# Summary of Teradata Vantage™ Analytics Database Analytic Functions

The Teradata Vantage™ platform provides a comprehensive suite of analytic functions within its Analytics Database to facilitate advanced data analysis, machine learning, and statistical computing. Key functionalities include data cleaning, exploration, feature engineering, model training, scoring, and evaluation. These analytic functions are designed to handle large datasets efficiently, leveraging Teradata's architecture, such as VantageCloud and VantageCore. The platform supports various operations like creating, updating, selecting, and deleting data, which are essential for managing and analyzing data effectively.

## Code Example

Below are sample SQL commands demonstrating basic operations: Select, Update, Delete, and Create.

### 1. Select
```sql
SELECT column1, column2 
FROM your_table 
WHERE condition;
```
*Example: Retrieve employee names and salaries from the employees table where salary is greater than 50000.*
```sql
SELECT name, salary 
FROM employees 
WHERE salary > 50000;
```

### 2. Update
```sql
UPDATE your_table 
SET column1 = value1, column2 = value2 
WHERE condition;
```
*Example: Update the salary of an employee named John to 60000.*
```sql
UPDATE employees 
SET salary = 60000 
WHERE name = 'John';
```

### 3. Delete
```sql
DELETE FROM your_table 
WHERE condition;
```
*Example: Delete all employees with a salary less than 30000.*
```sql
DELETE FROM employees 
WHERE salary < 30000;
```

### 4. Create
```sql
CREATE TABLE your_table (
    column1 datatype,
    column2 datatype,
    ...
);
```
*Example: Create a new table to store department information.*
```sql
CREATE TABLE departments (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    location VARCHAR(100)
);
```

## Keywords and Phrases
- TD_XGBoost Output
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- TD_ Functions
- SQL Commands
- Select, Update, Delete, Create
- Data Manipulation
- Analytics Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Workload Management
- Recommendations for Using Analytic Functions
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Output Table Schema

This summary provides an overview of the analytic capabilities of the Teradata Vantage™ platform, along with essential SQL operations used in data management and analysis.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/TD_XGBoost-Output","2024-07-27 11:42:27"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/TD_XGBoost-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_XGBoost Syntax | XGBoost | Teradata Vantage - TD_XGBoost Syntax - Analytics Database","87","826","See the syntax of the Analytics Database (SQL Engine) function TD_XGBoost and read descriptions of its required and optional syntax elements.","141","887","","0","TD_XGBoost Syntax | XGBoost | Teradata Vantage - TD_XGBoost Syntax - Analytics Database","87","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/TD_XGBoost-Syntax","","","","","","209229","13221","13221","4.687","A+","157","58","2.707","35.965","Hard","11.438","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.610","","","","","","1.1","### Summary

The TD_XGBoost function in Teradata Vantage allows users to implement the XGBoost algorithm for both classification and regression tasks within the analytics database framework. XGBoost is a powerful machine learning method that utilizes gradient boosting techniques to improve predictive accuracy. The function can handle various parameters such as maximum depth of trees, learning rates, and regularization, enabling users to fine-tune their models according to their specific needs.

### Code Example

Here are examples of common SQL operations using the TD_XGBoost function, including `SELECT`, `UPDATE`, `DELETE`, and `CREATE`. 

#### 1. **SELECT Example**
```sql
SELECT *
FROM TD_XGBoost (
  ON my_table AS INPUTTABLE PARTITION BY ANY
  USING
  InputColumns ('feature1', 'feature2', 'feature3')
  ResponseColumn('target')
  ModelType ('classification')
  NumBoostRounds (100)
  LearningRate (0.1)
) AS model_results;
```

#### 2. **CREATE Example**
```sql
CREATE TABLE my_boosted_model AS (
  SELECT *
  FROM TD_XGBoost (
    ON my_training_data AS INPUTTABLE PARTITION BY ANY
    USING
    InputColumns ('feature1', 'feature2', 'feature3')
    ResponseColumn('target')
    ModelType ('regression')
    NumBoostRounds (150)
    LearningRate (0.05)
  )
) WITH NO DATA;
```

#### 3. **UPDATE Example**
```sql
UPDATE my_boosted_model
SET LearningRate = 0.02
WHERE ModelID = '12345';
```

#### 4. **DELETE Example**
```sql
DELETE FROM my_boosted_model
WHERE ModelID = '12345';
```

### Keywords and Phrases
- **TD_XGBoost Syntax**
- **XGBoost**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product: Analytics Database**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Data Cleaning Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Analytic Functions**
- **Regularization Techniques**
- **Hyperparameters**
- **Gradient Boosting**
- **Classification**
- **Regression**
- **Boost Rounds**
- **Learning Rate**
- **Tree Depth**
- **Input Columns**
- **Response Column**
- **AMP Configuration Impact**
- **Data Input and Output**","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/TD_XGBoost-Syntax","2024-07-27 11:45:49"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions","text/html;charset=UTF-8","200","","Indexable","","Path and Pattern Analysis Functions | Teradata Vantage - Path and Pattern Analysis Functions - Analytics Database","113","1025","Learn about the Analytics Database (SQL Engine) functions for analyzing path and patterns.","90","571","","0","Path and Pattern Analysis Functions | Teradata Vantage - Path and Pattern Analysis Functions - Analytics Database","113","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions","","","","","","208510","12937","12937","4.586","A+","60","38","1.579","12.062","Very Hard","11.105","1","3","","707","707","0","99.860","714","712","0","","","","","","","","","0.588","","","","","","1.1","## Summary

Teradata Vantage provides a rich set of analytic functions that facilitate advanced data analysis and manipulation. The Path and Pattern Analysis Functions are particularly powerful for analyzing event sequences, user sessions, and other time-ordered data. This guide covers basic SQL operations—Select, Update, Delete, and Create—alongside examples pertinent to Teradata's analytic capabilities.

## Code Examples

### 1. **Select**

```sql
SELECT customer_id, purchase_date, amount
FROM sales
WHERE purchase_date >= '2023-01-01'
ORDER BY purchase_date DESC;
```

### 2. **Update**

```sql
UPDATE customers
SET loyalty_points = loyalty_points + 100
WHERE customer_id = 12345;
```

### 3. **Delete**

```sql
DELETE FROM orders
WHERE order_date < '2022-01-01';
```

### 4. **Create**

```sql
CREATE TABLE sales_summary (
    customer_id INT,
    total_purchases DECIMAL(10, 2),
    purchase_count INT
);
```

## Keywords and Phrases

- Path and Pattern Analysis Functions
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
  
### Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions

### Usage Notes
- Function Syntax Descriptions
- Input Table Rows Redistribution
- Size of the Query
- AMP Configuration Impact on Function Execution
- Function Names with and without TD Prefix

### Examples and Functions
- Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_SimpleImputeTransform
- Unpack
- MovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- nPath
- Sessionize

This structured overview provides a reference for understanding key functionalities within Teradata Vantage and how to perform fundamental database operations effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions","2024-07-27 11:45:02"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution","text/html;charset=UTF-8","200","","Indexable","","Attribution Function | Teradata Vantage - Attribution - Analytics Database","74","651","This Analytics Database (SQL Engine) function calculates attributions with a wide range of distribution models. It is often used in web-page analysis.","150","914","","0","Attribution Function | Teradata Vantage - Attribution - Analytics Database","74","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution","","","","","","249492","21843","21843","7.743","A+","588","102","5.765","42.431","Hard","12.519","1","4","","707","707","0","99.860","715","713","0","","","","","","","","","0.716","","","","","","1.1","## Summary

The Attribution function in Teradata Vantage is an important tool for analyzing web page performance and understanding the impact of various marketing channels on customer behavior. It allows organizations to assign credit to different web pages or marketing touchpoints based on their contribution to specific outcomes, such as sales or form submissions. By using this function, businesses can optimize their online presence and marketing strategies based on data-driven insights.

## Code Examples

### 1. Create Table
```sql
CREATE TABLE marketing_data (
    channel_id INT,
    channel_name VARCHAR(50),
    conversion_rate FLOAT,
    touchpoints INT
);
```

### 2. Insert Data
```sql
INSERT INTO marketing_data (channel_id, channel_name, conversion_rate, touchpoints)
VALUES
(1, 'Email', 0.15, 1000),
(2, 'Social Media', 0.05, 800),
(3, 'Search Engine', 0.10, 1200);
```

### 3. Select Data
```sql
SELECT channel_name, conversion_rate
FROM marketing_data
WHERE conversion_rate > 0.1;
```

### 4. Update Data
```sql
UPDATE marketing_data
SET conversion_rate = 0.12
WHERE channel_name = 'Social Media';
```

### 5. Delete Data
```sql
DELETE FROM marketing_data
WHERE channel_id = 1;
```

## Keywords and Phrases
- Attribution Function
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Workload Management Configuration
- Avoid Deadlocks
- Non-Deterministic Behavior
- Maximum Number of Columns
- Spool Space Exhaustion
- Recommendations for Using Analytic Functions
- Example Usage and Syntax
- Marketing Channels Analysis
- Customer Journey Analysis
- Probabilistic Models
- Data-Driven Insights
- Optimization of Marketing Strategies
- Attribution Weights
- Touchpoints Analysis","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution","2024-07-27 12:54:03"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Attribution-Input","text/html;charset=UTF-8","200","","Indexable","","Attribution Input - Analytics Database","38","332","Required Table Description Input tables (maximum of five) Contains clickstream data for computing attributions. ConversionEventTable Contains conversion events. FirstModelTable Defines type and distributions of first model. Optional Table Description ExcludedEventTable Contains events to exclude from attribution. Optio...","323","2011","","0","Attribution Input - Analytics Database","38","Database Analytic Functions","27","Required","8","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Attribution-Input","","","","","","219822","14312","14312","5.074","A+","255","79","3.228","13.789","Very Hard","11.221","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.443","","","","","","1.1","## Summary

The Analytics Database provides a suite of analytic functions designed to perform various data analysis tasks, including data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analytics. These functions are essential for deriving insights from data and are commonly used in the context of Teradata Vantage™. This guide covers the fundamental operations of SQL—selecting, updating, deleting, and creating data in a database—alongside practical examples to illustrate their usage.

## Code Examples

### 1. Select
The `SELECT` statement is used to query data from a database.

```sql
SELECT userid_column, event_column, time_column
FROM clickstream_data
WHERE conversion_event = 'purchase';
```

### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE clickstream_data
SET conversion_event = 'purchase_completed'
WHERE conversion_event = 'purchase';
```

### 3. Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM clickstream_data
WHERE userid_column = 12345 AND time_column < '2023-01-01';
```

### 4. Create
The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE clickstream_data (
    userid_column INTEGER,
    event_column VARCHAR(100),
    time_column TIMESTAMP,
    conversion_event VARCHAR(100)
);
```

## Keywords and Phrases

- Attribution Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_OutlierFilterTransform
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- Unpack
- Data Exploration Functions
- MovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- Feature Engineering Transform Functions
- Antiselect
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer
- TD_FunctionFit
- TD_FunctionTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_PolynomialFeaturesFit
- TD_PolynomialFeaturesTransform
- TD_RandomProjectionFit
- TD_RandomProjectionMinComponents
- TD_RandomProjectionTransform
- TD_RowNormalizeFit
- TD_RowNormalizeTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_Unpivoting
- Feature Engineering Utility Functions
- TD_FillRowID
- TD_NumApply
- TD_RoundColumns
- TD_StrApply
- Model Training Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_KNN
- TD_OneClassSVM
- TD_SVM
- TD_VectorDistance
- TD_XGBoost
- Model Scoring Functions
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_OneClassSVMPredict
- TD_SVMPredict
- TD_XGBoostPredict
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- Text Analytic Functions
- NGramSplitter
- TD_NaiveBayesTextClassifierPredict
- TD_NaiveBayesTextClassifierTrainer
- TD_SentimentExtractor
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Testing Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Path and Pattern Analysis Functions
- Attribution
- nPath
- Sessionize
- Teradata Links
- Related Documentation","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Attribution-Input","2024-07-27 12:51:03"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Attribution-Input/Model-Specification","text/html;charset=UTF-8","200","","Indexable","","Model Specification | Attribution | Teradata Vantage - Model Specification - Analytics Database","95","841","Read about Analytics Database (SQL Engine) Attribution function model types, including allowed Model1/Model2 combinations.","122","788","","0","Model Specification | Attribution | Teradata Vantage - Model Specification - Analytics Database","95","Database Analytic Functions","27","Model Types and Specification Definitions","41","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Attribution-Input/Model-Specification","","","","","","220133","14693","14693","5.209","A+","653","187","3.492","41.087","Hard","12.465","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.449","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database offers a robust set of analytic functions for various tasks including model specification, data cleaning, feature engineering, and hypothesis testing. This guide provides essential SQL operations—Select, Update, Delete, and Create—commonly used in database management, along with their corresponding examples. These operations are fundamental for managing and manipulating data within Teradata's powerful analytics framework.

### Code Examples

#### 1. **Select**
The `SELECT` statement is used to retrieve data from one or more tables.
```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE status = 'active';
```

#### 2. **Update**
The `UPDATE` statement modifies existing records in a table.
```sql
UPDATE customers
SET status = 'inactive'
WHERE last_purchase < '2022-01-01';
```

#### 3. **Delete**
The `DELETE` statement removes records from a table.
```sql
DELETE FROM customers
WHERE status = 'inactive' AND last_purchase < '2020-01-01';
```

#### 4. **Create**
The `CREATE TABLE` statement creates a new table in the database.
```sql
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2)
);
```

### Keywords and Phrases

- Model Specification
- Attribution
- Teradata Vantage - Model Specification - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- gjn1627595495337.ditamap
- dita:ditavalPath
- ayr1485454803741.ditaval
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Attribution-Input/Model-Specification","2024-07-27 12:17:37"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Attribution-Output","text/html;charset=UTF-8","200","","Indexable","","Attribution Output - Analytics Database","39","348","Attribution Output Table Schema Column Data Type Description user_id INTEGER or VARCHAR User identifier from input table. event VARCHAR Clickstream event from input table. time_stamp TIMESTAMP Event timestamp from input table. attribution DOUBLE PRECISION Fraction of attribution for conversion event that is attributed ...","323","2062","","0","Attribution Output - Analytics Database","39","Database Analytic Functions","27","Attribution Output Table Schema","31","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Attribution-Output","","","","","","210066","13231","13231","4.690","A+","97","42","2.310","4.765","Very Hard","11.170","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.568","","","","","","1.1","## Summary

This document serves as an overview of the Teradata Vantage™ Analytics Database features and analytic functions. It provides a detailed guide on how to utilize various SQL commands, such as SELECT, UPDATE, DELETE, and CREATE, alongside an introduction to the analytic functions available within the analytics database.

### Code Example

#### SELECT
To retrieve data from a table, you can use the SELECT statement:
```sql
SELECT user_id, event, time_stamp
FROM user_events
WHERE time_stamp >= '2024-01-01';
```

#### UPDATE
To modify existing records in a table, the UPDATE statement is used:
```sql
UPDATE user_events
SET attribution = attribution * 1.1
WHERE event = 'purchase';
```

#### DELETE
To remove records from a table, you can use the DELETE statement:
```sql
DELETE FROM user_events
WHERE time_stamp < '2023-01-01';
```

#### CREATE
To create a new table, you can use the CREATE TABLE statement:
```sql
CREATE TABLE user_events (
    user_id INTEGER,
    event VARCHAR(255),
    time_stamp TIMESTAMP,
    attribution DOUBLE PRECISION
);
```

### Keywords and Phrases

- **Attribution Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number** - 17.20
- **Published** - June 2022
- **Language** - English (United States)
- **Last Update** - 2024-04-06
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category** - Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Recommendations for Using Analytic Functions**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Attribution-Output","2024-07-27 11:46:47"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Attribution-Syntax","text/html;charset=UTF-8","200","","Indexable","","Attribution Function Syntax | Teradata Vantage - Attribution Syntax - Analytics Database","88","781","See the syntax of Analytics Database (SQL Engine) function Attribution and read descriptions of its required and optional syntax elements.","138","852","","0","Attribution Function Syntax | Teradata Vantage - Attribution Syntax - Analytics Database","88","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Attribution-Syntax","","","","","","209397","13101","13101","4.644","A+","158","60","2.633","28.001","Very Hard","11.412","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.507","","","","","","1.1","# Teradata Vantage - Attribution Function Syntax

## Summary
Teradata Vantage provides a robust analytics database that supports various functions for data manipulation and analysis. The Attribution function is particularly useful for analyzing user interactions and events across different channels. This guide covers the essential SQL operations: SELECT, UPDATE, DELETE, and CREATE, along with the specific syntax for the Attribution function.

## Code Examples

### 1. SELECT
The SELECT statement is used to query data from a database.

```sql
SELECT user_id, event_column, time_column
FROM event_table
WHERE event_column = 'purchase';
```

### 2. UPDATE
The UPDATE statement modifies existing records in a table.

```sql
UPDATE user_profiles
SET last_login = CURRENT_TIMESTAMP
WHERE user_id = 1234;
```

### 3. DELETE
The DELETE statement removes records from a table.

```sql
DELETE FROM session_data
WHERE session_id = 'abcd1234';
```

### 4. CREATE
The CREATE statement is used to create a new table or view.

```sql
CREATE TABLE user_events (
    user_id INT,
    event_column VARCHAR(255),
    time_column TIMESTAMP
);
```

### 5. Attribution Function Syntax
The Attribution function allows for deep analysis of user interactions with various events.

```sql
ATTRIBUTION (
    ON { table | view | (query) } [ AS InputTable1 ]
        PARTITION BY user_id 
        ORDER BY times_column
    [ ON { table | view | (query) } [ AS InputTable2 ]
        PARTITION BY user_id 
        ORDER BY time_column [,...] ]
    ON conversion_event_table AS ConversionEventTable DIMENSION
    [ ON excluding_event_table AS ExcludedEventTable DIMENSION ]
    [ ON optional_event_table AS OptionalEventTable DIMENSION ]
    ON model1_table AS FirstModelTable DIMENSION
    [ ON model2_table AS SecondModelTable DIMENSION ]
    USING
    EventColumn ('event_column')
    TimeColumn ('time_column')
    WindowSize ({'rows:K' | 'seconds:K' | 'rows:K&seconds:K2'})
) ORDER BY user_id, time_stamp;
```

## Keywords and Phrases
- Attribution Function Syntax
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Enterprise Edition
- IntelliFlex
- VMware
- Product: Teradata Vantage™
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Data Cleaning Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- nPath
- Sessionize
- ORDER BY Clause
- PARTITION BY Clause
- CREATE TABLE Statement
- UPDATE Statement
- DELETE Statement
- SELECT Statement","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Attribution-Syntax","2024-07-27 12:41:41"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Attribution-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","Attribution Syntax Elements - Analytics Database","48","436","EventColumn Specify the name of the input column that contains the clickstream events. TimeColumn Specify the name of the input column that contains the timestamps of the clickstream events. WindowSize Specify how to determine the maximum window size for the attribution calculation: Option Description rows:K Assign att...","323","2039","","0","Attribution Syntax Elements - Analytics Database","48","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Attribution-Syntax-Elements","","","","","","209728","13258","13258","4.700","A+","132","51","2.588","38.212","Hard","11.275","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.531","","","","","","1.1","## Summary

This document provides an overview of the Teradata Vantage™ Analytics Database, focusing on its analytic functions, including data cleaning, exploration, feature engineering, model training, scoring, and evaluation. These functions help users to manipulate and analyze data effectively, enabling advanced analytics and machine learning tasks. The document also details the syntax and examples for various functions, ensuring users can implement them correctly in their queries.

### Code Example

Here are examples of SQL commands commonly used in database management, including `SELECT`, `UPDATE`, `DELETE`, and `CREATE` statements.

#### 1. SELECT
```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```
This command retrieves the first and last names of employees in the Sales department.

#### 2. UPDATE
```sql
UPDATE employees
SET salary = salary * 1.10
WHERE performance_rating = 'Excellent';
```
This command updates the salary of employees with an excellent performance rating by increasing it by 10%.

#### 3. DELETE
```sql
DELETE FROM employees
WHERE hire_date < '2010-01-01';
```
This command deletes records of employees who were hired before January 1, 2010.

#### 4. CREATE
```sql
CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(100)
);
```
This command creates a new table named `departments` with columns for department ID and name.

### Keywords and Phrases
- Attribution
- Syntax Elements
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- AMP Configuration Impact on Function Execution
- Recommendations for Using Analytic Functions
- Hypothesis Test Types
- TD Functions (Various)
- nPath
- Sessionize
- Workload Management Configuration
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency

This summary and the provided examples offer a foundational understanding of Teradata Vantage™ functionalities related to analytics databases and SQL operations.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Attribution-Syntax-Elements","2024-07-27 11:40:25"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Example-Model-Assigns-Attribution-Weights-to-Events-and-Channels","text/html;charset=UTF-8","200","","Indexable","","Attribution Function Example | Teradata Vantage - Example: Model Assigns Attribution Weights to Events and Channels - Analytics Database","136","1247","See example of Analytics Database (SQL Engine) function Attribution that uses models to assign attribution weights to these events and channels.","144","902","","0","Attribution Function Example | Teradata Vantage - Example: Model Assigns Attribution Weights to Events and Channels - Analytics Database","136","Database Analytic Functions","27","Event Type Channels","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Example-Model-Assigns-Attribution-Weights-to-Events-and-Channels","","","","","","228187","15162","15162","5.375","A+","385","208","1.851","34.877","Hard","11.417","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.674","","","","","","1.1","### Summary
The Teradata Vantage Analytics Database provides a variety of analytic functions that can be used for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. Among these functions, the Attribution function is particularly useful for assigning attribution weights to events and channels based on user interactions. This enables businesses to analyze and optimize their marketing efforts effectively.

### Code Example
Below are SQL code snippets for performing basic database operations such as `Select`, `Update`, `Delete`, and `Create`.

#### 1. Select
```sql
SELECT user_id, event, time_stamp 
FROM attribution_sample_table1 
WHERE user_id = 1;
```

#### 2. Update
```sql
UPDATE attribution_sample_table1 
SET event = 'SocialNetwork' 
WHERE user_id = 1 AND time_stamp = '2022-09-27 23:00:19';
```

#### 3. Delete
```sql
DELETE FROM attribution_sample_table1 
WHERE user_id = 2 AND event = 'impression';
```

#### 4. Create
```sql
CREATE TABLE attribution_sample_table1 (
    user_id INT,
    event VARCHAR(50),
    time_stamp TIMESTAMP
);
```

### Keywords and Phrases
- **Attribution Function Example**
- **Teradata Vantage**
- **Model Assigns Attribution Weights to Events and Channels**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Limitations**
- **Recommendations**
- **Syntax Elements**
- **Input Table**
- **Output Table**
- **Example Usage**
- **Event Type**
- **Conversion Events**
- **Excluding Events**
- **Optional Events**
- **Partition By**
- **Window Size**
- **Attribution Output**

This guide serves as a foundational reference for utilizing Teradata's analytic capabilities effectively in a business context.","26","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Example-Model-Assigns-Attribution-Weights-to-Events-and-Channels","2024-07-27 12:18:54"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize","text/html;charset=UTF-8","200","","Indexable","","Sessionize Function | Teradata Vantage - Sessionize - Analytics Database","72","653","This Analytics Database (SQL Engine) function maps each click in clickstream to unique session identifier.","106","649","","0","Sessionize Function | Teradata Vantage - Sessionize - Analytics Database","72","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize","","","","","","211140","13916","13916","4.933","A+","391","81","4.827","46.150","Hard","11.970","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","1.744","","","","","","1.1","## Summary of Teradata Vantage and Sessionize Function

Teradata Vantage is an advanced analytics database that offers a wide range of analytic functions for data analysis and modeling. Among its many features, the **Sessionize** function stands out for its ability to group user clicks into sessions based on time intervals. This is crucial for understanding user behavior on websites, enhancing personalization, and improving conversion rates while also aiding in fraud detection.

The **Sessionize** function operates by identifying sequences of clicks made by a user that occur within a specified time frame, thus creating unique identifiers for each session. This functionality allows businesses to better analyze clickstream data and derive insights about user interactions.

## Code Example Section

Here are examples showcasing the fundamental SQL operations: **Select**, **Update**, **Delete**, and **Create**.

### 1. Select
This statement retrieves data from a specified table.

```sql
SELECT user_id, click_time, page_url 
FROM clickstream_data 
WHERE click_time >= '2023-01-01' 
ORDER BY click_time;
```

### 2. Update
This statement updates existing records in a table.

```sql
UPDATE clickstream_data 
SET session_id = 'new_session_id' 
WHERE user_id = 12345 AND click_time < '2023-01-02';
```

### 3. Delete
This statement removes records from a table.

```sql
DELETE FROM clickstream_data 
WHERE session_id IS NULL 
AND click_time < '2023-01-01';
```

### 4. Create
This statement creates a new table in the database.

```sql
CREATE TABLE session_data (
    session_id VARCHAR(50),
    user_id INT,
    start_time TIMESTAMP,
    end_time TIMESTAMP,
    click_count INT
);
```

## Keywords and Phrases
- **Sessionize Function**
- **Teradata Vantage**
- **Sessionize**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **English (United States)**
- **Last Update**
- **Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Sessionization**
- **Clickstream Data**
- **User Behavior**
- **Personalization**
- **Fraud Detection**
- **Conversion Rates** 

This structured approach to using Teradata Vantage and the Sessionize function allows organizations to leverage their data for impactful insights and improvements.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize","2024-07-27 11:33:01"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Example-How-to-Use-Sessionize","text/html;charset=UTF-8","200","","Indexable","","Sessionize Function Example | Teradata Vantage - Example: How to Use Sessionize - Analytics Database","100","929","See an example of the Analytics Database (SQL Engine) function Sessionize.","74","469","","0","Sessionize Function Example | Teradata Vantage - Example: How to Use Sessionize - Analytics Database","100","Database Analytic Functions","27","Sessionize Input","16","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Example-How-to-Use-Sessionize","","","","","","231106","14750","14750","5.229","A+","417","185","2.254","100.000","Very Easy","11.102","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.700","","","","","","1.1","## Summary

In Teradata Vantage, the Sessionize function is a powerful analytic tool used to group user interactions into sessions based on a specified time interval. This is particularly useful in analyzing user behavior over time on platforms such as e-commerce sites, where understanding session patterns can inform marketing and operational strategies.

The function allows you to define a time column, a timeout period for session separation, and a lag time to differentiate between clicks. The output is a detailed view of user interactions, complete with session IDs and lag indicators, facilitating deeper insights into user engagement.

## Code Examples

### 1. Select
```sql
SELECT * FROM sessionize_table;
```

### 2. Insert
```sql
INSERT INTO sessionize_table (clicktime, userid, productname, pagetype, referrer, productprice)
VALUES ('2023-03-17 12:30:00', 12345, 'Galaxy', 'Checkout', 'www.example.com', 799.99);
```

### 3. Update
```sql
UPDATE sessionize_table
SET productprice = 749.99
WHERE userid = 12345 AND productname = 'Galaxy';
```

### 4. Delete
```sql
DELETE FROM sessionize_table
WHERE userid = 12345 AND clicktime < '2023-03-17 12:00:00';
```

### 5. Sessionize Function Example
```sql
SELECT * FROM SESSIONIZE (
  ON sessionize_table PARTITION BY userid ORDER BY clicktime
  USING
  TimeColumn ('clicktime')
  TimeOut (300)
  ClickLag (0.2)
) ORDER BY userid, clicktime;
```

### Output Explanation
The output will display each user's clicks while generating a unique session ID for interactions separated by the timeout period (in this case, 5 minutes). The ClickLag column indicates whether the time between clicks is less than the specified lag time.

## Keywords and Phrases

- Sessionize Function Example
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Release Number
- Published
- Language
- Last Update
- Product Category
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- SQL Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Example: How to Use Sessionize
- ClickLag
- TimeOut
- TimeColumn
- SessionID
- User Engagement Analysis
- E-commerce Analytics
- User Interaction Patterns
- Session Management","26","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Example-How-to-Use-Sessionize","2024-07-27 12:43:33"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Optional-Syntax-Elements-for-Sessionize","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for Sessionize - Analytics Database","60","547","ClickLag Specify the minimum number of seconds (lag) between clicks, such as 0.2 seconds between each click, for the session user to be considered human. If time between clicks is less than the lag timeframe, indicating that the user is a bot, the function ignores the session. The minimum lag must be less than the time...","323","1975","","0","Optional Syntax Elements for Sessionize - Analytics Database","60","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Optional-Syntax-Elements-for-Sessionize","","","","","","208419","13130","13130","4.655","A+","147","50","2.940","52.492","Fairly Hard","11.365","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.841","","","","","","1.1","# Overview of Teradata Vantage™ Analytics Database Functions

The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions designed to perform various tasks, including data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This guide introduces basic SQL operations (Select, Update, Delete, and Create) and highlights key components relevant to the Analytics Database.

## Code Examples

### 1. **Create a Table**
```sql
CREATE TABLE customer_data (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    join_date DATE
);
```

### 2. **Select Data**
```sql
SELECT customer_id, customer_name 
FROM customer_data 
WHERE join_date > '2022-01-01';
```

### 3. **Update Data**
```sql
UPDATE customer_data 
SET customer_name = 'John Doe' 
WHERE customer_id = 1;
```

### 4. **Delete Data**
```sql
DELETE FROM customer_data 
WHERE customer_id = 2;
```

## Summary

The Teradata Vantage™ Analytics Database is structured to support a wide range of analytic functions, making it a robust tool for data scientists and analysts. The above SQL examples demonstrate basic database operations, which can be combined with more advanced analytics functions provided by the platform.

## Keywords and Phrases

- **Optional Syntax Elements for Sessionize**
- **Analytics Database**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Release Number 17.20**
- **Published June 2022**
- **English (United States)**
- **Last Update 2024-04-06**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact**
- **Limitations with PARTITION BY**
- **Non-Deterministic Behavior**
- **Spool Space Exhaustion**
- **Recommendations for Using Analytic Functions**
- **NGramSplitter**
- **TD_DecisionForest**
- **TD_GLMPredict**
- **TD_SVMPredict**
- **TD_XGBoostPredict**
- **Sessionize Functionality**
- **ClickLag Parameter**
- **EmitNull Option**

These elements provide a foundational understanding of the capabilities and functionalities of the Teradata Vantage™ Analytics Database, enabling users to leverage its full potential in their data analytics tasks.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Optional-Syntax-Elements-for-Sessionize","2024-07-27 11:39:27"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Required-Syntax-Elements-for-Sessionize","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for Sessionize - Analytics Database","60","551","ON clause Accepts the clickstream input. TimeColumn Specify the name of the input column that contains the click times. The time_column must also be an order_column. TimeOut Specify the number of seconds that the session times out. If timeout seconds elapse after a click, then the next click starts a new session. The d...","323","1997","","0","Required Syntax Elements for Sessionize - Analytics Database","60","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Required-Syntax-Elements-for-Sessionize","","","","","","208141","12962","12962","4.595","A+","104","43","2.419","44.128","Hard","11.257","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.865","","","","","","1.1","## Summary

This document provides an overview of key functionalities and operations within the Teradata Vantage™ Analytics Database, particularly focusing on the analytic functions available for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. It details the required syntax elements for various functions and explains how to effectively use these functions for data manipulation and analysis. 

### Code Examples

Below are examples demonstrating basic SQL operations commonly used in an analytics database context. 

#### Select
```sql
SELECT first_name, last_name, email 
FROM users 
WHERE active = 1 
ORDER BY last_name;
```

#### Update
```sql
UPDATE users 
SET last_login = CURRENT_TIMESTAMP 
WHERE user_id = 102;
```

#### Delete
```sql
DELETE FROM users 
WHERE last_login < DATEADD(year, -1, CURRENT_TIMESTAMP);
```

#### Create
```sql
CREATE TABLE user_activity (
    user_id INT,
    activity_date DATE,
    activity_type VARCHAR(50)
);
```

### Keywords and Phrases

- **Required Syntax Elements for Sessionize**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Schemas**
- **Function Syntax Descriptions**
- **Function Names with and without TD Prefix**
- **Limitations When Using PARTITION BY**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**

This structured approach aids users in effectively leveraging the functionality of the Teradata Vantage Analytics Database for their data analysis needs.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Required-Syntax-Elements-for-Sessionize","2024-07-27 12:46:52"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Sessionize-Input","text/html;charset=UTF-8","200","","Indexable","","Sessionize Input - Analytics Database","37","333","Input Table Schema Column Data Type Description time_column TIME, TIMESTAMP, INTEGER, BIGINT, SMALLINT, or DATE Click times (in milliseconds if data type is INTEGER, BIGINT, or SMALLINT). session_timeout DOUBLE PRECISION Timeout threshold for a session. partition_column Any Column that partitions input. Input data must...","323","2087","","0","Sessionize Input - Analytics Database","37","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Sessionize-Input","","","","","","210759","13783","13783","4.886","A+","201","56","3.589","35.675","Hard","11.435","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.538","","","","","","1.1","## Summary of Teradata Vantage™ Analytics Database Functions

The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions aimed at data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analytics. This powerful platform, released in June 2022 (Version 17.20), is designed for enterprises leveraging Teradata’s advanced analytic capabilities. Users can perform complex data manipulations and analyses efficiently, enabling better insights and decision-making processes.

### Code Examples

#### 1. **Create**
Creating a new table in Teradata Analytics Database:
```sql
CREATE TABLE sales_data (
    order_id INTEGER,
    product_name VARCHAR(100),
    quantity INTEGER,
    order_date TIMESTAMP
);
```

#### 2. **Select**
Selecting data from the table:
```sql
SELECT product_name, SUM(quantity) AS total_quantity
FROM sales_data
GROUP BY product_name;
```

#### 3. **Update**
Updating existing records in the table:
```sql
UPDATE sales_data
SET quantity = quantity + 10
WHERE product_name = 'Widget';
```

#### 4. **Delete**
Deleting records from the table:
```sql
DELETE FROM sales_data
WHERE order_date < '2023-01-01';
```

### Keywords and Phrases

- Sessionize Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Workload Management Configuration
- Avoid Deadlocks
- Recommendations for Using Analytic Functions
- TD_ConvertTo
- TD_GetRowsWithoutMissingValues
- TD_CategoricalSummary
- TD_Histogram
- TD_Silhouette
- TD_XGBoost
- TD_NaiveBayesTextClassifierPredict
- nPath
- Sessionize
- Input Table Schema
- Click times
- Session timeout
- Partition column
- Order column

This structured approach allows users to efficiently create, manipulate, and analyze their data, leveraging the full capabilities of the Teradata Vantage™ Analytics Database.","26","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Sessionize-Input","2024-07-27 11:24:13"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Sessionize-Output","text/html;charset=UTF-8","200","","Indexable","","Sessionize Output - Analytics Database","38","349","Output Table Schema Column Data Type Description input_column Same as in input table Column copied from input table. Function copies every input_column to output table. sessionid INTEGER or BIGINT Identifier that function assigned to session. clicklag BYTEINT Indicator that there were lags between clicks. Values are 1 ...","323","2013","","0","Sessionize Output - Analytics Database","38","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Sessionize-Output","","","","","","209481","13282","13282","4.709","A+","97","42","2.310","27.441","Very Hard","11.179","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.612","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a robust set of analytic functions that facilitate data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This guide covers essential SQL operations—Select, Update, Delete, and Create—alongside relevant keywords and phrases related to the Analytics Database.

---

## Code Example

### 1. Create
To create a new table in the database, you can use the following SQL command:

```sql
CREATE TABLE user_data (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(50),
    user_email VARCHAR(100)
);
```

### 2. Select
To retrieve data from the table, you can use the SELECT statement:

```sql
SELECT user_id, user_name, user_email
FROM user_data
WHERE user_id > 10;
```

### 3. Update
To update existing records in the table, you can use the UPDATE statement:

```sql
UPDATE user_data
SET user_email = 'new_email@example.com'
WHERE user_id = 1;
```

### 4. Delete
To delete records from the table, the DELETE statement can be used:

```sql
DELETE FROM user_data
WHERE user_id = 1;
```

---

## Keywords and Phrases

- **Sessionize Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number** - 17.20
- **Published** - June 2022
- **Language** - English (United States)
- **Last Update** - 2024-04-06
- **dita:mapPath** - gjn1627595495337.ditamap
- **dita:ditavalPath** - ayr1485454803741.ditaval
- **dita:id** - jmh1512506877710
- **Product Category** - Teradata Vantage™
  
### Analytic Functions Categories
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**

### Important Notes
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Recommendations for Using Analytic Functions**

This structure provides a foundational understanding for using the Teradata Vantage™ Analytics Database, while the SQL commands serve as practical examples for data manipulation.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Sessionize-Output","2024-07-27 12:09:38"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Sessionize-Syntax","text/html;charset=UTF-8","200","","Indexable","","Sessionize Function Syntax | Teradata Vantage - Sessionize Syntax - Analytics Database","86","783","See the syntax of Analytics Database (SQL Engine) function Sessionize and read descriptions of its required and optional syntax elements.","137","850","","0","Sessionize Function Syntax | Teradata Vantage - Sessionize Syntax - Analytics Database","86","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Sessionize-Syntax","","","","","","208455","12997","12997","4.608","A+","115","50","2.300","54.427","Fairly Hard","11.279","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.545","","","","","","1.1","### Summary

Teradata Vantage offers a comprehensive suite of analytic functions designed to facilitate data manipulation, exploration, and modeling. Among these functions, the `SESSIONIZE` function stands out as a critical tool for transforming data into a session-based format. This function organizes events into sessions based on specified time intervals, allowing for deeper analysis of user interactions over time.

### Code Example

Here’s a brief overview of the basic SQL operations: Select, Update, Delete, and Create, followed by an example of the `SESSIONIZE` function.

#### 1. SELECT
Used to retrieve data from a database.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

#### 2. UPDATE
Used to modify existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 3. DELETE
Used to remove records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

#### 4. CREATE
Used to create a new table, view, or other database objects.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

#### 5. SESSIONIZE Function
This function groups data into sessions based on a defined timeout period.

```sql
SELECT *
FROM SESSIONIZE (
    ON events_table
    PARTITION BY user_id
    ORDER BY event_time
    USING
    TimeColumn ('event_time')
    TimeOut (30 MINUTE)
);
```

### Keywords and Phrases
- **Sessionize Function Syntax**
- **Teradata Vantage - Sessionize Syntax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware Product**
- **Analytics Database Release Number**
- **Published June 2022**
- **Language English (United States)**
- **Last Update 2024-04-06**
- **Analytics Database™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Recommendations for Using Analytic Functions**
- **Examples of Functions (e.g., Pack, StringSimilarity, TD_ConvertTo)**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Displaying Online Help for Functions** 

This structure provides a systematic overview of key concepts and examples relevant to Teradata Vantage's analytic capabilities.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Sessionize-Syntax","2024-07-27 12:54:19"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Terminology","text/html;charset=UTF-8","200","","Indexable","","Analytics Database Analytic Function Terminology | Teradata Vantage - Terminology - Analytics Database","102","935","Learn the terms used in descriptions of Analytics Database (SQL Engine) analytic functions.","91","565","","0","Analytics Database Analytic Function Terminology | Teradata Vantage - Terminology - Analytics Database","102","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Terminology","","","","","","209095","13159","13159","4.665","A+","147","47","3.128","47.122","Hard","11.338","1","4","","707","707","0","99.860","710","708","0","","","","","","","","","8.397","","","","","","1.1","### Overview of Teradata Vantage Analytics Database

Teradata Vantage™ provides an advanced analytics database that integrates data warehousing with analytics capabilities. This allows users to perform high-level data analytics directly within the database using various analytic functions. The analytics database can be deployed in different environments including VantageCloud, VantageCore, and on VMware and IntelliFlex platforms.

### Key Functional Areas of the Analytics Database

- **Data Cleaning Functions**: Functions to prepare data for analysis.
- **Data Exploration Functions**: Tools for summarizing and exploring data.
- **Feature Engineering Functions**: Functions to enhance model performance by transforming data.
- **Model Training and Scoring Functions**: Functions for building and evaluating predictive models.
- **Text Analytic Functions**: Tools for processing and analyzing text data.
- **Hypothesis Testing Functions**: Statistical methods for testing hypotheses.

### Code Examples

Below are examples of common SQL operations (Select, Update, Delete, Create) in the context of Teradata Vantage's analytic database.

#### 1. **Select**
Retrieve data from a table with analytic functions for data exploration.

```sql
SELECT 
    customer_id,
    AVG(sales) OVER (PARTITION BY region ORDER BY sales_date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS avg_sales_last_6_months
FROM 
    sales_data
WHERE 
    sales_date >= '2023-01-01';
```

#### 2. **Update**
Update an existing record in a table.

```sql
UPDATE customer_data
SET loyalty_points = loyalty_points + 100
WHERE customer_id = 12345;
```

#### 3. **Delete**
Remove records from a table based on a condition.

```sql
DELETE FROM sales_data
WHERE sales_date < '2022-01-01';
```

#### 4. **Create**
Create a new table to store aggregated sales data.

```sql
CREATE TABLE monthly_sales AS (
    SELECT 
        customer_id,
        EXTRACT(YEAR FROM sales_date) AS sales_year,
        EXTRACT(MONTH FROM sales_date) AS sales_month,
        SUM(sales_amount) AS total_sales
    FROM 
        sales_data
    GROUP BY 
        customer_id, sales_year, sales_month
) WITH DATA;
```

### Summary

Teradata Vantage's analytics database provides a powerful platform for conducting extensive data analysis through its comprehensive set of analytic functions and SQL capabilities. Users can efficiently clean, explore, and transform data while leveraging model training and evaluation functions to derive insights.

### Keywords and Phrases
- **Analytics Database**
- **Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering**
- **Model Training**
- **Model Scoring**
- **Text Analytic Functions**
- **Hypothesis Testing**
- **Teradata Vantage™**
- **Deployment Options**: VantageCloud, VantageCore, VMware, IntelliFlex
- **SQL Operations**: Select, Update, Delete, Create
- **Analytic Function Categories**
- **Business Intelligence**
- **Data Warehousing**
- **Data Summarization**
- **Statistical Analysis**
- **Predictive Analytics**","25","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Terminology","2024-07-27 12:26:41"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath","text/html;charset=UTF-8","200","","Indexable","","nPath Function | Teradata Vantage - nPath - Analytics Database","62","567","Given conditions and a pattern in the row sequence, this Analytics Database pattern-matching function extracts useful information from the row sequence.","152","955","","0","nPath Function | Teradata Vantage - nPath - Analytics Database","62","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath","","","","","","419047","165889","165889","58.808","A+","371","81","4.580","60.806","Normal","6.099","1","4","","707","707","0","99.860","724","717","0","","","","","","","","","1.352","","","","","","1.1","## Summary

The nPath function in Teradata Vantage is a powerful analytics tool designed to analyze row patterns within datasets. It allows users to specify complex patterns to identify paths that lead to specific outcomes. This can be applied across various domains, such as web click analysis, industrial process monitoring, healthcare risk assessment, and financial fraud detection.

### Code Example Section

Here's a basic overview of SQL commands for different operations within a Teradata database, including Create, Select, Update, and Delete:

```sql
-- Create a new table
CREATE TABLE Sales (
    SaleID INT,
    ProductName VARCHAR(100),
    SaleAmount DECIMAL(10,2),
    SaleDate DATE
);

-- Insert data into the table
INSERT INTO Sales (SaleID, ProductName, SaleAmount, SaleDate) 
VALUES (1, 'Laptop', 1200.00, '2023-04-01');

-- Select data from the table
SELECT * FROM Sales;

-- Update a record in the table
UPDATE Sales 
SET SaleAmount = 1100.00 
WHERE SaleID = 1;

-- Delete a record from the table
DELETE FROM Sales 
WHERE SaleID = 1;
```

### Keywords and Phrases

- **nPath Function**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware Product**
- **Release Number 17.20**
- **Published June 2022**
- **English (United States)**
- **Last Update April 2024**
- **Data Cleaning Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Input Table Rows Redistribution**
- **AMP Configuration Impact on Function Execution**
- **Function Syntax Descriptions**
- **Data Exploration Functions**
- **TD Functions (e.g., TD_ConvertTo, TD_KMeans, TD_XGBoost)**
- **SQL Operations (Select, Update, Delete, Create)**
- **nPath Patterns and Filters**
- **nPath Syntax Elements**
- **Sankey Diagram of Analytics Database nPath Output**
- **UTF8 Client Character Set**
- **ASCII Collation Support**
- **Normalization Form C (NFC)**

This summary and code examples provide a foundational understanding of the nPath function and its applications within Teradata Vantage, along with essential SQL operations for database management.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath","2024-07-27 11:46:19"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples","text/html;charset=UTF-8","200","","Indexable","","nPath Function Example | Teradata Vantage - nPath Examples - Analytics Database","79","741","See examples of the Analytics Database (SQL Engine) function nPath.","67","430","","0","nPath Function Example | Teradata Vantage - nPath Examples - Analytics Database","79","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples","","","","","","209209","13436","13436","4.763","A+","118","45","2.622","42.860","Hard","11.266","1","5","","707","707","0","99.860","714","711","0","","","","","","","","","0.732","","","","","","1.1","# Teradata Vantage - nPath Function Overview

The `nPath` function in Teradata Vantage provides advanced capabilities for pattern matching and path analysis in data. It is particularly useful for analyzing sequences of events, such as user interactions or transactions over time. `nPath` allows users to specify patterns that they want to track, making it invaluable for applications in web analytics, customer behavior analysis, and more.

## Summary
The `nPath` function enables users to extract and analyze patterns from sequences of data. It operates on a table of events and allows for complex queries that can identify paths of interest within the data, taking advantage of various predicates and conditions to filter and aggregate results.

## Code Examples

### 1. Create
To create a table to store event data for analysis:

```sql
CREATE TABLE user_events (
    user_id INT,
    event_type VARCHAR(50),
    event_time TIMESTAMP
);
```

### 2. Insert
Inserting sample data into the `user_events` table:

```sql
INSERT INTO user_events (user_id, event_type, event_time) VALUES
(1, 'page_view', '2023-04-01 10:00:00'),
(1, 'add_to_cart', '2023-04-01 10:05:00'),
(1, 'checkout', '2023-04-01 10:10:00'),
(2, 'page_view', '2023-04-01 10:02:00'),
(2, 'add_to_cart', '2023-04-01 10:06:00'),
(2, 'checkout', '2023-04-01 10:12:00');
```

### 3. Select
Using the `nPath` function to find user paths:

```sql
SELECT user_id, 
       nPath(event_type ORDER BY event_time) AS user_path
FROM user_events
GROUP BY user_id;
```

### 4. Update
Updating an event type for a specific user:

```sql
UPDATE user_events
SET event_type = 'home_page'
WHERE user_id = 1 AND event_type = 'page_view';
```

### 5. Delete
Deleting events for a specific user:

```sql
DELETE FROM user_events
WHERE user_id = 2 AND event_type = 'checkout';
```

## Keywords and Phrases
- nPath Function Example
- Teradata Vantage - nPath Examples
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Recommendations for Using Analytic Functions
- TD_ prefix for function names
- Sessionize
- Path Analysis
- Event Sequencing
- Pattern Matching
- User Behavior Analysis
- SQL Syntax for nPath
- Aggregation Techniques
- Clickstream Data Analysis
- Path Filtering and Conditions","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples","2024-07-27 12:02:03"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/Symbols-and-Symbol-Predicates-That-Examples-Use","text/html;charset=UTF-8","200","","Indexable","","Symbols and Symbol Predicates That Examples Use - Analytics Database","68","650","Symbol Symbol Predicate A pageid IN (10, 25) B category = 10 OR (category = 20 AND pageid <> 33) C category IN (SELECT pageid FROM clicks1 GROUP BY userid HAVING COUNT(*) > 10) D referrer LIKE '%Amazon%' X TRUE","210","1376","","0","Symbols and Symbol Predicates That Examples Use - Analytics Database","68","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/Symbols-and-Symbol-Predicates-That-Examples-Use","","","","","","209207","13162","13162","4.666","A+","86","39","2.205","46.218","Hard","11.129","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.879","","","","","","1.1","# Overview of Teradata Vantage Analytics Database

The Teradata Vantage Analytics Database is a powerful platform designed for performing advanced analytical functions on large datasets. The system supports a variety of functions that facilitate data cleaning, exploration, feature engineering, model training, evaluation, and scoring. It provides an environment for users to derive insights from data through sophisticated analytic functions.

## Code Examples

### 1. Create
To create a new table in the analytics database:
```sql
CREATE TABLE sales_data (
    sale_id INT,
    product_name VARCHAR(100),
    sale_amount DECIMAL(10,2),
    sale_date DATE
);
```

### 2. Select
To retrieve data from the sales_data table:
```sql
SELECT product_name, SUM(sale_amount) AS total_sales
FROM sales_data
GROUP BY product_name
ORDER BY total_sales DESC;
```

### 3. Update
To update a specific record in the sales_data table:
```sql
UPDATE sales_data
SET sale_amount = sale_amount * 1.1
WHERE sale_date < '2022-01-01';
```

### 4. Delete
To delete records from the sales_data table based on a condition:
```sql
DELETE FROM sales_data
WHERE sale_date < '2020-01-01';
```

## Summary
This guide provides a foundational understanding of how to perform basic SQL operations such as creating, selecting, updating, and deleting records in Teradata's Analytics Database. The examples illustrate the syntax and structure necessary for effective data manipulation.

## Keywords and Phrases
- **Symbols and Symbol Predicates**: A pageid IN (10, 25)
- **Analytics Database**: Core component for data analytics.
- **Deployment**: Process of setting up the analytics database in the cloud or on-premises.
- **VantageCloud**: Cloud-based deployment of Teradata Vantage.
- **VantageCore**: Core functionalities of the Vantage platform.
- **Edition**: Different versions of Teradata Vantage.
- **Enterprise**: Refers to enterprise-level analytics solutions.
- **IntelliFlex**: Intelligent system for workload management.
- **VMware**: Virtualization technology used in deployments.
- **Product**: Teradata Vantage™.
- **Release Number**: 17.20.
- **Published**: June 2022.
- **Language**: English (United States).
- **Last Update**: 2024-04-06.
- **Product Category**: Teradata Vantage™.
- **Data Cleaning Functions**: Functions designed to clean and prepare data.
- **Data Exploration Functions**: Functions for exploring and understanding datasets.
- **Model Training Functions**: Functions to train analytical models.
- **Model Scoring Functions**: Functions for scoring new data against trained models.
- **Text Analytic Functions**: Functions for analyzing text data.
- **Hypothesis Testing Functions**: Statistical functions for testing hypotheses.
- **Limitations**: Various restrictions when using certain functions.
- **Usage Notes**: Important considerations and best practices for using analytic functions.","27","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/Symbols-and-Symbol-Predicates-That-Examples-Use","2024-07-27 12:47:14"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-ClickStream-Data-Examples","text/html;charset=UTF-8","200","","Indexable","","nPath Function ClickStream Data Examples | Teradata Vantage - nPath ClickStream Data Examples - Analytics Database","114","1073","See examples of Analytics Database (SQL Engine) function nPath that use clickstream data.","89","567","","0","nPath Function ClickStream Data Examples | Teradata Vantage - nPath ClickStream Data Examples - Analytics Database","114","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-ClickStream-Data-Examples","","","","","","210240","13627","13627","4.831","A+","433","123","3.520","78.804","Fairly Easy","12.114","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.574","","","","","","1.1","## Summary

This document provides an overview of the Teradata Vantage Analytics Database, specifically focused on the nPath function used for analyzing clickstream data. The nPath function allows users to identify patterns and sequences in data, which is particularly useful for understanding user behavior in web sessions. The provided examples illustrate how to create tables, select data, and perform various operations such as counting, filtering, and analyzing patterns within clickstream data.

### Code Examples

Here are some basic SQL operations using the Teradata syntax for managing a clickstream data table named `clicks1`:

#### 1. Create Table
```sql
CREATE MULTISET TABLE clicks1 (
  userid INTEGER,
  sessionid INTEGER,
  pageid INTEGER,
  category INTEGER,
  ts TIMESTAMP FORMAT 'YYYY-MM-DDbHH:MI:SS',
  referrer VARCHAR (256),
  val FLOAT
) PRIMARY INDEX ( userid );
```

#### 2. Select Data
```sql
SELECT sessionid, pageid, ts 
FROM clicks1 
WHERE userid = 12345 
ORDER BY ts;
```

#### 3. Update Data
```sql
UPDATE clicks1 
SET category = 2 
WHERE pageid = 10 AND sessionid = 5;
```

#### 4. Delete Data
```sql
DELETE FROM clicks1 
WHERE userid = 12345 AND sessionid = 5;
```

### Keywords and Phrases
- **nPath Function**
- **ClickStream Data Examples**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Creating Tables**
- **Updating Records**
- **Deleting Records**
- **Selecting Data**
- **SQL Syntax**
- **Sessionize**
- **Pattern Matching**
- **Complex Path Queries**
- **User Behavior Analysis**
- **Session Management**

This concise overview and examples provide a foundational understanding of how to work with the Teradata Vantage Analytics Database, especially in the context of clickstream data analysis using the nPath function.","29","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-ClickStream-Data-Examples","2024-07-27 11:38:11"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples","text/html;charset=UTF-8","200","","Indexable","","nPath Range-Matching Examples - Analytics Database","50","482","The following examples use the information presented in this topic. nPath Range-Matching Example: Accumulate Pages Visited in Each Session nPath Range-Matching Example: Find Sessions That Start at Home Page and Visit Page1 nPath Range-Matching Example: Find Paths to Checkout Page for Purchases Over $200 nPath Range-Mat...","323","2103","","0","nPath Range-Matching Examples - Analytics Database","50","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples","","","","","","229898","14261","14261","5.056","A+","389","182","2.137","87.009","Easy","11.054","1","6","","707","707","0","99.860","718","716","0","","","","","","","","","0.686","","","","","","1.1","## Summary

This document provides an overview of the capabilities and syntax for using Teradata Vantage™ Analytics Database, specifically focusing on analytic functions and their applications. It includes how to manage data (selecting, updating, deleting, and creating records) and outlines various analytic functions categorized for data cleaning, exploration, feature engineering, model training, scoring, evaluation, text analysis, and hypothesis testing.

## Code Examples

### Select
```sql
SELECT userid, sessionid, productname, pagetype, clicktime
FROM aggregate_clicks
WHERE pagetype = 'checkout';
```

### Update
```sql
UPDATE aggregate_clicks
SET productprice = productprice * 1.10
WHERE pagetype = 'home' AND clicktime < '2020-01-01';
```

### Delete
```sql
DELETE FROM aggregate_clicks
WHERE clicktime < '2020-01-01' AND productprice < 50;
```

### Create
```sql
CREATE TABLE new_clicks (
    userid INT,
    sessionid INT,
    productname VARCHAR(255),
    pagetype VARCHAR(50),
    clicktime TIMESTAMP,
    referrer VARCHAR(255),
    productprice DECIMAL(10, 2)
);
```

## Keywords and Phrases
- nPath Range-Matching Examples
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Recommendations for Using Analytic Functions
- TD_ConvertTo
- TD_GetRowsWithoutMissingValues
- TD_Histogram
- TD_UnivariateStatistics
- TD_Silhouette
- TD_XGBoost
- TD_TrainTestSplit
- nPath Patterns
- Sessionize
- Example Inputs and Outputs
- Aggregation Functions
- ClickStream Data Examples
- Hypothesis Test Types

This summary and set of examples offer a foundational understanding of how to manipulate and analyze data within Teradata Vantage, emphasizing the importance of analytic functions in data-driven decision-making.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples","2024-07-27 12:37:53"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Accumulate-Pages-Visited-in-Each-Session","text/html;charset=UTF-8","200","","Indexable","","nPath Range-Matching Example | Teradata Vantage - nPath Range-Matching Example: Accumulate Pages Visited in Each Session - Analytics Database","141","1338","See range-mapping example of Analytics Database (SQL Engine) function nPath that accumulates pages visited in each session.","123","791","","0","nPath Range-Matching Example | Teradata Vantage - nPath Range-Matching Example: Accumulate Pages Visited in Each Session - Analytics Database","141","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Accumulate-Pages-Visited-in-Each-Session","","","","","","210624","13444","13444","4.766","A+","205","63","3.254","37.634","Hard","11.457","1","7","","707","707","0","99.860","711","709","0","","","","","","","","","0.734","","","","","","1.1","### Summary

In Teradata Vantage, the `nPath` function provides advanced capabilities for analyzing clickstream data and other sequential patterns within datasets. It allows users to perform range-matching and accumulate results based on defined patterns. This functionality is crucial for understanding user behavior across sessions in web analytics, enabling businesses to derive insights about user navigation paths, conversion funnels, and more.

The `nPath` function can be utilized alongside various SQL commands to manipulate data effectively within an analytical database. Below are code examples demonstrating essential SQL operations: `SELECT`, `UPDATE`, `DELETE`, and `CREATE`.

---

### Code Example

#### 1. SELECT
```sql
SELECT sessionid, 
       ACCUMULATE(pagetype) AS path
FROM nPath (
  ON aggregate_clicks PARTITION BY sessionid ORDER BY clicktime
  USING
  Mode (NONOVERLAPPING)
  Pattern ('A*')
  Symbols (TRUE AS A)
  Result (
    FIRST (sessionid OF A) AS sessionid,
    ACCUMULATE (pagetype OF A) AS path
  )
) AS dt
ORDER BY dt.sessionid;
```

#### 2. UPDATE
```sql
UPDATE aggregate_clicks
SET pagetype = 'updated_page'
WHERE sessionid = 1 AND clicktime > '2024-01-01';
```

#### 3. DELETE
```sql
DELETE FROM aggregate_clicks
WHERE sessionid = 2 AND pagetype = 'home';
```

#### 4. CREATE
```sql
CREATE TABLE aggregate_clicks (
    sessionid INT,
    clicktime TIMESTAMP,
    pagetype VARCHAR(50)
);
```

---

### Keywords and Phrases

- **nPath Range-Matching Example**
- **Teradata Vantage**
- **Accumulate Pages Visited in Each Session**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Spool Space Exhaustion for Large Partitions**
- **Recommendations for Using Analytic Functions**
- **TD_FillRowID**
- **TD_SimpleImputeFit**
- **TD_KMeans**
- **TD_XGBoost**
- **TD_DecisionForestPredict**
- **TD_ClassificationEvaluator**
- **TD_ANOVA**
- **TD_ChiSq**
- **nPath Patterns**
- **nPath Results Examples**
- **Sessionize Syntax** 

This collection emphasizes the complex capabilities of the Teradata Vantage analytics environment, providing tools for data analysis and manipulation.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Accumulate-Pages-Visited-in-Each-Session","2024-07-27 11:39:35"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Find-Data-for-Sessions-That-Checked-Out-3-6-Products","text/html;charset=UTF-8","200","","Indexable","","nPath Range-Matching Example | Teradata Vantage - nPath Range-Matching Example: Find Data for Sessions That Checked Out 3-6 Products - Analytics Database","153","1442","See range-mapping example of Analytics Database (SQL Engine) function nPath that finds data for sessions that checked out three to six products.","144","908","","0","nPath Range-Matching Example | Teradata Vantage - nPath Range-Matching Example: Find Data for Sessions That Checked Out 3-6 Products - Analytics Database","153","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Find-Data-for-Sessions-That-Checked-Out-3-6-Products","","","","","","210438","13644","13644","4.837","A+","161","65","2.477","31.968","Hard","11.405","1","7","","707","707","0","99.860","711","709","0","","","","","","","","","0.470","","","","","","1.1","### Summary
This document provides an overview of the Teradata Vantage Analytics Database, specifically focusing on the use of nPath for range-matching in analytics. The nPath function allows users to analyze sequences of events, extracting insights from session-based data. This summary includes SQL examples for basic operations such as Select, Update, Delete, and Create, as well as specific examples for using the nPath functionality to find data on sessions that checked out a range of products.

### Code Example

#### Select
```sql
SELECT sessionid, productname, productprice
FROM aggregate_clicks
WHERE productprice > 100;
```

#### Update
```sql
UPDATE aggregate_clicks
SET productprice = productprice * 1.1
WHERE pagetype = 'checkout';
```

#### Delete
```sql
DELETE FROM aggregate_clicks
WHERE sessionid = '12345';
```

#### Create
```sql
CREATE TABLE aggregate_clicks (
    sessionid VARCHAR(50),
    pagetype VARCHAR(50),
    productname VARCHAR(100),
    productprice DECIMAL(10, 2),
    clicktime TIMESTAMP
);
```

#### nPath Range-Matching Example
To find data for sessions that checked out between 3 to 6 products, the following SQL query demonstrates the use of nPath:
```sql
SELECT * FROM nPath (
  ON aggregate_clicks PARTITION BY sessionid ORDER BY clicktime
  USING
  Mode (NONOVERLAPPING)
  Pattern ('H+.D*.C{3,6}.D')
  Symbols (
    pagetype = 'home' AS H,
    pagetype='checkout' AS C,
    pagetype<>'home' AND pagetype<>'checkout' AS D
  )
  Result (
    FIRST (sessionid OF C) AS sessionid,
    MAX (productprice OF C) AS max_price,
    MIN (productprice OF C) AS min_price)
) AS dt ORDER BY dt.sessionid;
```

### Keywords and Phrases
- nPath Range-Matching Example
- Teradata Vantage
- Data for Sessions
- Checked Out Products
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Enterprise Edition
- IntelliFlex
- VMware Product
- Release Number 17.20
- Published June 2022
- Model Training Functions
- Data Exploration Functions
- Path and Pattern Analysis Functions
- SQL Syntax
- Analytics Functions
- Data Cleaning Functions
- Feature Engineering Functions
- Hypothesis Testing Functions
- Maximum Number of Columns in a Database Table
- Workload Management Configuration
- Recommendations for Using Analytic Functions
- Example Queries
- SQL-MapReduce Call
- SESSIONID
- Product Price
- Non-Overlapping Mode
- Aggregate Clicks Table
- Clickstream Data Analysis","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Find-Data-for-Sessions-That-Checked-Out-3-6-Products","2024-07-27 12:38:06"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Find-Data-for-Sessions-That-Checked-Out-at-Least-3-Products","text/html;charset=UTF-8","200","","Indexable","","nPath Range-Matching Example | Teradata Vantage - nPath Range-Matching Example: Find Data for Sessions That Checked Out at Least 3 Products - Analytics Database","160","1503","See range-mapping example of Analytics Database (SQL Engine) function nPath that finds data for sessions that checked out at least three products.","146","921","","0","nPath Range-Matching Example | Teradata Vantage - nPath Range-Matching Example: Find Data for Sessions That Checked Out at Least 3 Products - Analytics Database","160","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Find-Data-for-Sessions-That-Checked-Out-at-Least-3-Products","","","","","","211171","13825","13825","4.901","A+","201","74","2.716","42.033","Hard","11.489","1","7","","707","707","0","99.860","712","710","0","","","","","","","","","0.995","","","","","","1.1","## Summary

This document provides an overview of the nPath functionality in Teradata Vantage, specifically focusing on range-matching examples. The nPath function is a powerful tool for analyzing session data, allowing users to identify patterns in sequences of actions taken by users. The provided SQL query demonstrates how to find sessions where users checked out at least three products. 

### Code Example

Below are examples of SQL commands for common operations in a SQL database, including **SELECT**, **UPDATE**, **DELETE**, and **CREATE**:

#### 1. SELECT
```sql
SELECT sessionid, most_expensive_product, max_price, least_expensive_product, min_price
FROM nPath (
  ON aggregate_clicks PARTITION BY sessionid ORDER BY clicktime
  USING
  Mode (NONOVERLAPPING)
  Pattern ('H+.D*.C{3,}.D')
  Symbols (
    pagetype = 'home' AS H,
    pagetype = 'checkout' AS C,
    pagetype <> 'home' AND pagetype <> 'checkout' AS D
  )
  Result (
    FIRST(sessionid OF C) AS sessionid,
    max_choose(productprice, productname OF C) AS most_expensive_product,
    MAX(productprice OF C) AS max_price,
    min_choose(productprice, productname OF C) AS least_expensive_product,
    MIN(productprice OF C) AS min_price
  )
) AS dt
ORDER BY dt.sessionid;
```

#### 2. UPDATE
```sql
UPDATE products
SET productprice = productprice * 1.10
WHERE category = 'electronics';
```

#### 3. DELETE
```sql
DELETE FROM users
WHERE last_login < '2022-01-01';
```

#### 4. CREATE
```sql
CREATE TABLE aggregate_clicks (
  sessionid INT,
  pagetype VARCHAR(50),
  clicktime TIMESTAMP,
  productprice DECIMAL(10, 2)
);
```

### Keywords and Phrases

- nPath Range-Matching Example
- Teradata Vantage
- Find Data for Sessions
- Checked Out at Least 3 Products
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- SQL-MapReduce Call
- Output
- Sessionize
- LAG and LEAD Expressions
- Clickstream Data Examples
- Pattern Syntax
- Result Selection in nPath
- Aggregate Clicks Table
- Session Data Analysis
- Session Identification

This structured overview provides a clear understanding of the nPath functionality, sample SQL operations in a database context, and important keywords that are essential for further exploration of the Teradata Vantage system.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Find-Data-for-Sessions-That-Checked-Out-at-Least-3-Products","2024-07-27 11:28:22"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Find-First-Product-with-Multiple-Referrers-in-Any-Session","text/html;charset=UTF-8","200","","Indexable","","nPath Range-Matching Example | Teradata Vantage - nPath Range-Matching Example: Find First Product with Multiple Referrers in Any Session - Analytics Database","158","1459","See range-mapping example of Analytics Database (SQL Engine) function nPath that finds the first product with multiple referrers in any session.","144","892","","0","nPath Range-Matching Example | Teradata Vantage - nPath Range-Matching Example: Find First Product with Multiple Referrers in Any Session - Analytics Database","158","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Find-First-Product-with-Multiple-Referrers-in-Any-Session","","","","","","210273","13457","13457","4.771","A+","135","58","2.328","34.019","Hard","11.270","1","7","","707","707","0","99.860","711","709","0","","","","","","","","","0.752","","","","","","1.1","### Summary

This document provides a detailed overview of the Teradata Vantage™ Analytics Database analytic functions, particularly focusing on the `nPath` function and its capabilities for analyzing clickstream data. It describes various analytic functions for tasks such as data cleaning, exploration, feature engineering, model training, scoring, and evaluation. The `nPath` function, along with range-matching examples, showcases its utility in identifying patterns and behaviors within session data.

### Code Example

Here are common SQL operations using Teradata SQL syntax, showcasing how to `SELECT`, `UPDATE`, `DELETE`, and `CREATE` data.

#### SELECT

```sql
-- Selecting data from a table
SELECT sessionid, productname
FROM aggregate_clicks
WHERE clicktime >= '2023-01-01' AND clicktime < '2024-01-01'
ORDER BY sessionid;
```

#### UPDATE

```sql
-- Updating data in a table
UPDATE aggregate_clicks
SET productname = 'New Product Name'
WHERE sessionid = 1 AND productname = 'Old Product Name';
```

#### DELETE

```sql
-- Deleting data from a table
DELETE FROM aggregate_clicks
WHERE sessionid = 1 AND clicktime < '2023-01-01';
```

#### CREATE

```sql
-- Creating a new table
CREATE TABLE new_clicks (
    sessionid INT,
    productname VARCHAR(255),
    clicktime TIMESTAMP
);
```

### Keywords and Phrases

- nPath Range-Matching Example
- Teradata Vantage
- Find First Product with Multiple Referrers in Any Session
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Workload Management
- Non-Deterministic Behavior
- Example Syntax
- Input Table
- Output Table
- Session Analysis
- FIRST, LAST_NOTNULL, MAX_CHOOSE, MIN_CHOOSE
- Accumulate String
- Clickstream Data Analysis
- SQL-MapReduce Call

This structured overview will aid in understanding the capabilities and functionalities of Teradata Vantage's analytic functions, particularly for data analytics and pattern recognition in session data.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Find-First-Product-with-Multiple-Referrers-in-Any-Session","2024-07-27 12:23:56"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Find-Paths-to-Checkout-Page-for-Purchases-Over-200","text/html;charset=UTF-8","200","","Indexable","","nPath Range-Matching Example | Teradata Vantage - nPath Range-Matching Example: Find Paths to Checkout Page for Purchases Over $200 - Analytics Database","152","1442","See range-mapping example of Analytics Database (SQL Engine) function nPath that finds paths to the checkout page for purchases over $200.","138","887","","0","nPath Range-Matching Example | Teradata Vantage - nPath Range-Matching Example: Find Paths to Checkout Page for Purchases Over $200 - Analytics Database","152","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Find-Paths-to-Checkout-Page-for-Purchases-Over-200","","","","","","210306","13605","13605","4.823","A+","181","67","2.701","40.969","Hard","11.427","1","7","","707","707","0","99.860","711","709","0","","","","","","","","","0.441","","","","","","1.1","### Summary

In Teradata Vantage, the `nPath` function provides powerful capabilities for analyzing sequential data, particularly in the context of user interactions on websites or applications. One important application of `nPath` is in range-matching, where you can find specific patterns in the data that match certain conditions. For example, you might want to identify the paths users take to a checkout page when their purchase exceeds a certain amount. 

This functionality is particularly useful for understanding customer behavior, optimizing user experience, and improving conversion rates.

### Code Examples

Below are SQL code snippets illustrating the `SELECT`, `UPDATE`, `DELETE`, and `CREATE` operations, tailored to the context of Teradata Vantage and its analytics database capabilities.

#### 1. SELECT Example
```sql
SELECT sessionid, 
       ACCUMULATE(pagetype OF ANY(A,C)) AS path, 
       AVG(productprice OF ANY(A,C)) AS totalsum
FROM nPath (
    ON aggregate_clicks PARTITION BY sessionid ORDER BY clicktime
    USING
    Mode (NONOVERLAPPING)
    Pattern ('A*.C+.A*')
    Symbols (
        productprice > 200 AND pagetype='checkout' AS C, 
        TRUE AS A
    )
) AS dt 
ORDER BY sessionid;
```

#### 2. UPDATE Example
```sql
UPDATE aggregate_clicks
SET pagetype = 'homepage'
WHERE sessionid = 1 AND pagetype = 'old_homepage';
```

#### 3. DELETE Example
```sql
DELETE FROM aggregate_clicks
WHERE sessionid = 1 AND clicktime < '2023-01-01';
```

#### 4. CREATE Example
```sql
CREATE TABLE aggregate_clicks (
    sessionid INT,
    clicktime TIMESTAMP,
    pagetype VARCHAR(50),
    productprice DECIMAL(10, 2)
);
```

### Keywords and Phrases
- nPath Range-Matching Example
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Enterprise Edition
- IntelliFlex
- VMware Product
- Analytics Database Release Number
- Path and Pattern Analysis Functions
- LAG and LEAD Expressions
- Sessionize
- Clickstream Data
- SQL-MapReduce Call
- Aggregate Clicks
- User Behavior Analysis
- Checkout Page Patterns
- Purchase Analysis
- Data Exploration Functions
- Hypothesis Testing Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Data Cleaning Functions
- Non-Deterministic Behavior
- Recommendations for Using Analytic Functions

This structured format serves as a comprehensive guide for users looking to understand and implement the `nPath` function in Teradata Vantage, while also providing foundational SQL operations.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Find-Paths-to-Checkout-Page-for-Purchases-Over-200","2024-07-27 11:57:51"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Find-Sessions-That-Start-at-Home-Page-and-Visit-Page1","text/html;charset=UTF-8","200","","Indexable","","nPath Range-Matching Example | Teradata Vantage - nPath Range-Matching Example: Find Sessions That Start at Home Page and Visit Page1 - Analytics Database","154","1455","See range-mapping example of Analytics Database (SQL Engine) function nPath that finds sessions that start at the home page and visit page1.","140","888","","0","nPath Range-Matching Example | Teradata Vantage - nPath Range-Matching Example: Find Sessions That Start at Home Page and Visit Page1 - Analytics Database","154","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Find-Sessions-That-Start-at-Home-Page-and-Visit-Page1","","","","","","210788","13535","13535","4.798","A+","215","66","3.258","38.263","Hard","11.486","1","7","","707","707","0","99.860","711","709","0","","","","","","","","","0.548","","","","","","1.1","## Summary
The Teradata Vantage Analytics Database provides a comprehensive set of analytic functions designed for data analysis, exploration, and modeling. This includes a wide variety of functions that facilitate data cleaning, feature engineering, model training, scoring, evaluation, and more. One notable feature is the nPath function, which allows for sophisticated path and pattern analysis in clickstream data, enabling users to extract meaningful insights from user sessions.

## Code Examples
### Select
```sql
SELECT sessionid, path
FROM nPath (
  ON aggregate_clicks PARTITION BY sessionid ORDER BY clicktime
  USING
  Mode (NONOVERLAPPING)
  Pattern ('^H.A*.P1.A*')
  Symbols (pagetype='home' AS H, pagetype='page1' AS P1, TRUE AS A)
  Result (
    FIRST (sessionid OF A) AS sessionid,
    ACCUMULATE (pagetype OF ANY(H,P1,A)) AS path
  )
) AS dt ORDER BY dt.sessionid;
```

### Update
```sql
UPDATE aggregate_clicks
SET pagetype = 'updated_type'
WHERE sessionid = 1 AND clicktime > '2024-01-01';
```

### Delete
```sql
DELETE FROM aggregate_clicks
WHERE sessionid = 3 AND pagetype = 'unwanted_page';
```

### Create
```sql
CREATE TABLE aggregate_clicks (
  sessionid INTEGER,
  pagetype VARCHAR(50),
  clicktime TIMESTAMP
);
```

## Keywords and Phrases
- nPath Range-Matching Example
- Teradata Vantage
- Analytics Database
- Session Analysis
- Clickstream Data
- SQL Queries
- Data Cleaning Functions
- Feature Engineering Functions
- Model Training Functions
- Data Exploration Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- SQL-MapReduce Call
- ACCUMULATE Function
- Sessionize
- PARTITION BY
- ORDER BY
- Clickstream Patterns
- Non-overlapping Mode
- Path Analysis
- Session Tracking
- Database Functions
- Data Analytics
- SQL Syntax Examples
- Input and Output Tables
- Clicktime Ordering
- Patterns in User Sessions
- Teradata Vantage Cloud
- Model Evaluation Functions","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Find-Sessions-That-Start-at-Home-Page-and-Visit-Page1","2024-07-27 12:28:33"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Multiple-Partitioned-Input-Tables-and-Dimension-Input-Table","text/html;charset=UTF-8","200","","Indexable","","nPath Range-Matching Example | Teradata Vantage - nPath Range-Matching Example: Multiple Partitioned Input Tables and Dimension Input Table - Analytics Database","160","1493","See range-mapping example of Analytics Database (SQL Engine) function nPath that uses multiple partitioned input tables and a dimension input table.","148","932","","0","nPath Range-Matching Example | Teradata Vantage - nPath Range-Matching Example: Multiple Partitioned Input Tables and Dimension Input Table - Analytics Database","160","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Multiple-Partitioned-Input-Tables-and-Dimension-Input-Table","","","","","","226096","14189","14189","5.030","A+","349","125","2.792","100.000","Very Easy","11.016","1","7","","707","707","0","99.860","710","708","0","","","","","","","","","0.822","","","","","","1.1","### Summary

In Teradata Vantage, various SQL operations can be performed to manipulate and analyze data stored in tables. The operations include selecting, updating, deleting, and creating records within a relational database. The nPath function is particularly useful for analyzing sequences of events over time, making it suitable for applications like clickstream analysis in e-commerce.

### Code Example

The following examples demonstrate basic SQL operations: Select, Update, Delete, and Create, along with an advanced use case of the nPath function.

#### Select

```sql
SELECT userid, COUNT(*) AS total_impressions
FROM impressions
GROUP BY userid
ORDER BY total_impressions DESC;
```

#### Update

```sql
UPDATE impressions
SET ts = '2012-01-12'
WHERE userid = 1 AND imp = 'ad1';
```

#### Delete

```sql
DELETE FROM clicks2
WHERE userid = 3 AND click = 'ad3';
```

#### Create

```sql
CREATE TABLE impressions (
    userid INT,
    ts DATE,
    imp VARCHAR(50)
);
```

### nPath Example

In this example, we analyze advertising impressions and clicks by counting the number of times users viewed ads before clicking on them, including television ad impressions.

```sql
SELECT * FROM nPath (
  ON impressions PARTITION BY userid ORDER BY ts
  ON clicks2 PARTITION BY userid ORDER BY ts
  ON tv_spots DIMENSION ORDER BY ts
  USING
  Mode (NONOVERLAPPING)
  Symbols (TRUE AS imp, TRUE AS click, TRUE AS tv_imp)
  Pattern ('(imp|tv_imp)*.click')
  Result (
    COUNT(* of imp) AS imp_cnt,
    COUNT(* of tv_imp) AS tv_imp_cnt
  )
) AS dt ORDER BY dt.imp_cnt;
```

### Keywords and Phrases

- nPath Range-Matching Example
- Teradata Vantage
- nPath Range-Matching Example: Multiple Partitioned Input Tables and Dimension Input Table
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- SQL-MapReduce Call
- Clickstream Analysis
- Impressions and Clicks
- Dimension Table
- Nonoverlapping Mode
- Symbols
- Pattern Matching
- Result Functions

This summary and examples provide a foundational understanding of SQL operations in Teradata Vantage, specifically through the lens of analyzing user interactions with advertisements.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Multiple-Partitioned-Input-Tables-and-Dimension-Input-Table","2024-07-27 11:24:54"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Use-OVERLAPPING-Mode","text/html;charset=UTF-8","200","","Indexable","","nPath Range-Matching Example | Teradata Vantage - nPath Range-Matching Example: Use OVERLAPPING Mode - Analytics Database","121","1186","See range-mapping example of Analytics Database (SQL Engine) function nPath that uses OVERLAPPING mode.","103","695","","0","nPath Range-Matching Example | Teradata Vantage - nPath Range-Matching Example: Use OVERLAPPING Mode - Analytics Database","121","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Use-OVERLAPPING-Mode","","","","","","214151","13464","13464","4.773","A+","190","77","2.468","55.613","Fairly Hard","11.192","1","7","","707","707","0","99.860","711","709","0","","","","","","","","","0.463","","","","","","1.1","### Summary

In Teradata Vantage, SQL operations allow for effective management and manipulation of data within an analytics database. The core SQL commands include **SELECT**, **INSERT** (or **CREATE**), **UPDATE**, and **DELETE**. Each command serves a distinct purpose in handling data, whether retrieving, adding, modifying, or removing records.

### Code Examples

**1. SELECT**  
The SELECT statement is used to query data from a database. Here is an example that retrieves all columns from a table called `customers`:

```sql
SELECT * FROM customers;
```

**2. INSERT (Create)**  
The INSERT statement is used to add new records to a table. Below is an example of inserting a new customer into the `customers` table:

```sql
INSERT INTO customers (customer_id, customer_name, contact_email)
VALUES (1, 'John Doe', 'john.doe@example.com');
```

**3. UPDATE**  
The UPDATE statement modifies existing records in a table. The following example updates the email address of a specific customer:

```sql
UPDATE customers
SET contact_email = 'john.newemail@example.com'
WHERE customer_id = 1;
```

**4. DELETE**  
The DELETE statement is used to remove records from a table. Here is an example that deletes a customer record from the `customers` table:

```sql
DELETE FROM customers
WHERE customer_id = 1;
```

### Keywords and Phrases

- nPath Range-Matching Example
- Teradata Vantage - nPath Range-Matching Example: Use OVERLAPPING Mode
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- nPath Symbols
- LAG and LEAD Expressions
- Sessionize
- SQL-MapReduce Call
- Output Examples
- Aggregate Clicks
- Clickstream Data Analysis
- Session Data Management

These keywords and phrases encapsulate the functionalities and options available within the Teradata Vantage environment, particularly related to analytics and data manipulation.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Use-OVERLAPPING-Mode","2024-07-27 11:47:32"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Filters","text/html;charset=UTF-8","200","","Indexable","","nPath Filters - Analytics Database","34","301","The Filter syntax element specifies filters to impose on the matched rows. nPath Filters Example shows an example of an nPath call that uses a filter.","150","914","","0","nPath Filters - Analytics Database","34","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Filters","","","","","","207676","12793","12793","4.535","A+","67","35","1.914","28.116","Very Hard","11.165","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.485","","","","","","1.1","### Summary
The Analytics Database Analytic Functions in Teradata Vantage™ provide a comprehensive set of tools for data cleaning, exploration, and modeling. This guide focuses on basic SQL operations—Select, Update, Delete, and Create—within the context of these analytic functions, illustrating their practical applications.

### Code Examples

#### 1. Select
The `SELECT` statement is used to fetch data from a database.

```sql
SELECT customer_id, order_date, total_amount
FROM orders
WHERE order_date >= '2022-01-01';
```

#### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE customers
SET last_purchase_date = CURRENT_DATE
WHERE customer_id = 12345;
```

#### 3. Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM orders
WHERE order_date < '2022-01-01';
```

#### 4. Create
The `CREATE` statement is used to create a new table.

```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    registration_date DATE
);
```

### Keywords and Phrases
- nPath Filters - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category: Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency

This concise guide provides foundational SQL examples relevant to the powerful analytic capabilities within Teradata's Analytics Database, aiding in effective data manipulation and analysis.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Filters","2024-07-27 11:27:17"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Filters/nPath-Filters-Example","text/html;charset=UTF-8","200","","Indexable","","nPath Function Filters Example | Teradata Vantage - nPath Filters Example - Analytics Database","94","853","See example of Analytics Database (SQL Engine) function nPath call that uses a filter.","86","527","","0","nPath Function Filters Example | Teradata Vantage - nPath Filters Example - Analytics Database","94","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Filters/nPath-Filters-Example","","","","","","216150","13820","13820","4.899","A+","287","100","2.870","80.707","Easy","11.421","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.452","","","","","","1.1","## Summary

The nPath function in Teradata Vantage is a powerful tool used for analyzing path and pattern data within a dataset. It allows users to define complex patterns and filters to extract meaningful insights from sequential data, such as clickstream data from an online store. This functionality is particularly useful for understanding user behavior over time and identifying specific sequences of actions.

The example provided demonstrates how to utilize the nPath function to find sessions where users visited the checkout page within 10 minutes after visiting the home page. This is achieved by defining symbols for the different page types and specifying a pattern that captures the desired navigation behavior.

## Code Examples

### 1. Select
```sql
SELECT * FROM users WHERE age > 25;
```

### 2. Update
```sql
UPDATE users SET email = 'newemail@example.com' WHERE user_id = 1;
```

### 3. Delete
```sql
DELETE FROM users WHERE user_id = 10;
```

### 4. Create
```sql
CREATE TABLE users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50),
    email VARCHAR(100),
    age INT
);
```

### nPath Function Filters Example
```sql
SELECT * FROM Npath (
  ON clickstream PARTITION BY userid ORDER BY clicktime
  USING
  Symbols (
    pagetype='home' AS home,
    pagetype <> 'home' AND pagetype <> 'checkout' AS clickview,
    pagetype='checkout' AS checkout
  )
  Pattern ('home.clickview*.checkout')
  Result (
    FIRST(userid of ANY(home, checkout, clickview)) AS userid,
    FIRST (sessionid of ANY(home, checkout, clickview)) AS sessionid,
    COUNT (* of any(home, checkout, clickview)) AS cnt,
    FIRST (clicktime of ANY(home)) AS firsthome,
    LAST (clicktime of ANY(checkout)) AS lastcheckout
  )
  Filter (
      FIRST (clicktime + interval '10' minute OF ANY (home)) >
        FIRST (clicktime of any(checkout))
  )
  Mode (NONOVERLAPPING)
);
```

## Keywords and Phrases
- nPath Function
- Filters Example
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- nPath Syntax Elements
- Non-Deterministic Behavior
- Sessionize
- Clickstream Data
- Pattern Matching
- SQL Syntax
- First and Last Functions
- Count Functions
- Interval Operations","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Filters/nPath-Filters-Example","2024-07-27 12:38:34"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Input","text/html;charset=UTF-8","200","","Indexable","","nPath Input - Analytics Database","32","290","The function requires at least one partitioned input table, and can have additional input tables that are either partitioned or DIMENSION tables. If an additional input table has CLOB columns, it cannot be a DIMENSION table. See nPath Results. If the input to nPath is nondeterministic, the results are nondeterministic....","323","1951","","0","nPath Input - Analytics Database","32","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Input","","","","","","210231","13414","13414","4.755","A+","133","44","3.023","28.206","Very Hard","11.249","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.582","","","","","","1.1","## Summary
The Teradata Vantage™ Analytics Database provides a rich set of analytic functions designed to enable data exploration, feature engineering, model training, and evaluation. In this guide, we will cover fundamental SQL operations—Select, Update, Delete, and Create—using the syntax and capabilities specific to the Analytics Database.

### Code Examples

#### Select
The `SELECT` statement is used to query data from a database.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

*Example: Selecting specific columns from a table where a condition is met.*

```sql
SELECT employee_id, first_name, last_name
FROM employees
WHERE department = 'Sales';
```

#### Update
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

*Example: Updating the salary of an employee in a specific department.*

```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department = 'Sales';
```

#### Delete
The `DELETE` statement removes existing records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

*Example: Deleting employees who are no longer with the company.*

```sql
DELETE FROM employees
WHERE termination_date IS NOT NULL;
```

#### Create
The `CREATE TABLE` statement is used to create a new table in the database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

*Example: Creating a new table to store employee details.*

```sql
CREATE TABLE employees (
    employee_id INTEGER PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

### Keywords and Phrases
- nPath Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_OutlierFilterTransform
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- Unpack
- Data Exploration Functions
- MovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- Feature Engineering Transform Functions
- Antiselect
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer
- TD_FunctionFit
- TD_FunctionTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_PolynomialFeaturesFit
- TD_PolynomialFeaturesTransform
- TD_RandomProjectionFit
- TD_RandomProjectionTransform
- TD_RowNormalizeFit
- TD_RowNormalizeTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_Unpivoting
- Feature Engineering Utility Functions
- TD_FillRowID
- TD_NumApply
- TD_RoundColumns
- TD_StrApply
- Model Training Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_KNN
- TD_OneClassSVM
- TD_SVM
- TD_XGBoost
- Model Scoring Functions
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_OneClassSVMPredict
- TD_SVMPredict
- TD_XGBoostPredict
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- Text Analytic Functions
- NGramSplitter
- TD_NaiveBayesTextClassifierPredict
- TD_NaiveBayesTextClassifierTrainer
- TD_SentimentExtractor
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Testing Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Path and Pattern Analysis Functions
- Attribution
- nPath
- Sessionize
- Additional Information
- Teradata Links
- Related Documentation","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Input","2024-07-27 12:53:55"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Output","text/html;charset=UTF-8","200","","Indexable","","nPath Output - Analytics Database","33","306","The Result syntax element determines the output—see nPath Results.","66","428","","0","nPath Output - Analytics Database","33","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Output","","","","","","207405","12672","12672","4.492","A+","50","34","1.471","5.686","Very Hard","11.139","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.588","","","","","","1.1","# Summary of Analytics Database Functions

The Teradata Vantage Analytics Database offers a comprehensive suite of analytic functions designed to support various data manipulation and analysis tasks. These functions can be categorized into several groups, including data cleaning, data exploration, feature engineering, model training, model scoring, and text analytics. Each function has specific syntax rules and usage notes that guide users in implementing them effectively.

## Code Examples

### SQL Code Examples

#### 1. **Create a Table**
```sql
CREATE TABLE Sales (
    SaleID INT PRIMARY KEY,
    ProductName VARCHAR(255),
    Amount DECIMAL(10, 2),
    SaleDate DATE
);
```

#### 2. **Select Data**
```sql
SELECT ProductName, SUM(Amount) AS TotalSales
FROM Sales
GROUP BY ProductName
ORDER BY TotalSales DESC;
```

#### 3. **Update Data**
```sql
UPDATE Sales
SET Amount = Amount * 1.10
WHERE SaleDate < '2023-01-01';
```

#### 4. **Delete Data**
```sql
DELETE FROM Sales
WHERE SaleDate < '2022-01-01';
```

### Analytics Database Functions Examples

#### 1. **Using the Pack Function**
```sql
SELECT Pack(column1, column2) AS PackedData
FROM YourTable;
```

#### 2. **Using the TD_CategoricalSummary Function**
```sql
SELECT *
FROM TD_CategoricalSummary('YourTable', 'YourColumn');
```

#### 3. **Using the TD_DecisionForest Function**
```sql
CALL TD_DecisionForest('YourTable', 'TargetColumn', 'FeatureColumns');
```

#### 4. **Using the TD_Silhouette Function**
```sql
SELECT *
FROM TD_Silhouette('YourClusteringModel', 'YourData');
```

## Keywords and Phrases
- nPath Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- gjn1627595495337.ditamap
- dita:ditavalPath
- ayr1485454803741.ditaval
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Functions Ignore Disallowed Syntax Elements
- Size of the Query
- Workload Management Configuration for Analytics Database Analytic Functions
- Recommendations for Using Analytic Functions
- Data Exploration Functions
- Model Evaluation Functions
- Hypothesis Testing Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Sessionize Syntax
- Example: How to Use Sessionize

This summary provides a concise overview of the capabilities and examples of the Teradata Vantage Analytics Database, focusing on essential SQL operations and specific analytic functions.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Output","2024-07-27 12:43:50"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Patterns","text/html;charset=UTF-8","200","","Indexable","","nPath Patterns - Analytics Database","35","322","The value of the Pattern syntax element specifies the sequence of rows for which the function searches. You compose the pattern definition, pattern, with symbols (which you define in the Symbols syntax element), operators, and parentheses. In the pattern definition, symbols represent rows. You can combine symbols with ...","323","2002","","0","nPath Patterns - Analytics Database","35","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Patterns","","","","","","217539","14470","14470","5.130","A+","575","125","4.600","71.661","Fairly Easy","11.995","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.474","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions that facilitate data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analytics. With the release of version 17.20 in June 2022, these functions are designed to streamline data processing and improve analytics efficiency. This guide covers the essential SQL operations—Select, Update, Delete, and Create—along with their respective examples to illustrate how to manipulate and query data effectively.

### Code Examples

#### 1. Select
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE country = 'USA';
```

#### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE customers
SET last_name = 'Smith'
WHERE customer_id = 101;
```

#### 3. Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM customers
WHERE customer_id = 101;
```

#### 4. Create
The `CREATE` statement creates a new table in the database.

```sql
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    amount DECIMAL(10, 2)
);
```

### Keywords and Phrases

- nPath Patterns - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Data type Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This guide serves as a foundational reference for performing essential SQL operations within the Teradata Vantage™ Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Patterns","2024-07-27 12:29:00"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Patterns/nPath-Greedy-Pattern-Matching","text/html;charset=UTF-8","200","","Indexable","","nPath Function Greedy Pattern Matching Example | Teradata Vantage - nPath Greedy Pattern Matching - Analytics Database","118","1105","See example of Analytics Database (SQL Engine) function nPath greedy pattern matching.","86","556","","0","nPath Function Greedy Pattern Matching Example | Teradata Vantage - nPath Greedy Pattern Matching - Analytics Database","118","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Patterns/nPath-Greedy-Pattern-Matching","","","","","","279890","24885","24885","8.822","A+","321","85","3.776","55.150","Fairly Hard","11.677","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","2.669","","","","","","1.1","## Summary

The `nPath` function in Teradata Vantage utilizes greedy pattern matching to analyze sequences in your data. It allows you to extract meaningful paths from datasets by defining patterns that can track job transitions or other event sequences over time. This function can be incredibly useful in scenarios such as clickstream analysis, job title transitions, and more, where understanding the sequence of events is crucial.

### Code Examples

Here are code examples demonstrating the basic SQL operations: `SELECT`, `UPDATE`, `DELETE`, and `CREATE`, along with an example of using the `nPath` function.

#### **1. SELECT**
Retrieve job transitions for a user from the `link2` table.
```sql
SELECT userid, job_title, startdate, enddate
FROM link2
WHERE userid = 21;
```

#### **2. UPDATE**
Update the end date of a specific job title for a user.
```sql
UPDATE link2
SET enddate = '2023-12-31'
WHERE userid = 21 AND job_title = 'Software Engineer';
```

#### **3. DELETE**
Delete a record of a job title for a specific user.
```sql
DELETE FROM link2
WHERE userid = 21 AND job_title = 'Chief Exec Officer' AND startdate = '2005-03-01';
```

#### **4. CREATE**
Create a new table to store job transitions.
```sql
CREATE TABLE job_transitions (
    userid INT,
    job_title VARCHAR(100),
    startdate DATE,
    enddate DATE
);
```

#### **5. nPath Example**
Use the `nPath` function to find job transition paths.
```sql
SELECT job_transition_path, count(*) AS path_count 
FROM nPath (
    ON link2 PARTITION BY userid ORDER BY startdate
    USING
    Mode (NONOVERLAPPING)
    Pattern ('CEO.ENGR.OTHER*')
    Symbols (
        job_title LIKE '%Software Eng%' AS ENGR,
        TRUE AS OTHER,
        job_title LIKE 'Chief Exec Officer' AS CEO
    )
    Result (accumulate(job_title OF ANY(ENGR,OTHER,CEO)) AS job_transition_path)
) AS dt 
GROUP BY 1 
ORDER BY 2 DESC;
```

### Keywords and Phrases
- **nPath Function**
- **Greedy Pattern Matching**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Limitations When Using PARTITION BY**
- **nPath Greedy Pattern Matching Examples**
- **Job Transition Path Analysis**
- **Clickstream Data Analysis**
- **Accumulate Function**
- **Pattern Matching**","27","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Patterns/nPath-Greedy-Pattern-Matching","2024-07-27 12:52:54"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results","text/html;charset=UTF-8","200","","Indexable","","nPath Results - Analytics Database","34","311","The Result syntax element defines the output columns, specifying the values to retrieve from the matched rows and the aggregate function to apply to these values. For each pattern, the nPath function can apply one or more aggregate functions to the matched rows and output the aggregated results. These are the supported...","323","2019","","0","nPath Results - Analytics Database","34","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results","","","","","","218900","14834","14834","5.259","A+","796","147","5.415","75.289","Fairly Easy","12.718","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.632","","","","","","1.1","# Code Example: SQL Operations (Select, Update, Delete, Create)

In SQL, managing data within a database typically involves four basic operations: **Select**, **Update**, **Delete**, and **Create**. Below are examples of each operation to demonstrate their syntax and functionality within an SQL context.

## 1. Select

The `SELECT` statement is used to query data from a database. You can retrieve specific columns or entire tables.

```sql
-- Example: Select all columns from the customers table
SELECT * FROM customers;

-- Example: Select specific columns from the customers table
SELECT customer_id, customer_name, email FROM customers WHERE country = 'USA';
```

## 2. Update

The `UPDATE` statement is used to modify existing records in a table.

```sql
-- Example: Update the email address of a specific customer
UPDATE customers
SET email = 'new_email@example.com'
WHERE customer_id = 101;

-- Example: Update multiple columns for customers in a specific country
UPDATE customers
SET status = 'active', last_login = CURRENT_DATE
WHERE country = 'USA';
```

## 3. Delete

The `DELETE` statement is used to remove records from a table.

```sql
-- Example: Delete a specific customer record
DELETE FROM customers 
WHERE customer_id = 101;

-- Example: Delete all inactive customers
DELETE FROM customers 
WHERE status = 'inactive';
```

## 4. Create

The `CREATE` statement is used to create a new table or database.

```sql
-- Example: Create a new table for customers
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    email VARCHAR(100),
    country VARCHAR(50),
    status VARCHAR(20),
    last_login DATE
);

-- Example: Create a new index on the email column
CREATE INDEX idx_email ON customers(email);
```

## Summary

The SQL operations demonstrated are fundamental for managing and manipulating data within a relational database. The `SELECT` statement retrieves data, `UPDATE` modifies existing records, `DELETE` removes records, and `CREATE` establishes new structures in the database.

---

### Keywords and Phrases

- nPath Results - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- gjn1627595495337.ditamap
- dita:ditavalPath
- ayr1485454803741.ditaval
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Examples of various analytic functions and their syntax.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results","2024-07-27 11:30:35"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples","text/html;charset=UTF-8","200","","Indexable","","nPath Results Examples - Analytics Database","43","403","nPath Results Example: FIRST, LAST_NOTNULL, MAX_CHOOSE, and MIN_CHOOSE nPath Results Example: FIRST and Three Forms of ACCUMULATE nPath Results Example: FIRST, Three Forms of ACCUMULATE, COUNT, and NTH nPath Results Example: Combine Values from One Row with Values from the Next Row nPath Results Example: ACCUMULATE Str...","323","2225","","0","nPath Results Examples - Analytics Database","43","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples","","","","","","210815","13158","13158","4.665","A+","135","52","2.596","41.893","Hard","11.227","1","6","","707","707","0","99.860","719","717","0","","","","","","","","","1.206","","","","","","1.1","# Summary of Analytics Database Functions

The Analytics Database provides a comprehensive suite of analytic functions designed to facilitate data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This document outlines key functions and their usage, particularly focusing on the nPath results, which are essential for pattern recognition in data streams.

## Code Examples

### 1. Create
Creating a new table in the Analytics Database can be done using the `CREATE TABLE` statement.

```sql
CREATE TABLE sales_data (
    order_id INT,
    product_name VARCHAR(100),
    order_date DATE,
    quantity INT,
    price DECIMAL(10, 2)
);
```

### 2. Select
To retrieve data from a table, the `SELECT` statement is used.

```sql
SELECT product_name, SUM(quantity) AS total_quantity
FROM sales_data
GROUP BY product_name
ORDER BY total_quantity DESC;
```

### 3. Update
Updating existing records in a table is performed using the `UPDATE` statement.

```sql
UPDATE sales_data
SET price = price * 1.10
WHERE order_date < '2022-01-01';
```

### 4. Delete
To remove records from a table, the `DELETE` statement is utilized.

```sql
DELETE FROM sales_data
WHERE quantity = 0;
```

## Keywords and Phrases

- nPath Results Examples - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Recommendations for Using Analytic Functions
- Examples of nPath Results
- SQL Syntax for Analytic Functions
- Input Table Rows Redistribution
- Function Names with and without TD Prefix
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency

This structured overview provides a clear reference for users looking to utilize the Analytics Database effectively, particularly through the provided examples of SQL commands for data manipulation.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples","2024-07-27 11:43:34"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-ACCUMULATE-String-over-64000-Characters","text/html;charset=UTF-8","200","","Indexable","","nPath Function Results Example | Teradata Vantage - nPath Results Example: ACCUMULATE String over 64000 Characters - Analytics Database","135","1277","See example of Analytics Database (SQL Engine) function nPath with ACCUMULATE string greater than 64000 characters.","115","755","","0","nPath Function Results Example | Teradata Vantage - nPath Results Example: ACCUMULATE String over 64000 Characters - Analytics Database","135","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-ACCUMULATE-String-over-64000-Characters","","","","","","217412","13936","13936","4.940","A+","287","124","2.315","80.091","Easy","11.448","1","7","","707","707","0","99.860","710","708","0","","","","","","","","","0.566","","","","","","1.1","### Summary

The Teradata Vantage platform provides a range of analytic functions, particularly within its Analytics Database, which supports various data manipulation tasks. The nPath function is particularly useful for analyzing sequences of events or actions within a dataset, allowing users to extract meaningful patterns from complex data structures. This guide outlines basic SQL operations such as `SELECT`, `UPDATE`, `DELETE`, and `CREATE`, along with a detailed example of the `nPath` function, illustrating its potential for path and pattern analysis.

### SQL Code Examples

#### 1. Create a Table
```sql
CREATE TABLE banking_web_clicks (
    customer_id INT,
    session_id INT,
    page VARCHAR(255),
    datestamp TIMESTAMP
);
```

#### 2. Insert Data into Table
```sql
INSERT INTO banking_web_clicks (customer_id, session_id, page, datestamp)
VALUES (540, 1, 'ONLINE STATEMENT ENROLLMENT', '2022-03-18 06:14:20.008294'),
       (540, 1, 'CUSTOMER SUPPORT', '2022-03-18 06:14:21.009358');
```

#### 3. Select Data from Table
```sql
SELECT * FROM banking_web_clicks WHERE session_id = 1;
```

#### 4. Update Data in Table
```sql
UPDATE banking_web_clicks
SET page = 'NEW PAGE'
WHERE customer_id = 540 AND session_id = 1;
```

#### 5. Delete Data from Table
```sql
DELETE FROM banking_web_clicks WHERE session_id = 1 AND page = 'NEW PAGE';
```

### nPath Function Example
The `nPath` function is utilized to extract paths from sequences of events. Below is an example that demonstrates how to retrieve the sequence of pages visited during a session.

```sql
SELECT * FROM nPath (
  ON banking_web_clicks PARTITION BY session_id ORDER BY datestamp
  USING
  Mode (NONOVERLAPPING)
  Pattern ('A*')
  Symbols (TRUE AS A)
  Result (
    FIRST (session_id OF A) AS session_id,
    ACCUMULATE (100000)(page OF A) AS path
  )
) AS dt;
```
**Output:**
The output will show the `session_id` and the sequence of pages visited (stored as a CLOB if exceeding 64000 characters).

| session_id | path                                                                                                                                          |
|------------|-----------------------------------------------------------------------------------------------------------------------------------------------|
| 1          | [ONLINE STATEMENT ENROLLMENT, CUSTOMER SUPPORT, ACCOUNT HISTORY, VIEW DEPOSIT DETAILS, PROFILE UPDATE, ...] |

### Keywords and Phrases
- nPath Function
- Results Example
- Teradata Vantage
- Analytics Database
- SQL Operations: SELECT, UPDATE, DELETE, CREATE
- Path and Pattern Analysis Functions
- ACCUMULATE String over 64000 Characters
- Deployment
- VantageCloud
- VantageCore
- Enterprise Edition
- IntelliFlex
- VMware
- Product: Teradata Vantage™
- Release Number: 17.20
- Published: June 2022
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Limitations and Recommendations
- Example Queries
- Input Table Structure
- Session Data Analysis","26","3","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-ACCUMULATE-String-over-64000-Characters","2024-07-27 12:03:07"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-ACCUMULATE-String-over-64000-Characters-CDISTINCT","text/html;charset=UTF-8","200","","Indexable","","nPath Function Results Example | Teradata Vantage - nPath Results Example: ACCUMULATE String over 64000 Characters, CDISTINCT - Analytics Database","146","1385","See example of Analytics Database (SQL Engine) function nPath with ACCUMULATE string greater than 64000 characters.","115","755","","0","nPath Function Results Example | Teradata Vantage - nPath Results Example: ACCUMULATE String over 64000 Characters, CDISTINCT - Analytics Database","146","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-ACCUMULATE-String-over-64000-Characters-CDISTINCT","","","","","","209784","13564","13564","4.809","A+","180","60","3.000","45.870","Hard","11.456","1","7","","707","707","0","99.860","711","709","0","","","","","","","","","0.453","","","","","","1.1","### Summary

In Teradata Vantage, SQL operations are fundamental for managing and manipulating data within databases. The primary operations include selecting data, updating records, deleting entries, and creating new tables or records. Understanding these operations is essential for effective data management and analysis.

### Code Examples

#### 1. Select
The `SELECT` statement is used to query data from a database. You can specify the columns you want to retrieve and the table from which to retrieve them.

```sql
SELECT customer_id, customer_name, account_balance
FROM customers
WHERE account_balance > 1000;
```

#### 2. Update
The `UPDATE` statement modifies existing records in a table. You can specify the columns to be updated along with their new values.

```sql
UPDATE customers
SET account_balance = account_balance + 500
WHERE customer_id = 12345;
```

#### 3. Delete
The `DELETE` statement removes records from a table based on specified conditions.

```sql
DELETE FROM customers
WHERE account_balance < 50;
```

#### 4. Create
The `CREATE` statement is used to create a new table in the database. You define the columns and their data types.

```sql
CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    transaction_date DATE,
    amount DECIMAL(10, 2),
    customer_id INT,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);
```

### Keywords and Phrases

- nPath Function Results Example
- Teradata Vantage - nPath Results Example
- ACCUMULATE String over 64000 Characters
- CDISTINCT - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Recommendations for Using Analytic Functions
- Examples: How to Use Pack
- TD_CategoricalSummary Syntax
- TD_ColumnSummary Syntax
- TD_Histogram Syntax
- TD_QQNorm Syntax
- TD_UnivariateStatistics Syntax
- TD_WhichMax Syntax
- TD_WhichMin Syntax
- TD_DecisionForest Syntax
- TD_GLM Syntax
- TD_SVM Syntax
- TD_XGBoost Syntax
- TD_FillRowID Syntax
- TD_NumApply Syntax
- TD_RoundColumns Syntax
- TD_SentimentExtractor Syntax
- TD_TextParser Syntax
- TD_TFIDF Syntax
- Hypothesis Test Components
- Hypothesis Test Types
- nPath Patterns
- nPath Results Examples
- Sessionize Syntax
- SQL Call
- Output","26","2","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-ACCUMULATE-String-over-64000-Characters-CDISTINCT","2024-07-27 11:51:08"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-ACCUMULATE-String-over-64000-Characters-DISTINCT","text/html;charset=UTF-8","200","","Indexable","","nPath Function Results Example | Teradata Vantage - nPath Results Example: ACCUMULATE String over 64000 Characters, DISTINCT - Analytics Database","145","1372","See example of Analytics Database (SQL Engine) function nPath with ACCUMULATE string greater than 64000 characters.","115","755","","0","nPath Function Results Example | Teradata Vantage - nPath Results Example: ACCUMULATE String over 64000 Characters, DISTINCT - Analytics Database","145","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-ACCUMULATE-String-over-64000-Characters-DISTINCT","","","","","","209688","13569","13569","4.810","A+","170","57","2.982","45.556","Hard","11.417","1","7","","707","707","0","99.860","711","709","0","","","","","","","","","0.640","","","","","","1.1","## Teradata Vantage: SQL Operations Overview

In Teradata Vantage, SQL operations such as Select, Update, Delete, and Create are fundamental for data manipulation and management. Here’s a concise overview of these operations along with code examples.

### Summary of SQL Operations

1. **Select**: Retrieve data from one or more tables.
2. **Update**: Modify existing records in a table.
3. **Delete**: Remove records from a table.
4. **Create**: Define a new table or database.

### Code Examples

#### 1. Select
Use the `SELECT` statement to query data from a specified table.
```sql
SELECT session_id, path
FROM banking_web_clicks
WHERE session_id = 1;
```

#### 2. Update
Use the `UPDATE` statement to change existing data in a table.
```sql
UPDATE banking_web_clicks
SET path = 'NEW_PATH_VALUE'
WHERE session_id = 1;
```

#### 3. Delete
Use the `DELETE` statement to remove records from a table.
```sql
DELETE FROM banking_web_clicks
WHERE session_id = 1;
```

#### 4. Create
Use the `CREATE TABLE` statement to define a new table structure.
```sql
CREATE TABLE banking_web_clicks (
    session_id INT,
    datestamp TIMESTAMP,
    page VARCHAR(255)
);
```

### Keywords and Phrases

- **nPath Function Results Example**
- **Teradata Vantage - nPath Results Example: ACCUMULATE String over 64000 Characters, DISTINCT**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **English (United States)**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Function Syntax Descriptions**
- **Usage Notes**
- **Recommendations for Using Analytic Functions**
- **TD Functions**
- **Examples: How to Use TD Functions**
- **SQL Call**
- **Output**
- **Input Table Rows Redistribution**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**

This overview provides a solid foundation for understanding and using SQL operations within Teradata Vantage, along with relevant keywords to explore further.","26","2","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-ACCUMULATE-String-over-64000-Characters-DISTINCT","2024-07-27 12:27:16"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-Combine-Values-from-One-Row-with-Values-from-the-Next-Row","text/html;charset=UTF-8","200","","Indexable","","nPath Function Results Example | Teradata Vantage - nPath Results Example: Combine Values from One Row with Values from the Next Row - Analytics Database","153","1442","See example of Analytics Database function nPath in which Result specifies that values from one row are to be combined with values from the next row.","149","934","","0","nPath Function Results Example | Teradata Vantage - nPath Results Example: Combine Values from One Row with Values from the Next Row - Analytics Database","153","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-Combine-Values-from-One-Row-with-Values-from-the-Next-Row","","","","","","212205","13409","13409","4.754","A+","159","62","2.565","65.360","Normal","11.190","1","7","","707","707","0","99.860","711","709","0","","","","","","","","","0.517","","","","","","1.1","## Summary

This document provides an overview of the SQL operations typically used in database management, particularly within Teradata Vantage's analytics database. It includes a detailed look at the four fundamental SQL operations: **SELECT**, **UPDATE**, **DELETE**, and **CREATE**. In addition, it covers the nPath function, which is significant for analyzing patterns in data, along with its syntax and examples.

## Code Example

### 1. SELECT

The SELECT statement is used to query data from a database.

```sql
SELECT userid, sessionid, clicktime
FROM clickstream
WHERE clicktime > '2024-01-01';
```

### 2. UPDATE

The UPDATE statement modifies existing records in a table.

```sql
UPDATE clickstream
SET pagetype = 'landing'
WHERE sessionid = 1 AND pagetype = 'home';
```

### 3. DELETE

The DELETE statement removes records from a table.

```sql
DELETE FROM clickstream
WHERE sessionid = 2;
```

### 4. CREATE

The CREATE statement creates a new table or database.

```sql
CREATE TABLE user_sessions (
    sessionid INT,
    userid INT,
    pagetype VARCHAR(50),
    clicktime TIMESTAMP
);
```

## Keywords and Phrases

- **nPath Function**
  - nPath Syntax
  - nPath Input
  - nPath Output
  - nPath Patterns
  - nPath Filters
  - nPath Results Example
  - Combine Values from One Row with Values from the Next Row

- **Teradata Vantage**
  - Analytics Database
  - Analytic Functions
  - Deployment
  - VantageCloud
  - VantageCore
  - Product Categories
  - Release Number: 17.20
  - Published: June 2022

- **Function Categories**
  - Data Cleaning Functions
  - Data Exploration Functions
  - Feature Engineering Functions
  - Model Training Functions
  - Model Scoring Functions

- **Usage Notes**
  - How to Read Syntax
  - Input Table Rows Redistribution
  - Function Syntax Descriptions
  - Size of the Query
  - Recommendations for Using Analytic Functions

- **Examples**
  - How to Use Pack
  - How to Use StringSimilarity
  - How to Use TD_GetRowsWithoutMissingValues
  - How to Use TD_OneHotEncodingFit
  - nPath Filters Example

This structured overview serves as a comprehensive guide to SQL operations and the specific functions available within Teradata Vantage, particularly focusing on analytical capabilities.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-Combine-Values-from-One-Row-with-Values-from-the-Next-Row","2024-07-27 11:39:05"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-FIRST-LAST_NOTNULL-MAX_CHOOSE-and-MIN_CHOOSE","text/html;charset=UTF-8","200","","Indexable","","nPath Function Results Example | Teradata Vantage - nPath Results Example: FIRST, LAST_NOTNULL, MAX_CHOOSE, and MIN_CHOOSE - Analytics Database","143","1399","See example of Analytics Database (SQL Engine) function nPath in which Result specifies the symbols FIRST, LAST_NOTNULL, MAX_CHOOSE, and MIN_CHOOSE.","148","996","","0","nPath Function Results Example | Teradata Vantage - nPath Results Example: FIRST, LAST_NOTNULL, MAX_CHOOSE, and MIN_CHOOSE - Analytics Database","143","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-FIRST-LAST_NOTNULL-MAX_CHOOSE-and-MIN_CHOOSE","","","","","","216425","13669","13669","4.846","A+","193","86","2.244","83.136","Easy","11.102","1","7","","707","707","0","99.860","710","708","0","","","","","","","","","0.751","","","","","","1.1","## Summary of Teradata Vantage nPath Function

The nPath function in Teradata Vantage allows users to analyze sequences of events or transactions in a dataset. It is particularly useful for pattern recognition in time-series data or clickstream analysis. The function provides results based on specified patterns and symbols, enabling various operations such as accumulating values, counting occurrences, and selecting specific attributes based on defined criteria.

### Code Example

Here are some basic SQL operations (Select, Update, Delete, Create) that can be performed in Teradata:

#### Select
```sql
SELECT *
FROM users
WHERE age > 30;
```

#### Update
```sql
UPDATE users
SET status = 'active'
WHERE last_login > CURRENT_DATE - INTERVAL '30' DAY;
```

#### Delete
```sql
DELETE FROM users
WHERE status = 'inactive';
```

#### Create
```sql
CREATE TABLE users (
    id INT,
    name VARCHAR(100),
    age INT,
    status VARCHAR(10)
);
```

### nPath Function Results Example
Here’s how the nPath function can be utilized to analyze transactional data:

```sql
SELECT * FROM nPath (
  ON trans1 PARTITION BY userid ORDER BY ts
  USING
  Mode (NONOVERLAPPING)
  Pattern ('A+')
  Symbols (TRUE AS A)
  Result (
    FIRST (userid OF A) AS Userid,
    LAST_NOTNULL (gender OF A) AS Gender,
    MAX_CHOOSE (productamt, productname OF A) AS Max_prod,
    MIN_CHOOSE (productamt, productname OF A) AS Min_prod
  )
) ORDER BY 1;
```

**Output**
```
userid  gender    max_prod     min_prod
1       M         television   envelopes
2       F         appliances   bookcases
3       F         cellphones   dvds
```

### Keywords and Phrases
- **nPath Function**
- **Results Example**
- **FIRST, LAST_NOTNULL**
- **MAX_CHOOSE, MIN_CHOOSE**
- **Analytics Database**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product: Teradata Vantage™**
- **Release Number: 17.20**
- **Published: June 2022**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Function Names with and without TD Prefix**
- **Example: How to Use Pack**
- **Example: Using TD_GetRowsWithMissingValues**
- **Example: Using TD_KMeansPredict**
- **Sessionize Syntax**
- **Hypothesis Test Types** 

This overview provides a foundational understanding of using the nPath function within Teradata Vantage, along with essential SQL operations and relevant keywords.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-FIRST-LAST_NOTNULL-MAX_CHOOSE-and-MIN_CHOOSE","2024-07-27 12:38:48"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-FIRST-Three-Forms-of-ACCUMULATE-COUNT-and-NTH","text/html;charset=UTF-8","200","","Indexable","","nPath Function Results Example | Teradata Vantage - nPath Results Example: FIRST, Three Forms of ACCUMULATE, COUNT, and NTH - Analytics Database","144","1377","See example of Analytics Database (SQL Engine) function nPath in which Result specifies the symbols FIRST, Three Forms of ACCUMULATE, COUNT, and NTH.","149","977","","0","nPath Function Results Example | Teradata Vantage - nPath Results Example: FIRST, Three Forms of ACCUMULATE, COUNT, and NTH - Analytics Database","144","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-FIRST-Three-Forms-of-ACCUMULATE-COUNT-and-NTH","","","","","","211542","13742","13742","4.872","A+","206","71","2.901","36.333","Hard","11.497","1","7","","707","707","0","99.860","711","709","0","","","","","","","","","0.453","","","","","","1.1","## Summary

This document provides an overview of the nPath function in Teradata Vantage, particularly focusing on its application in pattern analysis within datasets. The nPath function is powerful for extracting information from sequences of events or states, allowing the user to define complex patterns and obtain detailed insights from their data. It supports various analytical capabilities, such as counting, accumulating, and extracting distinct values over specified patterns.

### Code Examples

Here are some SQL code examples demonstrating essential SQL operations: SELECT, UPDATE, DELETE, and CREATE in the context of Teradata.

#### 1. **SELECT**
This statement retrieves data from a table.
```sql
SELECT *
FROM customers
WHERE country = 'USA';
```

#### 2. **UPDATE**
This statement modifies existing records in a table.
```sql
UPDATE customers
SET status = 'active'
WHERE customer_id = 123;
```

#### 3. **DELETE**
This statement removes records from a table.
```sql
DELETE FROM customers
WHERE customer_id = 123;
```

#### 4. **CREATE**
This statement creates a new table in the database.
```sql
CREATE TABLE new_customers (
    customer_id INT,
    name VARCHAR(100),
    email VARCHAR(100),
    registration_date DATE
);
```

### nPath Function Results Example: 
The following example demonstrates the use of the nPath function with various results:

```sql
SELECT * FROM nPath (
  ON clicks PARTITION BY sessionid ORDER BY clicktime
  USING
  Mode (NONOVERLAPPING)
  Symbols (
    pagetype='home' AS H,
    pagetype='checkout' AS C,
    pagetype <> 'home' AND pagetype <>'checkout' AS A
  )
  Pattern ('^H+.A*.C+$')
  Result (
    FIRST (sessionid OF ANY (H, A, C)) AS sessionid,
    FIRST (clicktime OF H) AS firsthome,
    FIRST (clicktime OF C) AS firstcheckout,
    ACCUMULATE (productname OF ANY (H,A,C)) AS products_accumulate,
    COUNT (DISTINCT productname OF ANY(H,A,C)) AS count_distinct_products,
    ACCUMULATE (CDISTINCT productname OF ANY (H,A,C)) AS consecutive_distinct_products,
    ACCUMULATE (DISTINCT productname OF ANY (H,A,C)) AS distinct_products,
    NTH (productname, -1 OF ANY(H,A,C)) AS nth
  )
) ORDER BY sessionid;
```

### Output
The output from the above code query will include fields such as `sessionid`, `firsthome`, `firstcheckout`, and various accumulated and counted product names.

### Keywords and Phrases
- **nPath Function**
- **Results Example**
- **FIRST**
- **ACCUMULATE**
- **COUNT**
- **DISTINCT**
- **Teradata Vantage**
- **Analytics Database**
- **Pattern Analysis**
- **Deployment**
- **Data Exploration Functions**
- **Model Training Functions**
- **SQL Operations: SELECT, UPDATE, DELETE, CREATE**
- **Analytics Cloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Data Cleaning Functions**
- **Hypothesis Testing Functions**
- **Text Analytic Functions**
- **Non-Deterministic Behavior**
- **Function Syntax Descriptions**
- **Spool Space Exhaustion**
- **Workload Management** 

This summary and examples provide foundational understanding and practical references for working with Teradata's nPath function and general SQL operations.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-FIRST-Three-Forms-of-ACCUMULATE-COUNT-and-NTH","2024-07-27 12:29:38"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-FIRST-and-Three-Forms-of-ACCUMULATE","text/html;charset=UTF-8","200","","Indexable","","nPath Function Results Example | Teradata Vantage - nPath Results Example: FIRST and Three Forms of ACCUMULATE - Analytics Database","131","1249","See example of Analytics Database (SQL Engine) function nPath in which Result specifies the symbol FIRST and three forms of ACCUMULATE.","135","875","","0","nPath Function Results Example | Teradata Vantage - nPath Results Example: FIRST and Three Forms of ACCUMULATE - Analytics Database","131","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-FIRST-and-Three-Forms-of-ACCUMULATE","","","","","","215944","13788","13788","4.888","A+","213","89","2.393","43.150","Hard","11.298","1","7","","707","707","0","99.860","710","708","0","","","","","","","","","0.576","","","","","","1.1","### Summary

In Teradata Vantage, the `nPath` function allows for advanced path and pattern analysis within data sets, particularly useful for analyzing sequences of events, such as user clicks in a session. This functionality is leveraged through SQL queries that define patterns and criteria for data extraction and analysis. The results can help organizations understand user behavior, optimize experiences, and derive actionable insights from complex datasets.

### Code Example

Here are some basic SQL commands illustrating how to perform common operations in Teradata:

#### 1. **Create a Table**
```sql
CREATE TABLE clicks (
    userid INT,
    sessionid INT,
    productname VARCHAR(255),
    pagetype VARCHAR(50),
    clicktime TIME,
    referrer VARCHAR(255),
    productprice DECIMAL(10, 2)
);
```

#### 2. **Insert Data**
```sql
INSERT INTO clicks (userid, sessionid, productname, pagetype, clicktime, referrer, productprice)
VALUES (1039, 1, 'television', 'checkout', '07:00:12', 'Company2', 500);
```

#### 3. **Select Data**
```sql
SELECT * FROM clicks WHERE sessionid = 1;
```

#### 4. **Update Data**
```sql
UPDATE clicks
SET productprice = 450
WHERE productname = 'television' AND sessionid = 1;
```

#### 5. **Delete Data**
```sql
DELETE FROM clicks WHERE sessionid = 1 AND productname = 'envelopes';
```

### Keywords and Phrases
- nPath Function Results Example
- Teradata Vantage - nPath Results Example: FIRST and Three Forms of ACCUMULATE
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Function Names with and without TD Prefix
- Recommendations for Using Analytic Functions
- SQL Call Example
- Output Example

This comprehensive overview provides a foundational understanding of how to utilize the `nPath` function alongside standard SQL operations within Teradata Vantage.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-FIRST-and-Three-Forms-of-ACCUMULATE","2024-07-27 11:42:14"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-Hindi-Input-ACCUMULATE-DISTINCT-and-CDISTINCT","text/html;charset=UTF-8","200","","Indexable","","nPath Function Results Example | Teradata Vantage - nPath Results Example: Hindi Input, ACCUMULATE DISTINCT and CDISTINCT - Analytics Database","142","1350","See example of Analytics Database (SQL Engine) function nPath that uses an input table with UNICODE characters.","111","711","","0","nPath Function Results Example | Teradata Vantage - nPath Results Example: Hindi Input, ACCUMULATE DISTINCT and CDISTINCT - Analytics Database","142","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-Hindi-Input-ACCUMULATE-DISTINCT-and-CDISTINCT","","","","","","212419","13406","13406","4.752","A+","154","68","2.265","78.735","Fairly Easy","11.232","1","7","","707","707","0","99.860","710","708","0","","","","","","","","","0.541","","","","","","1.1","## Summary

In Teradata, the analytical capabilities of the Vantage platform are enhanced with a variety of functions for data manipulation and analysis. This includes fundamental SQL operations like selecting, updating, deleting, and creating records, as well as specialized analytic functions. One of the notable features is the `nPath` function, which allows for complex pattern matching and accumulation of results based on defined paths within data sequences. This functionality is particularly useful in analytics scenarios where understanding sequential behaviors is essential.

## Code Examples

### 1. Select
To retrieve data from a table, the `SELECT` statement is used.

```sql
SELECT *
FROM my_table
WHERE condition;
```

### 2. Update
To modify existing records in a table, the `UPDATE` statement is utilized.

```sql
UPDATE my_table
SET column_name = new_value
WHERE condition;
```

### 3. Delete
To remove records from a table, the `DELETE` statement is executed.

```sql
DELETE FROM my_table
WHERE condition;
```

### 4. Create
To create a new table, the `CREATE TABLE` statement is employed.

```sql
CREATE TABLE new_table (
    column1 datatype,
    column2 datatype
);
```

### 5. nPath Function Example
The `nPath` function allows for complex queries that analyze sequences of events.

```sql
SELECT * FROM nPath (
    ON unicode_path PARTITION BY id
    USING
    Mode (NONOVERLAPPING)
    Pattern ('A*')
    Symbols (true AS A)
    Result (
        ACCUMULATE (DISTINCT event OF A DELIMITER ', ') AS acc_result_distinct,
        ACCUMULATE (CDISTINCT event OF A DELIMITER ', ') AS acc_result_cdistinct
    )
) AS dt;
```

### Output
The output of the `nPath` function will display results based on the distinct accumulation of events:

| acc_result_distinct                               | acc_result_cdistinct                                |
|---------------------------------------------------|----------------------------------------------------|
| [ఈవట3, ఈవట5, ఈవట1, ఈవట4, ఈవట2]                 | [ఈవట3, ఈవట5, ఈవట1, ఈవట4, ఈవట2, ఈవట1]          |

## Keywords and Phrases

- **nPath Function Results Example**
- **Teradata Vantage**
- **ACCUMULATE DISTINCT and CDISTINCT**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product: Analytics Database**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Recommendations for Using Analytic Functions** 

This summary encapsulates the key components of the Teradata Vantage platform's capabilities, particularly focusing on the SQL operations and the `nPath` function for advanced analytic queries.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-Hindi-Input-ACCUMULATE-DISTINCT-and-CDISTINCT","2024-07-27 11:40:32"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-Hindi-Input-ACCUMULATE-FIRST_NOTNULL","text/html;charset=UTF-8","200","","Indexable","","nPath Function Results Example | Teradata Vantage - nPath Results Example: Hindi Input, ACCUMULATE FIRST_NOTNULL - Analytics Database","133","1272","See example of Analytics Database (SQL Engine) function nPath that uses input tables with UNICODE characters.","109","699","","0","nPath Function Results Example | Teradata Vantage - nPath Results Example: Hindi Input, ACCUMULATE FIRST_NOTNULL - Analytics Database","133","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-Hindi-Input-ACCUMULATE-FIRST_NOTNULL","","","","","","260411","15542","15542","5.510","A+","591","337","1.754","100.000","Very Easy","10.128","1","7","","707","707","0","99.860","710","708","0","","","","","","","","","1.448","","","","","","1.1","### Summary
The following guide provides an overview of basic SQL operations—Select, Update, Delete, and Create—along with a code example for each operation. Additionally, it includes important keywords and phrases related to the Teradata Vantage environment, particularly focusing on the `nPath` function and analytics database analytic functions.

---

### Code Example

#### 1. **Select**
The `SELECT` statement is used to query data from a database.

```sql
SELECT *
FROM Employees
WHERE Department = 'Sales';
```

#### 2. **Update**
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE Employees
SET Salary = Salary * 1.10
WHERE PerformanceRating = 'Excellent';
```

#### 3. **Delete**
The `DELETE` statement removes existing records from a table.

```sql
DELETE FROM Employees
WHERE TerminationDate < '2022-01-01';
```

#### 4. **Create**
The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Department VARCHAR(50),
    Salary DECIMAL(10, 2)
);
```

---

### Keywords and Phrases
- **nPath Function**
  - Results Example
  - Teradata Vantage
  - nPath Results Example: Hindi Input
  - ACCUMULATE FIRST_NOTNULL
- **Analytics Database**
  - Database Analytic Functions
  - Feature Engineering
  - Model Training Functions
  - Model Evaluation Functions
  - Text Analytic Functions
- **Deployment**
  - VantageCloud
  - VantageCore
- **Edition**
  - Enterprise
  - IntelliFlex
  - VMware
- **Product**
  - Analytics Database
  - Teradata Vantage™
- **Release Information**
  - Release Number: 17.20
  - Published: June 2022
  - Last Update: April 6, 2024
- **Function Categories**
  - Data Cleaning Functions
  - Data Exploration Functions
  - Hypothesis Testing Functions
- **Usage Notes**
  - Input Table Rows Redistribution
  - Maximum Number of Columns in a Database Table
  - Avoid Deadlocks Using Volatile Tables
- **Example Input Tables**
  - Hindi Characters
  - Clickstream Data Analysis

This structured presentation of SQL operations and relevant database concepts aims to facilitate understanding and application in a Teradata Vantage context.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-Hindi-Input-ACCUMULATE-FIRST_NOTNULL","2024-07-27 11:28:02"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols","text/html;charset=UTF-8","200","","Indexable","","nPath Symbols - Analytics Database","34","321","A symbol identifies a row in the Pattern and Result syntax elements. A symbol can be any valid identifier (that is, a sequence of characters and digits that begins with a character) but is typically one or two uppercase letters. Symbols are case-insensitive; that is, 'SU' is identical to 'su', and the system reports an...","323","1904","","0","nPath Symbols - Analytics Database","34","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols","","","","","","217144","14121","14121","5.006","A+","324","77","4.208","88.981","Easy","11.284","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.468","","","","","","1.1","## Summary

In this guide, we will cover the fundamental SQL operations: **Select**, **Insert**, **Update**, and **Delete**. These operations are crucial for interacting with relational databases and performing essential data manipulations. Below are examples for each operation, specifically designed for an analytics database environment such as Teradata Vantage.

### Code Examples

#### 1. Select
The **SELECT** statement is used to query data from a database. You can specify which columns to retrieve.

```sql
SELECT city, temp, rh
FROM weather_data
WHERE rained_next_day = 1;
```

#### 2. Insert
The **INSERT** statement is used to add new records into a table.

```sql
INSERT INTO weather_data (city, temp, rh, cloudcover, windspeed, winddirection, rained_next_day)
VALUES ('Phoenix', 85, 20, 0.1, 10, 'SE', 0);
```

#### 3. Update
The **UPDATE** statement modifies existing records in a table.

```sql
UPDATE weather_data
SET temp = 78, rh = 35
WHERE city = 'Tempe';
```

#### 4. Delete
The **DELETE** statement removes records from a table.

```sql
DELETE FROM weather_data
WHERE city = 'Tusayan';
```

### Keywords and Phrases

- **nPath Symbols**: Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This guide provides a solid foundation for understanding basic SQL operations within the context of an analytics database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols","2024-07-27 12:36:01"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols/LAG-and-LEAD-Expressions-in-Symbol-Predicates","text/html;charset=UTF-8","200","","Indexable","","LAG and LEAD Expressions in Symbol Predicates - Analytics Database","66","621","You can create symbol predicates that compare a row to a previous or subsequent row, using a LAG or LEAD operator. See the following topics: LAG Expression Syntax LAG and LEAD Expression Rules LAG and LEAD Expressions Example: Alias for Input Query LAG and LEAD Expressions Example: No Alias for Input Query","307","1974","","0","LAG and LEAD Expressions in Symbol Predicates - Analytics Database","66","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols/LAG-and-LEAD-Expressions-in-Symbol-Predicates","","","","","","208966","13075","13075","4.635","A+","102","42","2.429","39.317","Hard","11.186","1","6","","707","707","0","99.860","714","712","0","","","","","","","","","0.536","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a robust set of analytic functions that allow users to perform complex data analysis efficiently. Among these functions are the LAG and LEAD expressions, which enable users to compare rows within a dataset, making them essential for time series analysis or any situation where the relationship between consecutive records is significant. These functions can be utilized in various scenarios, such as calculating running totals, comparing current records to previous ones, or analyzing trends over time.

### Code Examples

Below are basic examples demonstrating how to perform the standard SQL operations: SELECT, UPDATE, DELETE, and CREATE in the context of an Analytics Database.

#### 1. SELECT

```sql
SELECT customer_id, order_date, total_amount
FROM orders
WHERE order_date > '2023-01-01';
```

#### 2. UPDATE

```sql
UPDATE customers
SET status = 'active'
WHERE last_purchase_date > '2023-01-01';
```

#### 3. DELETE

```sql
DELETE FROM orders
WHERE order_date < '2022-01-01';
```

#### 4. CREATE

```sql
CREATE TABLE customer_feedback (
    feedback_id INT PRIMARY KEY,
    customer_id INT,
    feedback_date DATE,
    comments VARCHAR(255)
);
```

### Keywords and Phrases

- **LAG and LEAD Expressions in Symbol Predicates**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language English (United States)**
- **Last Update 2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Recommendations for Using Analytic Functions**
- **LAG Expression Syntax**
- **LAG and LEAD Expression Rules**
- **nPath Functions**
- **Sessionize Function** 

These keywords encapsulate the various functionalities, features, and considerations relevant to the Teradata Vantage™ Analytics Database, providing a comprehensive overview for users looking to utilize its capabilities effectively.","25","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols/LAG-and-LEAD-Expressions-in-Symbol-Predicates","2024-07-27 11:28:17"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols/LAG-and-LEAD-Expressions-in-Symbol-Predicates/LAG-Expression-Syntax","text/html;charset=UTF-8","200","","Indexable","","nPath Function LAG Expression Syntax | Teradata Vantage - LAG Expression Syntax - Analytics Database","100","929","See the syntax of LAG expressions in Analytics Database (SQL Engine) function nPath and read descriptions of required and optional syntax elements.","147","926","","0","nPath Function LAG Expression Syntax | Teradata Vantage - LAG Expression Syntax - Analytics Database","100","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols/LAG-and-LEAD-Expressions-in-Symbol-Predicates/LAG-Expression-Syntax","","","","","","209096","13071","13071","4.634","A+","186","49","3.796","69.260","Normal","11.409","1","7","","707","707","0","99.860","710","708","0","","","","","","","","","0.591","","","","","","1.1","## Summary

The nPath function and the LAG expression are part of Teradata Vantage's analytic capabilities, designed to perform advanced analytical operations on data. The nPath function allows users to analyze paths through data, which is particularly useful for identifying trends and patterns over sequences of events. The LAG expression, on the other hand, is a powerful tool for comparing values in a current row with those in preceding rows, providing insights into historical data trends.

### Code Examples

#### 1. Select

```sql
SELECT 
    customer_id, 
    order_date, 
    total_amount 
FROM 
    orders 
WHERE 
    total_amount > 100;
```

#### 2. Update

```sql
UPDATE 
    customers 
SET 
    status = 'active' 
WHERE 
    last_purchase_date > '2023-01-01';
```

#### 3. Delete

```sql
DELETE FROM 
    products 
WHERE 
    stock_quantity = 0;
```

#### 4. Create

```sql
CREATE TABLE sales (
    sale_id INT PRIMARY KEY,
    product_id INT,
    sale_date DATE,
    sale_amount DECIMAL(10, 2)
);
```

## Keywords and Phrases

- **nPath Function**
- **LAG Expression**
- **Syntax**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior** 
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Examples** 

This comprehensive overview and the code examples should provide a solid starting point for using the nPath function and LAG expression within Teradata Vantage.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols/LAG-and-LEAD-Expressions-in-Symbol-Predicates/LAG-Expression-Syntax","2024-07-27 12:22:36"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols/LAG-and-LEAD-Expressions-in-Symbol-Predicates/LAG-and-LEAD-Expression-Rules","text/html;charset=UTF-8","200","","Indexable","","LAG and LEAD Expression Rules - Analytics Database","50","472","A symbol definition can have multiple LAG and LEAD expressions. A symbol definition that has a LAG or LEAD expression cannot have an OR operator. If a symbol definition has a LAG or LEAD expression and the input is not a table, you must create an alias of the input query, as in LAG and LEAD Expressions Example: Alias f...","323","2003","","0","LAG and LEAD Expression Rules - Analytics Database","50","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols/LAG-and-LEAD-Expressions-in-Symbol-Predicates/LAG-and-LEAD-Expression-Rules","","","","","","208271","12980","12980","4.601","A+","109","40","2.725","45.735","Hard","11.229","1","7","","707","707","0","99.860","711","709","0","","","","","","","","","0.598","","","","","","1.1","## Summary
In Teradata Vantage™, the Analytics Database includes a variety of analytic functions that can be utilized for data exploration, feature engineering, and model training. Among these functions, LAG and LEAD expressions are particularly useful for accessing data from a previous or subsequent row in the result set, providing powerful capabilities for time series analysis and other sequential data tasks.

### Code Example
Below are examples of common SQL commands: `SELECT`, `UPDATE`, `DELETE`, and `CREATE`, along with examples of using LAG and LEAD expressions.

#### 1. SELECT
```sql
SELECT employee_id, first_name, last_name, 
       LAG(salary, 1) OVER (ORDER BY employee_id) AS previous_salary,
       LEAD(salary, 1) OVER (ORDER BY employee_id) AS next_salary
FROM employees;
```

#### 2. UPDATE
```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department_id = 10;
```

#### 3. DELETE
```sql
DELETE FROM employees
WHERE hire_date < '2010-01-01';
```

#### 4. CREATE
```sql
CREATE TABLE employee_salaries (
    employee_id INT,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

### LAG and LEAD Expression Rules - Analytics Database
- **LAG Expression**: Accesses data from a previous row in the result set.
- **LEAD Expression**: Accesses data from a subsequent row in the result set.
  
**Examples:**
- **Alias for Input Query**: When using LAG or LEAD with a non-table input, create an alias for the input query.
- **No Alias for Input Query**: If the input is a table, you can directly use the LAG or LEAD functions without aliasing.

### Keywords and Phrases
- LAG and LEAD Expression Rules
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Workload Management Configuration
- Avoid Deadlocks Using Volatile Tables
- Recommendations for Using Analytic Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Displaying Online Help for Analytics Database Analytic Functions

This concise guide provides essential SQL commands and highlights important concepts related to the use of analytic functions in the Teradata Analytics Database.","25","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols/LAG-and-LEAD-Expressions-in-Symbol-Predicates/LAG-and-LEAD-Expression-Rules","2024-07-27 12:41:55"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols/LAG-and-LEAD-Expressions-in-Symbol-Predicates/LAG-and-LEAD-Expressions-Example-Alias-for-Input-Query","text/html;charset=UTF-8","200","","Indexable","","nPath LAG and LEAD Expressions Example | Teradata Vantage - LAG and LEAD Expressions Example: Alias for Input Query - Analytics Database","136","1274","See example of LAG expression in Analytics Database (SQL Engine) function nPath where input query needs an alias.","113","719","","0","nPath LAG and LEAD Expressions Example | Teradata Vantage - LAG and LEAD Expressions Example: Alias for Input Query - Analytics Database","136","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols/LAG-and-LEAD-Expressions-in-Symbol-Predicates/LAG-and-LEAD-Expressions-Example-Alias-for-Input-Query","","","","","","221448","14137","14137","5.012","A+","362","142","2.549","78.049","Fairly Easy","11.449","1","7","","707","707","0","99.860","710","708","0","","","","","","","","","0.460","","","","","","1.1","## Summary

In Teradata Vantage, analytic functions are powerful tools used to perform complex calculations on data within a database. Functions such as `LAG` and `LEAD` are particularly useful for analyzing trends over time by allowing access to data from previous or subsequent rows in a dataset. The `nPath` function is another versatile tool that enables pattern matching across rows in a dataset, making it valuable for analyzing sequences of events, such as user interactions in web logs.

### Code Example

Here’s a basic demonstration of SQL operations (`SELECT`, `UPDATE`, `DELETE`, and `CREATE`) in Teradata:

1. **SELECT**: Retrieve data from a table.
   ```sql
   SELECT customer_id, session_id, page
   FROM bank_web_clicks
   WHERE customer_id = 529;
   ```

2. **UPDATE**: Modify existing data in a table.
   ```sql
   UPDATE bank_web_clicks
   SET page = 'ACCOUNT OVERVIEW'
   WHERE page = 'ACCOUNT SUMMARY'
   AND customer_id = 529;
   ```

3. **DELETE**: Remove data from a table.
   ```sql
   DELETE FROM bank_web_clicks
   WHERE customer_id = 529
   AND session_id = 0;
   ```

4. **CREATE**: Create a new table.
   ```sql
   CREATE TABLE new_bank_web_clicks (
       customer_id INT,
       session_id INT,
       page VARCHAR(255),
       datestamp TIMESTAMP
   );
   ```

### Keywords and Phrases

- nPath
- LAG
- LEAD
- Expressions Example
- Alias for Input Query
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- English (United States)
- Last Update
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- SQL Call
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Maximum Number of Columns in a Database Table
- Recommendations for Using Analytic Functions
- Non-Deterministic Behavior
- Workload Management Configuration
- Avoid Deadlocks Using Volatile Tables
- Spool Space Exhaustion for Large Partitions at High Concurrency
- TD_OneHotEncodingFit
- TD_SimpleImputeTransform
- TD_GLM
- TD_KMeans
- Hypothesis Test Types
- TD_ANOVA
- TD_ChiSq
- TD_ZTest
- Sessionize
- Customer Segmentation
- ClickStream Analysis
- Data Transformation
- Data Aggregation
- SQL Syntax
- Teradata Functions","27","3","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols/LAG-and-LEAD-Expressions-in-Symbol-Predicates/LAG-and-LEAD-Expressions-Example-Alias-for-Input-Query","2024-07-27 12:18:56"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols/LAG-and-LEAD-Expressions-in-Symbol-Predicates/LAG-and-LEAD-Expressions-Example-No-Alias-for-Input-Query","text/html;charset=UTF-8","200","","Indexable","","nPath LAG and LEAD Expressions Example | Teradata Vantage - LAG and LEAD Expressions Example: No Alias for Input Query - Analytics Database","139","1304","See example of LAG expression in Analytics Database (SQL Engine) function nPath where input query needs no alias.","113","719","","0","nPath LAG and LEAD Expressions Example | Teradata Vantage - LAG and LEAD Expressions Example: No Alias for Input Query - Analytics Database","139","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols/LAG-and-LEAD-Expressions-in-Symbol-Predicates/LAG-and-LEAD-Expressions-Example-No-Alias-for-Input-Query","","","","","","228568","14086","14086","4.994","A+","363","138","2.630","93.929","Very Easy","11.048","1","7","","707","707","0","99.860","710","708","0","","","","","","","","","0.556","","","","","","1.1","## Summary

In Teradata Vantage, database operations such as selecting, updating, deleting, and creating records are fundamental tasks that can be efficiently executed using SQL commands. This guide provides a brief overview of these operations along with examples tailored for Teradata environments.

### Code Examples

#### 1. Select
To retrieve data from one or more tables, you can use the `SELECT` statement.

```sql
SELECT userid, productname, clicktime
FROM aggregate_clicks
WHERE productprice > 100
ORDER BY clicktime DESC;
```

#### 2. Update
To modify existing records in a table, use the `UPDATE` statement. Here’s an example that updates the `productprice` for a specific `userid`.

```sql
UPDATE aggregate_clicks
SET productprice = productprice * 1.10
WHERE userid = 1039;
```

#### 3. Delete
To remove records from a table, the `DELETE` statement is used. The following example deletes entries for a specific `userid`.

```sql
DELETE FROM aggregate_clicks
WHERE userid = 1040 AND productname = 'cellphones';
```

#### 4. Create
To create a new table in the database, you can use the `CREATE TABLE` statement. Here’s an example:

```sql
CREATE TABLE new_clicks (
    userid INT,
    sessionid INT,
    productname VARCHAR(100),
    pagetype VARCHAR(50),
    clicktime TIMESTAMP,
    productprice DECIMAL(10, 2)
);
```

## Keywords and Phrases

- **nPath**: A powerful function for pattern matching in sequences of data.
- **LAG and LEAD Expressions**: Functions that allow access to a row at a specified physical offset before (LAG) or after (LEAD) the current row.
- **Analytics Database**: The environment within Teradata Vantage designed for advanced analytics.
- **Deployment**: Refers to the process of making an application or function available for use.
- **VantageCloud**: A cloud-based version of Teradata Vantage.
- **VantageCore**: The core features and functionalities of Teradata Vantage.
- **IntelliFlex**: A deployment option for Teradata that provides flexibility in resource allocation.
- **VMware**: A platform for virtualization that may be used in hosting Teradata Vantage.
- **Enterprise Edition**: A version of Teradata tailored for large-scale enterprise applications.
- **Analytic Functions**: Functions that perform calculations across a set of rows related to the current row.
- **Data Exploration Functions**: Functions designed for analyzing and exploring data sets.
- **Model Training Functions**: Functions used to train predictive models based on historical data.
- **Model Evaluation Functions**: Functions that assess the performance of trained models.
- **Text Analytic Functions**: Functions that process and analyze textual data.
- **Hypothesis Testing Functions**: Functions that perform statistical tests to validate assumptions about data.
- **Path and Pattern Analysis Functions**: Functions that analyze sequences of events or data patterns.
- **SQL Call**: Refers to executing SQL commands within Teradata Vantage.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols/LAG-and-LEAD-Expressions-in-Symbol-Predicates/LAG-and-LEAD-Expressions-Example-No-Alias-for-Input-Query","2024-07-27 12:09:08"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Syntax","text/html;charset=UTF-8","200","","Indexable","","nPath Function Syntax | Teradata Vantage - nPath Syntax - Analytics Database","76","697","See the syntax of Analytics Database (SQL Engine) function nPath and read descriptions of its required and optional syntax elements.","132","823","","0","nPath Function Syntax | Teradata Vantage - nPath Syntax - Analytics Database","76","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Syntax","","","","","","209080","13058","13058","4.629","A+","147","58","2.534","58.083","Fairly Hard","11.347","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.508","","","","","","1.1","# Overview of Teradata Vantage nPath Function

The **nPath** function in Teradata Vantage is a powerful analytic function used for analyzing sequences of events in your data. It allows users to identify patterns and sequences within data that can be crucial for understanding user behavior, transaction flows, and more. The function supports complex pattern matching and can aggregate results based on specified conditions.

## Key Features of nPath

- **Pattern Matching**: Identify complex patterns in sequences of events.
- **Flexible Aggregation**: Allows for various types of aggregation based on defined patterns.
- **Partitioning and Ordering**: Enables analysis within specific groups and orders, improving the granularity of insights.
- **Symbol Predicates**: Use of symbols to define conditions for the events being analyzed.

## Code Example

### 1. Create a Table

```sql
CREATE TABLE user_events (
    user_id INT,
    event_time TIMESTAMP,
    event_type VARCHAR(50)
);
```

### 2. Insert Sample Data

```sql
INSERT INTO user_events (user_id, event_time, event_type) VALUES 
(1, '2023-04-01 10:00:00', 'login'),
(1, '2023-04-01 10:05:00', 'view'),
(1, '2023-04-01 10:10:00', 'purchase'),
(2, '2023-04-01 10:15:00', 'login'),
(2, '2023-04-01 10:20:00', 'view');
```

### 3. Select with nPath

```sql
SELECT *
FROM nPath (
    ON user_events
    PARTITION BY user_id
    ORDER BY event_time
    USING
    Mode (OVERLAPPING)
    Pattern ('login' 'view' 'purchase')
    Symbols (event_type = 'login' AS login, event_type = 'view' AS view, event_type = 'purchase' AS purchase)
    Result (COUNT(login) AS login_count, COUNT(view) AS view_count, COUNT(purchase) AS purchase_count)
);
```

### 4. Update Example

```sql
UPDATE user_events 
SET event_type = 'signup' 
WHERE user_id = 1 AND event_type = 'login';
```

### 5. Delete Example

```sql
DELETE FROM user_events 
WHERE user_id = 2 AND event_type = 'view';
```

### 6. Drop Table Example

```sql
DROP TABLE user_events;
```

## Summary

The nPath function is a versatile tool for analyzing sequential data in Teradata Vantage, allowing users to define intricate patterns and extract meaningful insights. By combining it with other SQL operations, you can effectively manage and analyze your data.

## Keywords and Phrases

- **nPath Function Syntax**
- **Teradata Vantage**
- **nPath Syntax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Analytics Database Release Number**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Partition By**
- **Function Names with TD Prefix**
- **Displaying Online Help for Analytics Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion**","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Syntax","2024-07-27 11:54:44"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","nPath Syntax Elements - Analytics Database","42","394","Mode Specify the pattern-matching mode: Option Description OVERLAPPING Find every occurrence of pattern in partition, regardless of whether it is part of a previously found match. One row can match multiple symbols in a given matched pattern. NONOVERLAPPING Start next pattern search at row that follows last pattern mat...","323","2046","","0","nPath Syntax Elements - Analytics Database","42","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Syntax-Elements","","","","","","213890","14520","14520","5.147","A+","508","113","4.496","55.721","Fairly Hard","12.197","1","5","","707","707","0","99.860","714","711","0","","","","","","","","","0.529","","","","","","1.1","# Teradata Vantage™ Analytics Database Overview

Teradata Vantage™ is a powerful analytics database that provides advanced analytic functions to facilitate data exploration, feature engineering, model training, and evaluation. By leveraging the capabilities of the Analytics Database, users can perform complex analyses and derive actionable insights from their data efficiently.

## Summary

The Analytics Database includes a range of functionalities, including data cleaning, feature engineering, model training, and hypothesis testing functions. Users can execute SQL-like commands to manipulate data effectively. This document provides an overview of the basic operations—Select, Update, Delete, and Create—commonly used in database management.

## Code Examples

### 1. Select

The `SELECT` statement is used to query data from a database.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

### 2. Update

The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

### 3. Delete

The `DELETE` statement removes records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

### 4. Create

The `CREATE` statement is used to create a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Keywords and Phrases

- **nPath Syntax Elements**: Elements used in the nPath function for pattern matching.
- **Analytics Database**: The core database system that supports advanced analytics.
- **Database Analytic Functions**: Functions provided for performing analytic operations.
- **Deployment**: The process of making the software available for use.
- **VantageCloud**: Cloud-based deployment of Teradata Vantage.
- **VantageCore**: Core functionalities of Teradata Vantage.
- **Edition**: Refers to different versions or packages of the software.
- **Enterprise**: A version designed for large-scale operations.
- **IntelliFlex**: A flexible deployment option for Teradata systems.
- **VMware**: Virtualization technology for deploying Teradata solutions.
- **Product Category**: Classification of the software (e.g., Teradata Vantage™).
- **Release Number**: Versioning information of the software (e.g., 17.20).
- **Published**: Date when the version was released (e.g., June 2022).
- **Language**: Language in which documentation is provided (e.g., English (United States)).
- **Last Update**: The most recent date on which the document or software was updated (e.g., 2024-04-06).
- **Function Syntax Descriptions**: Detailed descriptions of function syntax.
- **Limitations**: Constraints or restrictions related to the use of functions.
- **Usage Notes**: Important notes regarding the use of specific functions.
- **Example**: Practical usage scenarios for the functions.
- **Data Exploration Functions**: Functions used to analyze data characteristics.
- **Model Training Functions**: Functions that facilitate the training of predictive models.
- **Hypothesis Testing Functions**: Functions for statistical testing.

These keywords and phrases can help users navigate and understand the capabilities of the Teradata Vantage™ Analytics Database effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Syntax-Elements","2024-07-27 11:48:29"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions","text/html;charset=UTF-8","200","","Indexable","","Text Analytic Functions | Teradata Vantage - Text Analytic Functions - Analytics Database","89","795","Learn about the Analytics Database (SQL Engine) functions for analyzing text.","77","483","","0","Text Analytic Functions | Teradata Vantage - Text Analytic Functions - Analytics Database","89","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions","","","","","","209617","13243","13243","4.695","A+","62","41","1.512","0.000","Very Hard","11.086","1","3","","707","707","0","99.860","717","715","0","","","","","","","","","0.783","","","","","","1.1","## Summary

Teradata Vantage is an advanced analytics database that offers a variety of analytic functions, including Text Analytic Functions, to help users manipulate and analyze data effectively. These functions provide capabilities for data cleaning, exploration, feature engineering, model training and scoring, and hypothesis testing, among others. This guide introduces basic SQL operations—Select, Update, Delete, and Create—within the context of Teradata Vantage, providing code examples to illustrate their syntax and usage.

## Code Example

### 1. Select

The `SELECT` statement is used to query data from a database. You can specify which columns you want to retrieve.

```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

### 2. Update

The `UPDATE` statement is used to modify existing records in a table. You must specify which records to update using a condition.

```sql
UPDATE employees
SET salary = salary * 1.10
WHERE performance_rating = 'Excellent';
```

### 3. Delete

The `DELETE` statement is used to remove records from a table. As with `UPDATE`, you should include a condition to specify which records to delete.

```sql
DELETE FROM employees
WHERE termination_date IS NOT NULL;
```

### 4. Create

The `CREATE` statement is used to create a new table or database. Here’s how to create a simple table.

```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

## Keywords and Phrases

- Teradata Vantage™
- Analytics Database
- Text Analytic Functions
- Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Hypothesis Testing Functions
- Select, Update, Delete, Create
- Deployment
- VantageCloud
- VantageCore
- Enterprise Edition
- IntelliFlex
- VMware
- Release Number 17.20
- Published June 2022
- Language: English (United States)
- Analytic Functions
- Input Table Rows Redistribution
- PARTITION BY Limitations
- Non-Deterministic Behavior
- Data Types
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- String Similarity
- NGramSplitter
- Sentiment Analysis
- TD_NaiveBayesTextClassifierTrainer
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Tests
- Sessionize

This overview should provide a foundational understanding of the SQL operations within Teradata Vantage, along with insights into the broader capabilities of the analytics database.","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions","2024-07-27 11:37:04"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter","text/html;charset=UTF-8","200","","Indexable","","NGramSplitter Function | Teradata Vantage - NGramSplitter - Analytics Database","78","719","This Analytics Database (SQL Engine) function tokenizes input stream and emits n multigrams, based on specified delimiter and reset parameters.","143","898","","0","NGramSplitter Function | Teradata Vantage - NGramSplitter - Analytics Database","78","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter","","","","","","210495","13585","13585","4.816","A+","237","60","3.950","57.899","Fairly Hard","11.521","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.861","","","","","","1.1","### Overview of Teradata Vantage and NGramSplitter

Teradata Vantage is an advanced analytics database designed to support various analytical functions, including text analytics. Among its powerful features is the **NGramSplitter** function, which is used for breaking down text into n-grams—sequences of n items (like words, letters, or characters). This function is particularly useful in natural language processing (NLP) tasks, as it helps in analyzing text data by transforming it into a structured format that machine learning models can understand.

The NGramSplitter function processes each input row as a separate document and returns rows for each unique n-gram, along with their counts and the total number of n-grams for each document. This is beneficial for applications such as text mining, sentiment analysis, and other NLP tasks.

### Code Examples

#### 1. Select
```sql
SELECT * 
FROM your_table
WHERE condition;
```
This query retrieves all columns from `your_table` where the specified condition is met.

#### 2. Insert (Create)
```sql
INSERT INTO your_table (column1, column2)
VALUES ('value1', 'value2');
```
This command adds a new row to `your_table` with specified values for `column1` and `column2`.

#### 3. Update
```sql
UPDATE your_table
SET column1 = 'new_value'
WHERE condition;
```
This statement modifies existing records in `your_table`, setting `column1` to a new value where the condition holds true.

#### 4. Delete
```sql
DELETE FROM your_table
WHERE condition;
```
This command removes rows from `your_table` that meet the specified condition.

### NGramSplitter Function Example

```sql
SELECT *
FROM NGramSplitter(
    ON (SELECT 'This is an example text for NGram processing.' AS text_column) 
    USING NGramSize = 2
) AS ngrams;
```

In this example, the `NGramSplitter` function is applied to a single input string. The `NGramSize` parameter is set to 2, which means that the function will generate bigrams (2-word sequences).

### Keywords and Phrases

- NGramSplitter Function
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number 17.20
- Published June 2022
- Language English (United States)
- Last Update 2024-04-06
- Product Category Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Text Analytic Functions
- NGramSplitter Usage Notes
- NGramSplitter Syntax
- NGramSplitter Input
- NGramSplitter Output
- Hypothesis Testing Functions
- Model Training Functions
- Model Evaluation Functions
- Feature Engineering Utility Functions
- Path and Pattern Analysis Functions
- TD_Histogram
- TD_ClassificationEvaluator
- TD_XGBoostPredict

The provided code examples and keywords give a comprehensive overview to help users effectively understand and utilize the capabilities of Teradata Vantage, especially the NGramSplitter function in their data analytics processes.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter","2024-07-27 12:44:53"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Examples-How-to-Use-NGramSplitter","text/html;charset=UTF-8","200","","Indexable","","NGramSplitter Function Examples | Teradata Vantage - Examples: How to Use NGramSplitter - Analytics Database","108","1015","See examples of the Analytics Database function NGramSplitter.","62","397","","0","NGramSplitter Function Examples | Teradata Vantage - Examples: How to Use NGramSplitter - Analytics Database","108","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Examples-How-to-Use-NGramSplitter","","","","","","209642","13595","13595","4.819","A+","135","51","2.647","41.842","Hard","11.301","1","5","","707","707","0","99.860","714","711","0","","","","","","","","","1.064","","","","","","1.1","### Summary

The `NGramSplitter` function in Teradata Vantage is a powerful tool used to process text data by splitting it into n-grams. This function can help in various text analytics tasks, including natural language processing and data preparation for machine learning models. The `NGramSplitter` function allows users to specify parameters for handling resets, punctuation, and delimiters, making it versatile for different data preprocessing needs.

### Code Example

Here are basic SQL examples demonstrating how to use the `NGramSplitter` function, as well as fundamental SQL operations like `SELECT`, `INSERT`, `UPDATE`, and `DELETE`.

#### 1. **Select**
```sql
SELECT *
FROM text_data
WHERE column_name IS NOT NULL;
```

#### 2. **Insert**
```sql
INSERT INTO text_data (id, content)
VALUES (1, 'This is a sample text for NGramSplitter.');
```

#### 3. **Update**
```sql
UPDATE text_data
SET content = 'Updated text content for analysis.'
WHERE id = 1;
```

#### 4. **Delete**
```sql
DELETE FROM text_data
WHERE id = 1;
```

#### 5. **NGramSplitter Example**
```sql
SELECT NGramSplitter(content, 2, 'Reset', 'Punctuation', 'Delimiter')
FROM text_data;
```
In this example, the `NGramSplitter` function is applied to the `content` column, with parameters to generate bigrams (2-grams), while resetting based on specified punctuation and delimiters.

### Keywords and Phrases

- NGramSplitter Function Examples
- Teradata Vantage - Examples
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Usage Notes
- Recommendations for Using Analytic Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- TD_GetRowsWithMissingValues
- TD_NaiveBayesTextClassifierPredict
- TD_SentimentExtractor
- TD_TFIDF
- Example: Omit Accumulate
- Example: Specify Accumulate
- NGramSplitter Usage Notes
- NGramSplitter Input
- NGramSplitter Output

These keywords and phrases encapsulate the essential aspects of using the `NGramSplitter` function and related Teradata Vantage features.","26","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Examples-How-to-Use-NGramSplitter","2024-07-27 12:21:54"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Examples-How-to-Use-NGramSplitter/Example-Omit-Accumulate","text/html;charset=UTF-8","200","","Indexable","","NGramSplitter Function Example | Teradata Vantage - Example: Omit Accumulate - Analytics Database","97","915","See example of Analytics Database (SQL Engine) function NGramSplitter that copies all input columns for each n -gram to the output table by default.","148","919","","0","NGramSplitter Function Example | Teradata Vantage - Example: Omit Accumulate - Analytics Database","97","Database Analytic Functions","27","NGramSplitter SQL Call","22","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Examples-How-to-Use-NGramSplitter/Example-Omit-Accumulate","","","","","","215345","13418","13418","4.757","A+","192","66","2.909","65.085","Normal","11.122","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","1.155","","","","","","1.1","## Summary

This document outlines the functionality of the **NGramSplitter** function within Teradata Vantage's Analytics Database. The NGramSplitter is used to segment text into n-grams, which are contiguous sequences of n items from a given sample of text. This functionality plays a crucial role in text analytics, allowing users to analyze and extract significant phrases or patterns from textual data. The output provides detailed insights such as the frequency of each n-gram and the total count of grams generated.

### Code Examples

Here’s a demonstration of basic SQL operations typically used with databases such as Teradata:

#### SELECT
The `SELECT` statement is used to retrieve data from a database.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

#### UPDATE
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

#### DELETE
The `DELETE` statement is used to remove records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

#### CREATE
The `CREATE` statement is used to create a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

### NGramSplitter Function Example

Here is an example of how to use the **NGramSplitter** function in Teradata Vantage:

```sql
SELECT * FROM NGramSplitter (
  ON paragraphs_input
  USING
  TextColumn ('paratext')
  Grams ('4-6')
  OutputTotalGramCount ('true')
) AS dt;
```

#### NGramSplitter Output
The output of the above query will include columns such as `paraid`, `paratopic`, `paratext`, `ngram`, `n`, `frequency`, and `totalcnt`, providing insights into the n-grams generated from the input text.

### Keywords and Phrases
- NGramSplitter Function Example
- Teradata Vantage
- Omit Accumulate
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This concise guide provides an overview of the NGramSplitter function and essential SQL operations, along with relevant keywords for further exploration of the Teradata Vantage Analytics Database features.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Examples-How-to-Use-NGramSplitter/Example-Omit-Accumulate","2024-07-27 12:14:29"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Examples-How-to-Use-NGramSplitter/Example-Specify-Accumulate","text/html;charset=UTF-8","200","","Indexable","","NGramSplitter Function Example | Teradata Vantage - Example: Specify Accumulate - Analytics Database","100","936","See example of Analytics Database (SQL Engine) function NGramSplitter that specifies input columns to copy to the output table for each n -gram.","144","900","","0","NGramSplitter Function Example | Teradata Vantage - Example: Specify Accumulate - Analytics Database","100","Database Analytic Functions","27","NGramSplitter SQL Call","22","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Examples-How-to-Use-NGramSplitter/Example-Specify-Accumulate","","","","","","215416","13446","13446","4.767","A+","194","68","2.853","64.393","Normal","11.131","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.652","","","","","","1.1","### Summary

This document provides an overview of the SQL operations (SELECT, UPDATE, DELETE, and CREATE) within the context of Teradata Vantage's Analytics Database. Each operation is fundamental for managing and manipulating data in a relational database environment. The SQL syntax is illustrated with examples relevant to Teradata Vantage, encompassing the unique capabilities and functionalities of the platform.

### Code Example

#### 1. SELECT
The `SELECT` statement is used to query data from a database table.

```sql
SELECT paraid, paratopic, paratext
FROM paragraphs_input
WHERE paraid = 1;
```

#### 2. UPDATE
The `UPDATE` statement modifies existing data in a table.

```sql
UPDATE paragraphs_input
SET paratopic = 'Advanced Decision Trees'
WHERE paraid = 1;
```

#### 3. DELETE
The `DELETE` statement removes rows from a table based on conditions.

```sql
DELETE FROM paragraphs_input
WHERE paraid = 2;
```

#### 4. CREATE
The `CREATE` statement is used to create a new table in the database.

```sql
CREATE TABLE new_paragraphs (
    paraid INT,
    paratopic VARCHAR(255),
    paratext VARCHAR(1000)
);
```

### Keywords and Phrases

- **NGramSplitter Function Example** | Teradata Vantage
- **Example: Specify Accumulate** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **NGramSplitter SQL Call**
- **NGramSplitter Output**","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Examples-How-to-Use-NGramSplitter/Example-Specify-Accumulate","2024-07-27 11:32:47"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Examples-How-to-Use-NGramSplitter/NGramSplitter-Examples-Input","text/html;charset=UTF-8","200","","Indexable","","NGramSplitter Examples Input - Analytics Database","49","458","The input table, paragraphs_input, contains sentences about commonly-used machine learning techniques. paragraphs_input paraid paratopic paratext 1 Decision Trees Decision tree learning uses a decision tree as a predictive model which maps observations about an item to conclusions about the items target value. It is on...","323","2013","","0","NGramSplitter Examples Input - Analytics Database","49","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Examples-How-to-Use-NGramSplitter/NGramSplitter-Examples-Input","","","","","","210434","13661","13661","4.843","A+","229","57","4.018","47.965","Hard","11.529","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.752","","","","","","1.1","### Summary

In working with databases, CRUD operations (Create, Read, Update, Delete) are fundamental for managing data. Below are SQL code examples demonstrating these basic operations using a sample table called `machine_learning_techniques`.

### Code Example

#### Create
To create a new table for storing information about machine learning techniques:
```sql
CREATE TABLE machine_learning_techniques (
    id INT PRIMARY KEY,
    technique_name VARCHAR(255),
    description TEXT
);
```

#### Read
To read or select all the records from the `machine_learning_techniques` table:
```sql
SELECT * FROM machine_learning_techniques;
```

#### Update
To update the description of a specific technique based on its ID:
```sql
UPDATE machine_learning_techniques
SET description = 'Updated description for decision trees.'
WHERE id = 1;
```

#### Delete
To delete a technique from the table:
```sql
DELETE FROM machine_learning_techniques
WHERE id = 2;
```

### Keywords and Phrases
- **NGramSplitter Examples Input**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions**
- **Data Exploration Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **NGramSplitter Syntax**
- **NGramSplitter Input**
- **NGramSplitter Output**
- **Examples: How to Use NGramSplitter**
- **Example: Omit Accumulate**
- **Example: Specify Accumulate**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Examples-How-to-Use-NGramSplitter/NGramSplitter-Examples-Input","2024-07-27 11:26:15"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/NGramSplitter-Input","text/html;charset=UTF-8","200","","Indexable","","NGramSplitter Input - Analytics Database","40","366","Input Table Schema Each row of the table has a document to tokenize. Column Data Type Description text_column VARCHAR or CLOB Document to tokenize. accumulate_column Any Column to copy to output table.","201","1322","","0","NGramSplitter Input - Analytics Database","40","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/NGramSplitter-Input","","","","","","208924","13062","13062","4.631","A+","73","38","1.921","12.507","Very Hard","11.126","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.434","","","","","","1.1","## Summary

The Analytics Database in Teradata Vantage™ provides a comprehensive suite of analytic functions that facilitate data analysis, model training, and evaluation. This includes functionalities for data cleaning, exploration, and advanced analytics such as machine learning and text analysis. The system is designed to handle complex queries efficiently while providing users with powerful tools to derive insights from their data.

## Code Examples

### 1. Create
To create a table in the Teradata Analytics Database, you can use the following SQL command:

```sql
CREATE TABLE documents (
    document_id INT,
    text_column VARCHAR(255),
    accumulate_column VARCHAR(255)
);
```

### 2. Select
To select data from the created table, you can execute:

```sql
SELECT document_id, text_column 
FROM documents 
WHERE document_id = 1;
```

### 3. Update
To update a specific record in the table:

```sql
UPDATE documents 
SET text_column = 'Updated document text'
WHERE document_id = 1;
```

### 4. Delete
To delete a record from the table:

```sql
DELETE FROM documents 
WHERE document_id = 1;
```

## Keywords and Phrases
- NGramSplitter Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- Recommendations for Using Analytic Functions
- Examples: How to Use [Function Name]
- Required Syntax Elements for [Function Name]
- Optional Syntax Elements for [Function Name]
- Input/Output Descriptions
- [Function Name] Usage Notes
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Path and Pattern Analysis Functions
- NGramSplitter Syntax
- NGramSplitter Examples Input
- Sessionize Syntax
- Teradata Links
- Related Documentation
- Input Table Schema
- Document to tokenize
- VARCHAR or CLOB
- Column to copy to output table

This structured approach provides a clear understanding of the capabilities and functionalities of the Teradata Analytics Database, enabling users to leverage its full potential for data analysis and insights generation.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/NGramSplitter-Input","2024-07-27 12:53:29"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/NGramSplitter-Output","text/html;charset=UTF-8","200","","Indexable","","NGramSplitter Output - Analytics Database","41","382","Output Table Schema The table has a row for each unique n-gram in each input document. Column Data Type Description total_count_column INTEGER [Column appears only with TotalCountColName ('true').] Total number of n-grams in document for each length n specified in Grams syntax element. See Required Syntax Elements for ...","323","2068","","0","NGramSplitter Output - Analytics Database","41","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/NGramSplitter-Output","","","","","","210790","13438","13438","4.764","A+","119","45","2.644","30.685","Hard","11.196","1","5","","707","707","0","99.860","711","709","0","","","","","","","","","0.844","","","","","","1.1","## Summary of Analytics Database Analytic Functions

The Analytics Database provides a robust set of analytic functions aimed at enhancing data management, exploration, and modeling capabilities. These functions are categorized into several groups, including data cleaning, exploration, feature engineering, model training, scoring, and evaluation, as well as text analytics and hypothesis testing. This comprehensive toolset allows users to perform complex data analysis, implement machine learning models, and derive insights from large datasets effectively.

### Code Example Section

Here are examples of common SQL operations such as `SELECT`, `UPDATE`, `DELETE`, and `CREATE` that are typically used in an analytics database context:

#### 1. SELECT
```sql
-- Selecting data from a table
SELECT ngram_column, frequency_column
FROM ngram_table
WHERE gram_length_column = 2
ORDER BY frequency_column DESC;
```

#### 2. UPDATE
```sql
-- Updating records in a table
UPDATE ngram_table
SET frequency_column = frequency_column + 1
WHERE ngram_column = 'example n-gram';
```

#### 3. DELETE
```sql
-- Deleting records from a table
DELETE FROM ngram_table
WHERE frequency_column < 10;
```

#### 4. CREATE
```sql
-- Creating a new table
CREATE TABLE ngram_table (
    total_count_column INTEGER,
    accumulate_column VARCHAR(255),
    ngram_column VARCHAR(255),
    gram_length_column INTEGER,
    frequency_column INTEGER
);
```

### Keywords and Phrases

- NGramSplitter Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number: 17.20
- Published: June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category: Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Examples for Functions like Pack, StringSimilarity, TD_ConvertTo
- Usage Notes
- Workload Management Configuration
- Avoiding Deadlocks
- Maximum Number of Columns
- Spool Space Exhaustion
- Non-Deterministic Behavior
- TD Functions (e.g., TD_DecisionForest, TD_GLM, TD_KMeans)
- Predictive Functions (e.g., TD_XGBoostPredict, TD_SVMPredict)
- Evaluation Functions (e.g., TD_ClassificationEvaluator, TD_RegressionEvaluator)
- Data types and structures used in modeling and data analysis. 

This overview encapsulates the capabilities and functions available in the Analytics Database, paving the way for advanced data handling and analytics practices.","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/NGramSplitter-Output","2024-07-27 12:29:44"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/NGramSplitter-Syntax","text/html;charset=UTF-8","200","","Indexable","","NGramSplitter Function Syntax | Teradata Vantage - NGramSplitter Syntax - Analytics Database","92","849","See the syntax of Analytics Database (SQL Engine) function NGramSplitter and read descriptions of its required and optional syntax elements.","140","874","","0","NGramSplitter Function Syntax | Teradata Vantage - NGramSplitter Syntax - Analytics Database","92","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/NGramSplitter-Syntax","","","","","","209527","13159","13159","4.665","A+","167","60","2.783","57.100","Fairly Hard","11.455","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.987","","","","","","1.1","### Overview of Teradata Vantage: NGramSplitter Function

The **NGramSplitter** function in Teradata Vantage is designed to analyze text data by breaking it down into n-grams, which are contiguous sequences of n items from a given sample of text. This function is particularly useful in text analytics, natural language processing, and machine learning tasks where understanding the structure and frequency of phrases is crucial.

### Key Features of NGramSplitter

- **Flexible Input**: It can process data from tables, views, or even subqueries.
- **Customizable Parameters**: Users can specify gram sizes, manage overlapping, convert cases, filter punctuation, and set delimiters.
- **Output Options**: The function can output total gram counts and provide additional columns for n-gram analysis.

### Code Examples

Here are examples demonstrating how to use the NGramSplitter function along with basic SQL operations like SELECT, UPDATE, DELETE, and CREATE.

#### 1. SELECT Example
```sql
SELECT *
FROM NGramSplitter(
    ON your_table
    USING TextColumn('your_text_column')
    Grams(2) -- Creates bigrams
    OverLapping('true') -- Allows overlapping grams
    ConvertToLowerCase('true') -- Converts text to lowercase
) AS ngrams;
```

#### 2. CREATE TABLE Example
```sql
CREATE TABLE ngram_output AS (
    SELECT *
    FROM NGramSplitter(
        ON your_table
        USING TextColumn('your_text_column')
        Grams(3) -- Creates trigrams
    )
) WITH DATA;
```

#### 3. UPDATE Example
```sql
UPDATE your_table
SET your_column = (
    SELECT STRING_AGG(ngram_column, ', ')
    FROM NGramSplitter(
        ON your_table
        USING TextColumn('your_text_column')
        Grams(1) -- Creates unigrams
    )
)
WHERE condition_column = 'some_condition';
```

#### 4. DELETE Example
```sql
DELETE FROM your_table
WHERE your_column IN (
    SELECT ngram_column
    FROM NGramSplitter(
        ON your_table
        USING TextColumn('your_text_column')
        Grams(2) -- Creates bigrams
    )
    WHERE frequency_column < 5 -- Remove n-grams with frequency less than 5
);
```

### Summary

The NGramSplitter function in Teradata Vantage is a powerful tool for text analysis, allowing users to extract n-grams from text data efficiently. By leveraging its flexibility and customization options, analysts can gain insights from textual datasets, enhancing their data-driven decision-making processes.

### Keywords and Phrases

- NGramSplitter Function Syntax
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Analytics Database
- Release Number
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Feature Engineering Transform Functions
- Text Analytic Functions
- Function Syntax Descriptions
- Function Names with and without TD Prefix
- Non-Deterministic Behavior
- Recommendations for Using Analytic Functions
- TD_WordEmbeddings
- TD_TextParser
- TD_TFIDF
- TD_SentimentExtractor
- TD_NaiveBayesTextClassifierPredict
- TD_NaiveBayesTextClassifierTrainer
- Hypothesis Testing Functions
- nPath
- Sessionize
- Model Training Functions
- Model Evaluation Functions","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/NGramSplitter-Syntax","2024-07-27 12:28:17"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/NGramSplitter-Usage-Notes","text/html;charset=UTF-8","200","","Indexable","","NGramSplitter Usage Notes | Teradata Vantage - NGramSplitter Usage Notes - Analytics Database","93","875","Learn about the technique with using the Analytics Database (SQL Engine) text analytic function NGramSplitter.","110","690","","0","NGramSplitter Usage Notes | Teradata Vantage - NGramSplitter Usage Notes - Analytics Database","93","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/NGramSplitter-Usage-Notes","","","","","","208957","13213","13213","4.684","A+","242","58","4.172","59.619","Fairly Hard","11.626","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.958","","","","","","1.1","### Overview of NGramSplitter in Teradata Vantage

NGramSplitter is a critical function within the Teradata Vantage system, primarily designed for text analytics. This function breaks down text data into n-grams, which are continuous sequences of n items (typically words) that can be utilized in various analytical tasks such as text classification, language modeling, and information retrieval. By transforming text into n-grams, analysts can derive meaningful features that facilitate deeper insights from textual data.

### Code Examples

Here are some basic SQL operations showcasing how to perform standard database actions using Teradata SQL syntax:

#### 1. **Create Table**
```sql
CREATE TABLE SampleTable (
    ID INT,
    Description VARCHAR(255)
);
```

#### 2. **Insert Data**
```sql
INSERT INTO SampleTable (ID, Description) VALUES (1, 'Sample description 1');
INSERT INTO SampleTable (ID, Description) VALUES (2, 'Sample description 2');
```

#### 3. **Select Data**
```sql
SELECT * FROM SampleTable;
```

#### 4. **Update Data**
```sql
UPDATE SampleTable
SET Description = 'Updated description'
WHERE ID = 1;
```

#### 5. **Delete Data**
```sql
DELETE FROM SampleTable WHERE ID = 2;
```

### Summary

The NGramSplitter in Teradata Vantage plays a vital role in text analytics by allowing users to convert textual data into n-grams. This process enhances the ability to analyze text for various applications, including classification and information retrieval. By leveraging SQL operations, users can efficiently manage and manipulate data within Teradata.

### Keywords and Phrases
- NGramSplitter Usage Notes
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Text Analytic Functions
- NGramSplitter Syntax
- Required Syntax Elements for NGramSplitter
- Optional Syntax Elements for NGramSplitter
- NGramSplitter Input
- NGramSplitter Output
- Examples: How to Use NGramSplitter
- Information Retrieval
- Language Modeling
- Text Classification","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/NGramSplitter-Usage-Notes","2024-07-27 12:32:58"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Optional-Syntax-Elements-for-NGramSplitter","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for NGramSplitter - Analytics Database","63","580","OverLapping Specify whether the function allows overlapping n-grams. Default: 'true' (Each word in each sentence starts an n-gram, if enough words follow it in the same sentence to form a whole n-gram of the specified size. For information on sentences, see the Reset syntax element description.) ConvertToLowerCase Spec...","323","2009","","0","Optional Syntax Elements for NGramSplitter - Analytics Database","63","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Optional-Syntax-Elements-for-NGramSplitter","","","","","","211610","13686","13686","4.852","A+","404","108","3.741","65.249","Normal","11.992","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.615","","","","","","1.1","### Summary

The **NGramSplitter** function in Teradata Vantage™ is used for text analytics, specifically for generating n-grams from text input. N-grams are continuous sequences of 'n' items (words, characters, etc.) from a given text. This function allows for various configurations to control how n-grams are generated, including options for punctuation removal, case sensitivity, and output formatting.

### Code Examples

Below are SQL code examples demonstrating the basic operations of **Select**, **Update**, **Delete**, and **Create** related to the NGramSplitter function.

#### 1. Create a Table

```sql
CREATE TABLE text_data (
    id INT,
    content VARCHAR(255)
);
```

#### 2. Insert Data

```sql
INSERT INTO text_data (id, content) VALUES
(1, 'This is an example sentence for n-grams.'),
(2, 'Teradata is a powerful analytics database.');
```

#### 3. Select N-Grams

```sql
SELECT *
FROM NGramSplitter(
    INPUT => (SELECT content FROM text_data),
    Grams => '2',
    OverLapping => 'true',
    Punctuation => '.,?!'
) AS ngrams;
```

#### 4. Update Data

```sql
UPDATE text_data
SET content = 'This is an updated sentence for n-grams.'
WHERE id = 1;
```

#### 5. Delete Data

```sql
DELETE FROM text_data
WHERE id = 2;
```

### Keywords and Phrases

- **Optional Syntax Elements for NGramSplitter**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**: Teradata Vantage™
- **NGramSplitter Syntax**
- **NGramSplitter Input**
- **NGramSplitter Output**
- **Accumulate**
- **Punctuation**
- **Delimiter**
- **OutputTotalGramCount**
- **TotalCountColName**
- **NGramColName**
- **GramLengthColName**
- **FrequencyColName**
- **Data Cleaning Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Data Exploration Functions**

This summary and these examples provide a foundational understanding of how to use the NGramSplitter function within Teradata Vantage™ for text analytics operations, alongside essential SQL operations.","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Optional-Syntax-Elements-for-NGramSplitter","2024-07-27 11:56:08"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Required-Syntax-Elements-for-NGramSplitter","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for NGramSplitter - Analytics Database","63","584","ON clause TBD TextColumn Specify the name of the column that contains the input text. This column must have a SQL string data type. Grams Specify the length, in words, of each n-gram (that is, the value of n). A value_range has the syntax integer1-integer2, where integer1 is less than or equal to integer2. The values o...","323","1977","","0","Required Syntax Elements for NGramSplitter - Analytics Database","63","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Required-Syntax-Elements-for-NGramSplitter","","","","","","208444","12998","12998","4.608","A+","108","46","2.348","52.485","Fairly Hard","11.241","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.705","","","","","","1.1","## Summary of NGramSplitter in Teradata Vantage

The `NGramSplitter` function in Teradata Vantage is designed to split text into n-grams, which are contiguous sequences of n items from a given sequence of text. This functionality is particularly useful in text analytics, natural language processing, and other analytical tasks where understanding the structure and frequency of phrases is important.

### Code Example

Here are examples of basic SQL operations (Select, Update, Delete, Create) that can be performed in Teradata Vantage, including the usage of `NGramSplitter`.

#### 1. Create Table

```sql
CREATE TABLE text_data (
    id INT,
    content VARCHAR(255)
);
```

#### 2. Insert Data

```sql
INSERT INTO text_data (id, content) VALUES (1, 'This is a test sentence for n-gram analysis.');
INSERT INTO text_data (id, content) VALUES (2, 'Another example for testing purposes.');
```

#### 3. Select Data

```sql
SELECT * FROM text_data;
```

#### 4. Update Data

```sql
UPDATE text_data
SET content = 'Updated content for analysis.'
WHERE id = 1;
```

#### 5. Delete Data

```sql
DELETE FROM text_data
WHERE id = 2;
```

#### 6. Using NGramSplitter

```sql
SELECT id, 
       NGramSplitter(content, 2) AS bigrams 
FROM text_data;
```

### Keywords and Phrases

- **Required Syntax Elements for NGramSplitter**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Function Syntax Descriptions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Input Table Schemas**
- **Accumulated Columns Impact on Function Performance**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **How to Read Syntax**
- **NGramSplitter Syntax**
- **Examples: How to Use NGramSplitter**
- **TD_NaiveBayesTextClassifierPredict**
- **TD_SentimentExtractor**
- **TD_TextParser**
- **TD_TFIDF**
- **TD_WordEmbeddings**

This structured overview provides you with a foundational understanding of how to utilize the `NGramSplitter` and conduct basic SQL operations within Teradata Vantage.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Required-Syntax-Elements-for-NGramSplitter","2024-07-27 11:34:20"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict","text/html;charset=UTF-8","200","","Indexable","","TD_NaiveBayesTextClassifierPredict Function | Teradata Vantage - TD_NaiveBayesTextClassifierPredict - Analytics Database","120","1113","This Analytics Database (SQL Engine) function uses the model output by TD_NaiveBayesTextClassifierTrainer function to analyze input data & make predictions.","156","988","","0","TD_NaiveBayesTextClassifierPredict Function | Teradata Vantage - TD_NaiveBayesTextClassifierPredict - Analytics Database","120","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict","","","","","","209095","13062","13062","4.631","A+","80","42","1.905","0.000","Very Hard","11.236","1","4","","707","707","0","99.860","715","713","0","","","","","","","","","0.539","","","","","","1.1","## Summary

The `TD_NaiveBayesTextClassifierPredict` function in Teradata Vantage is designed to use a Naive Bayes model, which is generated by the `TD_NaiveBayesTextClassifierTrainer` function, to analyze input text data and predict classifications. This function is a part of the text analytics capabilities within Teradata's Analytics Database, allowing for efficient and effective text classification tasks.

## Code Example

Here are some basic SQL operations including Select, Update, Delete, and Create.

### Select
```sql
SELECT * FROM your_table
WHERE condition;
```

### Update
```sql
UPDATE your_table
SET column_name = new_value
WHERE condition;
```

### Delete
```sql
DELETE FROM your_table
WHERE condition;
```

### Create
```sql
CREATE TABLE your_table (
    column1 datatype,
    column2 datatype,
    column3 datatype
);
```

## Keywords and Phrases
- **TD_NaiveBayesTextClassifierPredict Function**
- **Teradata Vantage**
- **TD_NaiveBayesTextClassifierPredict**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Analytics Database**
- **Release Number 17.20**
- **Published June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Product Category: Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Text Analytic Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Hypothesis Testing Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Function Syntax Descriptions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Function Names with and without TD Prefix**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **TD_NaiveBayesTextClassifierTrainer**
- **Prediction Models**
- **Function Input and Output**
- **Examples of TD_NaiveBayesTextClassifierPredict**
- **Text Classification Tasks**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict","2024-07-27 11:42:45"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Examples","text/html;charset=UTF-8","200","","Indexable","","TD_NaiveBayesTextClassifierPredict Function Example | Teradata Vantage - TD_NaiveBayesTextClassifierPredict Examples - Analytics Database","137","1287","Analytics Database (SQL Engine) See examples use model output by ML Engine NaiveBayesTextClassifierTrainer2 function to analyze data and make predictions.","154","994","","0","TD_NaiveBayesTextClassifierPredict Function Example | Teradata Vantage - TD_NaiveBayesTextClassifierPredict Examples - Analytics Database","137","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Examples","","","","","","209484","13516","13516","4.791","A+","111","47","2.362","19.232","Very Hard","11.285","1","5","","707","707","0","99.860","713","710","0","","","","","","","","","0.587","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a variety of analytic functions that assist in data exploration, cleaning, feature engineering, model training, scoring, and evaluation. One such function is the `TD_NaiveBayesTextClassifierPredict`, which is used for predicting classifications based on a trained Naive Bayes model. This document outlines basic SQL operations such as SELECT, UPDATE, DELETE, and CREATE, and provides examples for each operation relevant to Teradata.

### Code Example

Below are examples demonstrating basic SQL operations in Teradata:

### 1. **SELECT**
This command is used to retrieve data from a database.

```sql
SELECT customer_id, first_name, last_name
FROM customers
WHERE country = 'USA';
```

### 2. **UPDATE**
This command is used to modify existing data in a table.

```sql
UPDATE customers
SET last_name = 'Smith'
WHERE customer_id = 12345;
```

### 3. **DELETE**
This command is used to remove rows from a table.

```sql
DELETE FROM customers
WHERE customer_id = 12345;
```

### 4. **CREATE**
This command is used to create a new table in the database.

```sql
CREATE TABLE new_customers (
    customer_id INT,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    country VARCHAR(50)
);
```

## Keywords and Phrases

- **TD_NaiveBayesTextClassifierPredict Function Example**
- **Teradata Vantage**
- **TD_NaiveBayesTextClassifierPredict Examples**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Function Syntax Descriptions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **How to Read Syntax**
- **Usage Notes**
- **Examples: How to Use**
- **Application of Functions**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions**
- **Recommendations for Using Analytic Functions**
- **Feature Engineering Utility Functions**
- **Model Evaluation Functions**
- **Example: Using TD_NaiveBayesTextClassifierTrainer with Multinomial Model Type**
- **Example: How to Use TD_NaiveBayesTextClassifierPredict** 
- **Downloadable SQL script for examples**
- **Complete example availability** 

These keywords and phrases encapsulate the key components and functionalities of the Teradata Vantage Analytics Database, focusing on text classification and SQL operations.","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Examples","2024-07-27 11:44:49"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Examples/TD_NaiveBayesTextClassifierPredict-Example-Responses-Specified","text/html;charset=UTF-8","200","","Indexable","","TD_NaiveBayesTextClassifierPredict Function Example | Teradata Vantage - TD_NaiveBayesTextClassifierPredict Example: Responses Specified - Analytics Database","157","1472","See example of Analytics Database (SQL Engine) function TD_NaiveBayesTextClassifierPredict that specifies the Responses syntax element.","135","863","","0","TD_NaiveBayesTextClassifierPredict Function Example | Teradata Vantage - TD_NaiveBayesTextClassifierPredict Example: Responses Specified - Analytics Database","157","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Examples/TD_NaiveBayesTextClassifierPredict-Example-Responses-Specified","","","","","","210357","13913","13913","4.932","A+","207","108","1.917","72.472","Fairly Easy","11.940","1","6","","707","707","0","99.860","711","709","0","","","","","","","","","0.503","","","","","","1.1","### Overview of Teradata Vantage: TD_NaiveBayesTextClassifierPredict Function

The `TD_NaiveBayesTextClassifierPredict` function in Teradata Vantage is designed for predicting outcomes based on text data using the Naive Bayes classification method. This function can efficiently classify documents into specified categories based on tokenized input data.

#### Key Features:
- **Model Type**: Supports different model types, such as 'Bernoulli'.
- **Input Tokenization**: Accepts tokenized input for classification.
- **Output Probabilities**: Provides output probabilities for each classification outcome.
- **Accumulation of Results**: Allows results to be accumulated based on specified grouping (e.g., document names).

### Code Example

Here are examples of the basic SQL operations: SELECT, INSERT (CREATE), UPDATE, and DELETE.

#### SELECT
```sql
SELECT *
FROM TD_NaiveBayesTextClassifierPredict (
  ON complaints_test_tokenized AS PredictorValues PARTITION BY doc_id
  ON complaints_tokens_model AS Model DIMENSION
  USING
    ModelType ('Bernoulli')
    InputTokenColumn ('token')
    DocIDColumns ('doc_id')
    OutputProb ('true')
    Accumulate ('doc_name')
    Responses ('crash', 'no crash')
) AS dt
ORDER BY doc_id;
```

#### INSERT (CREATE)
```sql
CREATE TABLE new_complaints AS (
  SELECT *
  FROM complaints
) WITH NO DATA;
```

#### UPDATE
```sql
UPDATE complaints
SET status = 'resolved'
WHERE complaint_id = 12345;
```

#### DELETE
```sql
DELETE FROM complaints
WHERE complaint_id = 12345;
```

### Summary
The `TD_NaiveBayesTextClassifierPredict` function is a powerful tool for text classification in Teradata Vantage, allowing users to leverage Naive Bayes algorithms for predictive analytics. By using SQL operations such as SELECT, INSERT, UPDATE, and DELETE, users can effectively manage and query their data.

### Keywords and Phrases
- **TD_NaiveBayesTextClassifierPredict Function**
- **Teradata Vantage**
- **PredictorValues**
- **Model**
- **ModelType**
- **InputTokenColumn**
- **DocIDColumns**
- **OutputProb**
- **Accumulate**
- **Responses**
- **Analytics Database**
- **SQL Operations**
- **SELECT**
- **INSERT (CREATE)**
- **UPDATE**
- **DELETE**
- **Data Management**
- **Text Classification**
- **Naive Bayes Algorithm**
- **Probability Outputs** 

This structured approach should help in understanding and utilizing the `TD_NaiveBayesTextClassifierPredict` function effectively within Teradata Vantage.","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Examples/TD_NaiveBayesTextClassifierPredict-Example-Responses-Specified","2024-07-27 11:34:30"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Examples/TD_NaiveBayesTextClassifierPredict-Example-TopK-Specified","text/html;charset=UTF-8","200","","Indexable","","TD_NaiveBayesTextClassifierPredict Function Example | Teradata Vantage - TD_NaiveBayesTextClassifierPredict Example: TopK Specified - Analytics Database","152","1422","See example of Analytics Database (SQL Engine) function TD_NaiveBayesTextClassifierPredict that specifies the TopK syntax element.","130","828","","0","TD_NaiveBayesTextClassifierPredict Function Example | Teradata Vantage - TD_NaiveBayesTextClassifierPredict Example: TopK Specified - Analytics Database","152","Database Analytic Functions","27","Input","5","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Examples/TD_NaiveBayesTextClassifierPredict-Example-TopK-Specified","","","","","","216271","15496","15496","5.493","A+","631","179","3.525","80.580","Easy","12.798","1","6","","707","707","0","99.860","710","708","0","","","","","","","","","0.694","","","","","","1.1","## Summary

The Teradata Vantage platform offers a variety of analytic functions that can be utilized for data manipulation and predictive modeling. The `TD_NaiveBayesTextClassifierPredict` function is particularly useful for text classification tasks based on a Naive Bayes algorithm. In this context, we can see how to create a predictive model using the complaints data of vehicles and how to use that model to classify new input data.

### Code Example

Here are the SQL commands to perform basic operations — Select, Update, Delete, and Create — using Teradata SQL syntax.

#### Create

To create a new table to store tokenized complaints data, we use the following SQL statement:

```sql
CREATE MULTISET TABLE complaints_test_tokenized AS (
  SELECT doc_id, doc_name, lower(cast(token AS VARCHAR(20))) AS token
    FROM TextTokenizer (
      ON complaints_test PARTITION BY ANY
      USING
      TextColumn ('text_data')
      OutputByWord ('true')
      Accumulate ('doc_id', doc_name)
    ) AS dt
) WITH DATA;
```

#### Select

To retrieve the classified predictions based on the model we created, we can use:

```sql
SELECT * FROM TD_NaiveBayesTextClassifierPredict (
  ON complaints_test_tokenized AS PredictorValues PARTITION BY doc_id
  ON complaints_tokens_model AS Model DIMENSION
  USING
  ModelType ('Bernoulli')
  InputTokenColumn ('token')
  DocIDColumns ('doc_id')
  OutputProb ('true')
  Accumulate ('doc_name')
  TopK ('2')
) AS dt ORDER BY doc_id;
```

#### Update

To update a record in the complaints table, for example changing the `text_data` for a specific `doc_id`, you could use the following:

```sql
UPDATE complaints_test
SET text_data = 'UPDATED TEXT DATA'
WHERE doc_id = 1;
```

#### Delete

To delete a record from the complaints table, you would use:

```sql
DELETE FROM complaints_test
WHERE doc_id = 1;
```

### Keywords and Phrases

- **TD_NaiveBayesTextClassifierPredict Function Example**
- **Teradata Vantage**
- **TD_NaiveBayesTextClassifierPredict Example: TopK Specified**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Product Category**
- **Teradata Vantage™**
- **Model Training Functions**
- **Model Scoring Functions**
- **Text Analytic Functions**
- **SQL Call**
- **Input Table**
- **Output Table**
- **Data Cleaning Functions**
- **Example: Using TD_NaiveBayesTextClassifierTrainer with Multinomial Model Type**
- **Example: How to Use TD_NaiveBayesTextClassifierPredict**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Data Exploration Functions**
- **Feature Engineering Utility Functions**","27","1","4","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Examples/TD_NaiveBayesTextClassifierPredict-Example-TopK-Specified","2024-07-27 12:06:05"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Input","text/html;charset=UTF-8","200","","Indexable","","TD_NaiveBayesTextClassifierPredict Input - Analytics Database","61","563","Table Description PredictorValues Contains test data, for which to predict outcomes, in document-token pairs. To transform the input document into this form, input it to TD_TextParser or ML Engine function, TextTokenizer, or TextParser. TextTokenizer and TextParser have language-processing limitations that might limit ...","323","1992","","0","TD_NaiveBayesTextClassifierPredict Input - Analytics Database","61","Database Analytic Functions","27","PredictorValues Schema","22","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Input","","","","","","213358","13854","13854","4.911","A+","202","58","3.483","11.903","Very Hard","11.390","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.921","","","","","","1.1","### Summary

In the context of Teradata's Analytics Database, various SQL operations such as Select, Update, Delete, and Create are fundamental for managing data effectively. The focus here is on how to perform these operations within the Teradata environment, especially when dealing with analytic functions, data preprocessing, and model training.

### Code Example

Below are examples for basic SQL operations typically performed in Teradata:

#### 1. Select

This operation retrieves data from a table.

```sql
SELECT doc_id_column, token_column, prob
FROM PredictorValues
WHERE prob > 0.5;
```

#### 2. Update

This operation modifies existing data in a table.

```sql
UPDATE PredictorValues
SET prob = prob * 1.1
WHERE category = 'Positive';
```

#### 3. Delete

This operation removes data from a table.

```sql
DELETE FROM PredictorValues
WHERE prob < 0.1;
```

#### 4. Create

This operation creates a new table in the database.

```sql
CREATE TABLE NewModelResults (
    doc_id_column INTEGER,
    token_column VARCHAR(255),
    category VARCHAR(50),
    prob DOUBLE PRECISION
);
```

### Keywords and Phrases

- TD_NaiveBayesTextClassifierPredict Input
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- English (United States)
- Last Update
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- TD_ConvertTo
- TD_GetRowsWithoutMissingValues
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- TD_DecisionForest
- TD_XGBoost
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_TrainTestSplit
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_NaiveBayesTextClassifierTrainer
- PredictorValues Schema
- Model Schema

These keywords and phrases encapsulate essential concepts and functions within Teradata’s Analytics Database, emphasizing the capabilities and usage of its analytic functions.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Input","2024-07-27 12:24:10"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Output","text/html;charset=UTF-8","200","","Indexable","","TD_NaiveBayesTextClassifierPredict Output - Analytics Database","62","579","Output Table Schema Column Data Type Description doc_id CHARACTER, VARCHAR, INTEGER, or SMALLINT Single- or multiple-column document identifier. prediction VARCHAR Prediction category. loglik DOUBLE PRECISION Loglikelihood that document belongs to category. loglik_response DOUBLE PRECISION [Column appears only with Res...","323","2130","","0","TD_NaiveBayesTextClassifierPredict Output - Analytics Database","62","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Output","","","","","","211537","13468","13468","4.774","A+","161","54","2.981","4.657","Very Hard","11.357","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.586","","","","","","1.1","### Summary

The Teradata Vantage™ Analytics Database provides a robust set of analytic functions designed for various data processing and modeling tasks. These functions are categorized into data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analytics. Each function has specific syntax and requirements to facilitate the processing of data, whether it involves training machine learning models, evaluating their performance, or extracting insights from text data.

### Code Example Section

Here are some basic SQL commands to interact with a database, including examples for SELECT, UPDATE, DELETE, and CREATE operations:

#### 1. **Select**
```sql
SELECT doc_id, prediction, loglik 
FROM predictions 
WHERE loglik > 100;
```
This example retrieves the document ID, prediction, and log-likelihood from the `predictions` table where the log-likelihood is greater than 100.

#### 2. **Update**
```sql
UPDATE predictions 
SET prediction = 'New Category' 
WHERE doc_id = 12345;
```
This command updates the prediction for the document with ID 12345 to 'New Category'.

#### 3. **Delete**
```sql
DELETE FROM predictions 
WHERE doc_id = 12345;
```
This command deletes the record from the `predictions` table where the document ID is 12345.

#### 4. **Create**
```sql
CREATE TABLE predictions (
    doc_id INT PRIMARY KEY,
    prediction VARCHAR(50),
    loglik DOUBLE PRECISION,
    prob DOUBLE PRECISION
);
```
This SQL statement creates a new table named `predictions` with columns for document ID, prediction, log-likelihood, and probability.

### Keywords and Phrases

- TD_NaiveBayesTextClassifierPredict Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- jmh1512506877710
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions

This structured overview and the accompanying SQL examples provide a foundational understanding of how to interact with Teradata's Analytics Database effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Output","2024-07-27 12:00:56"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_NaiveBayesTextClassifierPredict Function Syntax | Teradata Vantage - TD_NaiveBayesTextClassifierPredict Syntax - Analytics Database","134","1243","See the syntax of Analytics Database function TD_NaiveBayesTextClassifierPredict and read descriptions of its required and optional syntax elements.","148","925","","0","TD_NaiveBayesTextClassifierPredict Function Syntax | Teradata Vantage - TD_NaiveBayesTextClassifierPredict Syntax - Analytics Database","134","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Syntax","","","","","","209570","13188","13188","4.675","A+","154","57","2.702","21.708","Very Hard","11.466","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.518","","","","","","1.1","## Summary

The `TD_NaiveBayesTextClassifierPredict` function is part of the Teradata Vantage Analytics Database and is used to perform predictions based on a Naive Bayes text classification model. This function allows users to specify a variety of parameters to control the input data, model type, output, and more. It can be utilized in several contexts, such as within a `SELECT` statement, or as part of a `CREATE TABLE` or `CREATE VIEW` statement.

### Code Example

Here are examples demonstrating how to use the `TD_NaiveBayesTextClassifierPredict` function along with basic SQL operations like `SELECT`, `UPDATE`, `DELETE`, and `CREATE`.

#### SELECT Example

```sql
SELECT 
    doc_id_column,
    TD_NaiveBayesTextClassifierPredict (
        ON input_table AS PredictorValues PARTITION BY doc_id_column
        ON model_table AS Model DIMENSION
        USING
            InputTokenColumn ('input_token')
            ModelType ('Multinomial')
            DocIDColumns ('doc_id_column')
            TopK (3)
    ) AS predictions
FROM 
    input_table
JOIN 
    model_table ON input_table.model_id = model_table.model_id;
```

#### CREATE TABLE Example

```sql
CREATE TABLE predictions_table AS (
    SELECT 
        doc_id_column,
        TD_NaiveBayesTextClassifierPredict (
            ON input_table AS PredictorValues
            ON model_table AS Model DIMENSION
            USING
                InputTokenColumn ('input_token')
                ModelType ('Multinomial')
                DocIDColumns ('doc_id_column')
                TopK (3)
        ) AS predictions
    FROM 
        input_table
    JOIN 
        model_table ON input_table.model_id = model_table.model_id
) WITH NO DATA;
```

#### UPDATE Example

```sql
UPDATE predictions_table
SET prediction = TD_NaiveBayesTextClassifierPredict (
        ON input_table AS PredictorValues
        ON model_table AS Model DIMENSION
        USING
            InputTokenColumn ('input_token')
            ModelType ('Multinomial')
            DocIDColumns ('doc_id_column')
    )
WHERE doc_id_column = 'specific_doc_id';
```

#### DELETE Example

```sql
DELETE FROM predictions_table
WHERE doc_id_column = 'specific_doc_id';
```

## Keywords and Phrases

- **TD_NaiveBayesTextClassifierPredict Function Syntax**
- **Teradata Vantage**
- **TD_NaiveBayesTextClassifierPredict Syntax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware**
- **Product: Analytics Database**
- **Release Number: 17.20**
- **Published: June 2022**
- **Last Update: 2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **TD_NaiveBayesTextClassifierTrainer**
- **Model Evaluation Functions**
- **Example Usage**
- **Input and Output Specifications**
- **Using TopK and Responses**
- **Accumulate Column Options**
- **Creating Views and Tables**","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Syntax","2024-07-27 12:43:49"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","TD_NaiveBayesTextClassifierPredict Syntax Elements - Analytics Database","71","667","InputTokenColumn Specify the name of the PredictorValues column that contains the tokens. ModelType [Optional] Specify the model type of the text classifier. Default: 'Multinomial' DocIDColumns Specify the names of the PredictorValues columns that contain the document identifier. ModelTokenColumn [Optional] Specify the...","323","2023","","0","TD_NaiveBayesTextClassifierPredict Syntax Elements - Analytics Database","71","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Syntax-Elements","","","","","","210095","13319","13319","4.722","A+","257","81","3.173","26.185","Very Hard","11.729","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.546","","","","","","1.1","## Summary

In Teradata's Analytics Database, various SQL operations can be performed, including selecting, updating, deleting, and creating data within tables. The operations are essential for managing the data efficiently and are foundational to any database interaction. Below is a concise overview of the basic SQL commands along with examples for each operation.

### Code Example

#### 1. **SELECT**
The `SELECT` statement is used to retrieve data from one or more tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

#### 2. **UPDATE**
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 3. **DELETE**
The `DELETE` statement is used to remove existing records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

#### 4. **CREATE**
The `CREATE` statement is used to create a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

### Keywords and Phrases
- **TD_NaiveBayesTextClassifierPredict**
- **Syntax Elements**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **AMP Configuration Impact**
- **Limitations When Using PARTITION BY**
- **Accumulated Columns Impact on Performance**
- **Spool Space Exhaustion**
- **Data Exploration Functions**
- **Moving Average Functions**
- **TD_CategoricalSummary**
- **TD_ColumnSummary**
- **TD_GetRowsWithMissingValues**
- **TD_Histogram**
- **TD_UnivariateStatistics**
- **Feature Engineering Utility Functions**
- **Model Evaluation Functions** 

This summary provides an overview of essential SQL commands and relevant terminology within the context of Teradata's Analytics Database and its functions.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Syntax-Elements","2024-07-27 11:36:11"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer","text/html;charset=UTF-8","200","","Indexable","","TD_NaiveBayesTextClassifierTrainer | NaiveBayesTextClassifierTrainer - TD_NaiveBayesTextClassifierTrainer - Analytics Database","126","1162","This Analytics Database (SQL Engine) function calculates conditional probabilities for different token probabilities for all categories.","136","809","","0","TD_NaiveBayesTextClassifierTrainer | NaiveBayesTextClassifierTrainer - TD_NaiveBayesTextClassifierTrainer - Analytics Database","126","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer","","","","","","209295","13156","13156","4.664","A+","109","48","2.271","0.000","Very Hard","11.346","1","4","","707","707","0","99.860","715","713","0","","","","","","","","","0.723","","","","","","1.1","### Summary
The **TD_NaiveBayesTextClassifierTrainer** is a function within the Teradata Vantage Analytics Database that enables the training of a Naive Bayes text classification model. This function computes the conditional probabilities for token-category pairs, prior probabilities, and the probabilities of missing tokens for all categories. Following the training phase, the model can be utilized to classify documents into specific categories based on the learned probability values.

### Code Example
Here, we provide examples of SQL operations typically used in database management, specifically focusing on `SELECT`, `UPDATE`, `DELETE`, and `CREATE` statements, which are foundational for interacting with databases.

#### SELECT
```sql
SELECT category, COUNT(*) AS token_count
FROM tokens_table
GROUP BY category;
```

#### UPDATE
```sql
UPDATE tokens_table
SET token_count = token_count + 1
WHERE token = 'example_token';
```

#### DELETE
```sql
DELETE FROM tokens_table
WHERE token = 'obsolete_token';
```

#### CREATE
```sql
CREATE TABLE tokens_table (
    token VARCHAR(255),
    category VARCHAR(255),
    token_count INT
);
```

### Keywords and Phrases
- **TD_NaiveBayesTextClassifierTrainer**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**: Teradata Vantage™
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Function Syntax Descriptions**
- **Usage Notes**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration**
- **Examples: How to Use TD_NaiveBayesTextClassifierTrainer**
- **Example: Using TD_NaiveBayesTextClassifierTrainer with Multinomial Model Type** 

These keywords and phrases encapsulate the core functionalities and features of the TD_NaiveBayesTextClassifierTrainer and the associated analytic functions within the Teradata Vantage environment.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer","2024-07-27 11:29:23"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer/Example-Using-TD_NaiveBayesTextClassifierTrainer-with-Multinomial-Model-Type","text/html;charset=UTF-8","200","","Indexable","","TD_NaiveBayesTextClassifierTrainer Function Example | Teradata Vantage - Example: Using TD_NaiveBayesTextClassifierTrainer with Multinomial Model Type - Analytics Database","171","1599","See an example of the Analytics Database (SQL Engine) function TD_NaiveBayesTextClassifierTrainer.","98","628","","0","TD_NaiveBayesTextClassifierTrainer Function Example | Teradata Vantage - Example: Using TD_NaiveBayesTextClassifierTrainer with Multinomial Model Type - Analytics Database","171","Database Analytic Functions","27","TD_NaiveBayesTextClassifierTrainer InputTable","45","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer/Example-Using-TD_NaiveBayesTextClassifierTrainer-with-Multinomial-Model-Type","","","","","","210270","13252","13252","4.698","A+","208","111","1.874","39.394","Hard","12.127","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","2.371","","","","","","1.1","## Overview of TD_NaiveBayesTextClassifierTrainer in Teradata Vantage

The `TD_NaiveBayesTextClassifierTrainer` function in Teradata Vantage is part of the analytics database suite and is designed for training a Naive Bayes text classification model. This function allows users to classify text data based on the occurrence of tokens (words) in documents. It supports various model types, including the Multinomial model, which is commonly used for text classification tasks.

### Code Example

Here’s how to use the `TD_NaiveBayesTextClassifierTrainer` function effectively:

#### 1. **Create Table**
To use the Naive Bayes classifier, you first need to create an input table containing the tokenized text data.

```sql
CREATE TABLE complaints_tokenized (
    doc_id INTEGER,
    category VARCHAR(50),
    token VARCHAR(50)
);
```

#### 2. **Insert Data**
Insert sample data into the table. The data should consist of document IDs, corresponding categories (like ""crash"" or ""no_crash""), and tokens (words).

```sql
INSERT INTO complaints_tokenized (doc_id, category, token) VALUES
(1, 'no_crash', 'vehicl'),
(1, 'no_crash', 'motor'),
(1, 'no_crash', 'separ'),
(2, 'crash', 'deploy'),
(2, 'crash', 'anoth'),
(3, 'no_crash', 'sunroof'),
(4, 'crash', 'driver');
```

#### 3. **Train the Model**
Use the `TD_NaiveBayesTextClassifierTrainer` to train the model on the tokenized data.

```sql
SELECT * FROM TD_NaiveBayesTextClassifierTrainer (
   ON complaints_tokenized AS InputTable
   USING
   TokenColumn ('token')
   DocCategoryColumn ('category')
   ModelType ('Multinomial')
) AS dt;
```

#### 4. **Output Table**
The output will contain probabilities associated with each token and its corresponding category.

| token                                 | category    | prob        |
|---------------------------------------|-------------|-------------|
| driver                                | crash       | 0.076923077 |
| vehicl                                | no_crash    | 0.086956522 |
| leak                                  | no_crash    | 0.086956522 |
| anoth                                 | crash       | 0.076923077 |
| deploy                                | crash       | 0.076923077 |
| ...                                   | ...         | ...         |

### Summary

The `TD_NaiveBayesTextClassifierTrainer` function in Teradata Vantage is a powerful tool for text classification tasks. By creating a structured input table and utilizing this function, users can efficiently train models to categorize text based on the presence of specific tokens.

### Keywords and Phrases
- **TD_NaiveBayesTextClassifierTrainer Function Example**
- **Teradata Vantage**
- **Multinomial Model Type**
- **Analytics Database**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **SQL Syntax**
- **Input Table Structure**
- **Document Classification**
- **Tokenization**
- **Probabilities Output**
- **Training a Naive Bayes Model**
- **Teradata VantageCloud**
- **Enterprise Edition**
- **IntelliFlex**
- **VMware Integration**
- **Release Number 17.20**
- **Published June 2022**
- **Last Update April 2024**","26","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer/Example-Using-TD_NaiveBayesTextClassifierTrainer-with-Multinomial-Model-Type","2024-07-27 11:21:06"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer/TD_NaiveBayesTextClassifierTrainer-Input","text/html;charset=UTF-8","200","","Indexable","","TD_NaiveBayesTextClassifierTrainer Input - Analytics Database","61","563","Input Table Schema Column Data Type Description doc_id_column BYTEINT/SMALLINT/INTEGER/BIGINT or CHAR/VARCHAR The InputTable column name that contains the document identifier. This column is required for 'Bernoulli' model type. token_column CHAR or VARCHAR The column name that contains the classified training tokens fr...","323","2117","","0","TD_NaiveBayesTextClassifierTrainer Input - Analytics Database","61","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer/TD_NaiveBayesTextClassifierTrainer-Input","","","","","","210043","13415","13415","4.756","A+","108","45","2.400","0.000","Very Hard","11.248","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.527","","","","","","1.1","# Teradata Vantage™ Analytics Database Overview

The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions designed to empower data-driven decision-making. With capabilities spanning data cleaning, exploration, feature engineering, model training, scoring, and evaluation, it supports a wide array of analytics tasks. This document highlights the core functionality of the Teradata Vantage Analytics Database, with a focus on its analytic functions.

## Summary

Teradata's Analytics Database offers various analytic functions categorized into data cleaning, data exploration, feature engineering, model training, scoring, evaluation, and text analytics. Each function is designed to handle specific tasks, enabling users to efficiently process and analyze data. Important functions include data transformation, statistical analysis, and machine learning model training and evaluation.

### Key Features:
- **Data Cleaning**: Functions to handle missing values, outliers, and data formatting.
- **Data Exploration**: Tools for summarizing and visualizing data.
- **Feature Engineering**: Functions to create and transform features for modeling.
- **Model Training & Scoring**: Support for a variety of machine learning algorithms.
- **Model Evaluation**: Tools for assessing model performance.

## Code Example

This section includes SQL commands demonstrating basic database operations: `SELECT`, `UPDATE`, `DELETE`, and `CREATE`.

### 1. SELECT
```sql
SELECT doc_id_column, token_column, doc_category_column
FROM training_data
WHERE doc_category_column = 'spam';
```

### 2. UPDATE
```sql
UPDATE training_data
SET doc_category_column = 'ham'
WHERE doc_id_column = 12345;
```

### 3. DELETE
```sql
DELETE FROM training_data
WHERE doc_category_column = 'spam' AND doc_id_column = 12345;
```

### 4. CREATE
```sql
CREATE TABLE training_data (
    doc_id_column INTEGER PRIMARY KEY,
    token_column VARCHAR(255),
    doc_category_column VARCHAR(50)
);
```

## Keywords and Phrases
- TD_NaiveBayesTextClassifierTrainer Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Cleaning Functions
- Pack
- StringSimilarity
- TD_ConvertTo
- TD_GetFutileColumns
- TD_GetRowsWithoutMissingValues
- TD_OutlierFilterFit
- TD_SimpleImputeFit
- TD_SimpleImputeTransform
- Unpack
- MovingAverage
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_GetRowsWithMissingValues
- TD_Histogram
- TD_QQNorm
- TD_UnivariateStatistics
- TD_WhichMax
- TD_WhichMin
- Feature Engineering Transform Functions
- Antiselect
- TD_BinCodeFit
- TD_BinCodeTransform
- TD_ColumnTransformer
- TD_FunctionFit
- TD_FunctionTransform
- TD_NonLinearCombineFit
- TD_NonLinearCombineTransform
- TD_OneHotEncodingFit
- TD_OneHotEncodingTransform
- TD_OrdinalEncodingFit
- TD_OrdinalEncodingTransform
- TD_Pivoting
- TD_PolynomialFeaturesFit
- TD_PolynomialFeaturesTransform
- TD_RandomProjectionFit
- TD_RandomProjectionTransform
- TD_RowNormalizeFit
- TD_RowNormalizeTransform
- TD_ScaleFit
- TD_ScaleTransform
- TD_TargetEncodingFit
- TD_TargetEncodingTransform
- TD_Unpivoting
- Feature Engineering Utility Functions
- TD_FillRowID
- TD_NumApply
- TD_RoundColumns
- TD_StrApply
- Model Training Functions
- TD_DecisionForest
- TD_GLM
- TD_KMeans
- TD_KNN
- TD_OneClassSVM
- TD_SVM
- TD_XGBoost
- Model Scoring Functions
- TD_DecisionForestPredict
- TD_GLMPredict
- TD_KMeansPredict
- TD_OneClassSVMPredict
- TD_SVMPredict
- TD_XGBoostPredict
- Model Evaluation Functions
- TD_Silhouette
- TD_ClassificationEvaluator
- TD_RegressionEvaluator
- TD_ROC
- TD_TrainTestSplit
- Text Analytic Functions
- NGramSplitter
- TD_NaiveBayesTextClassifierPredict
- TD_NaiveBayesTextClassifierTrainer
- TD_SentimentExtractor
- TD_TextParser
- TD_TFIDF
- TD_WordEmbeddings
- Hypothesis Testing Functions
- TD_ANOVA
- TD_ChiSq
- TD_FTest
- TD_ZTest
- Path and Pattern Analysis Functions
- Attribution
- nPath
- Sessionize

This summary serves as a reference for users looking to harness the power of Teradata Vantage Analytics Database for their analytics needs.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer/TD_NaiveBayesTextClassifierTrainer-Input","2024-07-27 12:36:15"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer/TD_NaiveBayesTextClassifierTrainer-Output","text/html;charset=UTF-8","200","","Indexable","","TD_NaiveBayesTextClassifierTrainer Output - Analytics Database","62","579","Output Table Schema Column Data Type Description token VARCHAR (UNICODE) The classified training tokens. category VARCHAR (UNICODE) The category of the token. prob DOUBLE PRECISION The probability of the token in the category.","226","1483","","0","TD_NaiveBayesTextClassifierTrainer Output - Analytics Database","62","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer/TD_NaiveBayesTextClassifierTrainer-Output","","","","","","209240","13059","13059","4.629","A+","74","38","1.947","7.077","Very Hard","11.131","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.558","","","","","","1.1","### Summary
The Teradata Vantage™ Analytics Database provides a rich set of analytic functions designed to perform various data operations, from data cleaning and exploration to model training and scoring. This guide specifically covers the basic SQL operations: SELECT, UPDATE, DELETE, and CREATE, which are foundational to interacting with databases.

### Code Examples

#### 1. SELECT
The `SELECT` statement is used to query data from a database. It allows you to specify which columns of data you want to retrieve.

```sql
SELECT token, category, prob
FROM TrainingData
WHERE prob > 0.5;
```

#### 2. UPDATE
The `UPDATE` statement modifies existing records in a table. You can set new values for specified columns based on certain conditions.

```sql
UPDATE TrainingData
SET prob = prob * 1.1
WHERE category = 'Sports';
```

#### 3. DELETE
The `DELETE` statement removes records from a table based on specified conditions.

```sql
DELETE FROM TrainingData
WHERE prob < 0.1;
```

#### 4. CREATE
The `CREATE` statement is used to create a new table in the database. You define the table's name and the columns it will contain.

```sql
CREATE TABLE NewTrainingData (
    token VARCHAR (UNICODE) NOT NULL,
    category VARCHAR (UNICODE) NOT NULL,
    prob DOUBLE PRECISION
);
```

### Keywords and Phrases
- TD_NaiveBayesTextClassifierTrainer Output - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Workload Management Configuration
- Deadlocks
- Non-Deterministic Behavior
- Recommendations for Using Analytic Functions
- Examples: How to Use
- Input and Output
- Syntax Elements
- Function Syntax Descriptions
- Column Data Types
- Input Table Rows Redistribution
- Function Performance
- Function Names with TD Prefix
- Online Help for Analytics Functions

This structured approach to SQL operations within the Teradata Vantage™ environment allows users to effectively manage and analyze their data, utilizing advanced analytic functions for deeper insights.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer/TD_NaiveBayesTextClassifierTrainer-Output","2024-07-27 11:40:11"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer/TD_NaiveBayesTextClassifierTrainer-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_NaiveBayesTextClassifierTrainer Function Syntax | Teradata Vantage - TD_NaiveBayesTextClassifierTrainer Syntax - Analytics Database","134","1243","See the syntax of Analytics Database (SQL Engine) function TD_NaiveBayesTextClassifierTrainer & read descriptions of its required & optional syntax elements.","157","979","","0","TD_NaiveBayesTextClassifierTrainer Function Syntax | Teradata Vantage - TD_NaiveBayesTextClassifierTrainer Syntax - Analytics Database","134","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer/TD_NaiveBayesTextClassifierTrainer-Syntax","","","","","","208463","13026","13026","4.618","A+","115","53","2.170","21.455","Very Hard","11.349","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.566","","","","","","1.1","### Summary of TD_NaiveBayesTextClassifierTrainer

The `TD_NaiveBayesTextClassifierTrainer` function in Teradata Vantage is designed for training a Naive Bayes text classification model. It allows users to specify various parameters, including the input table, the token and document category columns, and the type of model to be trained (either Multinomial or Bernoulli). This function is particularly useful for tasks involving text classification, enabling users to categorize documents based on their content.

### Code Examples

Here are several examples demonstrating how to use SQL commands to interact with Teradata Vantage, including the `TD_NaiveBayesTextClassifierTrainer` function.

#### 1. **Create Table**
```sql
CREATE TABLE my_text_data (
   doc_id INTEGER,
   doc_category VARCHAR(100),
   token_column VARCHAR(255)
);
```

#### 2. **Insert Data**
```sql
INSERT INTO my_text_data (doc_id, doc_category, token_column) VALUES 
(1, 'Sports', 'football'),
(2, 'Politics', 'election'),
(3, 'Sports', 'basketball');
```

#### 3. **Select Data**
```sql
SELECT * FROM my_text_data;
```

#### 4. **Update Data**
```sql
UPDATE my_text_data
SET doc_category = 'News'
WHERE doc_id = 2;
```

#### 5. **Delete Data**
```sql
DELETE FROM my_text_data
WHERE doc_id = 1;
```

#### 6. **Using TD_NaiveBayesTextClassifierTrainer**
```sql
CREATE VOLATILE TABLE model AS (
   SELECT * FROM TD_NaiveBayesTextClassifierTrainer (
      ON my_text_data
      OUT TABLE ModelTable (model_table_name)
      USING
      TokenColumn ('token_column')
      DocCategoryColumn ('doc_category')
      ModelType ('Multinomial')
   )
) WITH DATA;
```

### Keywords and Phrases

- **TD_NaiveBayesTextClassifierTrainer Function Syntax**
- **Teradata Vantage - TD_NaiveBayesTextClassifierTrainer Syntax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Function Syntax Descriptions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Text Analytic Functions**
- **Required Syntax Elements for TD_NaiveBayesTextClassifierTrainer**
- **Optional Syntax Elements for TD_NaiveBayesTextClassifierTrainer**
- **Input Table Rows Redistribution**
- **Function Names with and without TD Prefix**
- **Usage Notes**
- **Example: Using TD_NaiveBayesTextClassifierTrainer with Multinomial Model Type**

This structured overview provides a concise introduction to the `TD_NaiveBayesTextClassifierTrainer` function, alongside relevant SQL code examples and key terminology to understand its context and application within Teradata Vantage.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer/TD_NaiveBayesTextClassifierTrainer-Syntax","2024-07-27 11:45:20"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer/TD_NaiveBayesTextClassifierTrainer-Syntax-Elements","text/html;charset=UTF-8","200","","Indexable","","TD_NaiveBayesTextClassifierTrainer Syntax Elements - Analytics Database","71","667","TokenColumn [Required]: Specify the InputTable column name that contains the classified tokens. DocCategoryColumn [Required]: Specify the InputTable column name that contains the document category. DocIDColumn [Required for Bernoulli model type]: Specify the InputTable column name that contains the document identifier....","323","2050","","0","TD_NaiveBayesTextClassifierTrainer Syntax Elements - Analytics Database","71","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer/TD_NaiveBayesTextClassifierTrainer-Syntax-Elements","","","","","","208332","12885","12885","4.568","A+","100","52","1.923","2.689","Very Hard","11.296","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.627","","","","","","1.1","### Summary
The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions that facilitate data processing, exploration, feature engineering, model training, scoring, and evaluation. Key functions are categorized into areas such as data cleaning, text analytics, hypothesis testing, and more, enabling users to perform complex data operations efficiently.

This guide includes code examples for the fundamental SQL operations: SELECT, UPDATE, DELETE, and CREATE. These examples illustrate how to manipulate data within the Analytics Database, leveraging its powerful analytic capabilities.

### Code Examples

#### 1. SELECT
The `SELECT` statement retrieves data from a database. Below is an example of how to select specific columns from a table.

```sql
SELECT column1, column2
FROM your_table
WHERE condition;
```

#### 2. UPDATE
The `UPDATE` statement modifies existing records in a table. Here’s an example of updating a specific column based on a condition.

```sql
UPDATE your_table
SET column1 = 'new_value'
WHERE condition;
```

#### 3. DELETE
The `DELETE` statement removes records from a table. The following example deletes rows that meet a certain condition.

```sql
DELETE FROM your_table
WHERE condition;
```

#### 4. CREATE
The `CREATE` statement is used to create a new table. Below is an example of creating a new table with specified columns and data types.

```sql
CREATE TABLE new_table (
    column1 INT,
    column2 VARCHAR(100),
    column3 DATE
);
```

### Keywords and Phrases
- **TD_NaiveBayesTextClassifierTrainer**
- **Syntax Elements**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Recommendations for Using Analytic Functions**
- **Example** 
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Function Names with and without TD Prefix**
- **Displaying Online Help for Analytics Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion**
- **TD_ConvertTo**
- **TD_SimpleImputeFit**
- **TD_DecisionForest**
- **TD_KMeans**
- **TD_OneClassSVM**
- **TD_XGBoost**
- **TD_Silhouette**
- **TD_ClassificationEvaluator**
- **TD_ROC**
- **NGramSplitter**
- **TD_TFIDF**
- **Hypothesis Test Components**
- **TD_ANOVA**
- **nPath**
- **Sessionize**
- **TokenColumn**
- **DocCategoryColumn**
- **DocIDColumn**
- **ModelType**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer/TD_NaiveBayesTextClassifierTrainer-Syntax-Elements","2024-07-27 11:35:42"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor","text/html;charset=UTF-8","200","","Indexable","","TD_SentimentExtractor Function | SentimentExtractor - TD_SentimentExtractor - Analytics Database","96","890","This Analytics Database function uses a dictionary model to extract the sentiment (positive, negative, or neutral) of each input document or sentence.","150","919","","0","TD_SentimentExtractor Function | SentimentExtractor - TD_SentimentExtractor - Analytics Database","96","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor","","","","","","211360","13753","13753","4.876","A+","352","76","4.632","51.200","Fairly Hard","11.839","1","4","","707","707","0","99.860","717","715","0","","","","","","","","","0.507","","","","","","1.1","# TD_SentimentExtractor Function Overview

The `TD_SentimentExtractor` function in Teradata Vantage™ is designed to analyze text data and extract sentiment information based on a dictionary model. This function classifies the sentiment of each input document or sentence into three categories: positive, negative, or neutral. It uses a combination of WordNet and a set of predefined negation words to assess the sentiment accurately. 

### Key Features:
- **Negation Handling**: The function effectively interprets negated sentiments, adjusting the sentiment score based on the proximity of negation words.
- **Customizable Dictionaries**: Users can utilize default dictionaries or provide custom dictionaries for more tailored sentiment analysis.
- **Output Control**: The function allows access to the dictionary used during analysis and provides options for additional entries.

### Summary of Usage
- Input sentences can be processed to determine their sentiment.
- Sentiment scores can be affected by the presence of negation.
- The output includes the sentiment classification and related metadata.

## Code Examples

### 1. Select
```sql
SELECT * 
FROM SentimentAnalysisTable 
WHERE sentiment = 'positive';
```

### 2. Update
```sql
UPDATE SentimentAnalysisTable 
SET sentiment = 'neutral' 
WHERE sentiment IS NULL;
```

### 3. Delete
```sql
DELETE FROM SentimentAnalysisTable 
WHERE sentiment = 'negative' 
AND created_at < '2023-01-01';
```

### 4. Create
```sql
CREATE TABLE SentimentAnalysisTable (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content VARCHAR(32000),
    sentiment VARCHAR(10),
    analysis_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## Keywords and Phrases
- **TD_SentimentExtractor Function**
- **SentimentExtractor**
- **TD_SentimentExtractor**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number: 17.20**
- **Published: June 2022**
- **Last Update: 2024-04-06**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Function Names with and without TD Prefix**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Maximum Length Constraints (32000 characters)**
- **Negation Handling**
- **Custom Dictionary Usage**
- **Output Dictionary Access** 

The `TD_SentimentExtractor` function serves as a powerful tool for performing sentiment analysis in Teradata Vantage™. By leveraging its capabilities, users can gain insights into textual data, enhancing their analytical processes.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor","2024-07-27 11:59:16"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/Examples-How-to-Use-TD_SentimentExtractor","text/html;charset=UTF-8","200","","Indexable","","TD_SentimentExtractor Examples | SentimentExtractor - Examples: How to Use TD_SentimentExtractor - Analytics Database","117","1104","See examples of the Analytics Database (SQL Engine) function TD_SentimentExtractor.","83","536","","0","TD_SentimentExtractor Examples | SentimentExtractor - Examples: How to Use TD_SentimentExtractor - Analytics Database","117","Database Analytic Functions","27","TD_SentimentExtractor Input Table: sentiment_extract_input","58","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/Examples-How-to-Use-TD_SentimentExtractor","","","","","","225453","15841","15841","5.616","A+","2196","348","6.310","88.054","Easy","17.563","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.893","","","","","","1.1","## Summary
The TD_SentimentExtractor is a powerful function in Teradata Vantage™ designed for sentiment analysis, which can evaluate text data based on predefined sentiment dictionaries. It can categorize sentiments as positive, negative, or neutral and generate a sentiment score based on the content of reviews or textual data. This function supports both default and custom dictionaries, allowing for flexibility in analyzing various texts.

The functionality includes the ability to extract sentiment from documents or sentences, accumulate results based on specified columns, and provide insights into sentiment scores and contributing words.

## Code Example

### 1. **Select**
To extract sentiment from product reviews using the default dictionary:
```sql
SELECT * FROM TD_SentimentExtractor (
    ON sentiment_extract_input AS InputTable PARTITION BY ANY
    USING
    TextColumn ('review')
    Accumulate ('id', 'product')
    AnalysisType ('DOCUMENT')
) AS dt ORDER BY id;
```

### 2. **Update**
To update a specific record in the sentiment word table (assuming such functionality is allowed):
```sql
UPDATE sentiment_word 
SET polarity_strength = -1 
WHERE sentiment_word = 'screwy';
```

### 3. **Delete**
To delete a specific entry from the input sentiment extract table:
```sql
DELETE FROM sentiment_extract_input 
WHERE id = 10;
```

### 4. **Create**
Creating a new table to store the sentiment analysis results:
```sql
CREATE TABLE sentiment_analysis_results (
    id INT,
    product VARCHAR(255),
    polarity VARCHAR(10),
    sentiment_score INT,
    sentiment_words VARCHAR(500)
);
```

## Keywords and Phrases
- TD_SentimentExtractor Examples
- How to Use TD_SentimentExtractor
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Custom Dictionary
- Sentiment Score
- Positive, Negative, Neutral Sentiment
- SQL Call Examples
- Input Table
- Accumulate Results
- Sentiment Words
- AnalysisType Options
- Document and Sentence Analysis
- SQL Syntax for Sentiment Analysis","28","7","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/Examples-How-to-Use-TD_SentimentExtractor","2024-07-27 11:32:05"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/Optional-Syntax-Elements-for-TD_SentimentExtractor","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_SentimentExtractor - Analytics Database","71","659","ON clause Accepts the CustomDictionaryTable, AdditionalDictionaryTable, and OutputDictionaryTable clauses. Accumulate Specifies the input table column names to copy to the output table. AnalysisType Specifies the analysis level to analyze each document or sentence. Default: Document. Priority Specifies one of the follo...","323","2004","","0","Optional Syntax Elements for TD_SentimentExtractor - Analytics Database","71","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/Optional-Syntax-Elements-for-TD_SentimentExtractor","","","","","","209334","13182","13182","4.673","A+","204","70","2.914","11.868","Very Hard","11.617","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.799","","","","","","1.1","### Summary

The **Teradata Vantage™ Analytics Database** provides a robust framework for performing various data operations and analytic functions. This includes capabilities for data manipulation through standard SQL operations such as Select, Update, Delete, and Create, as well as a wide range of analytic functions for tasks like data cleaning, feature engineering, model training, and text analysis.

### Code Example

Here are examples of basic SQL operations you can perform in the Teradata environment:

#### 1. **Select**
Retrieve data from a table.

```sql
SELECT *
FROM Customers
WHERE Country = 'USA';
```

#### 2. **Update**
Modify existing records in a table.

```sql
UPDATE Customers
SET ContactName = 'John Doe'
WHERE CustomerID = 1;
```

#### 3. **Delete**
Remove records from a table.

```sql
DELETE FROM Customers
WHERE CustomerID = 1;
```

#### 4. **Create**
Create a new table in the database.

```sql
CREATE TABLE Customers (
    CustomerID INT,
    ContactName VARCHAR(255),
    Country VARCHAR(100)
);
```

### Keywords and Phrases

- **Optional Syntax Elements for TD_SentimentExtractor**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Handling Missing Values**
- **Workload Management Configuration**
- **Avoiding Deadlocks**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Recommendations for Using Analytic Functions**
- **Examples for Various Functions** (e.g., TD_SentimentExtractor, TD_CategoricalSummary, TD_OneHotEncoding)
- **Model Specification**
- **AnalysisType**
- **OutputType**","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/Optional-Syntax-Elements-for-TD_SentimentExtractor","2024-07-27 11:37:23"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/Required-Syntax-Elements-for-TD_SentimentExtractor","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_SentimentExtractor - Analytics Database","71","663","ON clause Accepts the InputTable clause. TextColumn Specifies the input column name that contains text for sentiment analysis.","126","794","","0","Required Syntax Elements for TD_SentimentExtractor - Analytics Database","71","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/Required-Syntax-Elements-for-TD_SentimentExtractor","","","","","","207613","12706","12706","4.504","A+","62","37","1.676","7.279","Very Hard","11.174","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.576","","","","","","1.1","# Overview of Analytics Database Functions

Teradata Vantage™ provides a robust set of analytic functions within its Analytics Database, designed to facilitate data transformation, modeling, scoring, and evaluation. This guide covers the basic SQL operations such as creating, updating, selecting, and deleting records, followed by an overview of the TD_SentimentExtractor function which is used for sentiment analysis on textual data.

## SQL Operations: Code Examples

### 1. **Create**
To create a new table in the database, you would use the following SQL syntax:
```sql
CREATE TABLE customer_data (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    customer_email VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### 2. **Select**
To retrieve data from a table, the SELECT statement is used:
```sql
SELECT customer_id, customer_name, customer_email
FROM customer_data
WHERE created_at >= '2023-01-01';
```

### 3. **Update**
To modify existing records in a table, the UPDATE statement is utilized:
```sql
UPDATE customer_data
SET customer_email = 'new_email@example.com'
WHERE customer_id = 1;
```

### 4. **Delete**
To remove records from a table, the DELETE statement is used:
```sql
DELETE FROM customer_data
WHERE customer_id = 1;
```

## TD_SentimentExtractor

The `TD_SentimentExtractor` function is part of Teradata's text analytics capabilities. It analyzes textual data to determine the sentiment expressed in the text. Below is the syntax and examples of how to use this function.

### Syntax
```sql
TD_SentimentExtractor (
    TextColumn VARCHAR(64000),
    OutputColumn VARCHAR(100)
) 
```

### Required Syntax Elements
- **TextColumn**: The input column that contains the text data for sentiment analysis.
- **OutputColumn**: The name of the column to store the sentiment score.

### Example Usage
**Example 1: Basic Sentiment Extraction**
```sql
SELECT 
    customer_id,
    customer_name,
    TD_SentimentExtractor(comment_text, 'sentiment_score') AS sentiment
FROM 
    customer_comments;
```

**Example 2: Analyzing Product Reviews**
```sql
SELECT 
    product_id,
    review_text,
    TD_SentimentExtractor(review_text, 'sentiment_score') AS sentiment
FROM 
    product_reviews
WHERE 
    review_date >= '2022-01-01';
```

## Keywords and Phrases

- **Required Syntax Elements for TD_SentimentExtractor**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Example Usage of TD_SentimentExtractor**

This guide provides foundational knowledge for working with Teradata's Analytics Database, specifically highlighting SQL operations and the capabilities of the TD_SentimentExtractor function.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/Required-Syntax-Elements-for-TD_SentimentExtractor","2024-07-27 12:05:19"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/TD_SentimentExtractor-Input","text/html;charset=UTF-8","200","","Indexable","","TD_SentimentExtractor Input - Analytics Database","48","445","Input Table Schema Column Data Type Description text_column CHAR, VARCHAR, CLOB The InputTable column name that contains text for sentiment analysis. accumulate_column ANY The InputTable column names to copy to the output table. Custom/Additional Dictionary Table Schema Column Data Type Description sentiment_word CHAR,...","323","2128","","0","TD_SentimentExtractor Input - Analytics Database","48","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/TD_SentimentExtractor-Input","","","","","","210636","13203","13203","4.681","A+","108","44","2.455","21.044","Very Hard","11.176","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.163","","","","","","1.1","## Summary

The **Teradata Vantage™** Analytics Database provides a rich set of analytic functions for data processing, including operations for data cleaning, exploration, feature engineering, model training, and evaluation. Key functionality includes handling text data and performing sentiment analysis through functions like `TD_SentimentExtractor`. This function can analyze a specified text column, extracting sentiment-related insights based on input data and additional dictionaries.

## Code Examples

### Create Table
```sql
CREATE TABLE sentiment_analysis (
    id INT GENERATED ALWAYS AS IDENTITY,
    text_column VARCHAR(255),
    accumulate_column VARCHAR(255)
);
```

### Insert Data
```sql
INSERT INTO sentiment_analysis (text_column, accumulate_column)
VALUES ('I love programming!', 'positive sentiment');
```

### Select Data
```sql
SELECT * FROM sentiment_analysis
WHERE text_column LIKE '%love%';
```

### Update Data
```sql
UPDATE sentiment_analysis
SET accumulate_column = 'neutral sentiment'
WHERE text_column = 'I do not feel strongly about programming.';
```

### Delete Data
```sql
DELETE FROM sentiment_analysis
WHERE id = 1;
```

## Keywords and Phrases
- TD_SentimentExtractor Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions
- Data Exploration Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- nPath
- Sessionize
- Custom/Additional Dictionary Table Schema
- Input Table Schema","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/TD_SentimentExtractor-Input","2024-07-27 12:52:24"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/TD_SentimentExtractor-Output","text/html;charset=UTF-8","200","","Indexable","","TD_SentimentExtractor Output - Analytics Database","49","461","Output Table Schema Column Data Type Description AccumulateColumns ANY The specified InputTable column names copied to the output table. content VARCHAR The column contains the sentence extracted from the document. The column displays if you use Sentence as the AnalysisType. polarity VARCHAR The sentiment value of the ...","323","2099","","0","TD_SentimentExtractor Output - Analytics Database","49","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/TD_SentimentExtractor-Output","","","","","","211922","13433","13433","4.762","A+","171","53","3.226","36.834","Hard","11.309","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","1.420","","","","","","1.1","## Summary

The **Teradata Vantage™ Analytics Database** provides a comprehensive set of analytic functions designed to facilitate data analysis, model training, and evaluation through various techniques. It includes capabilities for data cleaning, exploration, feature engineering, and more, making it a robust tool for analytics in various industries. The **TD_SentimentExtractor** is one of the functions available, specifically for analyzing sentiment in text data. The output includes sentiment polarity, scores, and relevant sentiment words, which can be crucial for understanding customer feedback, social media posts, and other textual data.

### Code Examples

#### 1. Create Table
```sql
CREATE TABLE sentiment_analysis (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content VARCHAR(255),
    polarity VARCHAR(10),
    sentiment_score INT,
    sentiment_words VARCHAR(255)
);
```

#### 2. Insert Data
```sql
INSERT INTO sentiment_analysis (content, polarity, sentiment_score, sentiment_words)
VALUES ('This product is amazing!', 'POS', 2, 'amazing (2)');
```

#### 3. Update Data
```sql
UPDATE sentiment_analysis
SET sentiment_score = 1, polarity = 'NEU'
WHERE id = 1;
```

#### 4. Delete Data
```sql
DELETE FROM sentiment_analysis
WHERE id = 1;
```

### Keywords and Phrases
- **TD_SentimentExtractor Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **dita:mapPath**: gjn1627595495337.ditamap
- **dita:ditavalPath**: ayr1485454803741.ditaval
- **dita:id**: jmh1512506877710
- **Product Category**: Teradata Vantage™
- **Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Data Exploration Functions**: Moving Average, Categorical Summary, Histogram
- **Model Evaluation Functions**: Silhouette, Classification Evaluator, ROC
- **Text Analytic Functions**: NGramSplitter, SentimentExtractor, TF-IDF

This structured overview captures the essence of the Teradata Vantage analytics capabilities, particularly the functionality surrounding sentiment analysis.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/TD_SentimentExtractor-Output","2024-07-27 11:29:30"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/TD_SentimentExtractor-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_SentimentExtractor Syntax | SentimentExtractor - TD_SentimentExtractor Syntax - Analytics Database","101","938","See the syntax of Analytics Database (SQL Engine) function TD_SentimentExtractor and read descriptions of its required and optional syntax elements.","148","929","","0","TD_SentimentExtractor Syntax | SentimentExtractor - TD_SentimentExtractor Syntax - Analytics Database","101","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/TD_SentimentExtractor-Syntax","","","","","","208837","13080","13080","4.637","A+","153","51","3.000","31.272","Hard","11.428","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.440","","","","","","1.1","## Summary

The **TD_SentimentExtractor** function is part of Teradata Vantage's suite of analytic functions, specifically designed for text analysis. This function processes text data to extract sentiment information based on predefined dictionaries. It allows users to analyze sentiments at both the document and sentence levels, providing various output types and options for customizing the analysis.

### Code Examples

Here are examples highlighting the basic operations (Select, Update, Delete, Create) using the TD_SentimentExtractor function:

#### 1. Select
This example demonstrates how to use the TD_SentimentExtractor function within a SELECT statement to extract sentiment from a text column.

```sql
SELECT *
FROM TD_SentimentExtractor (
    ON my_table AS InputTable
    USING
    TextColumn ('review_text')
    OutputType ('ALL')
) AS sentiment_results;
```

#### 2. Create
You can create a new table that stores the sentiment analysis results from a specified input table.

```sql
CREATE TABLE sentiment_output AS (
    SELECT *
    FROM TD_SentimentExtractor (
        ON my_table AS InputTable
        OUT PERMANENT TABLE sentiment_output
        USING
        TextColumn ('review_text')
        OutputType ('ALL')
    )
) WITH NO DATA;
```

#### 3. Update
Although the TD_SentimentExtractor does not directly allow for updates, you can update a different column in the table based on the sentiment analysis results.

```sql
UPDATE my_table
SET sentiment_label = (
    SELECT OutputType
    FROM TD_SentimentExtractor (
        ON my_table AS InputTable
        USING
        TextColumn ('review_text')
        OutputType ('POS')
    )
    WHERE my_table.id = InputTable.id
);
```

#### 4. Delete
Deleting records based on sentiment analysis results can be done using a subquery.

```sql
DELETE FROM my_table
WHERE id IN (
    SELECT id
    FROM TD_SentimentExtractor (
        ON my_table AS InputTable
        USING
        TextColumn ('review_text')
        OutputType ('NEG')
    )
);
```

### Keywords and Phrases
- **TD_SentimentExtractor Syntax**
- **SentimentExtractor**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **How to Read Syntax**
- **Usage Notes**
- **Data Cleaning Functions**
- **Text Analytic Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **NGramSplitter**
- **TD_NaiveBayesTextClassifierPredict**
- **TD_TextParser**
- **TD_TFIDF**
- **TD_WordEmbeddings**
- **TD_DecisionForest**
- **TD_XGBoost**
- **Sessionize** 

This summary and code examples provide a foundational understanding of how to interact with the TD_SentimentExtractor function in Teradata Vantage, facilitating sentiment analysis on textual data.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/TD_SentimentExtractor-Syntax","2024-07-27 12:44:38"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/TD_SentimentExtractor-Usage-Notes","text/html;charset=UTF-8","200","","Indexable","","TD_SentimentExtractor Usage Notes | SentimentExtractor - TD_SentimentExtractor Usage Notes - Analytics Database","111","1046","Learn about the usage considerations for the Analytics Database TD_SentimentExtractor function.","95","608","","0","TD_SentimentExtractor Usage Notes | SentimentExtractor - TD_SentimentExtractor Usage Notes - Analytics Database","111","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/TD_SentimentExtractor-Usage-Notes","","","","","","210047","13645","13645","4.837","A+","412","77","5.351","45.346","Hard","12.143","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.546","","","","","","1.1","## Summary of TD_SentimentExtractor

The `TD_SentimentExtractor` is a function within the Teradata Vantage™ Analytics Database that facilitates the extraction of sentiment from textual data. By applying natural language processing techniques, this function classifies text into categories such as positive, negative, or neutral, making it valuable for businesses looking to analyze customer opinions, reviews, and social media sentiment.

### Key Features:
- **Natural Language Processing**: Leverages NLP techniques to analyze text.
- **Sentiment Classification**: Classifies text into multiple sentiment categories.
- **Model Training**: Utilizes labeled data for training the sentiment extraction model.
- **Applications**: Useful in areas like customer feedback analysis, social media monitoring, and market research.

### Code Example

Below are some example SQL statements showcasing basic database operations: `SELECT`, `UPDATE`, `DELETE`, and `CREATE`.

#### 1. **SELECT**
```sql
SELECT sentiment, text
FROM sentiment_analysis
WHERE sentiment IS NOT NULL;
```

#### 2. **UPDATE**
```sql
UPDATE sentiment_analysis
SET sentiment = 'positive'
WHERE sentiment IS NULL AND text LIKE '%great%';
```

#### 3. **DELETE**
```sql
DELETE FROM sentiment_analysis
WHERE sentiment = 'neutral' AND created_at < '2023-01-01';
```

#### 4. **CREATE**
```sql
CREATE TABLE sentiment_analysis (
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    text VARCHAR(500),
    sentiment VARCHAR(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Keywords and Phrases

- TD_SentimentExtractor Usage Notes
- SentimentExtractor - TD_SentimentExtractor Usage Notes - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Non-Deterministic Behavior
- Recommendations for Using Analytic Functions
- Sentiment Analysis Applications
- Training Data Quality
- Model Evaluation and Hyperparameter Tuning
- Accuracy Factors in Sentiment Extraction

These keywords and phrases encapsulate the main concepts and functionalities associated with the `TD_SentimentExtractor` and its related functions within the Teradata Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/TD_SentimentExtractor-Usage-Notes","2024-07-27 12:42:22"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF","text/html;charset=UTF-8","200","","Indexable","","TD_TFIDF Function | TFIDF | Teradata Vantage - TD_TFIDF - Analytics Database","76","700","Takes any document set and outputs the Term Frequency, Inverse Document Frequency, and Term Frequency - Inverse Document Frequency scores for each term.","152","999","","0","TD_TFIDF Function | TFIDF | Teradata Vantage - TD_TFIDF - Analytics Database","76","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF","","","","","","209876","13420","13420","4.757","A+","221","60","3.683","60.693","Normal","11.495","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","0.530","","","","","","1.1","## Overview of TD_TFIDF Function in Teradata Vantage

The **TD_TFIDF** function in Teradata Vantage is designed to compute the Term Frequency-Inverse Document Frequency (TF-IDF) scores for terms in a set of documents. This scoring technique measures the importance of a word in a document relative to a collection of documents (the corpus). The **TF-IDF** score is calculated as the product of two components:

1. **Term Frequency (TF)**: The number of times a term appears in a document.
2. **Inverse Document Frequency (IDF)**: The logarithm of the total number of documents divided by the number of documents containing the term.

The result is a vector representation of documents, where each dimension corresponds to a term in the document set, and the value in that dimension is the TF-IDF score of that term.

### Key Use Cases
- Document clustering
- Classification algorithms
- Cosine similarity calculations
- K-means clustering
- K-nearest neighbors algorithms

## Code Example

Here are examples of basic SQL operations (SELECT, INSERT, UPDATE, DELETE) that you might perform in Teradata Vantage, including how to utilize the TD_TFIDF function.

### 1. **Create Table**
```sql
CREATE TABLE documents (
    doc_id INT,
    content VARCHAR(5000)
);
```

### 2. **Insert Data**
```sql
INSERT INTO documents (doc_id, content) VALUES (1, 'Teradata Vantage is a powerful analytics database.');
INSERT INTO documents (doc_id, content) VALUES (2, 'TF-IDF helps in evaluating the importance of terms in documents.');
```

### 3. **Select Data**
```sql
SELECT * FROM documents;
```

### 4. **Update Data**
```sql
UPDATE documents
SET content = 'Teradata Vantage provides advanced analytics capabilities.'
WHERE doc_id = 1;
```

### 5. **Delete Data**
```sql
DELETE FROM documents
WHERE doc_id = 2;
```

### 6. **Using TD_TFIDF**
To compute the TF-IDF scores for the documents, you would use the following SQL command:
```sql
SELECT doc_id, TD_TFIDF(content) AS tfidf_scores
FROM documents;
```

## Summary

The **TD_TFIDF** function is a crucial part of text analytics in Teradata Vantage, allowing users to derive meaningful insights from textual data by evaluating the importance of terms across documents. 

### Keywords and Phrases
- TD_TFIDF Function 
- TFIDF 
- Teradata Vantage 
- Analytics Database 
- Database Analytic Functions 
- Deployment 
- VantageCloud 
- VantageCore 
- Edition 
- Enterprise 
- IntelliFlex 
- VMware 
- Product 
- Analytics Database 
- Release Number 
- 17.20 
- Published 
- June 2022 
- Language 
- English (United States) 
- Last Update 
- 2024-04-06 
- Product Category 
- Teradata Vantage™ 
- Text Analytic Functions 
- Usage Notes 
- Cosine-similarity 
- K-means clustering 
- K-nearest neighbors 
- Document clustering 
- Classification algorithms 
- Sparse vector representation 
- Term frequency 
- Inverse document frequency","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF","2024-07-27 11:41:42"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/Example-How-to-Use-TD_TFIDF","text/html;charset=UTF-8","200","","Indexable","","Example: TFIDF | TD_TFIDF | Teradata Vantage - Example: How to Use TD_TFIDF - Analytics Database","96","899","See example of the Analytics Database (SQL Engine) text analytic function TD_TFIDF.","83","524","","0","Example: TFIDF | TD_TFIDF | Teradata Vantage - Example: How to Use TD_TFIDF - Analytics Database","96","Database Analytic Functions","27","TD_TFIDF Input","14","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/Example-How-to-Use-TD_TFIDF","","","","","","213171","14425","14425","5.114","A+","454","193","2.352","71.584","Fairly Easy","12.799","1","5","","707","707","0","99.860","711","708","0","","","","","","","","","0.513","","","","","","1.1","## Summary

The Teradata Vantage Analytics Database provides a rich set of analytic functions to facilitate data exploration, feature engineering, model training, and evaluation. Key functions encompass data cleaning, statistical analysis, text analysis, and machine learning, allowing users to perform complex operations efficiently. This document highlights basic SQL operations—Select, Update, Delete, and Create—alongside specific examples from the TD_TFIDF function, which is used for calculating term frequency-inverse document frequency (TF-IDF) scores.

## Code Example

### 1. Create a Table
```sql
CREATE TABLE tfidf_input (
    docid INTEGER,
    content VARCHAR(100),
    category VARCHAR(10)
);
```

### 2. Insert Data
```sql
INSERT INTO tfidf_input (docid, content, category) VALUES (1, 'The quick brown fox jumps over the lazy fox.', 'Animals');
INSERT INTO tfidf_input (docid, content, category) VALUES (2, 'Scientists conducted experiments in the lab to analyze the chemical reactions.', 'Science');
INSERT INTO tfidf_input (docid, content, category) VALUES (3, 'Using advanced equipments in the lab, scientists observed unexpected reactions in the lab.', 'Science');
```

### 3. Select Data
```sql
SELECT * FROM tfidf_input;
```

### 4. Update Data
```sql
UPDATE tfidf_input
SET content = 'The quick brown fox jumps over the lazy dog.'
WHERE docid = 1;
```

### 5. Delete Data
```sql
DELETE FROM tfidf_input
WHERE docid = 3;
```

### 6. Using TD_TFIDF
```sql
CREATE MULTISET TABLE tfidf_input_tokenized AS (
    SELECT docid, cast(token as varchar(15)) as token, category 
    FROM TD_TextParser (
        ON tfidf_input AS InputTable
        USING
        TextColumn ('content')
        ConvertToLowerCase ('true')
        OutputByWord ('true')
        Punctuation ('\[.,?\!\]')
        RemoveStopWords ('true')
        StemTokens ('true')
        Accumulate ('docid','category')
    ) AS dt 
) WITH DATA;

SELECT * FROM TD_TFIDF (
    ON tfidf_input_tokenized AS InputTable
    USING
    DocIdColumn ('docid')
    TokenColumn ('token')
    TFNormalization ('LOG')
    IDFNormalization ('SMOOTH')
    Regularization ('L2')
    Accumulate ('category')
) AS dt ORDER BY docid, token;
```

## Keywords and Phrases
- **TFIDF**
- **TD_TFIDF**
- **Teradata Vantage - Example: How to Use TD_TFIDF**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**","27","1","3","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/Example-How-to-Use-TD_TFIDF","2024-07-27 12:04:23"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/Optional-Syntax-Elements-for-TD_TFIDF","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_TFIDF - Analytics Database","58","537","TFNormalization Specifies the normalization method for calculating the term frequency (TF). Default: NORMAL The argument must have one of the following values: Values Description BOOL Boolean frequency: tf(t,d)= 1 if t occurs in d; otherwise tf(t,d)= 0 COUNT Raw frequency tf(t,d)= f(t,d) where f(t,d) is the number of t...","323","1987","","0","Optional Syntax Elements for TD_TFIDF - Analytics Database","58","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/Optional-Syntax-Elements-for-TD_TFIDF","","","","","","214421","13975","13975","4.954","A+","418","100","4.180","91.074","Very Easy","11.759","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.448","","","","","","1.1","# Teradata Analytics Database: Summary and Code Examples

**Introduction:**
The Teradata Analytics Database provides a robust set of analytic functions designed for data cleaning, exploration, feature engineering, model training, and evaluation. It supports a variety of operations including Select, Update, Delete, and Create, enabling users to manipulate and analyze data effectively.

## Code Examples

### 1. Select
This operation retrieves data from a specified table.

```sql
SELECT column1, column2 
FROM my_table 
WHERE condition;
```

### 2. Update
This operation modifies existing records in a table.

```sql
UPDATE my_table 
SET column1 = new_value 
WHERE condition;
```

### 3. Delete
This operation removes records from a table.

```sql
DELETE FROM my_table 
WHERE condition;
```

### 4. Create
This operation creates a new table with specified columns and data types.

```sql
CREATE TABLE new_table (
    column1 INT,
    column2 VARCHAR(100),
    column3 DATE
);
```

## Keywords and Phrases

- **Optional Syntax Elements for TD_TFIDF**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Recommendations for Using Analytic Functions**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **TFNormalization**
- **IDFNormalization**
- **Regularization**
- **Accumulate** 

This summary provides an overview of the functionalities and operations that can be performed using the Teradata Analytics Database, along with practical SQL code examples for common tasks.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/Optional-Syntax-Elements-for-TD_TFIDF","2024-07-27 11:49:40"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/Required-Syntax-Elements-for-TD_TFIDF","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_TFIDF - Analytics Database","58","541","ON clause Specifies the table name, view name or query as an InputTable. DocIdColumn Specifies the column with the document identifier. TokenColumn Specifies the column with the document tokens.","194","1237","","0","Required Syntax Elements for TD_TFIDF - Analytics Database","58","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/Required-Syntax-Elements-for-TD_TFIDF","","","","","","207749","12729","12729","4.512","A+","73","39","1.872","20.669","Very Hard","11.194","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.604","","","","","","1.1","# Teradata Vantage™ Analytics Database: Overview of Key Operations

The Teradata Vantage™ Analytics Database provides a wide range of analytic functions that support various data operations, including data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This guide focuses on essential SQL operations, namely SELECT, UPDATE, DELETE, and CREATE, which are foundational for interacting with the database.

## Summary of SQL Operations

1. **SELECT**: Used to retrieve data from one or more tables.
2. **UPDATE**: Modifies existing records in a table.
3. **DELETE**: Removes records from a table.
4. **CREATE**: Establishes new tables or other database objects.

## Code Examples

### 1. SELECT
To retrieve data from a table:
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```
**Example**:
```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

### 2. UPDATE
To modify existing records:
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```
**Example**:
```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department = 'Sales';
```

### 3. DELETE
To remove records from a table:
```sql
DELETE FROM table_name
WHERE condition;
```
**Example**:
```sql
DELETE FROM employees
WHERE last_name = 'Doe';
```

### 4. CREATE
To create a new table:
```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```
**Example**:
```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

## Keywords and Phrases

- **Required Syntax Elements for TD_TFIDF**
- **Analytics Database**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions**
- **Recommendations for Using Analytic Functions**

This concise overview provides foundational SQL operations essential for utilizing the Teradata Vantage™ Analytics Database effectively. For more advanced operations and functions, refer to the specific documentation related to analytic functions and their syntax.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/Required-Syntax-Elements-for-TD_TFIDF","2024-07-27 12:52:37"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/TD_TFIDF-Input","text/html;charset=UTF-8","200","","Indexable","","TD_TFIDF Input - Analytics Database","35","323","Input Table Schema Column Data Type Description doc_id_column BYTEINT, SMALLINT, INTEGER, BIGINT Column with the document identifier. token_column CHAR, VARCHAR Column with the document tokens. accumulate_column Any Column which needs to be copied to the output table.","268","1789","","0","TD_TFIDF Input - Analytics Database","35","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/TD_TFIDF-Input","","","","","","209258","13108","13108","4.647","A+","78","39","2.000","17.167","Very Hard","11.137","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.537","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a comprehensive set of analytic functions that can be utilized for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This guide outlines fundamental SQL operations—SELECT, UPDATE, DELETE, and CREATE—using the context of an analytics database, allowing for effective data manipulation and analysis.

## Code Example

### 1. **SELECT**
Retrieve data from a table, filtering for specific criteria.

```sql
SELECT doc_id_column, token_column
FROM your_table_name
WHERE token_column LIKE '%analytics%';
```

### 2. **UPDATE**
Modify existing records in a table based on specific conditions.

```sql
UPDATE your_table_name
SET token_column = 'updated_value'
WHERE doc_id_column = 123;
```

### 3. **DELETE**
Remove records from a table that meet specified criteria.

```sql
DELETE FROM your_table_name
WHERE doc_id_column = 456;
```

### 4. **CREATE**
Establish a new table with specified columns and data types.

```sql
CREATE TABLE new_table_name (
    doc_id_column INTEGER,
    token_column VARCHAR(100),
    accumulate_column VARCHAR(255)
);
```

## Keywords and Phrases

- TD_TFIDF Input
- Analytics Database
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language: English (United States)
- Last Update: 2024-04-06
- Product Category: Teradata Vantage™
- Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Input Table Rows Redistribution
- Workload Management Configuration
- Non-Deterministic Behavior
- Recommendations for Using Analytic Functions
- TD_ConvertTo
- TD_GetRowsWithoutMissingValues
- TD_SimpleImputeTransform
- TD_DecisionForest
- TD_KMeansPredict
- TD_SVM
- TD_XGBoostPredict

This structured guide provides a foundational understanding of how to interact with an analytics database using SQL commands, alongside relevant keywords and phrases for further exploration.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/TD_TFIDF-Input","2024-07-27 11:41:30"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/TD_TFIDF-Output","text/html;charset=UTF-8","200","","Indexable","","TD_TFIDF Output - Analytics Database","36","339","Output Table Schema Column Data Type Description doc_id_column BYTEINT, SMALLINT, INTEGER, BIGINT Document identifier of document d. token_column CHAR, VARCHAR Term t. TD_TF FLOAT Term frequency of term t in document d, calculated as specified by TFNormalization formula. TD_IDF FLOAT Inverse document frequency of term ...","323","2129","","0","TD_TFIDF Output - Analytics Database","36","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/TD_TFIDF-Output","","","","","","210481","13297","13297","4.714","A+","126","45","2.800","30.764","Hard","11.224","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.632","","","","","","1.1","# Teradata Vantage™ Analytics Database Overview

The Teradata Vantage™ Analytics Database is a robust platform designed to handle a wide range of analytical functions and data manipulation tasks. It provides various analytic functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This guide summarizes the core functionalities of the Analytics Database, focusing on key SQL operations such as Select, Update, Delete, and Create.

## Summary of Core SQL Operations

### 1. Select
The `SELECT` statement is used to query data from a database. The result is returned in the form of a result set.

**Example:**
```sql
SELECT * FROM sales_data WHERE region = 'North America';
```

### 2. Update
The `UPDATE` statement modifies existing records in a table.

**Example:**
```sql
UPDATE sales_data 
SET revenue = revenue * 1.1 
WHERE region = 'North America';
```

### 3. Delete
The `DELETE` statement removes one or more records from a table based on a condition.

**Example:**
```sql
DELETE FROM sales_data 
WHERE sales_date < '2022-01-01';
```

### 4. Create
The `CREATE` statement is used to create a new table or database.

**Example:**
```sql
CREATE TABLE new_sales_data (
    sale_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    sale_date DATE,
    revenue FLOAT
);
```

## Code Example Section

Here's a collection of SQL operations commonly utilized in the Teradata Vantage™ Analytics Database environment:

```sql
-- 1. SELECT Example
SELECT region, SUM(revenue) AS total_revenue
FROM sales_data
GROUP BY region;

-- 2. UPDATE Example
UPDATE customer_data
SET loyalty_points = loyalty_points + 100
WHERE customer_id = 12345;

-- 3. DELETE Example
DELETE FROM order_data
WHERE order_status = 'Cancelled';

-- 4. CREATE Example
CREATE TABLE customer_feedback (
    feedback_id INT PRIMARY KEY,
    customer_id INT,
    feedback_text VARCHAR(255),
    feedback_date DATE
);
```

## Keywords and Phrases

- **TD_TFIDF Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Analytics Database Analytic Function Categories**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Feature Engineering Utility Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Path and Pattern Analysis Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **How to Read Syntax**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Functions Ignore Disallowed Syntax Elements**
- **Input Table Schemas**
- **Function Names with and without TD Prefix**
- **Accumulated Columns Impact on Function Performance**
- **Datatype Change in Accumulated Columns**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This structured approach provides a comprehensive view of how to interact with the Teradata Vantage™ Analytics Database, focusing on essential SQL operations and their practical applications.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/TD_TFIDF-Output","2024-07-27 12:18:38"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/TD_TFIDF-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_TFIDF Syntax | TFIDF - TD_TFIDF Syntax - Analytics Database","62","572","See the syntax of Analytics Database (SQL Engine) function TD_TDIDF and read descriptions of its required and optional syntax elements.","135","846","","0","TD_TFIDF Syntax | TFIDF - TD_TFIDF Syntax - Analytics Database","62","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/TD_TFIDF-Syntax","","","","","","208172","12968","12968","4.597","A+","117","48","2.438","43.115","Hard","11.334","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.625","","","","","","1.1","## Overview of TD_TFIDF in Teradata Vantage

The TD_TFIDF function in Teradata Vantage is used for calculating the Term Frequency-Inverse Document Frequency (TF-IDF) scores, which are essential for understanding the importance of a word in a document relative to a collection of documents (corpus). This function is particularly useful in text mining and natural language processing tasks.

### Code Example Section

Here are examples of SQL commands demonstrating `SELECT`, `UPDATE`, `DELETE`, and `CREATE` statements using the TD_TFIDF function.

#### 1. SELECT Statement

This example retrieves the TF-IDF scores for words in a document.

```sql
SELECT 
    DocId, 
    Token, 
    TF, 
    IDF, 
    TF * IDF AS TFIDFScore
FROM 
    TD_TFIDF (
        ON my_text_table AS InputTable
        USING
        DocIdColumn ('document_id')
        TokenColumn ('word')
        TFNormalization ('NORMAL')
        IDFNormalization ('LOG')
    ) AS tfidf_results;
```

#### 2. UPDATE Statement

Using an update statement to modify a column in a table based on TF-IDF scores:

```sql
UPDATE my_text_table
SET importance_score = (
    SELECT TF * IDF 
    FROM TD_TFIDF (
        ON my_text_table AS InputTable
        USING
        DocIdColumn ('document_id')
        TokenColumn ('word')
        TFNormalization ('COUNT')
        IDFNormalization ('LOGNORM')
    ) AS scores
    WHERE scores.DocId = my_text_table.document_id
)
WHERE document_id IN (SELECT DISTINCT document_id FROM my_text_table);
```

#### 3. DELETE Statement

Deleting records from a table based on a condition using TF-IDF:

```sql
DELETE FROM my_text_table
WHERE document_id IN (
    SELECT DocId 
    FROM TD_TFIDF (
        ON my_text_table AS InputTable
        USING
        DocIdColumn ('document_id')
        TokenColumn ('word')
        TFNormalization ('BOOL')
        IDFNormalization ('UNARY')
    ) AS scores
    WHERE TFIDFScore < 0.5
);
```

#### 4. CREATE Table Statement

Creating a new table to store TF-IDF results:

```sql
CREATE TABLE tfidf_results AS (
    SELECT 
        DocId, 
        Token, 
        TF, 
        IDF, 
        TF * IDF AS TFIDFScore
    FROM 
        TD_TFIDF (
            ON my_text_table AS InputTable
            USING
            DocIdColumn ('document_id')
            TokenColumn ('word')
            TFNormalization ('NORMAL')
            IDFNormalization ('SMOOTH')
        )
) WITH DATA;
```

### Summary

The TD_TFIDF function allows users to compute TF-IDF scores efficiently, enabling advanced text analysis and feature extraction in various applications. The examples provided show how to utilize this function within different SQL commands, showcasing its versatility in managing and extracting insights from text data in Teradata Vantage.

### Keywords and Phrases

- **TD_TFIDF Syntax**
- **TFIDF - TD_TFIDF Syntax**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Analytics Database Analytic Functions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Displaying Online Help for Analytics Database Analytic Functions**
- **Workload Management Configuration for Analytics Database Analytic Functions**
- **Avoid Deadlocks Using Volatile Tables**
- **Non-Deterministic Behavior**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/TD_TFIDF-Syntax","2024-07-27 12:10:26"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser","text/html;charset=UTF-8","200","","Indexable","","TD_TextParser Function | TextParser | Teradata Vantage - TD_TextParser - Analytics Database","91","841","This Analytics Database (SQL Engine) analytical function tokenizes an input stream of words and creates a row for each word in the output table.","144","895","","0","TD_TextParser Function | TextParser | Teradata Vantage - TD_TextParser - Analytics Database","91","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser","","","","","","211520","14075","14075","4.990","A+","418","77","5.429","58.436","Fairly Hard","12.000","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","0.637","","","","","","1.1","### Summary

The `TD_TextParser` function in Teradata Vantage is designed for advanced text analytics. This function tokenizes text data, removes punctuation and stop words, converts text to lowercase, and performs stemming to extract root forms of words. By creating individual rows for each tokenized word in the output table, it facilitates easier analysis of text data. This makes `TD_TextParser` a powerful tool for extracting insights from unstructured or semi-structured text data, essential in natural language processing tasks such as sentiment analysis and information extraction.

### Code Example

Here are some basic SQL operations using Teradata SQL syntax, including `SELECT`, `UPDATE`, `DELETE`, and `CREATE`.

#### 1. SELECT
```sql
SELECT 
    id, 
    name, 
    description 
FROM 
    products 
WHERE 
    price > 100;
```

#### 2. UPDATE
```sql
UPDATE 
    products 
SET 
    price = price * 1.10 
WHERE 
    category = 'Electronics';
```

#### 3. DELETE
```sql
DELETE FROM 
    products 
WHERE 
    discontinued = TRUE;
```

#### 4. CREATE
```sql
CREATE TABLE products (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    description VARCHAR(255),
    price DECIMAL(10, 2),
    category VARCHAR(50),
    discontinued BOOLEAN
);
```

### Keywords and Phrases

- TD_TextParser Function
- TextParser
- Teradata Vantage - TD_TextParser
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- How to Read Syntax
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Input Table Schemas
- Function Names with and without TD Prefix
- Accumulated Columns Impact on Function Performance
- Datatype Change in Accumulated Columns
- Displaying Online Help for Analytics Database Analytic Functions
- BC/BCE Timestamps
- Workload Management Configuration for Analytics Database Analytic Functions
- Avoid Deadlocks Using Volatile Tables
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table
- Spool Space Exhaustion for Large Partitions at High Concurrency
- Recommendations for Using Analytic Functions","25","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser","2024-07-27 11:41:18"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/Optional-Syntax-Elements-for-TD_TextParser","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_TextParser - Analytics Database","63","584","ON clause Accept the StopWordsTable clause. ConvertToLowerCase Convert the text in the input table column name to lowercase. Default value: true StemTokens Convert the text in the input table column name to their root forms. Default value: false Delimiter Specify single-character delimiter values to apply to the text i...","323","1978","","0","Optional Syntax Elements for TD_TextParser - Analytics Database","63","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/Optional-Syntax-Elements-for-TD_TextParser","","","","","","209180","13176","13176","4.671","A+","196","69","2.841","53.312","Fairly Hard","11.504","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.446","","","","","","1.1","## Summary

The Teradata Analytics Database offers a comprehensive suite of analytic functions designed to handle a variety of data processing tasks, including data cleaning, exploration, feature engineering, model training, and evaluation. This document outlines key functionalities in the form of SQL commands commonly used with the database, including the fundamental operations of Select, Update, Delete, and Create.

### Code Examples

#### 1. Select

The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

#### 2. Update

The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

#### 3. Delete

The `DELETE` statement removes records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

#### 4. Create

The `CREATE` statement creates a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Keywords and Phrases

- **Optional Syntax Elements for TD_TextParser**
- **Analytics Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **dita:mapPath**
- **dita:ditavalPath**
- **dita:id**
- **Product Category**
- **Teradata Vantage™**
- **Introduction to Analytics Database Analytic Functions**
- **Changes and Additions**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Size of the Query**
- **AMP Configuration Impact on Function Execution**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 

This structured overview provides a foundational understanding of the SQL commands and functionality available within the Teradata Analytics Database, equipping users with the knowledge needed to effectively query and manipulate their data.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/Optional-Syntax-Elements-for-TD_TextParser","2024-07-27 11:47:03"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/Required-Syntax-Elements-for-TD_TextParser","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_TextParser - Analytics Database","63","588","ON clause Accept the InputTable clause. TextColumn Specify the input table column name.","87","558","","0","Required Syntax Elements for TD_TextParser - Analytics Database","63","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/Required-Syntax-Elements-for-TD_TextParser","","","","","","207507","12664","12664","4.489","A+","57","37","1.541","7.871","Very Hard","11.157","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.535","","","","","","1.1","### Summary of Teradata Vantage™ Analytics Database Functions

Teradata Vantage™ provides a comprehensive suite of analytic functions designed to support a variety of data analysis and machine learning tasks. These functions are categorized into several groups, including data cleaning, exploration, feature engineering, model training, scoring, and evaluation, as well as text analytics and hypothesis testing. The platform is built to handle scalable data workloads efficiently, leveraging Teradata's analytics database capabilities.

### Code Examples

Here are example SQL commands for basic database operations: Select, Update, Delete, and Create.

#### Select
```sql
SELECT customer_id, customer_name, purchase_amount
FROM customer_data
WHERE purchase_date >= '2023-01-01';
```

#### Update
```sql
UPDATE customer_data
SET purchase_amount = purchase_amount * 1.10
WHERE customer_id = 12345;
```

#### Delete
```sql
DELETE FROM customer_data
WHERE purchase_date < '2022-01-01';
```

#### Create
```sql
CREATE TABLE customer_data (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    purchase_amount DECIMAL(10, 2),
    purchase_date DATE
);
```

### Keywords and Phrases

- **Required Syntax Elements for TD_TextParser**
- **Analytics Database**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Release Number: 17.20**
- **Published: June 2022**
- **Language: English (United States)**
- **Last Update: 2024-04-06**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Limitations When Using PARTITION BY**
- **Non-Deterministic Behavior**
- **Recommendations for Using Analytic Functions**
- **BC/BCE Timestamps**
- **Workload Management Configuration for Analytics Functions**
- **Spool Space Exhaustion for Large Partitions**
- **AMP Configuration Impact on Function Execution**
- **Input Table Rows Redistribution**
- **Displaying Online Help for Analytics Functions** 

This structured outline provides an overview of the Teradata Vantage™ capabilities, including practical SQL examples and critical keywords for reference in analytics tasks.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/Required-Syntax-Elements-for-TD_TextParser","2024-07-27 12:05:51"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/TD_TextParser-Example","text/html;charset=UTF-8","200","","Indexable","","TD_TextParser Example | TextParser | Teradata Vantage - TD_TextParser Example - Analytics Database","98","923","See an example of Analytics Database (SQL Engine) TD_TextParser function.","73","472","","0","TD_TextParser Example | TextParser | Teradata Vantage - TD_TextParser Example - Analytics Database","98","Database Analytic Functions","27","TD_TextParser Input table: stopwords","36","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/TD_TextParser-Example","","","","","","208979","13130","13130","4.655","A+","192","77","2.494","65.948","Normal","11.541","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.720","","","","","","1.1","## Overview of TD_TextParser in Teradata Vantage

The `TD_TextParser` function in Teradata Vantage is designed for text analytics, allowing users to process and analyze textual data efficiently. It can remove stopwords, stem tokens, and accumulate results based on specified dimensions. This function is particularly useful in preparing text data for further analysis, such as natural language processing or machine learning tasks.

### Code Examples

#### 1. Select
```sql
SELECT * 
FROM TD_TextParser (
    ON test_table AS InputTable
    ON stopwords AS StopWordsTable DIMENSION
    USING
    TextColumn ('paragraph')
    StemTokens ('true')
    RemoveStopWords ('true')
    Accumulate ('id')
) AS dt 
ORDER BY id, token;
```

#### 2. Update
While `TD_TextParser` does not directly support updates, you can create a new table based on the parsed results and replace the original if necessary:
```sql
CREATE TABLE parsed_table AS (
    SELECT *
    FROM TD_TextParser (
        ON test_table AS InputTable
        ON stopwords AS StopWordsTable DIMENSION
        USING
        TextColumn ('paragraph')
        StemTokens ('true')
        RemoveStopWords ('true')
        Accumulate ('id')
    ) AS dt
) WITH DATA;
```

#### 3. Delete
To delete specific rows based on conditions after parsing, you would typically use a DELETE statement on the resulting table:
```sql
DELETE FROM parsed_table 
WHERE token = 'specific_token';  -- Replace 'specific_token' with the token you want to remove
```

#### 4. Create
You can create a new table to store the results of the `TD_TextParser` function:
```sql
CREATE TABLE parsed_results AS (
    SELECT * 
    FROM TD_TextParser (
        ON test_table AS InputTable
        ON stopwords AS StopWordsTable DIMENSION
        USING
        TextColumn ('paragraph')
        StemTokens ('true')
        RemoveStopWords ('true')
        Accumulate ('id')
    ) AS dt
) WITH DATA;
```

### Summary
The `TD_TextParser` function is a powerful tool for text processing within Teradata Vantage, aiding in the cleanup and analysis of textual data. By leveraging SQL commands such as SELECT, UPDATE, DELETE, and CREATE, users can manipulate and manage their text data effectively.

### Keywords and Phrases
- **TD_TextParser Example**
- **TextParser**
- **Teradata Vantage**
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **Published**
- **Language**
- **Last Update**
- **Product Category**
- **Data Cleaning Functions**
- **Feature Engineering Functions**
- **Text Analytic Functions**
- **Data Exploration Functions**
- **Hypothesis Testing Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Workload Management Configuration**
- **Recommendations for Using Analytic Functions**","26","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/TD_TextParser-Example","2024-07-27 11:22:28"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/TD_TextParser-Input","text/html;charset=UTF-8","200","","Indexable","","TD_TextParser Input - Analytics Database","40","370","CLOB LATIN/UTF16 is only supported on the Block File System on the primary cluster. It is not available for the Object File System. InputTable Schema Column Data Type Description text_column CHAR/CLOB/VARCHAR CHARACTER SET LATIN/UNICODE The column name that contains the text to parse. accumulate_column Any The input ta...","323","2111","","0","TD_TextParser Input - Analytics Database","40","Database Analytic Functions","27","InputTable Schema","17","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/TD_TextParser-Input","","","","","","210606","13347","13347","4.732","A+","115","46","2.500","28.477","Very Hard","11.185","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.754","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database offers a comprehensive set of functions aimed at performing advanced analytics. These functions are categorized into various groups, including data cleaning, data exploration, feature engineering, model training, scoring, and evaluation. Each function has specific syntax and usage notes that dictate how to implement them effectively within the database. The Analytics Database is designed to handle various data types and structures, making it a versatile tool for data scientists and analysts.

## Code Example

### 1. Create

Creating a new table to store parsed text data:

```sql
CREATE TABLE ParsedTextData (
    text_column VARCHAR(255),
    accumulate_column VARCHAR(255)
);
```

### 2. Insert

Inserting data into the `ParsedTextData` table:

```sql
INSERT INTO ParsedTextData (text_column, accumulate_column)
VALUES ('Sample text for parsing.', 'Additional data');
```

### 3. Select

Selecting specific columns from the `ParsedTextData` table:

```sql
SELECT text_column, accumulate_column
FROM ParsedTextData
WHERE text_column LIKE '%Sample%';
```

### 4. Update

Updating an entry in the `ParsedTextData` table:

```sql
UPDATE ParsedTextData
SET accumulate_column = 'Updated data'
WHERE text_column = 'Sample text for parsing.';
```

### 5. Delete

Deleting a specific entry from the `ParsedTextData` table:

```sql
DELETE FROM ParsedTextData
WHERE text_column = 'Sample text for parsing.';
```

## Keywords and Phrases

- TD_TextParser Input - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- dita:id
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Analytics Database Analytic Function Categories
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Recommendations for Using Analytic Functions
- Various Function Examples (e.g., Pack, StringSimilarity, TD_ConvertTo)
- Data Exploration Functions Examples (e.g., MovingAverage, TD_CategoricalSummary)
- Model Training Functions (e.g., TD_DecisionForest, TD_GLM)
- Text Analytic Functions (e.g., TD_NaiveBayesTextClassifierPredict)
- Hypothesis Testing Functions (e.g., TD_ANOVA, TD_ChiSq)
- InputTable Schema
- StopWordsTable Schema

This structured overview provides a foundational understanding of the capabilities and examples of SQL operations within the Teradata Vantage™ Analytics Database.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/TD_TextParser-Input","2024-07-27 11:19:26"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/TD_TextParser-Output","text/html;charset=UTF-8","200","","Indexable","","TD_TextParser Output - Analytics Database","41","386","Output Table Schema Column Data Type Description token VARCHAR CHARACTER SET LATIN/UNICODE The default column name, token that is set in the TokenColName element is used and contains the rows with individual words. AccumulateColumns Any The column name specified that is, id in the Accumulate element is copied to the ou...","323","2105","","0","TD_TextParser Output - Analytics Database","41","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/TD_TextParser-Output","","","","","","209084","13177","13177","4.671","A+","93","40","2.325","28.907","Very Hard","11.180","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.442","","","","","","1.1","# Teradata Vantage™ Analytics Database Functions Overview

The Teradata Vantage™ Analytics Database provides a robust set of analytic functions that enable users to perform complex data analyses efficiently. This document outlines the core functionalities, including data cleaning, exploration, feature engineering, model training, scoring, evaluation, and hypothesis testing functions. It also includes common SQL operations such as Select, Update, Delete, and Create, which are essential for managing data within the database.

## Summary

Teradata Vantage™ enables advanced analytics by leveraging its powerful analytic functions categorized into various domains. Key features include:

- **Data Cleaning Functions**: Functions to preprocess and clean data for analysis.
- **Data Exploration Functions**: Tools for exploring and summarizing datasets.
- **Feature Engineering**: Methods to transform and prepare features for modeling.
- **Model Training and Scoring**: Functions to train and evaluate machine learning models.
- **Hypothesis Testing**: Statistical tests to validate assumptions about data.

## SQL Operations Code Examples

### 1. Select
The `SELECT` statement is used to query data from a database.
```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

### 2. Update
The `UPDATE` statement is used to modify existing records in a table.
```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

### 3. Delete
The `DELETE` statement is used to remove records from a table.
```sql
DELETE FROM table_name
WHERE condition;
```

### 4. Create
The `CREATE` statement is used to create a new table within the database.
```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

## Keywords and Phrases

- TD_TextParser Output
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Recommendations for Using Analytic Functions

This structure allows for a coherent understanding of the Teradata Vantage™ Analytics Database while providing essential SQL operations that are fundamental to managing and manipulating data effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/TD_TextParser-Output","2024-07-27 11:48:15"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/TD_TextParser-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_TextParser Syntax | TextParser | Teradata Vantage - TD_TextParser Syntax - Analytics Database","96","889","See the syntax of Analytics Database (SQL Engine) TextParser testing function and read descriptions of its required and optional syntax elements.","145","899","","0","TD_TextParser Syntax | TextParser | Teradata Vantage - TD_TextParser Syntax - Analytics Database","96","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/TD_TextParser-Syntax","","","","","","209087","13076","13076","4.636","A+","142","53","2.679","44.448","Hard","11.415","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.875","","","","","","1.1","### Summary

The Teradata Vantage Analytics Database provides a powerful set of analytic functions and features to process and analyze data efficiently. One of the key components is the **TD_TextParser**, which allows users to parse and manipulate text data for various analytics tasks. This function supports operations like converting text to lowercase, stemming tokens, and removing stop words, making it easier to prepare text data for analysis.

### Code Examples

Here are examples of basic SQL operations using Teradata, specifically focusing on `SELECT`, `UPDATE`, `DELETE`, and `CREATE` statements:

#### 1. SELECT
This statement retrieves data from a table.

```sql
SELECT customer_id, customer_name
FROM customers
WHERE country = 'USA';
```

#### 2. UPDATE
This statement modifies existing records in a table.

```sql
UPDATE customers
SET customer_name = 'John Doe'
WHERE customer_id = 1;
```

#### 3. DELETE
This statement removes records from a table.

```sql
DELETE FROM customers
WHERE customer_id = 2;
```

#### 4. CREATE
This statement creates a new table in the database.

```sql
CREATE TABLE new_customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    country VARCHAR(50)
);
```

### Additional Code Example for TD_TextParser

Here’s how to use the `TD_TextParser` function to parse a text column in a table:

```sql
SELECT *
FROM TD_TextParser (
   ON my_table AS InputTable
   USING
   TextColumn ('description')
   ConvertToLowerCase 'true'
   StemTokens 'true'
   RemoveStopWords 'true'
   Delimiter (' ')
   Punctuation (',.!?')
   TokenColName ('parsed_tokens')
);
```

### Keywords and Phrases
- TD_TextParser Syntax
- TextParser
- Teradata Vantage
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Input Table Rows Redistribution
- Function Syntax Descriptions
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Spool Space Exhaustion
- Recommendations for Using Analytic Functions
- NGramSplitter
- TD_NaiveBayesTextClassifierPredict
- TD_SentimentExtractor
- TD_TFIDF
- Hypothesis Test Components
- Path and Pattern Analysis Functions
- Attribution
- Sessionize

This list provides a comprehensive overview of relevant keywords and phrases that may be useful for navigating the Teradata Vantage system and understanding its capabilities.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/TD_TextParser-Syntax","2024-07-27 11:19:26"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings","text/html;charset=UTF-8","200","","Indexable","","TD_WordEmbeddings Function | WordEmbeddings | Teradata - TD_WordEmbeddings - Analytics Database","95","935","The Analytics Database (SQL Engine) function TD_WordEmbedding uses training and prediction to determine the similarity between words and phrases.","145","934","","0","TD_WordEmbeddings Function | WordEmbeddings | Teradata - TD_WordEmbeddings - Analytics Database","95","Database Analytic Functions","27","Function Information","20","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings","","","","","","210375","13611","13611","4.825","A+","225","61","3.689","38.027","Hard","11.576","1","4","","707","707","0","99.860","716","714","0","","","","","","","","","0.639","","","","","","1.1","## Summary

The `TD_WordEmbeddings` function in Teradata's Analytics Database is a powerful tool for generating vector representations of words or documents. It enables users to find similarities between words or documents based on their embeddings. The function supports various options for generating embeddings, including token embeddings, document embeddings, and similarity measures between tokens or documents.

When using `TD_WordEmbeddings`, it is important to prepare a ModelTable with pretrained word vectors, formatted according to the GloVe standard. The function can handle CHARACTER SET LATIN, but it does not support CHARACTER SET UNICODE.

## Code Example

### SQL Code Examples for Common Operations

Here are examples of SQL operations including SELECT, UPDATE, DELETE, and CREATE in Teradata:

#### 1. SELECT
```sql
SELECT word, vector
FROM ModelTable
WHERE word = 'example';
```

#### 2. UPDATE
```sql
UPDATE ModelTable
SET vector = '[0.1, 0.2, 0.3, 0.4]'
WHERE word = 'example';
```

#### 3. DELETE
```sql
DELETE FROM ModelTable
WHERE word = 'example';
```

#### 4. CREATE
```sql
CREATE TABLE ModelTable (
    word VARCHAR(100),
    vector VARCHAR(255)
);
```

## Keywords and Phrases
- TD_WordEmbeddings Function
- WordEmbeddings
- Teradata - TD_WordEmbeddings
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Function Syntax Descriptions
- Non-Deterministic Behavior
- Recommendations for Using Analytic Functions
- ModelTable
- Pretrained word vectors
- GloVe format
- CHARACTER SET LATIN
- CHARACTER SET UNICODE
- Example: How to Use TD_WordEmbeddings","25","1","0","1","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings","2024-07-27 12:26:31"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/Example-How-to-Use-TD_WordEmbeddings","text/html;charset=UTF-8","200","","Indexable","","TD_WordEmbeddings Examples | WordEmbeddings - Example: How to Use TD_WordEmbeddings - Analytics Database","104","1043","See examples of the Analytics Database (SQL Engine) function TD_WordEmbeddings.","79","525","","0","TD_WordEmbeddings Examples | WordEmbeddings - Example: How to Use TD_WordEmbeddings - Analytics Database","104","Database Analytic Functions","27","Example: TD_WordEmbeddings SQL Call Using token-embedding Operation","67","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/Example-How-to-Use-TD_WordEmbeddings","","","","","","229053","15207","15207","5.391","A+","658","346","1.902","75.305","Fairly Easy","12.433","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.759","","","","","","1.1","### Summary

In this document, we explore SQL operations for managing data in Teradata, particularly focusing on the `TD_WordEmbeddings` function, which is used for various embedding operations. We will cover the basic SQL operations such as Select, Update, Delete, and Create, providing examples for each to demonstrate their usage.

### Code Example

#### 1. Select

The `SELECT` statement retrieves data from a database.

```sql
SELECT * FROM wordEmb_inputTable;
```

#### 2. Update

The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE wordEmb_inputTable
SET doc1 = 'I enjoy pizza'
WHERE doc_id = 1;
```

#### 3. Delete

The `DELETE` statement removes records from a table.

```sql
DELETE FROM wordEmb_inputTable
WHERE doc_id = 2;
```

#### 4. Create

The `CREATE` statement creates a new table in the database.

```sql
CREATE TABLE new_table (
    doc_id INT,
    doc1 VARCHAR(255),
    doc2 VARCHAR(255)
);
```

### TD_WordEmbeddings Examples

Here are some practical examples of how to use the `TD_WordEmbeddings` function:

#### Example: Token-Embedding Operation

```sql
SELECT * FROM TD_wordembeddings (
    ON wordEmb_inputTable AS InputTable
    ON wordEmbedModel AS ModelTable DIMENSION
    USING
    IDColumn('doc_id')
    ModelVectorColumns('[1:4]')
    PrimaryColumn('doc1')
    Operation('token-embedding')
    MODELTEXTCOLUMN('token')
) AS dt ORDER BY doc_id ASC;
```

#### Example: Document-Embedding Operation

```sql
SELECT * FROM TD_wordembeddings (
    ON wordEmb_inputTable AS InputTable
    ON wordEmbedModel AS ModelTable DIMENSION
    USING
    IDColumn('doc_id')
    ModelVectorColumns('[1:4]')
    PrimaryColumn('doc1')
    Operation('doc-embedding')
    MODELTEXTCOLUMN('token')
    Accumulate('doc1')
) AS dt ORDER BY doc_id ASC;
```

### Keywords and Phrases

- TD_WordEmbeddings Examples
- WordEmbeddings - Example: How to Use TD_WordEmbeddings
- Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- Published
- Language
- Last Update
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Feature Engineering Utility Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Hypothesis Testing Functions
- Input Table Rows Redistribution
- Function Syntax Descriptions
- Workload Management Configuration
- Avoid Deadlocks
- Data Exploration Functions
- TD_CategoricalSummary
- TD_ColumnSummary
- TD_Histogram
- TD_TrainTestSplit
- TD_DecisionForest
- TD_SVM
- TD_XGBoost

This document provides a foundational understanding of SQL operations in the context of Teradata's analytics capabilities. Each example demonstrates how to interact with the database effectively, ensuring proper data management and analysis.","29","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/Example-How-to-Use-TD_WordEmbeddings","2024-07-27 11:33:35"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/Optional-Syntax-Elements-for-TD_WordEmbeddings","text/html;charset=UTF-8","200","","Indexable","","Optional Syntax Elements for TD_WordEmbeddings - Analytics Database","67","642","SecondaryColumn Name of the input table column that contains the text. This field is applicable for the token2token-similarity and doc2doc-similarity operations only. Accumulate List of columns to be added to the output from the input table. This is not applicable with the token-embedding operation. Operation Operation...","323","1989","","0","Optional Syntax Elements for TD_WordEmbeddings - Analytics Database","67","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/Optional-Syntax-Elements-for-TD_WordEmbeddings","","","","","","210949","13793","13793","4.890","A+","454","117","3.880","60.344","Normal","12.186","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.657","","","","","","1.1","## Summary
In Teradata Vantage's Analytics Database, SQL operations such as SELECT, UPDATE, DELETE, and CREATE are fundamental for managing and manipulating data. Below, you will find examples of these operations, which serve as a starting point for working with the database effectively.

## Code Examples

### 1. SELECT
The `SELECT` statement is used to retrieve data from one or more tables.

```sql
SELECT column1, column2
FROM table_name
WHERE condition;
```

#### Example:
```sql
SELECT employee_id, first_name, last_name
FROM employees
WHERE department = 'Sales';
```

### 2. UPDATE
The `UPDATE` statement is used to modify existing records in a table.

```sql
UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;
```

#### Example:
```sql
UPDATE employees
SET salary = salary * 1.1
WHERE department = 'Sales';
```

### 3. DELETE
The `DELETE` statement is used to remove records from a table.

```sql
DELETE FROM table_name
WHERE condition;
```

#### Example:
```sql
DELETE FROM employees
WHERE hire_date < '2020-01-01';
```

### 4. CREATE
The `CREATE` statement is used to create a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

#### Example:
```sql
CREATE TABLE new_employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    hire_date DATE
);
```

## Keywords and Phrases
- **Optional Syntax Elements for TD_WordEmbeddings** 
- **Analytics Database**
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Release Number**
- **17.20**
- **Published**
- **June 2022**
- **Language**
- **English (United States)**
- **Last Update**
- **2024-04-06**
- **Product Category**
- **Teradata Vantage™**
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Transform Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Usage Notes**
- **Function Syntax Descriptions**
- **Input Table Rows Redistribution**
- **Function Names with and without TD Prefix**
- **Maximum Number of Columns in a Database Table**
- **Spool Space Exhaustion for Large Partitions at High Concurrency**
- **Recommendations for Using Analytic Functions** 
- **Non-Deterministic Behavior** 

These keywords and phrases provide a broad understanding of the analytical capabilities and operational aspects of the Teradata Vantage Analytics Database.","25","1","1","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/Optional-Syntax-Elements-for-TD_WordEmbeddings","2024-07-27 12:50:24"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/Required-Syntax-Elements-for-TD_WordEmbeddings","text/html;charset=UTF-8","200","","Indexable","","Required Syntax Elements for TD_WordEmbeddings - Analytics Database","67","646","IDColumn Identifier that uniquely identifies the row of the input table. ModelVectorColumns Range of columns in the model table that contains real value vector. ModelTextColumn Column that contains the token in the model. PrimaryColumn Name of the input table column that contains the text.","290","1815","","0","Required Syntax Elements for TD_WordEmbeddings - Analytics Database","67","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/Required-Syntax-Elements-for-TD_WordEmbeddings","","","","","","208035","12846","12846","4.554","A+","88","41","2.146","25.843","Very Hard","11.229","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.869","","","","","","1.1","## Summary

The Teradata Vantage™ Analytics Database provides a robust framework for performing data analysis and machine learning tasks. The database includes a variety of analytic functions categorized into data cleaning, exploration, feature engineering, model training, scoring, evaluation, and text analytics. The TD_WordEmbeddings function is particularly useful for converting words into vector representations, which can then be utilized in various machine learning models.

This guide covers the essential SQL commands—Select, Update, Delete, and Create—along with their syntax and examples tailored for the Teradata Analytics Database.

## Code Examples

### 1. Select
The `SELECT` statement retrieves data from one or more tables.

```sql
SELECT first_name, last_name
FROM employees
WHERE department = 'Sales';
```

### 2. Update
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE employees
SET salary = salary * 1.10
WHERE department = 'Sales';
```

### 3. Delete
The `DELETE` statement removes records from a table.

```sql
DELETE FROM employees
WHERE last_name = 'Doe';
```

### 4. Create
The `CREATE TABLE` statement creates a new table in the database.

```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

## Keywords and Phrases

- Required Syntax Elements for TD_WordEmbeddings - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Changes and Additions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Transform Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Recommendations for Using Analytic Functions
- TD_WordEmbeddings Syntax
- TD_WordEmbeddings Input
- TD_WordEmbeddings Output
- Example: How to Use TD_WordEmbeddings
- Function Names with and without TD Prefix
- Input Table Rows Redistribution
- Size of the Query
- AMP Configuration Impact on Function Execution
- Limitations When Using PARTITION BY
- Functions Ignore Disallowed Syntax Elements
- Data Exploration Functions
- Model Score Functions
- Text Analytic Functions
- Path and Pattern Analysis Functions
- Sessionize Syntax
- Hypothesis Test Components
- TD_ANOVA Syntax
- TD_ChiSq Syntax
- TD_FTest Syntax
- TD_ZTest Syntax
- nPath Syntax
- Attribution Syntax
- TD_Silhouette Syntax
- TD_ClassificationEvaluator Syntax
- TD_RegressionEvaluator Syntax
- TD_ROC Syntax
- TD_TrainTestSplit Syntax
- TD_TextParser Syntax
- TD_TFIDF Syntax

This structured overview provides a concise reference for using the Teradata Analytics Database's features effectively.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/Required-Syntax-Elements-for-TD_WordEmbeddings","2024-07-27 11:49:55"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/TD_WordEmbeddings-Input","text/html;charset=UTF-8","200","","Indexable","","TD_WordEmbeddings Input - Analytics Database","44","428","Input Table Schema Column Data Type Description IDColumn INTEGER, CHAR, VARCHAR (CHARACTER SET LATIN or UNICODE for CHAR and VARCHAR) Identifier that uniquely identifies the row. PrimaryColumn CHAR, VARCHAR (CHARACTER SET LATIN) Name of the input column that contains the text. SecondaryColumn CHAR, VARCHAR (CHARACTER S...","323","2213","","0","TD_WordEmbeddings Input - Analytics Database","44","Database Analytic Functions","27","Input Table Schema","18","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/TD_WordEmbeddings-Input","","","","","","209522","13193","13193","4.677","A+","108","43","2.512","19.419","Very Hard","11.226","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.617","","","","","","1.1","# Introduction to Teradata Vantage™ Analytics Database

The Teradata Vantage™ Analytics Database provides a comprehensive suite of analytic functions tailored for data exploration, model training, and evaluation. This platform is designed to support data scientists and analysts in deriving insights from their data efficiently and effectively. The database supports a wide range of functions, including data cleaning, feature engineering, model training, and hypothesis testing.

## Summary of Key Features

- **Analytics Database Functions**: Includes various categories such as data cleaning, feature engineering, model scoring, and evaluation functions.
- **Deployment**: Available on VantageCloud and VantageCore, enabling flexible deployment options.
- **Model Training and Evaluation**: Support for advanced machine learning algorithms and evaluation metrics.
- **Text Analytic Functions**: Capabilities for processing and analyzing textual data, such as sentiment analysis and N-gram extraction.
- **Statistical Functions**: Tools for hypothesis testing, including ANOVA and Chi-Square tests.

## Code Example

### 1. Create a Table
```sql
CREATE TABLE customer_data (
    customer_id INT,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    created_at TIMESTAMP
);
```

### 2. Insert Data
```sql
INSERT INTO customer_data (customer_id, first_name, last_name, email, created_at)
VALUES (1, 'John', 'Doe', 'john.doe@example.com', CURRENT_TIMESTAMP),
       (2, 'Jane', 'Smith', 'jane.smith@example.com', CURRENT_TIMESTAMP);
```

### 3. Select Data
```sql
SELECT * FROM customer_data WHERE last_name = 'Doe';
```

### 4. Update Data
```sql
UPDATE customer_data
SET email = 'john.updated@example.com'
WHERE customer_id = 1;
```

### 5. Delete Data
```sql
DELETE FROM customer_data WHERE customer_id = 2;
```

## Keywords and Phrases

- **TD_WordEmbeddings Input**: Analytics Database
- **Database Analytic Functions**
- **Deployment**: VantageCloud, VantageCore
- **Edition**: Enterprise
- **IntelliFlex, VMware, Product**: Analytics Database
- **Release Number**: 17.20
- **Published**: June 2022
- **Language**: English (United States)
- **Last Update**: 2024-04-06
- **Product Category**: Teradata Vantage™
- **Data Cleaning Functions**: Pack, StringSimilarity
- **Data Exploration Functions**: MovingAverage, TD_CategoricalSummary
- **Feature Engineering Functions**: TD_BinCodeTransform, TD_OneHotEncodingTransform
- **Model Training Functions**: TD_DecisionForest, TD_XGBoost
- **Model Scoring Functions**: TD_DecisionForestPredict, TD_SVMPredict
- **Model Evaluation Functions**: TD_Silhouette, TD_ClassificationEvaluator
- **Text Analytic Functions**: TD_TFIDF, TD_SentimentExtractor
- **Hypothesis Testing Functions**: TD_ANOVA, TD_ZTest
- **Path and Pattern Analysis Functions**: nPath, Sessionize

This summary encapsulates the capabilities of Teradata Vantage™ Analytics Database, providing essential functions for data management, analysis, and machine learning.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/TD_WordEmbeddings-Input","2024-07-27 12:02:21"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/TD_WordEmbeddings-Output","text/html;charset=UTF-8","200","","Indexable","","TD_WordEmbeddings Output - Analytics Database","45","444","Output Table Schema Column Data Type Description IDColumn INTEGER, CHAR, VARCHAR (CHARACTER SET LATIN or UNICODE for CHAR and VARCHAR) Unique row identifier. tokenColumn VARCHAR (CHARACTER SET LATIN) Tokens from the target column data. Applicable for token-embedding only. v1 Real Coordinate point of the first dimension...","323","2168","","0","TD_WordEmbeddings Output - Analytics Database","45","Database Analytic Functions","27","Output Table Schema","19","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/TD_WordEmbeddings-Output","","","","","","210857","13396","13396","4.749","A+","148","51","2.902","12.396","Very Hard","11.312","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.533","","","","","","1.1","# Overview of Teradata Analytics Database Functions

The Teradata Analytics Database offers a comprehensive suite of analytic functions for data cleaning, exploration, feature engineering, model training, scoring, and evaluation. This document outlines key operations, including selection, update, deletion, and creation of data, providing syntax examples for clarity.

## Code Examples

### 1. **Select**
The `SELECT` statement is used to query data from a database.

```sql
SELECT column1, column2 
FROM table_name 
WHERE condition;
```

*Example:*
```sql
SELECT name, age 
FROM employees 
WHERE department = 'Sales';
```

### 2. **Update**
The `UPDATE` statement modifies existing records in a table.

```sql
UPDATE table_name 
SET column1 = value1, column2 = value2 
WHERE condition;
```

*Example:*
```sql
UPDATE employees 
SET salary = salary * 1.1 
WHERE performance_rating = 'Excellent';
```

### 3. **Delete**
The `DELETE` statement removes records from a table.

```sql
DELETE FROM table_name 
WHERE condition;
```

*Example:*
```sql
DELETE FROM employees 
WHERE last_login < '2023-01-01';
```

### 4. **Create**
The `CREATE` statement is used to create a new table or database.

```sql
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);
```

*Example:*
```sql
CREATE TABLE employees (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    age INT,
    department VARCHAR(50)
);
```

## Summary

The Teradata Analytics Database provides a robust framework for managing and analyzing data with functionalities that include a variety of analytic functions tailored for tasks such as data cleaning, feature engineering, and model evaluation. The examples provided illustrate basic SQL operations that are essential for interacting with the database.

## Keywords and Phrases

- **TD_WordEmbeddings Output** - Analytics Database
- **Database Analytic Functions**
- **Deployment**
- **VantageCloud**
- **VantageCore**
- **Edition**
- **Enterprise**
- **IntelliFlex**
- **VMware**
- **Product**
- **Analytics Database**
- **Release Number** - 17.20
- **Published** - June 2022
- **Language** - English (United States)
- **Last Update** - 2024-04-06
- **dita:mapPath** - gjn1627595495337.ditamap
- **dita:ditavalPath** - ayr1485454803741.ditaval
- **dita:id** - jmh1512506877710
- **Product Category** - Teradata Vantage™
- **Data Cleaning Functions**
- **Data Exploration Functions**
- **Feature Engineering Functions**
- **Model Training Functions**
- **Model Scoring Functions**
- **Model Evaluation Functions**
- **Text Analytic Functions**
- **Hypothesis Testing Functions**
- **Path and Pattern Analysis Functions**
- **Input Table Rows Redistribution**
- **Function Syntax Descriptions**
- **Workload Management Configuration**
- **Data Type Change in Accumulated Columns**
- **Non-Deterministic Behavior**
- **Maximum Number of Columns in Database Table**
- **Spool Space Exhaustion** at High Concurrency
- **Recommendations for Using Analytic Functions**
- **Examples of Use Cases** for various functions.

This structured approach ensures clarity and ease of understanding for users looking to implement or learn about the Teradata Analytics Database functionalities.","25","1","0","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/TD_WordEmbeddings-Output","2024-07-27 12:47:19"
"https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/TD_WordEmbeddings-Syntax","text/html;charset=UTF-8","200","","Indexable","","TD_WordEmbeddings Syntax | WordEmbeddings - TD_WordEmbeddings Syntax - Analytics Database","89","887","See the syntax of Analytics Database (SQL Engine) function TD_WordEmbeddings and read descriptions of its required and optional syntax elements.","144","918","","0","TD_WordEmbeddings Syntax | WordEmbeddings - TD_WordEmbeddings Syntax - Analytics Database","89","Database Analytic Functions","27","","0","","","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/TD_WordEmbeddings-Syntax","","","","","","209241","13103","13103","4.645","A+","155","54","2.870","39.088","Hard","11.449","1","5","","707","707","0","99.860","710","708","0","","","","","","","","","0.621","","","","","","1.1","# Overview of Teradata Vantage™ SQL Operations

In Teradata, SQL operations are essential for managing and manipulating data within the Analytics Database. This document provides an overview of the primary SQL operations, including examples for SELECT, UPDATE, DELETE, and CREATE commands.

## SQL Operations

### 1. SELECT

The SELECT statement is used to query and retrieve data from one or more tables.

**Example:**
```sql
SELECT first_name, last_name 
FROM employees 
WHERE department = 'Sales';
```

### 2. UPDATE

The UPDATE statement modifies existing records in a table based on a condition.

**Example:**
```sql
UPDATE employees 
SET salary = salary * 1.10 
WHERE department = 'Sales';
```

### 3. DELETE

The DELETE statement removes rows from a table based on a specified condition.

**Example:**
```sql
DELETE FROM employees 
WHERE last_name = 'Smith';
```

### 4. CREATE

The CREATE statement is used to create new tables, views, or other database objects.

**Example:**
```sql
CREATE TABLE new_employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);
```

## Summary

This document covers the fundamental SQL operations in Teradata Vantage™, including SELECT, UPDATE, DELETE, and CREATE statements. Each operation plays a crucial role in managing data within the Analytics Database.

### Keywords and Phrases

- TD_WordEmbeddings Syntax
- WordEmbeddings - TD_WordEmbeddings Syntax - Analytics Database
- Database Analytic Functions
- Deployment
- VantageCloud
- VantageCore
- Edition
- Enterprise
- IntelliFlex
- VMware
- Product
- Analytics Database
- Release Number
- 17.20
- Published
- June 2022
- Language
- English (United States)
- Last Update
- 2024-04-06
- dita:mapPath
- dita:ditavalPath
- Product Category
- Teradata Vantage™
- Introduction to Analytics Database Analytic Functions
- Data Cleaning Functions
- Data Exploration Functions
- Feature Engineering Functions
- Model Training Functions
- Model Scoring Functions
- Model Evaluation Functions
- Text Analytic Functions
- Hypothesis Testing Functions
- Usage Notes
- Recommendations for Using Analytic Functions
- Function Syntax Descriptions
- Input Table Rows Redistribution
- Function Names with and without TD Prefix
- Non-Deterministic Behavior
- Maximum Number of Columns in a Database Table

These keywords and phrases encapsulate critical aspects of working with the Teradata Vantage™ Analytics Database and its functions.","26","1","2","0","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/TD_WordEmbeddings-Syntax","2024-07-27 12:02:21"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/03boo0EUEC2DsY2CXCEN8g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.382","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Optional-Syntax-Elements-for-Pack","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/03boo0EUEC2DsY2CXCEN8g","2024-07-27 12:55:54"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/04~855FBhp4DyA0Hhay6dg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.385","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/Symbols-and-Symbol-Predicates-That-Examples-Use","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/04~855FBhp4DyA0Hhay6dg","2024-07-27 12:56:12"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/05BoSsEqQIC4kX3qhvFxSw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","8","4","0","0.560","0","0","0","","","","","","","","","0.560","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/05BoSsEqQIC4kX3qhvFxSw","2024-07-27 12:55:22"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/0KsXIbFAKgMqBDpqfpLCKA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.397","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Avoid-Deadlocks-Using-Volatile-Tables","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/0KsXIbFAKgMqBDpqfpLCKA","2024-07-27 12:56:09"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/0OioKDgdXoo3lRjkiQIjSw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.387","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform/TD_FunctionTransform-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/0OioKDgdXoo3lRjkiQIjSw","2024-07-27 12:56:20"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/0PMkBFAIa_qc5vghWMLNqA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.392","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Examples/TD_NaiveBayesTextClassifierPredict-Example-Responses-Specified","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/0PMkBFAIa_qc5vghWMLNqA","2024-07-27 12:55:35"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/0Ui_kHInaSJ3G~2P27MthQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.392","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Find-First-Product-with-Multiple-Referrers-in-Any-Session","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/0Ui_kHInaSJ3G~2P27MthQ","2024-07-27 12:57:04"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/0_pxt8tpxwHrMaFK4laXXw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.405","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform/TD_RandomProjectionTransform-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/0_pxt8tpxwHrMaFK4laXXw","2024-07-27 12:57:50"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/0bOFxDJoLIfVUvMpuM3WYQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","4","3","0","0.420","0","0","0","","","","","","","","","0.453","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/0bOFxDJoLIfVUvMpuM3WYQ","2024-07-27 12:55:25"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/0lSrktsKkEbjgcVnQe5s9g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.401","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/TD_XGBoost-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/0lSrktsKkEbjgcVnQe5s9g","2024-07-27 12:57:42"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/0t~eDrkwXfbtk5AhuhPyLA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.407","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/TD_ClassificationEvaluator-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/0t~eDrkwXfbtk5AhuhPyLA","2024-07-27 12:57:46"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/13JxJGRwghZ6LsNx~gXyJA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.376","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit/TD_OutlierFilterFit-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/13JxJGRwghZ6LsNx~gXyJA","2024-07-27 12:57:15"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/15fbipEWmmnhxfohtCEQ8g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.446","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/Required-Syntax-Elements-for-TD_BinCodeTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/15fbipEWmmnhxfohtCEQ8g","2024-07-27 12:56:14"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/1DsLJc01zbsHyKGKm_bn0A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.386","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/Example-How-to-Use-TD_NonLinearCombineFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/1DsLJc01zbsHyKGKm_bn0A","2024-07-27 12:57:48"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/1P7Pu473STYo7aXcSZvXdw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.484","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/TD_WhichMin-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/1P7Pu473STYo7aXcSZvXdw","2024-07-27 12:56:32"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/1VKcDFM0GNLF~h4y~mpphw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.459","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/TD_SVMPredict-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/1VKcDFM0GNLF~h4y~mpphw","2024-07-27 12:55:49"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/1c77ip_TcjLO1lBViwrepQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.424","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/TD_NumApply-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/1c77ip_TcjLO1lBViwrepQ","2024-07-27 12:56:57"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/1iScqky6Xr1x4klVkqcL4g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.444","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/1iScqky6Xr1x4klVkqcL4g","2024-07-27 12:58:12"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/1sKO5dJFd3i3EhirOITKdg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.397","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents/TD_RandomProjectionMinComponents-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/1sKO5dJFd3i3EhirOITKdg","2024-07-27 12:57:38"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/1~3~S497OThRv60Pgi5RnQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.416","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/Optional-Syntax-Elements-for-TD_XGBoostPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/1~3~S497OThRv60Pgi5RnQ","2024-07-27 12:55:37"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/2RYzdfJewsnsgQ0nOI8BKg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.435","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Required-Syntax-Elements-for-TD_FTest","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/2RYzdfJewsnsgQ0nOI8BKg","2024-07-27 12:56:00"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/2aVKYjfn72tpU6UKIelb3A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.393","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Modified-Moving-Average","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/2aVKYjfn72tpU6UKIelb3A","2024-07-27 12:55:06"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/2c2yDdMYrhSZ_yJUSZfoYw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","4","2","0","0.280","0","0","0","","","","","","","","","0.470","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/2c2yDdMYrhSZ_yJUSZfoYw","2024-07-27 12:54:52"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/2h7d6nj3vkKHbxDZVnrJOQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.376","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform/TD_FunctionTransform-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/2h7d6nj3vkKHbxDZVnrJOQ","2024-07-27 12:56:19"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/2mVVUDT9UXMQDSu2OKTq4Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.450","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/Example-How-to-Use-TD_TFIDF","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/2mVVUDT9UXMQDSu2OKTq4Q","2024-07-27 12:55:12"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/2r3KqOW2WCRFj50qx~oTKA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.455","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/Examples-How-to-Use-StringSimilarity","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/2r3KqOW2WCRFj50qx~oTKA","2024-07-27 12:58:22"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/2z0xkqXP~p~qQZPWmrjTog","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.468","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/2z0xkqXP~p~qQZPWmrjTog","2024-07-27 12:55:21"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/36I6MHTrgeI0gM_nU211ig","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.445","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/36I6MHTrgeI0gM_nU211ig","2024-07-27 12:58:03"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/3BwiLk2AYpStgkM62XVCjw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","6","4","0","0.560","0","0","0","","","","","","","","","0.396","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/3BwiLk2AYpStgkM62XVCjw","2024-07-27 12:55:26"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/3EVvX1EaXhCwWDThSdkheQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.454","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/Required-Syntax-Elements-for-TD_SentimentExtractor","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/3EVvX1EaXhCwWDThSdkheQ","2024-07-27 12:56:05"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/3TDXN9higWWq2E_GZCbB_Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.438","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Weighted-Moving-Average","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/3TDXN9higWWq2E_GZCbB_Q","2024-07-27 12:55:07"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/3bnG23EvXMeAVAbzKIKUVA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.532","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/Required-Syntax-Elements-for-TD_GetRowsWithoutMissingValues","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/3bnG23EvXMeAVAbzKIKUVA","2024-07-27 12:56:28"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/3cIY4Nx5m~ZF0yfB_tglgA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.394","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/TD_GLMPredict-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/3cIY4Nx5m~ZF0yfB_tglgA","2024-07-27 12:55:29"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/3e0N9JFK437zovA0Vx~7tA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.459","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Attribution-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/3e0N9JFK437zovA0Vx~7tA","2024-07-27 12:57:37"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/3pJA3ApSoW2vNyEwIvTi1A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.413","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Required-Syntax-Elements-for-TD_XGBoost","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/3pJA3ApSoW2vNyEwIvTi1A","2024-07-27 12:57:43"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/3xtZFFhyvqdzTokykcRbmg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.443","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/TD_ConvertTo-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/3xtZFFhyvqdzTokykcRbmg","2024-07-27 12:56:01"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4MFxjzhX03apaFAJLObZTA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.405","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Hypothesis-Testing-Functions","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4MFxjzhX03apaFAJLObZTA","2024-07-27 12:57:24"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4OMoXikNWlafAfrbUBzbOw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.636","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/TD_SVMPredict-Usage-Notes","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4OMoXikNWlafAfrbUBzbOw","2024-07-27 12:55:47"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4Oa_RxG108p9CYNEP4X_7A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.433","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/TD_FTest-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4Oa_RxG108p9CYNEP4X_7A","2024-07-27 12:56:00"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4QmU4sTGG8WDSCk4nAM6SA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.445","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/TD_TextParser-Example","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4QmU4sTGG8WDSCk4nAM6SA","2024-07-27 12:55:10"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4_BL4HtmIf4UWL21U23xgg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.413","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/NGramSplitter-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4_BL4HtmIf4UWL21U23xgg","2024-07-27 12:57:18"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4dDPnNuaINll4K0VG54J_A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.544","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/TD_SVMPredict-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4dDPnNuaINll4K0VG54J_A","2024-07-27 12:55:48"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4e_9Omygnq3jWplyWH0tHw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.694","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Examples-How-to-Use-Pack/Example-Nondefault-Options","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4e_9Omygnq3jWplyWH0tHw","2024-07-27 12:57:34"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4jszX37uBBvgN_IK5XMlCg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.375","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/Required-Syntax-Elements-for-TD_Unpivoting","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4jszX37uBBvgN_IK5XMlCg","2024-07-27 12:58:00"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4j~9HKeCmbP7TsBzquTg7Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.411","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Examples-How-to-Use-Unpack/Example-No-Delimiter-Separates-Virtual-Columns","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4j~9HKeCmbP7TsBzquTg7Q","2024-07-27 12:55:46"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4lqvBHhFj6g_To5b6ZHP~w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.414","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/Optional-Syntax-Elements-for-TD_TFIDF","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4lqvBHhFj6g_To5b6ZHP~w","2024-07-27 12:55:12"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4pGj2clOc~e3ueOHl55tTQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.383","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/Required-Syntax-Elements-for-TD_TrainTestSplit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4pGj2clOc~e3ueOHl55tTQ","2024-07-27 12:57:35"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4r0YmZNtC7MOCXn~OC0w~Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.412","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/TD_Silhouette-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/4r0YmZNtC7MOCXn~OC0w~Q","2024-07-27 12:55:01"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5APnniH3GxDgB9o9mxu7ww","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.444","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/TD_RowNormalizeFit-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5APnniH3GxDgB9o9mxu7ww","2024-07-27 12:55:08"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5D_N64qkFoAOwKZfmwXllw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.371","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Path-and-Pattern-Analysis-Functions","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5D_N64qkFoAOwKZfmwXllw","2024-07-27 12:57:24"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5UtkrIjovRL~ZSKCPuE9jA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.443","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/MovingAverage-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5UtkrIjovRL~ZSKCPuE9jA","2024-07-27 12:55:07"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5Vy6PC~5EvvsBCK5Lo3~cw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.702","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/TD_SentimentExtractor-Usage-Notes","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5Vy6PC~5EvvsBCK5Lo3~cw","2024-07-27 12:56:05"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5aO9~WgxfFho7E16u3y8sA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","4","4","0","0.560","0","0","0","","","","","","","","","0.609","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5aO9~WgxfFho7E16u3y8sA","2024-07-27 12:58:16"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5cgiRM9oSGixPu2hw1heoQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.398","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents/TD_RandomProjectionMinComponents-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5cgiRM9oSGixPu2hw1heoQ","2024-07-27 12:57:38"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5g9qoGJznVHO012nUn7SbQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.446","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary/TD_CategoricalSummary-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5g9qoGJznVHO012nUn7SbQ","2024-07-27 12:56:43"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5gOHOYay4eJPqHxO6eX9jg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.536","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5gOHOYay4eJPqHxO6eX9jg","2024-07-27 12:55:24"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5orqGv8butKHLYeZMvY8oQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.434","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/Optional-Syntax-Elements-for-TD_BinCodeFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5orqGv8butKHLYeZMvY8oQ","2024-07-27 12:57:01"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5tW~8MaPuRpWKjXA75lBnw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.391","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/TD_NumApply-Usage-Notes","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5tW~8MaPuRpWKjXA75lBnw","2024-07-27 12:56:57"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5tiuSGrM4VOCIkxXOLFzkg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.388","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/Required-Syntax-Elements-for-TD_TextParser","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/5tiuSGrM4VOCIkxXOLFzkg","2024-07-27 12:55:11"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/67W~jRaHmMUPmssVU~mKMA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","8","8","0","1.130","0","0","0","","","","","","","","","0.469","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols/LAG-and-LEAD-Expressions-in-Symbol-Predicates/LAG-and-LEAD-Expressions-Example-No-Alias-for-Input-Query","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/67W~jRaHmMUPmssVU~mKMA","2024-07-27 12:58:05"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/6GIVp52BiA5F0x9DAd6ohg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.561","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/Optional-Syntax-Elements-for-TD_FillRowID","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/6GIVp52BiA5F0x9DAd6ohg","2024-07-27 12:58:02"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/6HUrC7EC0E8zi1XMNIZRUw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.550","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics/TD_UnivariateStatistics-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/6HUrC7EC0E8zi1XMNIZRUw","2024-07-27 12:55:31"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/6J9L4_41ljooF1Kxc5o0IA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.410","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM/TD_SVM-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/6J9L4_41ljooF1Kxc5o0IA","2024-07-27 12:55:20"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/6MoUYAc~JjH0UUGNxXcvLg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.389","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/TD_NonLinearCombineFit-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/6MoUYAc~JjH0UUGNxXcvLg","2024-07-27 12:57:48"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/6NYCoscHX_Xl47qojhTwOg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.406","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Input-Table-Rows-Redistribution","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/6NYCoscHX_Xl47qojhTwOg","2024-07-27 12:55:20"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/6ekESYyOq7lQ0xiSuWxS4Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","2","0","0.280","0","0","0","","","","","","","","","0.403","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/6ekESYyOq7lQ0xiSuWxS4Q","2024-07-27 12:55:24"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/6tieqJOG7AfhYORAe0KoRA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.391","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/TD_TextParser-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/6tieqJOG7AfhYORAe0KoRA","2024-07-27 12:55:10"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/783cj6KC40AZja~BLnjyVg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.416","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Examples-How-to-Use-TD_ScaleFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/783cj6KC40AZja~BLnjyVg","2024-07-27 12:57:45"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/7Af9Bxckhyoa9ftJ4cIPUg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.428","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Examples-How-to-Use-Unpack/Example-Delimiter-Separates-Virtual-Columns","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/7Af9Bxckhyoa9ftJ4cIPUg","2024-07-27 12:55:46"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/7FvrHZSHDu8YNbkJeSrE6g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.384","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/TD_TextParser-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/7FvrHZSHDu8YNbkJeSrE6g","2024-07-27 12:55:11"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/7Gc0AEKUKk_NNRgXIRlmAA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.444","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/Example-How-to-Use-TD_StrApply","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/7Gc0AEKUKk_NNRgXIRlmAA","2024-07-27 12:57:21"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/7NnPUlfhdHUGwzBb_Di1Zw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.387","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/TD_Silhouette-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/7NnPUlfhdHUGwzBb_Di1Zw","2024-07-27 12:55:01"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/7Uqq_07q5gfjr_DJioxatg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.460","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/TD_SimpleImputeFit-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/7Uqq_07q5gfjr_DJioxatg","2024-07-27 12:56:18"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/7YPvUrkN0ijZdNgDQQnKsA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.416","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/7YPvUrkN0ijZdNgDQQnKsA","2024-07-27 12:55:52"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/7_Rv82jSHmS8UqN3uYT0nA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.467","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Optional-Syntax-Elements-for-Unpack","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/7_Rv82jSHmS8UqN3uYT0nA","2024-07-27 12:55:41"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/7rMfkaqV8glRXz2Y_tuAig","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.571","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/TD_SimpleImputeTransform-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/7rMfkaqV8glRXz2Y_tuAig","2024-07-27 12:55:02"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/7uebaOub2arAq4FQgq8Hjg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.389","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/Required-Syntax-Elements-for-TD_PolynomialFeaturesFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/7uebaOub2arAq4FQgq8Hjg","2024-07-27 12:56:16"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/89GsqNAA2iMt_n9Kc2xoGQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.434","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Model-Scoring-Functions","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/89GsqNAA2iMt_n9Kc2xoGQ","2024-07-27 12:57:23"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/8F0PKaEB2XEOHXNWZBbVKg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.448","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Function-Syntax-Descriptions","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/8F0PKaEB2XEOHXNWZBbVKg","2024-07-27 12:56:11"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/8F~iLxC5K77VTK9DGpUGgQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.623","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/8F~iLxC5K77VTK9DGpUGgQ","2024-07-27 12:55:39"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/8NX1bDWpERHWWecorW4R_Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.444","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/TD_OneClassSVMPredict-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/8NX1bDWpERHWWecorW4R_Q","2024-07-27 12:57:05"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/8NsldDpiS10gzFKG5abrnw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.451","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Workload-Management-Configuration-for-Analytics-Database-Analytic-Functions","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/8NsldDpiS10gzFKG5abrnw","2024-07-27 12:56:07"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/8Xpm7OPqjm6aEL50uFljPw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.456","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/Optional-Syntax-Elements-for-TD_RowNormalizeFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/8Xpm7OPqjm6aEL50uFljPw","2024-07-27 12:55:09"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/8jFfoyXULDNYHed~JOS6Yw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.430","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/Example-How-to-Use-TD_ROC","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/8jFfoyXULDNYHed~JOS6Yw","2024-07-27 12:57:40"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/8pTlhvwVWT18FYyCtJBJSg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.378","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/Required-Syntax-Elements-for-TD_OrdinalEncodingTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/8pTlhvwVWT18FYyCtJBJSg","2024-07-27 12:57:58"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/8pxpwqwmZXUD8f28whd_Gg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.687","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/TD_GLMPredict-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/8pxpwqwmZXUD8f28whd_Gg","2024-07-27 12:57:30"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/8tRpj67~OKU7_vZg4u07_Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.461","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/8tRpj67~OKU7_vZg4u07_Q","2024-07-27 12:55:27"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/8w2G6uFw2ytsfae2JzedSA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.391","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/TD_ScaleTransform-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/8w2G6uFw2ytsfae2JzedSA","2024-07-27 12:56:12"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/923vUJ2ZGFWL05P8PeQ0XA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.435","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Cumulative-Moving-Average","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/923vUJ2ZGFWL05P8PeQ0XA","2024-07-27 12:55:06"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/98vhQHhX7RPSlybzCPo~_A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.410","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit/TD_OutlierFilterFit-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/98vhQHhX7RPSlybzCPo~_A","2024-07-27 12:57:14"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9DUPr61mF0ULATSz0N1ZBQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.425","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Attribution-Input/Model-Specification","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9DUPr61mF0ULATSz0N1ZBQ","2024-07-27 12:57:29"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9KpgyYHYrqi7oV1LGEDk6Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.392","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Example-How-to-Use-TD_Pivoting/Aggregation-Only","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9KpgyYHYrqi7oV1LGEDk6Q","2024-07-27 12:56:54"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9Se4Us3Xl643SrlF_qbjLg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.443","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9Se4Us3Xl643SrlF_qbjLg","2024-07-27 12:55:20"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9YjErzkNfQRiUWC3v6tiVA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.380","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/Optional-Syntax-Elements-for-TD_PolynomialFeaturesFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9YjErzkNfQRiUWC3v6tiVA","2024-07-27 12:56:17"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9dHToHHrddVZbcMEsBgE6A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.371","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/TD_XGBoost-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9dHToHHrddVZbcMEsBgE6A","2024-07-27 12:57:43"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9p3JXi90ctDow1pgpJHjdA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.376","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit/TD_RandomProjectionFit-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9p3JXi90ctDow1pgpJHjdA","2024-07-27 12:57:41"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9pkhYvGoP1LzWFP4P_y3QQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.470","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/TD_PolynomialFeaturesFit-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9pkhYvGoP1LzWFP4P_y3QQ","2024-07-27 12:56:17"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9xKTc0MLGXVpVC_I3Z059Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.419","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Sessionize-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9xKTc0MLGXVpVC_I3Z059Q","2024-07-27 12:58:24"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9xRR8YZou_Bc6j8wT3U_ug","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.418","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9xRR8YZou_Bc6j8wT3U_ug","2024-07-27 12:58:15"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9~5js2ocnp58AcFeaUewCA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.410","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/TD_Pivoting-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9~5js2ocnp58AcFeaUewCA","2024-07-27 12:55:16"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9~vQrJUT5hGXmgOghNoblA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.439","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/Example-How-to-Use-TD_ConvertTo","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/9~vQrJUT5hGXmgOghNoblA","2024-07-27 12:56:03"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/A37yEy5_yMNgcvvK~PvLfw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.407","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/Example-How-to-Use-TD_SimpleImputeFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/A37yEy5_yMNgcvvK~PvLfw","2024-07-27 12:56:18"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/A3XebapL1vEVvZGJb7ECpg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.410","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Attribution-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/A3XebapL1vEVvZGJb7ECpg","2024-07-27 12:57:37"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/A8Sw6kzd9RUdzgxlBjA~Kg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.383","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer/TD_NaiveBayesTextClassifierTrainer-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/A8Sw6kzd9RUdzgxlBjA~Kg","2024-07-27 12:58:08"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/AF6~Ue82dgB_ZEwFojpAPg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","2","0","0.280","0","0","0","","","","","","","","","0.379","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Patterns","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/AF6~Ue82dgB_ZEwFojpAPg","2024-07-27 12:55:39"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ARe_E0RfZfM5vYfmEum6GA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.448","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/TD_StrApply-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ARe_E0RfZfM5vYfmEum6GA","2024-07-27 12:57:21"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ASUMc0qjpxPY2rVwM7A_Bw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.547","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Examples-How-to-Use-TD_ScaleFit/Dense-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ASUMc0qjpxPY2rVwM7A_Bw","2024-07-27 12:56:06"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/AXlG2EXvxXEzwAWk~CT8ng","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.402","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Examples","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/AXlG2EXvxXEzwAWk~CT8ng","2024-07-27 12:57:27"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/AY4tdyQWHcr_ikwmDi8XrA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.612","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Find-Paths-to-Checkout-Page-for-Purchases-Over-200","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/AY4tdyQWHcr_ikwmDi8XrA","2024-07-27 12:57:03"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/AgGDT4V4CZ8KW8MieT1xaw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.446","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/Optional-Syntax-Elements-in-TD_RegressionEvaluator","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/AgGDT4V4CZ8KW8MieT1xaw","2024-07-27 12:57:12"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/AlEAEhZCt~8cml57p_aVqA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.402","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/Example-How-to-Use-TD_QQNorm","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/AlEAEhZCt~8cml57p_aVqA","2024-07-27 12:55:33"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/AtsU6ymcLsGAp5IbYnzB2g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.420","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/TD_FTest-Usage-Notes","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/AtsU6ymcLsGAp5IbYnzB2g","2024-07-27 12:56:00"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Ay1~7rBW9ClwadNhX0Ofzw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.881","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/TD_OneHotEncodingFit-Usage-Notes","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Ay1~7rBW9ClwadNhX0Ofzw","2024-07-27 12:55:54"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/B701zeIhVdoxEnzFgeOyJw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.429","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Examples-How-to-Use-NGramSplitter/NGramSplitter-Examples-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/B701zeIhVdoxEnzFgeOyJw","2024-07-27 12:56:45"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/BH~mfLCfCvmJKOBhvK8ZXw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.481","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/BH~mfLCfCvmJKOBhvK8ZXw","2024-07-27 12:55:35"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/BIQlO4O8qbnLhZ38gCoEaw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","2","0","0.280","0","0","0","","","","","","","","","0.900","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/BIQlO4O8qbnLhZ38gCoEaw","2024-07-27 12:55:39"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/BKod_koVeyTAuSWM6aRGyQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.451","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/BKod_koVeyTAuSWM6aRGyQ","2024-07-27 12:55:23"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/BOwgsYEYjesP90N3o7Hwaw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.511","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/Required-Syntax-Elements-for-TD_OutlierFilterTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/BOwgsYEYjesP90N3o7Hwaw","2024-07-27 12:56:24"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/BShCKfc4p~mXkTKJLTZQzA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.396","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/TD_XGBoost-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/BShCKfc4p~mXkTKJLTZQzA","2024-07-27 12:57:43"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/BTpi3ai7MIvGTve7bS4Vlw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.383","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/TD_NonLinearCombineTransform-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/BTpi3ai7MIvGTve7bS4Vlw","2024-07-27 12:55:30"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/BYEtXxm5hfoHuCuDRacwHw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.460","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/BYEtXxm5hfoHuCuDRacwHw","2024-07-27 12:58:11"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/BuNxbeTOYKCV8_w9JXjFKg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.403","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/Required-Syntax-Elements-for-TD_OneHotEncodingFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/BuNxbeTOYKCV8_w9JXjFKg","2024-07-27 12:57:10"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/BwBolsAyeliV6UrXQPqPRw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.708","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/Required-Syntax-Elements-for-TD_QQNorm","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/BwBolsAyeliV6UrXQPqPRw","2024-07-27 12:55:34"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/C5yz9NfCME09kDjajKe~tw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.507","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/Optional-Syntax-Elements-for-TD_OneHotEncodingTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/C5yz9NfCME09kDjajKe~tw","2024-07-27 12:55:55"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/C886275RSbERl6cKX0Nulw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.395","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-ACCUMULATE-String-over-64000-Characters-CDISTINCT","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/C886275RSbERl6cKX0Nulw","2024-07-27 12:55:17"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/CCHQb8ufxnHcYzdWXgm_vA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.416","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/CCHQb8ufxnHcYzdWXgm_vA","2024-07-27 12:55:14"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/CD5pFFaqdmihY7U~Sia62A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.414","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/Required-Syntax-Elements-for-TD_BinCodeFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/CD5pFFaqdmihY7U~Sia62A","2024-07-27 12:57:01"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/CLZJWd6LsvgjJC4OZGUdmQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","11","10","0","1.410","0","0","0","","","","","","","","","0.405","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/CLZJWd6LsvgjJC4OZGUdmQ","2024-07-27 12:58:07"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/CSyKBrfDEPhBfSQJMDXIIQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.392","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/CSyKBrfDEPhBfSQJMDXIIQ","2024-07-27 12:55:38"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/CaEY1SMF25Zrt_HIXopRmA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.649","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/TD_DecisionForest-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/CaEY1SMF25Zrt_HIXopRmA","2024-07-27 12:56:41"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/CcrWFmPh7g36j~MC7GyVdg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.390","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/TD_SVMPredict-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/CcrWFmPh7g36j~MC7GyVdg","2024-07-27 12:55:48"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ChlOZOyAu~zay9jaRfCZEg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.429","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/Required-Syntax-Elements-for-TD_RowNormalizeFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ChlOZOyAu~zay9jaRfCZEg","2024-07-27 12:55:09"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Ck8wDjCdSl6uRzhbFzH0hQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.456","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/TD_ColumnSummary-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Ck8wDjCdSl6uRzhbFzH0hQ","2024-07-27 12:56:48"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/CmBrc9stIDWGqRiZRoRTtg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.415","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Required-Syntax-Elements-for-TD_ScaleTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/CmBrc9stIDWGqRiZRoRTtg","2024-07-27 12:56:12"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/CnoubV6WypqzhoEzKx5epw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.531","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/Example-How-to-Use-TD_ChiSq","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/CnoubV6WypqzhoEzKx5epw","2024-07-27 12:55:45"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/CoQoMIlAVb8MI0rVPxIfDA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.456","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/TD_ColumnSummary-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/CoQoMIlAVb8MI0rVPxIfDA","2024-07-27 12:56:48"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Cp2Lrh~5E1B74TQ5fd~b8w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.399","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/TD_SimpleImputeFit-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Cp2Lrh~5E1B74TQ5fd~b8w","2024-07-27 12:56:17"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/CqQ0NwVjLvA6mBaXCoo4nw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.384","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Required-Syntax-Elements-for-TD_KNN","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/CqQ0NwVjLvA6mBaXCoo4nw","2024-07-27 12:58:17"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Cs6ygafA6QOBf~osmZ20sQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.388","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/Optional-Syntax-Elements-for-TD_OneHotEncodingFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Cs6ygafA6QOBf~osmZ20sQ","2024-07-27 12:57:10"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/D4N6QodafHuE4PFnjg6dww","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.436","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/TD_ZTest-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/D4N6QodafHuE4PFnjg6dww","2024-07-27 12:56:35"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/DLZsglNOYmLaNzmndKkSFA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.471","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Examples/TD_NaiveBayesTextClassifierPredict-Example-TopK-Specified","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/DLZsglNOYmLaNzmndKkSFA","2024-07-27 12:54:49"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/DQP2VPxFM~MPZK4W1G21Ag","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.426","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/Optional-Syntax-Elements-for-TD_WordEmbeddings","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/DQP2VPxFM~MPZK4W1G21Ag","2024-07-27 12:56:53"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/D_VLnlYHXWiTPv4s1HJdZw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.426","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/Optional-Syntax-Elements-for-TD_OrdinalEncodingTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/D_VLnlYHXWiTPv4s1HJdZw","2024-07-27 12:57:56"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Daklk2Q9slQnyCNpCHlnJQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.420","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM/TD_SVM-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Daklk2Q9slQnyCNpCHlnJQ","2024-07-27 12:57:10"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/DdLmCcVIomVYUoGAQP_QOQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.401","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/TD_OneHotEncodingFit-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/DdLmCcVIomVYUoGAQP_QOQ","2024-07-27 12:57:09"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/DdzqBuVwwJnxv6o4nfM0Sw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.383","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/TD_SimpleImputeFit-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/DdzqBuVwwJnxv6o4nfM0Sw","2024-07-27 12:56:18"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/DfYPjg7v~w~1novAk20Z3A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.367","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/TD_ScaleFit-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/DfYPjg7v~w~1novAk20Z3A","2024-07-27 12:57:45"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/DyBvAqZRImayoUG4uofd3g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.377","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/Example-How-to-Use-TD_OrdinalEncodingTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/DyBvAqZRImayoUG4uofd3g","2024-07-27 12:57:58"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/E0OlvYOW3QbxXbb3cF4ShQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","8","8","0","1.130","0","0","0","","","","","","","","","0.381","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/E0OlvYOW3QbxXbb3cF4ShQ","2024-07-27 12:54:53"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/E31cFBwIfPY9Oh8GOVfjKA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.792","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/TD_XGBoostPredict-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/E31cFBwIfPY9Oh8GOVfjKA","2024-07-27 12:55:36"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/E9c_cc3gKHzSVuL32vM4XA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.430","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Limitations-When-Using-PARTITION-BY","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/E9c_cc3gKHzSVuL32vM4XA","2024-07-27 12:56:10"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/EFRT2zr_u4a32vf1EYokVw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.396","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform/TD_RandomProjectionTransform-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/EFRT2zr_u4a32vf1EYokVw","2024-07-27 12:57:50"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/EUYykzpBTyxEoOUftN01Ww","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.553","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/TD_OrdinalEncodingTransform-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/EUYykzpBTyxEoOUftN01Ww","2024-07-27 12:57:58"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/EisbcZ17GPDyL5zzoo5l4Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.395","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Optional-Syntax-Elements-for-TD_ScaleTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/EisbcZ17GPDyL5zzoo5l4Q","2024-07-27 12:56:11"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Ev5esCcUQgdcPGuG_gTocg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.456","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Function-Names-with-and-without-TD-Prefix","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Ev5esCcUQgdcPGuG_gTocg","2024-07-27 12:56:09"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/EzO6cmAtGWUPxjrZ0houbw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.405","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/TD_Pivoting-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/EzO6cmAtGWUPxjrZ0houbw","2024-07-27 12:55:16"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/E~G3_Nr6MJbh4jwmiLjcGg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.443","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/Example-How-to-Use-TD_DecisionForestPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/E~G3_Nr6MJbh4jwmiLjcGg","2024-07-27 12:57:19"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/F5tJbnLg6p5OZQq2paQXcQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.384","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/Optional-Syntax-Elements-for-TD_Silhouette","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/F5tJbnLg6p5OZQq2paQXcQ","2024-07-27 12:55:01"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/F6AO5mRWr96mnY7LVJGPQQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.395","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/TD_KMeansPredict-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/F6AO5mRWr96mnY7LVJGPQQ","2024-07-27 12:55:57"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/F7MNeGk6wx2M8Ri4si5DnQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.394","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/NGramSplitter-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/F7MNeGk6wx2M8Ri4si5DnQ","2024-07-27 12:57:17"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/FEkwQLxvmD~KFbHcnTw~EA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.379","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Unpack-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/FEkwQLxvmD~KFbHcnTw~EA","2024-07-27 12:55:41"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/FGOJ~aSL1q3_PsmEiSsd6A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.368","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Optional-Syntax-Elements-for-TD_XGBoost","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/FGOJ~aSL1q3_PsmEiSsd6A","2024-07-27 12:57:42"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/FHUpurGBLNYs9qCpsZ9TMg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.379","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/TD_OneClassSVM-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/FHUpurGBLNYs9qCpsZ9TMg","2024-07-27 12:57:55"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/FOhY8szUlXnyaBCT9IE~ug","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.380","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/TD_ROC-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/FOhY8szUlXnyaBCT9IE~ug","2024-07-27 12:57:40"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/FW4oYvm~t7S49yjihDbp6g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.400","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Model-Training-Functions","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/FW4oYvm~t7S49yjihDbp6g","2024-07-27 12:57:25"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/FWFPWNBqLYxMtYxASS3ucg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.402","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/TD_OneHotEncodingFit-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/FWFPWNBqLYxMtYxASS3ucg","2024-07-27 12:56:53"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/FWHuepUK87v9FU~fJmFwYw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.387","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionFit/TD_FunctionFit-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/FWHuepUK87v9FU~fJmFwYw","2024-07-27 12:55:51"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/F_N978UdwUvbPGNbYVXXWw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.432","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Examples-How-to-Use-TD_ScaleTransform/Sparse-Input-with-Partition","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/F_N978UdwUvbPGNbYVXXWw","2024-07-27 12:56:55"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/FnxyDfsHooDPA9IaJmB2uQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.557","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/Required-Syntax-Elements-for-TD_WhichMax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/FnxyDfsHooDPA9IaJmB2uQ","2024-07-27 12:56:22"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/FtI1pAm8~~~KnqlZZseBYg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.709","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/Required-Syntax-Elements-for-TD_ChiSq","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/FtI1pAm8~~~KnqlZZseBYg","2024-07-27 12:55:43"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Ft_6VlxPPgmgssV9fDzf5g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.553","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/TD_DecisionForest-Examples","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Ft_6VlxPPgmgssV9fDzf5g","2024-07-27 12:56:40"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/F~N~7ui0LoQK6o4r46xXFg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.397","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/TD_ClassificationEvaluator-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/F~N~7ui0LoQK6o4r46xXFg","2024-07-27 12:57:47"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/G2x5mgzH0vwbptFDsIeu6Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.378","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/G2x5mgzH0vwbptFDsIeu6Q","2024-07-27 12:57:51"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/G9i4w2GRwTQpQvW00WDaoA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.453","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Optional-Syntax-Elements-for-TD_ANOVA","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/G9i4w2GRwTQpQvW00WDaoA","2024-07-27 12:57:33"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/GPjvVWCcAgneD~qPjNZ~xA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.389","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents/TD_RandomProjectionMinComponents-Example","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/GPjvVWCcAgneD~qPjNZ~xA","2024-07-27 12:57:39"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/GWOzHWra_ElOo609ncex_w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.378","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/Optional-Syntax-Elements-for-TD_WhichMax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/GWOzHWra_ElOo609ncex_w","2024-07-27 12:56:21"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/G_ybRg~_ShA7JhazUKUqYw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.402","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/Hypothesis-Test-Components","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/G_ybRg~_ShA7JhazUKUqYw","2024-07-27 12:58:04"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/GnNohl23o83zgNSdqlQQxg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.464","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/TD_GetFutileColumns-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/GnNohl23o83zgNSdqlQQxg","2024-07-27 12:56:33"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Gnl9UUDzPeQ0QKIBvPiywA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.384","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/Example-How-to-Use-TD_PolynomialFeaturesTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Gnl9UUDzPeQ0QKIBvPiywA","2024-07-27 12:56:44"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/GtiusSJac02UxbRLKjmJaQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.479","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/Optional-Syntax-Elements-for-TD_SimpleImputeTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/GtiusSJac02UxbRLKjmJaQ","2024-07-27 12:55:03"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/GzDzBPULB2_tNSBvDJuBsg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.419","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/MovingAverage-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/GzDzBPULB2_tNSBvDJuBsg","2024-07-27 12:55:07"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/HAyEL6bbaq6pm6KU5OzWKw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.367","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Text-Analytic-Functions","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/HAyEL6bbaq6pm6KU5OzWKw","2024-07-27 12:57:24"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/HfIiNwDABtK7Zl2shro3FA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.392","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/Example-How-to-Use-TD_RegressionEvaluator","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/HfIiNwDABtK7Zl2shro3FA","2024-07-27 12:57:13"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/HfQhntd0vonjBahc_aNwzw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.527","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/TD_OneClassSVMPredict-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/HfQhntd0vonjBahc_aNwzw","2024-07-27 12:57:05"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/HkxhBtSH6wrp54VlABUA0Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.382","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/Example-How-to-Use-TD_Unpivoting","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/HkxhBtSH6wrp54VlABUA0Q","2024-07-27 12:58:01"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Hltw6TItI9PDx_WgHzKX4w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.518","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/Required-Syntax-Elements-for-TD_ColumnSummary","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Hltw6TItI9PDx_WgHzKX4w","2024-07-27 12:56:47"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Hs9kvorSSnvxyODZ3zG8Mg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.378","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/Optional-Syntax-Elements-for-TD_KMeansPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Hs9kvorSSnvxyODZ3zG8Mg","2024-07-27 12:55:57"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/HxzorvSRJVmb30fPf2WY3A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.409","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/TD_OutlierFilterTransform-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/HxzorvSRJVmb30fPf2WY3A","2024-07-27 12:56:23"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/I9Bw1SwPjxrEaGEug974BA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.444","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/TD_BinCodeFit-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/I9Bw1SwPjxrEaGEug974BA","2024-07-27 12:56:37"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/IGdYQenPLdX6yBsEwoXo_w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.379","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/StringSimilarity-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/IGdYQenPLdX6yBsEwoXo_w","2024-07-27 12:58:22"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ISHcCPxG0mNdPP1xJMKwvA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.394","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ISHcCPxG0mNdPP1xJMKwvA","2024-07-27 12:55:13"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/IWHBzEnoxxOQel0qkj~v8w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.387","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/TD_XGBoostPredict-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/IWHBzEnoxxOQel0qkj~v8w","2024-07-27 12:55:36"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/IgmQCNkzm~dYXE7H~l2okA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.416","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/TD_GetRowsWithMissingValues-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/IgmQCNkzm~dYXE7H~l2okA","2024-07-27 12:57:16"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/InFBQOou1lPzfisNNfaMZg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.612","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Use-OVERLAPPING-Mode","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/InFBQOou1lPzfisNNfaMZg","2024-07-27 12:57:03"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/IngWEW4rNNu56s8~PxiNXg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.454","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/TD_ZTest-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/IngWEW4rNNu56s8~PxiNXg","2024-07-27 12:56:35"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/IrFyaWmYVJr4V1ylQck9QA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.407","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/IrFyaWmYVJr4V1ylQck9QA","2024-07-27 12:56:37"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/J4ovTfHNbbIRzkcqBWhD2Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.510","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/Required-Syntax-Elements-for-TD_PolynomialFeaturesTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/J4ovTfHNbbIRzkcqBWhD2Q","2024-07-27 12:56:45"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/J86bMVlo2hmnFwO6QiCSvw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.600","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Find-Data-for-Sessions-That-Checked-Out-at-Least-3-Products","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/J86bMVlo2hmnFwO6QiCSvw","2024-07-27 12:57:02"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/JDQV5dTt5dUmhvbQwo1Ucw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.560","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/Optional-Syntax-Elements-for-TD_ColumnSummary","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/JDQV5dTt5dUmhvbQwo1Ucw","2024-07-27 12:56:47"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/JGTvd_wRKIvoaJnW4QpRyg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.620","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/JGTvd_wRKIvoaJnW4QpRyg","2024-07-27 12:55:22"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/JKRPhvEiW5hObT0fFgY8qA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.396","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/TD_KNN-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/JKRPhvEiW5hObT0fFgY8qA","2024-07-27 12:58:18"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/JOXNvoHwy6ZnoQhe1AHCpA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.403","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform/TD_RandomProjectionTransform-Example","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/JOXNvoHwy6ZnoQhe1AHCpA","2024-07-27 12:57:50"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/JSNK_244~ddCRJOM~gAohw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.405","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/Optional-Syntax-Elements-for-TD_SimpleImputeFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/JSNK_244~ddCRJOM~gAohw","2024-07-27 12:56:19"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/JX5BJoKWcCIHLbuxRX9zmw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.381","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/Required-Syntax-Elements-for-TD_GetRowsWithMissingValues","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/JX5BJoKWcCIHLbuxRX9zmw","2024-07-27 12:57:16"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/JdiOnmWWQgEE5svNOe1Tiw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.474","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/Optional-Syntax-Elements-for-TD_OrdinalEncodingFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/JdiOnmWWQgEE5svNOe1Tiw","2024-07-27 12:56:50"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Jm4DQ69pBvW4J7p4Y5wU2w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","4","4","0","0.560","0","0","0","","","","","","","","","0.505","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Jm4DQ69pBvW4J7p4Y5wU2w","2024-07-27 12:58:14"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/K2aSfe0pN_b_sMtsneB5rg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.399","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/K2aSfe0pN_b_sMtsneB5rg","2024-07-27 12:58:05"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/K7AiElYVNsSknULrbimT4w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.411","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols/LAG-and-LEAD-Expressions-in-Symbol-Predicates/LAG-and-LEAD-Expressions-Example-Alias-for-Input-Query","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/K7AiElYVNsSknULrbimT4w","2024-07-27 12:58:06"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/KPP1W_Cyyk3eTY0m0nq_MA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","14","8","0","1.130","0","0","0","","","","","","","","","0.405","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/KPP1W_Cyyk3eTY0m0nq_MA","2024-07-27 12:57:55"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/KU7b6bLfbGYFnz2vkwL9Hw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.440","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Feature-Engineering-Utility-Functions","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/KU7b6bLfbGYFnz2vkwL9Hw","2024-07-27 12:57:25"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/KWSs8Lzb8UbfGc6qts6lqA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.408","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/TD_BinCodeTransform-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/KWSs8Lzb8UbfGc6qts6lqA","2024-07-27 12:56:15"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/KZKQv5ho1w0eiJBkYUUJPw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","1.734","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-FIRST-Three-Forms-of-ACCUMULATE-COUNT-and-NTH","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/KZKQv5ho1w0eiJBkYUUJPw","2024-07-27 12:55:18"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/K_jTdjHjWaLrR~Sb2qsCtg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.402","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer/TD_ColumnTransformer-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/K_jTdjHjWaLrR~Sb2qsCtg","2024-07-27 12:56:25"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/KaQR8Ym~UAJ~2gPF1iEGag","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.670","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Examples","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/KaQR8Ym~UAJ~2gPF1iEGag","2024-07-27 12:54:58"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/KePrkKRvy6hqUu~aJcbdsQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.365","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/TD_Unpivoting-Usage-Notes","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/KePrkKRvy6hqUu~aJcbdsQ","2024-07-27 12:58:01"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Klf7~Yhoagkv_bVmss1g3g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.382","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform/TD_FunctionTransform-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Klf7~Yhoagkv_bVmss1g3g","2024-07-27 12:56:20"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Kn_WE0TLHUMu87gsUpZtWQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.449","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/Example-How-to-Use-TD_OneHotEncodingTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Kn_WE0TLHUMu87gsUpZtWQ","2024-07-27 12:55:56"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Knra0C6DYL0idBAjZKpjUg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.397","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit/TD_RandomProjectionFit-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Knra0C6DYL0idBAjZKpjUg","2024-07-27 12:57:42"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Kw1KFqKoWGn1dwoG43VTvw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.469","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/TD_SentimentExtractor-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Kw1KFqKoWGn1dwoG43VTvw","2024-07-27 12:56:04"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Ky8MEF7248grvve59k5p4A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.406","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer/TD_NaiveBayesTextClassifierTrainer-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Ky8MEF7248grvve59k5p4A","2024-07-27 12:58:08"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/KyFbeJ~8oBWpW6QAB~UEhg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.385","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer/TD_ColumnTransformer-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/KyFbeJ~8oBWpW6QAB~UEhg","2024-07-27 12:56:26"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/K~2Hl5cgjBcz9waajeE~pA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.837","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/K~2Hl5cgjBcz9waajeE~pA","2024-07-27 12:58:11"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/LCeeof8vQob~lEIb_7Noqg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.425","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Examples-How-to-Use-Unpack/Example-Input-Columns-with-Trailing-Special-Characters","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/LCeeof8vQob~lEIb_7Noqg","2024-07-27 12:55:46"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/LL6jCek01zGaNB5umqAXsQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.394","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Required-Syntax-Elements-for-TD_Pivoting","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/LL6jCek01zGaNB5umqAXsQ","2024-07-27 12:55:15"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/LkyKdpw4K2rtzQ38L5TkUQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.545","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/TD_WhichMin-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/LkyKdpw4K2rtzQ38L5TkUQ","2024-07-27 12:56:33"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/LmZC0sxSa8~c7lnaAA~R5g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.391","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit/TD_RandomProjectionFit-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/LmZC0sxSa8~c7lnaAA~R5g","2024-07-27 12:57:41"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/LpxxnT3qssRqpybe~OAWwg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.466","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Exponential-Moving-Average","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/LpxxnT3qssRqpybe~OAWwg","2024-07-27 12:57:29"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/LvEGeoqxLP84Qs2TNN~ElA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.543","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/TD_GLM-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/LvEGeoqxLP84Qs2TNN~ElA","2024-07-27 12:54:54"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/M8IgdVOiU7z_pEoXptu_bw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.392","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Triangular-Moving-Average","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/M8IgdVOiU7z_pEoXptu_bw","2024-07-27 12:57:29"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/MFCYZRPSVpgIdb7RD5D3gg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.439","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/TD_RegressionEvaluator-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/MFCYZRPSVpgIdb7RD5D3gg","2024-07-27 12:57:12"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/MLfJf9K~1EX1H43ex9hSuA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.454","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Required-Syntax-Elements-for-Pack","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/MLfJf9K~1EX1H43ex9hSuA","2024-07-27 12:55:52"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/MMWXvtYiMxFIcTERCenoTQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.418","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/StringSimilarity-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/MMWXvtYiMxFIcTERCenoTQ","2024-07-27 12:58:24"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/MYxiK0LhvMNCohswYjlHRQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.422","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Datatype-Change-in-Accumulated-Columns","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/MYxiK0LhvMNCohswYjlHRQ","2024-07-27 12:56:07"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/MZ~6OP5C~vffqxEPLrTLyA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.416","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/MZ~6OP5C~vffqxEPLrTLyA","2024-07-27 12:56:27"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/MczugqXK4dOgsACYb14FLA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.386","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Usage-Notes","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/MczugqXK4dOgsACYb14FLA","2024-07-27 12:54:59"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/MgkM7KeDtI7amDHc3vAbdg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.537","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/TD_ConvertTo-Usage-Notes","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/MgkM7KeDtI7amDHc3vAbdg","2024-07-27 12:56:03"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Mkgfrxzls97Q_YzOtfwJgQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.364","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents/TD_RandomProjectionMinComponents-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Mkgfrxzls97Q_YzOtfwJgQ","2024-07-27 12:57:38"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/MyWVkkk08qZCujHI4s5Sgw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","1.333","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Optional-Syntax-Elements-for-Sessionize","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/MyWVkkk08qZCujHI4s5Sgw","2024-07-27 12:58:25"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Mzc6hufdywfnwhxuMvw3KQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.526","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Mzc6hufdywfnwhxuMvw3KQ","2024-07-27 12:56:26"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/N1_Dev8cpcT6m1VXEdKiZQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.466","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/TD_TFIDF-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/N1_Dev8cpcT6m1VXEdKiZQ","2024-07-27 12:55:13"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/N4xZMtsEzgWlI7wOR~jSMA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.394","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/TD_RoundColumns-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/N4xZMtsEzgWlI7wOR~jSMA","2024-07-27 12:55:50"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/NEsd0BOQsnT99Y2gQNUgzw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.398","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/NEsd0BOQsnT99Y2gQNUgzw","2024-07-27 12:55:41"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/NFHkgiEKSMKdXwdGjqrL5w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.567","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/TD_RowNormalizeTransform-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/NFHkgiEKSMKdXwdGjqrL5w","2024-07-27 12:58:21"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/NGuJYibmGsSI0OdQMzkP6Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.414","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/TD_ROC-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/NGuJYibmGsSI0OdQMzkP6Q","2024-07-27 12:57:39"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/NO59RXX9YFdkOK3wwkRvBw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.388","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/TD_TFIDF-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/NO59RXX9YFdkOK3wwkRvBw","2024-07-27 12:55:12"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/NPvmwgyE5rHciT5P6tEGEw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.387","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Examples-How-to-Use-TD_ScaleTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/NPvmwgyE5rHciT5P6tEGEw","2024-07-27 12:56:11"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/NTDDOAy0de1W_WuMUeXMMQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.439","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/NTDDOAy0de1W_WuMUeXMMQ","2024-07-27 12:57:27"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/N_~9Kb0SbC5cM2mcLRt6rw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.412","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Examples-How-to-Use-TD_XGBoost/TD_XGBoost-for-Classification","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/N_~9Kb0SbC5cM2mcLRt6rw","2024-07-27 12:57:25"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/NsqSuIHgQg5PP198zIuV1Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.515","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/Optional-Syntax-Elements-for-TD_OutlierFilterTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/NsqSuIHgQg5PP198zIuV1Q","2024-07-27 12:56:24"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/O4P3ovfCnI3s3jexvGsAfw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.435","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/TD_GetRowsWithoutMissingValues-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/O4P3ovfCnI3s3jexvGsAfw","2024-07-27 12:56:29"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/OKUPncguifpPTCUfi~U5Jg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.390","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/TD_GetRowsWithMissingValues-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/OKUPncguifpPTCUfi~U5Jg","2024-07-27 12:57:15"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/OPppmP53ojRwvmNZILTVRA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.417","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Examples-How-to-Use-Unpack","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/OPppmP53ojRwvmNZILTVRA","2024-07-27 12:55:41"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/OWb7MTGa0l6hzZXTnbzZJg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.437","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/TD_ConvertTo-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/OWb7MTGa0l6hzZXTnbzZJg","2024-07-27 12:56:02"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/OWs8fXM7Mt7GKal4dpN3jQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.504","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/OWs8fXM7Mt7GKal4dpN3jQ","2024-07-27 12:57:26"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/OdCHl1fnEyROp~pEAzRFZg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.438","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/TD_GetRowsWithoutMissingValues-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/OdCHl1fnEyROp~pEAzRFZg","2024-07-27 12:56:29"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/OmQyRCrS3zlkOypkX9QGbg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.403","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/OmQyRCrS3zlkOypkX9QGbg","2024-07-27 12:58:19"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/OsHCykegNIRu~0q5MYuTFw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.496","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/TD_GetRowsWithoutMissingValues-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/OsHCykegNIRu~0q5MYuTFw","2024-07-27 12:56:28"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/OxAlFyrrdkPkfDwpgWX8nA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.379","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/TD_WhichMax-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/OxAlFyrrdkPkfDwpgWX8nA","2024-07-27 12:56:21"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/P7k1i4SfxnvBLyyGieCVpg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.423","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/Optional-Syntax-Elements-for-TD_TextParser","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/P7k1i4SfxnvBLyyGieCVpg","2024-07-27 12:55:09"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/P9qPewH1LRYqPhK2bcPwwg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.506","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/P9qPewH1LRYqPhK2bcPwwg","2024-07-27 12:56:26"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/PLDPpwSkOJ31~TMphIEC0w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","6","4","0","0.560","0","0","0","","","","","","","","","0.443","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/PLDPpwSkOJ31~TMphIEC0w","2024-07-27 12:58:10"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/PY8H_1Drnq0zPciaQNhsVA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.400","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/TD_ANOVA-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/PY8H_1Drnq0zPciaQNhsVA","2024-07-27 12:57:31"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/PaWIKtA0N7Z2mU28xTgcsg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.520","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/TD_QQNorm-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/PaWIKtA0N7Z2mU28xTgcsg","2024-07-27 12:55:33"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Pm1gVTjiFnikROpTqHdYLg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.579","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Spool-Space-Exhaustion-for-Large-Partitions-at-High-Concurrency","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Pm1gVTjiFnikROpTqHdYLg","2024-07-27 12:55:22"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Pulb0~9xYFVifn2Y~xSmQw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.448","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/TD_StrApply-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Pulb0~9xYFVifn2Y~xSmQw","2024-07-27 12:57:21"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/PvSR0DE3Cty2s2WNAbv1dg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","6","4","0","0.560","0","0","0","","","","","","","","","0.403","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/PvSR0DE3Cty2s2WNAbv1dg","2024-07-27 12:58:15"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Q0lyS0E27qqVhVoqYULa8Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.430","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Q0lyS0E27qqVhVoqYULa8Q","2024-07-27 12:55:04"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Q2MQL7TuQK6tB7pjJ_LNiA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.382","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance/TD_VectorDistance-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Q2MQL7TuQK6tB7pjJ_LNiA","2024-07-27 12:57:01"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Q7OW1zWNbiXIWKaDKlrD8Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.383","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Examples-How-to-Use-TD_XGBoost","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Q7OW1zWNbiXIWKaDKlrD8Q","2024-07-27 12:57:44"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/QDEUgimirbGLxNsKX3ktrw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.448","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/TD_ScaleTransform-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/QDEUgimirbGLxNsKX3ktrw","2024-07-27 12:56:11"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/QNZLyGOMwkeTCb2~_XWWvA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.422","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/TD_RegressionEvaluator-Usage-Notes","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/QNZLyGOMwkeTCb2~_XWWvA","2024-07-27 12:57:13"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/QWEDEJD67YvDTzJwGVJCIg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.373","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform/TD_RandomProjectionTransform-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/QWEDEJD67YvDTzJwGVJCIg","2024-07-27 12:57:50"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/QcU9asu14B4c1B4XKW9uRA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.387","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Optional-Syntax-Elements-for-TD_KNN","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/QcU9asu14B4c1B4XKW9uRA","2024-07-27 12:58:18"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/QoRQZ60cOw0k7Vr3vbHgdQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.460","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Examples-How-to-Use-TD_XGBoost/TD_XGBoost-for-Regression","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/QoRQZ60cOw0k7Vr3vbHgdQ","2024-07-27 12:54:48"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/R0MTvbOe63_r9VDPoK_Ilw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.823","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/Optional-TD_GLM-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/R0MTvbOe63_r9VDPoK_Ilw","2024-07-27 12:54:55"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/RIBwu1N~KGF8I~Wm12VLtg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.390","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform/TD_RandomProjectionTransform-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/RIBwu1N~KGF8I~Wm12VLtg","2024-07-27 12:57:49"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/RJPHwJS_~Zi4uvab_cFiGQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.550","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Optional-Syntax-Elements-for-TD_ZTest","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/RJPHwJS_~Zi4uvab_cFiGQ","2024-07-27 12:56:35"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/RZNpgPMP9UVzxDE53NEJpQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.379","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/TD_BinCodeFit-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/RZNpgPMP9UVzxDE53NEJpQ","2024-07-27 12:57:01"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/RbXIIgCjSquTfAYZrd~NBg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.395","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/TD_Histogram-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/RbXIIgCjSquTfAYZrd~NBg","2024-07-27 12:57:09"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/RhOQAtrYi1~FC5m3a~xvyQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.381","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/Example-How-to-Use-TD_ClassificationEvaluator","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/RhOQAtrYi1~FC5m3a~xvyQ","2024-07-27 12:57:47"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/RlE7TOGlZuW7U4_xdMTHaA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.411","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/Required-Syntax-Elements-for-TD_Histogram","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/RlE7TOGlZuW7U4_xdMTHaA","2024-07-27 12:57:08"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Ry6Hicgzvms~gepfu6Asog","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.598","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Optional-Syntax-Elements-for-NGramSplitter","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Ry6Hicgzvms~gepfu6Asog","2024-07-27 12:57:17"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/R~2KnQKzGSkMOEuEasGHgA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.429","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/TD_RegressionEvaluator-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/R~2KnQKzGSkMOEuEasGHgA","2024-07-27 12:57:12"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/S45xxR8_OyT2Am4Y9dH34A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.365","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Examples-How-to-Use-TD_FTest/Using-FirstSampleName-and-SecondSampleName-Arguments","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/S45xxR8_OyT2Am4Y9dH34A","2024-07-27 12:56:39"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/S8DhoT5TyHgWisE85u9VGw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.469","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/TD_SentimentExtractor-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/S8DhoT5TyHgWisE85u9VGw","2024-07-27 12:56:04"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/SBGZKW6vo5ByH~14ihI0EQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.445","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/Required-Syntax-Elements-for-TD_FillRowID","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/SBGZKW6vo5ByH~14ihI0EQ","2024-07-27 12:58:03"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/SBvNl5ZvJ6GbCCABhM79rQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.415","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/TD_ROC-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/SBvNl5ZvJ6GbCCABhM79rQ","2024-07-27 12:57:39"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/SGFWpuXRpM9WhMfWIqT5CQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.416","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Examples-How-to-Use-TD_ZTest/Using-Two-Samples","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/SGFWpuXRpM9WhMfWIqT5CQ","2024-07-27 12:57:06"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/SQNIzuVZ2RnzPIs0sY~cyg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.406","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/TD_FillRowID-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/SQNIzuVZ2RnzPIs0sY~cyg","2024-07-27 12:58:01"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/STANnGFryOzJgAdXdLjihA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.679","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/TD_WhichMax-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/STANnGFryOzJgAdXdLjihA","2024-07-27 12:56:21"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/SYRYzs3RccLeqNqOqtofTQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.414","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/TD_PolynomialFeaturesFit-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/SYRYzs3RccLeqNqOqtofTQ","2024-07-27 12:56:16"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/S_D7bwDme5oRdSC9fEeCMA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.396","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/Required-Syntax-Elements-for-TD_DecisionForestPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/S_D7bwDme5oRdSC9fEeCMA","2024-07-27 12:57:19"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Sc2fXbb42l4ldpNhYkTmAA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","7","4","0","0.560","0","0","0","","","","","","","","","0.371","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Sc2fXbb42l4ldpNhYkTmAA","2024-07-27 12:57:43"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/SedFbPsz3gA_kzxqOzApkQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.522","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/TD_OrdinalEncodingFit-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/SedFbPsz3gA_kzxqOzApkQ","2024-07-27 12:56:49"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ShEeuWQNha7yo37N7dMfcQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.403","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/Examples-How-to-Use-TD_XGBoostPredict/XGBoostPredict-for-Regression","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ShEeuWQNha7yo37N7dMfcQ","2024-07-27 12:54:49"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Sh~RVdqSgl1mvROQABcUcA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.427","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Examples","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Sh~RVdqSgl1mvROQABcUcA","2024-07-27 12:57:51"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Stnu6YBTbl14MQy8zW~c2A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.391","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Pack-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Stnu6YBTbl14MQy8zW~c2A","2024-07-27 12:55:54"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Sx~~REoMjujFhPAp7GmFEA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.498","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/TD_PolynomialFeaturesTransform-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Sx~~REoMjujFhPAp7GmFEA","2024-07-27 12:56:43"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/SzuDrU6hLGtDkB1QhY4SjA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.488","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Required-Syntax-Elements-for-TD_ANOVA","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/SzuDrU6hLGtDkB1QhY4SjA","2024-07-27 12:57:32"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TBFP~LFc3EdcZzbDqz9Muw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.385","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/Optional-Syntax-Elements-for-TD_TrainTestSplit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TBFP~LFc3EdcZzbDqz9Muw","2024-07-27 12:57:36"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TF8Efvkn4PXubntaD_dd7g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.435","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/TD_KMeansPredict-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TF8Efvkn4PXubntaD_dd7g","2024-07-27 12:55:58"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/THsyUYQ4PHZgM_kA2Gt9Lg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.388","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Attribution-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/THsyUYQ4PHZgM_kA2Gt9Lg","2024-07-27 12:57:37"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TKVhlDJ0V1tZ9l14BcOjmg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","5","3","0","0.420","0","0","0","","","","","","","","","0.423","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TKVhlDJ0V1tZ9l14BcOjmg","2024-07-27 12:58:04"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TN2m8v4F1WnUU2m2OUprlA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.533","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/TD_PolynomialFeaturesTransform-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TN2m8v4F1WnUU2m2OUprlA","2024-07-27 12:56:43"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TczjNdb48mEikBR6ooq5VA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.371","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/NGramSplitter-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TczjNdb48mEikBR6ooq5VA","2024-07-27 12:57:17"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Tdq2sAlzxaDLa22eL6PjRw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.697","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/Example-How-to-Use-TD_OneClassSVM","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Tdq2sAlzxaDLa22eL6PjRw","2024-07-27 12:57:54"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TfaJE1cmuG3I~NKdK4xx7A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.387","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/TD_TFIDF-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TfaJE1cmuG3I~NKdK4xx7A","2024-07-27 12:55:11"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TmCpdwjASt_zC3ZpBdr4uw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.420","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/Optional-Syntax-Elements-for-TD_ConvertTo","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TmCpdwjASt_zC3ZpBdr4uw","2024-07-27 12:56:02"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TpIvwKyg8VpTYOmY0GEslA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.435","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Displaying-Online-Help-for-Analytics-Database-Analytic-Functions","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TpIvwKyg8VpTYOmY0GEslA","2024-07-27 12:56:07"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TpQkfiYYiTY3oLOjBR8o_A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.457","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/TD_ZTest-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TpQkfiYYiTY3oLOjBR8o_A","2024-07-27 12:56:37"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TrFW_IMAw3oKqSI_iGrjNA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.372","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/TD_OutlierFilterTransform-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TrFW_IMAw3oKqSI_iGrjNA","2024-07-27 12:56:22"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TwDDLoAXwLvKCmUDZZNRdA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.409","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/TD_KNN-Usage-Notes","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/TwDDLoAXwLvKCmUDZZNRdA","2024-07-27 12:58:16"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Tzo3HtUUGsLibmuJ4EwzYw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.419","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/Required-Syntax-Elements-for-TD_RowNormalizeTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Tzo3HtUUGsLibmuJ4EwzYw","2024-07-27 12:58:20"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/U7cgumKIaF9fxvUHqjlbbQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.451","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Examples-How-to-Use-TD_ScaleFit/Sparse-Input-without-Partition","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/U7cgumKIaF9fxvUHqjlbbQ","2024-07-27 12:56:07"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/UDx2lcjPOr~lxlSBxyrFCQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.373","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Examples-How-to-Use-TD_FTest/Using-FirstSampleVariance-and-SecondSampleVariance-Arguments","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/UDx2lcjPOr~lxlSBxyrFCQ","2024-07-27 12:56:39"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/UZfB7ArQtWO32z9W_e~kFw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.396","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/Required-Syntax-Elements-for-TD_ROC","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/UZfB7ArQtWO32z9W_e~kFw","2024-07-27 12:57:40"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Ue7UR8LlrawRcSGAo9KaZw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","1","0","0.140","0","0","0","","","","","","","","","0.392","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Ue7UR8LlrawRcSGAo9KaZw","2024-07-27 12:55:39"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Uf~lRjt751fwswOvNCx~xg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.439","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/TD_OrdinalEncodingTransform-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Uf~lRjt751fwswOvNCx~xg","2024-07-27 12:57:57"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Uojwko5Dq9ZaQzA1xPbBwA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.494","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/Required-Syntax-Elements-for-TD_WordEmbeddings","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Uojwko5Dq9ZaQzA1xPbBwA","2024-07-27 12:56:51"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/UqfVtSq~LHp5x9mgQ116Aw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.415","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Examples-How-to-Use-TD_KNN/Example-Using-TD_KNN-To-Predict-Weight-Based-on-Height-and-Age","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/UqfVtSq~LHp5x9mgQ116Aw","2024-07-27 12:56:50"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/UufalzNSkbxmbAhu8lIMXw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.422","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/UufalzNSkbxmbAhu8lIMXw","2024-07-27 12:55:21"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Uzu~H6d2Fp9GuiQxNCa~mA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.404","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Example-Model-Assigns-Attribution-Weights-to-Events-and-Channels","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Uzu~H6d2Fp9GuiQxNCa~mA","2024-07-27 12:57:37"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/V0c0oRHvT~wFBPkjeklkPg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.388","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/Optional-Syntax-Elements-for-TD_RoundColumns","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/V0c0oRHvT~wFBPkjeklkPg","2024-07-27 12:55:49"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/V5ptqt2Pblp9ow8GSA9yaQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.394","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Example-How-to-Use-Sessionize","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/V5ptqt2Pblp9ow8GSA9yaQ","2024-07-27 12:58:24"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/VE9BqGKOIYJNADUnDeInlg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.501","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/TD_KMeans-Usage-Notes","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/VE9BqGKOIYJNADUnDeInlg","2024-07-27 12:57:52"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/VJmmrpScDyH53hSkNvaJ7A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.397","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/Optional-Syntax-Elements-for-TD_Histogram","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/VJmmrpScDyH53hSkNvaJ7A","2024-07-27 12:57:07"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/VRQ7cL9ScmdnNnRno_42Yw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.667","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/TD_RowNormalizeTransform-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/VRQ7cL9ScmdnNnRno_42Yw","2024-07-27 12:58:20"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/VSpxZ~ELPEZaUZVGt14dng","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.444","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/TD_FillRowID-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/VSpxZ~ELPEZaUZVGt14dng","2024-07-27 12:58:03"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/VV61ek~qqo2wa0bQYFX09w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.453","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/Examples-How-to-Use-TD_SentimentExtractor","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/VV61ek~qqo2wa0bQYFX09w","2024-07-27 12:56:05"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/VV_C~ZEq4CtHqBDD6zxtfg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","4","3","0","0.420","0","0","0","","","","","","","","","0.411","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/VV_C~ZEq4CtHqBDD6zxtfg","2024-07-27 12:58:20"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/VVmfZHDfJcgUDiJ2iutS1w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.373","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Pack-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/VVmfZHDfJcgUDiJ2iutS1w","2024-07-27 12:55:53"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/VXZtDW9wzoCeh_FgZpLnuQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","8","7","0","0.990","0","0","0","","","","","","","","","0.389","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/VXZtDW9wzoCeh_FgZpLnuQ","2024-07-27 12:54:56"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/VdJ2FCsI83VP3__fRY84kw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.649","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/TD_DecisionForest-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/VdJ2FCsI83VP3__fRY84kw","2024-07-27 12:56:39"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Vsz2ha9t39a3MbtBfdv0pw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.465","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary/Example-How-to-Use-TD_CategoricalSummary","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Vsz2ha9t39a3MbtBfdv0pw","2024-07-27 12:56:43"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/VzTWnNSXEkERrCjAkY36pw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.435","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Filters/nPath-Filters-Example","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/VzTWnNSXEkERrCjAkY36pw","2024-07-27 12:57:59"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/W84zpOWcHJS_sQtj__FwAw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.370","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Examples-How-to-Use-TD_KNN/Example-Using-TD_KNN-with-Neighbors","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/W84zpOWcHJS_sQtj__FwAw","2024-07-27 12:56:51"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/WAmcAhuqrxUSCaqqrdPsOA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.489","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/WAmcAhuqrxUSCaqqrdPsOA","2024-07-27 12:57:26"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/WNFN4xSztnxaw66SEyzhsw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.386","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Examples-How-to-Use-TD_ZTest/Using-Two-tailed-Test","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/WNFN4xSztnxaw66SEyzhsw","2024-07-27 12:57:07"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/WPJo6oNGadHaoY1z4zIY2w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.380","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/WPJo6oNGadHaoY1z4zIY2w","2024-07-27 12:55:26"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Wi71SgChEUG~_WVbZOa6qg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.405","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary/TD_CategoricalSummary-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Wi71SgChEUG~_WVbZOa6qg","2024-07-27 12:56:42"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/WjqFZ67RpEj5R7IliPsMTA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.455","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/TD_KMeansPredict-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/WjqFZ67RpEj5R7IliPsMTA","2024-07-27 12:55:57"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/WljfekxwrRFdX1yl2gvq6g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.532","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/Example-Using-TD_FillRowID-to-Generate-Row-Identifers","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/WljfekxwrRFdX1yl2gvq6g","2024-07-27 12:58:02"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Wqtn0cdDQTT8Z7ypBoRyFw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.406","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM/TD_SVM-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Wqtn0cdDQTT8Z7ypBoRyFw","2024-07-27 12:57:11"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/WtLuY9HVylJ0dX~vYFsFkA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.390","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/TD_OutlierFilterTransform-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/WtLuY9HVylJ0dX~vYFsFkA","2024-07-27 12:56:23"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/X79gE8La7gI9PLWsGTcfyQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.449","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Simple-Moving-Average","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/X79gE8La7gI9PLWsGTcfyQ","2024-07-27 12:55:04"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/X8Ifrevu0cGQPicoldAKrw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.488","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Required-Syntax-Elements-for-Unpack","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/X8Ifrevu0cGQPicoldAKrw","2024-07-27 12:55:42"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/XIx3HGywP3BVru3phWMmNQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.481","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Examples-How-to-Use-TD_ScaleTransform/Sparse-Input-without-Partition","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/XIx3HGywP3BVru3phWMmNQ","2024-07-27 12:56:55"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/XS5I9puRrzraz8qZQQdxCg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.451","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Examples-How-to-Use-TD_KNN/Example-Using-TD_KNN-with-Classification","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/XS5I9puRrzraz8qZQQdxCg","2024-07-27 12:56:50"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/XT3Wb7OBSffS9ZdbXL7tDg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.362","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/Required-Syntax-Elements-for-TD_ClassificationEvaluator","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/XT3Wb7OBSffS9ZdbXL7tDg","2024-07-27 12:57:47"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/XZnMdfq_6G4NqUW7An696g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.688","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Examples-How-to-Use-TD_FTest/Using-FirstSampleName-and-SecondSampleVariance-Arguments","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/XZnMdfq_6G4NqUW7An696g","2024-07-27 12:56:39"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/X_MlQpJ81rUAyTDY3N_zbg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.379","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/Required-Syntax-Elements-for-TD_NumApply","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/X_MlQpJ81rUAyTDY3N_zbg","2024-07-27 12:56:56"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/XaAfXJoYzf53j5O_H4ts9A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.425","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/Optional-Syntax-Elements-for-TD_BinCodeTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/XaAfXJoYzf53j5O_H4ts9A","2024-07-27 12:56:14"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Xclf5_te~QxdOLSTY3PXyw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.486","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/Optional-Syntax-Elements-for-TD_QQNorm","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Xclf5_te~QxdOLSTY3PXyw","2024-07-27 12:55:34"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/XoT1CWqhNHLAcEVSoVq2Ag","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.569","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/Required-Syntax-Elements-for-TD_RoundColumns","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/XoT1CWqhNHLAcEVSoVq2Ag","2024-07-27 12:55:51"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Xo_px3x5fsNTZN8M_6Ix0Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.396","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform/TD_FunctionTransform-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Xo_px3x5fsNTZN8M_6Ix0Q","2024-07-27 12:56:19"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/XwlbTrsj3idjlFzknku_4w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.543","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/BC/BCE-Timestamps","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/XwlbTrsj3idjlFzknku_4w","2024-07-27 12:56:09"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Xz8Ys5b_p130gZZS8A7ZDw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.392","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Xz8Ys5b_p130gZZS8A7ZDw","2024-07-27 12:56:28"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/XzNoyX~h8UePSORKdv6NLA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.425","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Optional-Syntax-Elements-for-TD_FTest","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/XzNoyX~h8UePSORKdv6NLA","2024-07-27 12:56:00"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Y1a4QhM9O28flzeSRwyYdQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.464","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Triangular-Moving-Average","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Y1a4QhM9O28flzeSRwyYdQ","2024-07-27 12:55:06"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Y6OJMxIC7nG3ewkwJObpLg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","2","0","0.280","0","0","0","","","","","","","","","0.443","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Y6OJMxIC7nG3ewkwJObpLg","2024-07-27 12:58:12"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Y6lwvrBOo548cAi5kGPyJw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.438","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer/TD_ColumnTransformer-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Y6lwvrBOo548cAi5kGPyJw","2024-07-27 12:56:25"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/YEiCr3cSRJ40dOcvzJUwpA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.400","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/Examples-How-to-Use-TD_GLMPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/YEiCr3cSRJ40dOcvzJUwpA","2024-07-27 12:57:31"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/YIZu~0XHUffXLEumSeMAAA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.378","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/Examples-How-to-Use-TD_SVMPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/YIZu~0XHUffXLEumSeMAAA","2024-07-27 12:55:48"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/YS6x6z5u5VQqeAV3~eht4A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.392","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary/TD_CategoricalSummary-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/YS6x6z5u5VQqeAV3~eht4A","2024-07-27 12:56:42"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/YWpnZpznJjF0Og8_6kdkMQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","1","0","0.140","0","0","0","","","","","","","","","0.513","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/TD_BinCodeTransform-Usage-Notes","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/YWpnZpznJjF0Og8_6kdkMQ","2024-07-27 12:56:14"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Yap_DSPN3d5chtaMTX7j4A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","1.012","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/StringSimilarity-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Yap_DSPN3d5chtaMTX7j4A","2024-07-27 12:58:22"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Ydcr82K8OT9XwrOtRr~HUw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.914","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/TD_ChiSq-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Ydcr82K8OT9XwrOtRr~HUw","2024-07-27 12:55:44"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/YiaKyrrEf~S60NjckT4zDQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.392","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/TD_KMeans-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/YiaKyrrEf~S60NjckT4zDQ","2024-07-27 12:57:53"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Yj5AVB6XPo8w2DsncwfHtg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.659","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/TD_KNN-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Yj5AVB6XPo8w2DsncwfHtg","2024-07-27 12:58:18"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/YoCkFPvT623bfIFTLPfa2Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.673","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Find-Data-for-Sessions-That-Checked-Out-3-6-Products","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/YoCkFPvT623bfIFTLPfa2Q","2024-07-27 12:58:06"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Y~Cv9we0bH8opUZWOOjWzg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","9","8","0","1.130","0","0","0","","","","","","","","","0.565","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Y~Cv9we0bH8opUZWOOjWzg","2024-07-27 12:54:56"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Z5AWcTc3n0yvMu1E9bIb3w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.390","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Examples/Antiselect-Example-No-Column-Ranges","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/Z5AWcTc3n0yvMu1E9bIb3w","2024-07-27 12:56:01"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ZCZtPjqTcCwEE_SlsOJpNQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.377","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ZCZtPjqTcCwEE_SlsOJpNQ","2024-07-27 12:57:52"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ZPnW0WSXoJ6aEwCO~jmjsA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.382","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Functions-Ignore-Disallowed-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ZPnW0WSXoJ6aEwCO~jmjsA","2024-07-27 12:56:08"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ZRYgukehVb2sMXmvkwExPQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.515","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/TD_OrdinalEncodingFit-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ZRYgukehVb2sMXmvkwExPQ","2024-07-27 12:56:49"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ZeahwHxOG~2ihJ3LGm2yYg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.381","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/TD_ColumnSummary-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ZeahwHxOG~2ihJ3LGm2yYg","2024-07-27 12:56:47"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ZmvB3JQlwLN9ZcWa2~_UFA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.378","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ZmvB3JQlwLN9ZcWa2~_UFA","2024-07-27 12:55:53"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ZpNRxjGUhOuXeRPiHjI__A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.709","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ZpNRxjGUhOuXeRPiHjI__A","2024-07-27 12:55:13"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ZspzBwWen6zF8CO_75fY1Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.388","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Non-Deterministic-Behavior","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ZspzBwWen6zF8CO_75fY1Q","2024-07-27 12:55:26"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ZyB1ZnVnCXwnKUKgofwzdA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","1.184","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/Required-Syntax-Elements-for-TD_SVMPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ZyB1ZnVnCXwnKUKgofwzdA","2024-07-27 12:55:48"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/_6~dkmww0HZi4j6P0W55ag","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.441","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/_6~dkmww0HZi4j6P0W55ag","2024-07-27 12:54:59"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/_FU4lh_SLRohmByIebtSxA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.375","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/TD_NumApply-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/_FU4lh_SLRohmByIebtSxA","2024-07-27 12:56:56"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/_GE~UR~Iv7OtY5l~kjHdpw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.424","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-FIRST-and-Three-Forms-of-ACCUMULATE","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/_GE~UR~Iv7OtY5l~kjHdpw","2024-07-27 12:55:18"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/_GgL0oCi17uHDJZkThXmiQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.387","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit/TD_RandomProjectionFit-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/_GgL0oCi17uHDJZkThXmiQ","2024-07-27 12:57:42"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/_KIsJOSHEqDEhaLxBMjNuA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.525","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/Example-How-to-Use-TD_SimpleImputeTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/_KIsJOSHEqDEhaLxBMjNuA","2024-07-27 12:55:02"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/_Q8nC6I8o0P8GzlXfOr0Ag","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.399","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Example-How-to-Use-TD_Pivoting/RowsPerPartition","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/_Q8nC6I8o0P8GzlXfOr0Ag","2024-07-27 12:56:54"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/_WVKvPvOtB4UiylNYAFRYw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.384","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution/Attribution-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/_WVKvPvOtB4UiylNYAFRYw","2024-07-27 12:57:36"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/_gTQQeyrb~D04EFhHkn7ZA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.409","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/_gTQQeyrb~D04EFhHkn7ZA","2024-07-27 12:56:28"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/_kGSXutX4sJzQiyff1Plyg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.675","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/_kGSXutX4sJzQiyff1Plyg","2024-07-27 12:57:52"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/a5F_2Bv48Ae79atRZcIL~A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.392","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/Example-Using-TD_GetRowsWithMissingValues-to-Find-NULL-Values","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/a5F_2Bv48Ae79atRZcIL~A","2024-07-27 12:57:16"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/a9y5N7hvfrLGbmLSar1pAg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.429","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Size-of-the-Query","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/a9y5N7hvfrLGbmLSar1pAg","2024-07-27 12:55:29"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/aF4A~8SGOBBSgHTLuaIdWA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.440","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/Required-Syntax-Elements-for-TD_RegressionEvaluator","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/aF4A~8SGOBBSgHTLuaIdWA","2024-07-27 12:57:12"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/aTxb0Ba~JvMhoreRcKl~hw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.426","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Example-How-to-Use-TD_Pivoting","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/aTxb0Ba~JvMhoreRcKl~hw","2024-07-27 12:55:15"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/aYQpdLBNGHmYb~KB_39_Pg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.390","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser/TD_TextParser-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/aYQpdLBNGHmYb~KB_39_Pg","2024-07-27 12:55:10"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ae8KAlmCGAZg7oAQOkhduQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.398","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/TD_WordEmbeddings-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ae8KAlmCGAZg7oAQOkhduQ","2024-07-27 12:56:51"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/aib0BDiaQwHVZJ8l4XzjnQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.369","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/TD_WhichMax-Example","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/aib0BDiaQwHVZJ8l4XzjnQ","2024-07-27 12:56:22"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/aoxCzlEEkSAM7a89Fq_ZEw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.443","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/aoxCzlEEkSAM7a89Fq_ZEw","2024-07-27 12:58:10"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/as~fjBbjerC8foqk7huYSw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.392","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TextParser","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/as~fjBbjerC8foqk7huYSw","2024-07-27 12:58:19"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/b2wh3qsaNfx5_xrZ03yjHw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.397","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-Hindi-Input-ACCUMULATE-DISTINCT-and-CDISTINCT","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/b2wh3qsaNfx5_xrZ03yjHw","2024-07-27 12:55:17"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/b5HWAVWd5u7SeOld0YTKSg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.445","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Examples-How-to-Use-Pack/Pack-Examples-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/b5HWAVWd5u7SeOld0YTKSg","2024-07-27 12:57:33"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/b7k1ztfHn_UcR9v_AygODw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.439","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/Required-Syntax-Elements-for-TD_GetFutileColumns","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/b7k1ztfHn_UcR9v_AygODw","2024-07-27 12:56:35"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/bAH~hmq24dIeNIU5kkb4cg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.377","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics/TD_UnivariateStatistics-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/bAH~hmq24dIeNIU5kkb4cg","2024-07-27 12:55:32"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/bJum2V4Dr0AYo60QkIqUtQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","1.864","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/Required-Syntax-Elements-for-TD_WhichMin","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/bJum2V4Dr0AYo60QkIqUtQ","2024-07-27 12:56:31"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/bR8uNxLZ_oT3FMuaiUKjcQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.514","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-FIRST-LAST_NOTNULL-MAX_CHOOSE-and-MIN_CHOOSE","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/bR8uNxLZ_oT3FMuaiUKjcQ","2024-07-27 12:55:16"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/bil~2N6yAieRT4x4lD_iDQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.459","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/TD_FTest-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/bil~2N6yAieRT4x4lD_iDQ","2024-07-27 12:55:59"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/blkYE4K8qUpYgJ~qHQieqQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.402","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionFit/TD_FunctionFit-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/blkYE4K8qUpYgJ~qHQieqQ","2024-07-27 12:55:52"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/bsAVd4m0T0VLolFIMhEyoA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.398","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Sessionize-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/bsAVd4m0T0VLolFIMhEyoA","2024-07-27 12:58:25"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/bu_b3LaqgqFwnUf~hagFoA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.369","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/TD_KNN-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/bu_b3LaqgqFwnUf~hagFoA","2024-07-27 12:58:18"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/bvtZREF8rqH0lU~1mdkBbw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.375","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer/TD_NaiveBayesTextClassifierTrainer-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/bvtZREF8rqH0lU~1mdkBbw","2024-07-27 12:58:08"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/b~7S3pnfbQslDn1YvxdwXg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.395","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Optional-Syntax-Elements-for-MovingAverage","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/b~7S3pnfbQslDn1YvxdwXg","2024-07-27 12:55:05"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/c75_KpE_vftHgA87Imi98Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.410","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-ACCUMULATE-String-over-64000-Characters","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/c75_KpE_vftHgA87Imi98Q","2024-07-27 12:55:17"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/c9atdjSY1kRoKO~rG9Zh~w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.439","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/Optional-Syntax-Elements-for-TD_SentimentExtractor","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/c9atdjSY1kRoKO~rG9Zh~w","2024-07-27 12:56:03"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/cAEI~XqdaXtzr7myCa_BgA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.429","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/AMP-Configuration-Impact-on-Function-Execution","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/cAEI~XqdaXtzr7myCa_BgA","2024-07-27 12:56:10"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/cIaQy3QMLqbiTwBETjS5Nw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.420","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/NGramSplitter-Usage-Notes","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/cIaQy3QMLqbiTwBETjS5Nw","2024-07-27 12:57:18"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/cKRr7~u1Pz2mAyvZlGRhXw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.437","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/TD_BinCodeTransform-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/cKRr7~u1Pz2mAyvZlGRhXw","2024-07-27 12:56:14"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/cb7pPevnYrHYB7dpcNqhcQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.387","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents/TD_RandomProjectionMinComponents-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/cb7pPevnYrHYB7dpcNqhcQ","2024-07-27 12:57:39"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/cbthm0Z8llOZPWnZPvXxEg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.396","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Examples/Antiselect-Example-Column-Range","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/cbthm0Z8llOZPWnZPvXxEg","2024-07-27 12:56:01"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ckFiQD7hMhfy0WNOkb3uhA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.459","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/Required-Syntax-Elements-for-TD_NonLinearCombineTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ckFiQD7hMhfy0WNOkb3uhA","2024-07-27 12:55:30"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/cvdid8HBIYKt8ZUc3zO50w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.477","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Required-Syntax-Elements-for-TD_ZTest","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/cvdid8HBIYKt8ZUc3zO50w","2024-07-27 12:56:25"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/cxLQ~ZPooIqAcIa4NiUlTA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.438","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/Optional-Syntax-Elements-for-TD_WhichMin","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/cxLQ~ZPooIqAcIa4NiUlTA","2024-07-27 12:56:30"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/czsm4ZvoDuv8epk_DH6H8w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.639","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Examples-How-to-Use-NGramSplitter","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/czsm4ZvoDuv8epk_DH6H8w","2024-07-27 12:57:17"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/d5gv6em6DgRos0XEwlycXA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","5","4","0","0.560","0","0","0","","","","","","","","","0.487","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/d5gv6em6DgRos0XEwlycXA","2024-07-27 12:55:27"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/d7_ykJ6sl57sc28R6yQWWA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.394","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/TD_BinCodeTransform-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/d7_ykJ6sl57sc28R6yQWWA","2024-07-27 12:56:15"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/d96vwFHitt2VMQ48AuWyhw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.372","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/TD_OneClassSVM-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/d96vwFHitt2VMQ48AuWyhw","2024-07-27 12:57:56"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/dFnJto9QtsQQlKOgbKqjJw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.823","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Examples-How-to-Use-TD_ANOVA/Using-NumGroups-Argument","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/dFnJto9QtsQQlKOgbKqjJw","2024-07-27 12:58:09"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/dHlT6mEopMMh~qQLaM3Usw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.403","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/TD_Pivoting-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/dHlT6mEopMMh~qQLaM3Usw","2024-07-27 12:55:14"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/dJPh_7syQTTBH6APGrEYJA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.413","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/TD_Histogram-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/dJPh_7syQTTBH6APGrEYJA","2024-07-27 12:57:08"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/dOtDK43VjC0PbFGQArORJQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.402","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer/TD_ColumnTransformer-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/dOtDK43VjC0PbFGQArORJQ","2024-07-27 12:56:25"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/dZhauuTbaOE41RWH9FICCg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.467","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/TD_GetFutileColumns-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/dZhauuTbaOE41RWH9FICCg","2024-07-27 12:56:34"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/dbkSkfuGNL8vHy4Nr6Ib_w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.402","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Examples-How-to-Use-TD_FTest","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/dbkSkfuGNL8vHy4Nr6Ib_w","2024-07-27 12:55:58"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/dgedxXeptNNAL7OhHOmohQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.401","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/Required-Syntax-Elements-for-TD_StrApply","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/dgedxXeptNNAL7OhHOmohQ","2024-07-27 12:57:21"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/djtR8ZZYFBvI_jfE6A24JQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.512","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/Examples-How-to-Use-TD_XGBoostPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/djtR8ZZYFBvI_jfE6A24JQ","2024-07-27 12:55:36"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/dkKSGFKUxJS6lclQK1DqSg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.413","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Usage-Notes","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/dkKSGFKUxJS6lclQK1DqSg","2024-07-27 12:57:27"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/duuRJ7GO1Kn49YopR25kRg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.395","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer/Example-Using-TD_NaiveBayesTextClassifierTrainer-with-Multinomial-Model-Type","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/duuRJ7GO1Kn49YopR25kRg","2024-07-27 12:58:07"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/dvNqmx35qA43S4tmI~Mjng","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.420","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KNN/Examples-How-to-Use-TD_KNN","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/dvNqmx35qA43S4tmI~Mjng","2024-07-27 12:58:17"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/dwAHsFZcmf2y~Vu6HGWSUQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.377","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Required-Syntax-Elements-for-TD_ScaleFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/dwAHsFZcmf2y~Vu6HGWSUQ","2024-07-27 12:57:45"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/e4zo6U1ZTRv53EmtXREarA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.377","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer/TD_ColumnTransformer-Example","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/e4zo6U1ZTRv53EmtXREarA","2024-07-27 12:56:26"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/e8mkp_sQgm5hZlPUyYOwIQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","6","2","0","0.280","0","0","0","","","","","","","","","0.385","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/Optional-Syntax-Elements-for-TD_StrApply","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/e8mkp_sQgm5hZlPUyYOwIQ","2024-07-27 12:57:22"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/eP1KmDnGwoO7tb1t_W7WKA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.374","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Optional-Syntax-Elements-for-TD_ScaleFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/eP1KmDnGwoO7tb1t_W7WKA","2024-07-27 12:57:45"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ePgs8O0NgUVaAsAwWHpsUA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.395","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_XGBoost/Examples-How-to-Use-TD_XGBoost/TD_XGBoost-for-JSON-Tree-Model-String","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ePgs8O0NgUVaAsAwWHpsUA","2024-07-27 12:57:25"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/eWPotvXKkzJElExf1t~hKg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.434","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/Example-How-to-Use-TD_RoundColumns","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/eWPotvXKkzJElExf1t~hKg","2024-07-27 12:55:50"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/eaQTHxJDk2phUkJnMfnREQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","1.013","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Examples-How-to-Use-TD_ANOVA/Using-GroupNames-Argument","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/eaQTHxJDk2phUkJnMfnREQ","2024-07-27 12:58:08"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/efN~DHNFTtBQvPfwitLAWw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.394","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform/Example-How-to-Use-TD_OutlierFilterTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/efN~DHNFTtBQvPfwitLAWw","2024-07-27 12:56:23"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/efTPGk0n4~YAqRFV~6H3hQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.393","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionTransform/TD_FunctionTransform-Example","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/efTPGk0n4~YAqRFV~6H3hQ","2024-07-27 12:56:20"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/epptRbOPm5iwPEAw2I5qEA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.440","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/Example-How-to-Use-TD_WordEmbeddings","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/epptRbOPm5iwPEAw2I5qEA","2024-07-27 12:56:52"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/eyOfN8CBGwydtTgHQOEEHQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","5","3","0","0.420","0","0","0","","","","","","","","","0.450","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/eyOfN8CBGwydtTgHQOEEHQ","2024-07-27 12:55:23"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ezoYRKdX9HilUQh6wSoFyQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.417","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ezoYRKdX9HilUQh6wSoFyQ","2024-07-27 12:56:59"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/f0M1iOUjmGHh_KkZ8vdJyQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.440","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMax/TD_WhichMax-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/f0M1iOUjmGHh_KkZ8vdJyQ","2024-07-27 12:56:21"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/f5T15r0SYEdyliRG8dyocw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","6","4","0","0.560","0","0","0","","","","","","","","","0.381","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/f5T15r0SYEdyliRG8dyocw","2024-07-27 12:55:38"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/fR4PimWhWA1799aOG8ogfA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.632","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/fR4PimWhWA1799aOG8ogfA","2024-07-27 12:56:13"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/fWjoTeThAgzpTfGU92i6LQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.389","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/TD_ScaleFit-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/fWjoTeThAgzpTfGU92i6LQ","2024-07-27 12:57:44"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/fa0i3ts9ZaUBQ4SIaN9elQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.391","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/Required-Syntax-Elements-for-TD_Silhouette","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/fa0i3ts9ZaUBQ4SIaN9elQ","2024-07-27 12:55:01"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/fadkiEQZiTynUXVUzRKi8Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","7","5","0","0.710","0","0","0","","","","","","","","","0.386","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/fadkiEQZiTynUXVUzRKi8Q","2024-07-27 12:55:03"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/fjyPq9uQUMQBIKrLoB_xUA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.435","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeFit/Required-Syntax-Elements-for-TD_SimpleImputeFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/fjyPq9uQUMQBIKrLoB_xUA","2024-07-27 12:56:19"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/foXC4StdggaT9PDycsTs2A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.455","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/Examples-How-to-Use-TD_KMeansPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/foXC4StdggaT9PDycsTs2A","2024-07-27 12:55:57"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ftHSCMtfeLT4jYxTd1xKGw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.538","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ColumnTransformer","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ftHSCMtfeLT4jYxTd1xKGw","2024-07-27 12:58:14"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/fvSEymIU7orYobTexLdAzw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.457","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/TD_RowNormalizeTransform-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/fvSEymIU7orYobTexLdAzw","2024-07-27 12:58:22"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/fvSYj86dm3ergBVrDPIPFg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.385","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit/TD_OutlierFilterFit-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/fvSYj86dm3ergBVrDPIPFg","2024-07-27 12:57:13"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/fwP0WueplDNwKJT6Jw_q8Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.423","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/TD_RowNormalizeFit-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/fwP0WueplDNwKJT6Jw_q8Q","2024-07-27 12:55:08"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/gD4Aa6ckHR0ouNKd6p2kXw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.380","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance/TD_VectorDistance-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/gD4Aa6ckHR0ouNKd6p2kXw","2024-07-27 12:57:00"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/gELt2AmcZnrwR8C~QMVy1Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.380","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/TD_ChiSq-Usage-Notes","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/gELt2AmcZnrwR8C~QMVy1Q","2024-07-27 12:55:43"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/gPwDjwVYQd_9dCQciYBu4Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.583","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/Optional-Syntax-Elements-for-TD_GLMPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/gPwDjwVYQd_9dCQciYBu4Q","2024-07-27 12:57:30"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/gdmAvNG5T3L_zbZqlvcplA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.424","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/gdmAvNG5T3L_zbZqlvcplA","2024-07-27 12:55:14"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/gearqUIsDIYOXSuZ01jriA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.382","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/Required-Syntax-Elements-for-TD_KMeans","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/gearqUIsDIYOXSuZ01jriA","2024-07-27 12:57:53"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/grM7cDBzyi45XVD_p5k3Zw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.386","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/TD_ConvertTo-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/grM7cDBzyi45XVD_p5k3Zw","2024-07-27 12:56:02"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/gsjki91omC15xvggW~RmEw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.377","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Patterns/nPath-Greedy-Pattern-Matching","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/gsjki91omC15xvggW~RmEw","2024-07-27 12:56:58"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/gvdhS79zyid8tlBI8coTLA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.708","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-ACCUMULATE-String-over-64000-Characters-DISTINCT","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/gvdhS79zyid8tlBI8coTLA","2024-07-27 12:55:18"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hDP01fu1PatXUd7~82dCcg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.656","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/TD_GLM-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hDP01fu1PatXUd7~82dCcg","2024-07-27 12:54:55"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hH1HEXiZSyiDU_8qYpTMlg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.476","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Examples-How-to-Use-Pack","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hH1HEXiZSyiDU_8qYpTMlg","2024-07-27 12:55:52"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hMBDAbJOEgPKp0My_vzASA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.401","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Attribution","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hMBDAbJOEgPKp0My_vzASA","2024-07-27 12:55:35"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hPpuiHSEL5SlLktokAES0Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.413","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM/TD_SVM-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hPpuiHSEL5SlLktokAES0Q","2024-07-27 12:57:11"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hRHuZ9aJ7h80w7eZU0iGVw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.478","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/TD_DecisionForestPredict-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hRHuZ9aJ7h80w7eZU0iGVw","2024-07-27 12:57:20"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hTM8nR89FU672t4C6EFShQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.373","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/Optional-Syntax-Elements-for-TD_NumApply","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hTM8nR89FU672t4C6EFShQ","2024-07-27 12:56:57"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hVvAieyE6yLU_Jde0FYq3A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.421","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/Required-Syntax-Elements-for-TD_OneHotEncodingTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hVvAieyE6yLU_Jde0FYq3A","2024-07-27 12:55:54"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hZ7TcB6OoC4d66COWikZaw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.391","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics/Example-Using-TD_UnivariateStatistics-to-Determine-Mean-Median-and-Mode","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hZ7TcB6OoC4d66COWikZaw","2024-07-27 12:55:32"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hbwbZrC16ZwKjK1dWuET4Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.945","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics/TD_UnivariateStatistics-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hbwbZrC16ZwKjK1dWuET4Q","2024-07-27 12:55:31"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hlJqE9lth7PQuqxMV~tofA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.462","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/TD_GLMPredict-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hlJqE9lth7PQuqxMV~tofA","2024-07-27 12:57:31"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hmdysyz_FcbSA9opvunEqg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.419","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/Examples-How-to-Use-TD_ScaleTransform/Dense-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hmdysyz_FcbSA9opvunEqg","2024-07-27 12:56:56"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/htJCHv~6W61KP5_92NkxRA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.368","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/htJCHv~6W61KP5_92NkxRA","2024-07-27 12:58:13"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hw2X_YBcfq2EQRDBiY9vDw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.384","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/hw2X_YBcfq2EQRDBiY9vDw","2024-07-27 12:55:19"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/iO7NSykL_7ccM__nOOBmAA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.407","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/TD_TrainTestSplit-Examples","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/iO7NSykL_7ccM__nOOBmAA","2024-07-27 12:57:35"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/iZ6CrJ6vdWFOr3k64pEEZQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.370","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-Combine-Values-from-One-Row-with-Values-from-the-Next-Row","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/iZ6CrJ6vdWFOr3k64pEEZQ","2024-07-27 12:55:16"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/iiP83r6vrHefsoMkTeurvg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.403","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/Optional-Syntax-Elements-for-TD_NonLinearCombineTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/iiP83r6vrHefsoMkTeurvg","2024-07-27 12:55:29"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/inC~cGuYTYRWyTEwqN9WXw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.463","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/Example-How-to-Use-TD_NumApply","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/inC~cGuYTYRWyTEwqN9WXw","2024-07-27 12:56:57"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/inZ3zIbnYImV4lnjFjgMBQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.395","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/TD_Histogram-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/inZ3zIbnYImV4lnjFjgMBQ","2024-07-27 12:57:09"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/iyAUi49EGXzyGJw592w2tw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.394","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/Optional-Syntax-Elements-for-TD_GetRowsWithMissingValues","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/iyAUi49EGXzyGJw592w2tw","2024-07-27 12:57:15"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/j9PcLYlMFzuazGSm0WMlFA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.460","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/j9PcLYlMFzuazGSm0WMlFA","2024-07-27 12:58:04"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/j9TEknNJPeKhH9BiPLla8A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.360","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/TD_OrdinalEncodingFit-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/j9TEknNJPeKhH9BiPLla8A","2024-07-27 12:56:48"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/jGCKgtUNrWhSZhWKsiAcaw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.385","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Data-Cleaning-Functions","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/jGCKgtUNrWhSZhWKsiAcaw","2024-07-27 12:57:22"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/jIk~l36S3lG3A8lyGIgJ8A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.426","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionFit/TD_FunctionFit-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/jIk~l36S3lG3A8lyGIgJ8A","2024-07-27 12:55:51"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/jKmMWFum9_LCkW3pWjbF2g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.374","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/TD_SimpleImputeTransform-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/jKmMWFum9_LCkW3pWjbF2g","2024-07-27 12:55:03"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/jNssyqIeaIpYdVHrV3RAHw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.395","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Feature-Engineering-Transform-Functions","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/jNssyqIeaIpYdVHrV3RAHw","2024-07-27 12:57:23"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/jRpmvJn4a~7UCdkl33OWTA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.405","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/Required-Syntax-Elements-for-TD_KMeansPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/jRpmvJn4a~7UCdkl33OWTA","2024-07-27 12:55:58"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/jXxR8mk2vt0S4ucbRTgcrA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.403","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/Required-Syntax-Elements-for-TD_XGBoostPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/jXxR8mk2vt0S4ucbRTgcrA","2024-07-27 12:55:37"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/jYDk7a6Tt0seZcDhFDpocA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.456","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/TD_KMeans-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/jYDk7a6Tt0seZcDhFDpocA","2024-07-27 12:57:53"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/jbfKcd0_K2R6ukMNIf1oJw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.431","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/jbfKcd0_K2R6ukMNIf1oJw","2024-07-27 12:54:58"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ji4QYGwsCAWSmbkzdwUEng","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","1.193","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Required-Syntax-Elements-for-Sessionize","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ji4QYGwsCAWSmbkzdwUEng","2024-07-27 12:58:25"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/jthgHCNCnd0trfPfvsmtDA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.449","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/TD_SimpleImputeTransform-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/jthgHCNCnd0trfPfvsmtDA","2024-07-27 12:55:04"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/jyCbir0Rq3CMQtX3cnUDqg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.651","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/Required-Syntax-Elements-for-TD_DecisionForest","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/jyCbir0Rq3CMQtX3cnUDqg","2024-07-27 12:56:41"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/k6OmooRxXno02OWjXI1xhA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.412","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/TD_TrainTestSplit-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/k6OmooRxXno02OWjXI1xhA","2024-07-27 12:57:36"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kA6yW_Swn2RNCxLlxJJe6w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.444","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kA6yW_Swn2RNCxLlxJJe6w","2024-07-27 12:56:37"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kAoylF73gM0OpkgtIbho1Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.693","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Find-Sessions-That-Start-at-Home-Page-and-Visit-Page1","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kAoylF73gM0OpkgtIbho1Q","2024-07-27 12:57:04"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kE62~qNC86cBP3DiCzqm0w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.383","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kE62~qNC86cBP3DiCzqm0w","2024-07-27 12:54:58"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kFUtLHHELK1cbx8f~uvjvQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.382","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/Required-Syntax-Elements-for-TD_OrdinalEncodingFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kFUtLHHELK1cbx8f~uvjvQ","2024-07-27 12:56:48"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kSA0XyhT2Z9GJMFAauZ0Lw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.496","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/TD_GetFutileColumns-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kSA0XyhT2Z9GJMFAauZ0Lw","2024-07-27 12:56:33"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kTjY58JhtocwtL7rnjSitg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.402","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kTjY58JhtocwtL7rnjSitg","2024-07-27 12:58:10"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kXyt5Oy46618WnNCJzbbiw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.410","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples/nPath-Results-Example-Hindi-Input-ACCUMULATE-FIRST_NOTNULL","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kXyt5Oy46618WnNCJzbbiw","2024-07-27 12:55:19"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ka7QApcj1EjNdEnSzC1vxA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.389","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/How-to-Read-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ka7QApcj1EjNdEnSzC1vxA","2024-07-27 12:54:50"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kg~jzxFHp6V16B1yA7k~kw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.384","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_RegressionEvaluator/TD_RegressionEvaluator-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kg~jzxFHp6V16B1yA7k~kw","2024-07-27 12:57:13"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kmdyf~pEeHYDM_xhcCefcQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.864","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kmdyf~pEeHYDM_xhcCefcQ","2024-07-27 12:54:52"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kuPVFVRJ4A4krhUIf2AF~Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","6","2","0","0.280","0","0","0","","","","","","","","","0.811","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kuPVFVRJ4A4krhUIf2AF~Q","2024-07-27 12:55:28"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kum~a7zun9Fy1yLDjIbVCg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","8","4","0","0.560","0","0","0","","","","","","","","","0.590","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kum~a7zun9Fy1yLDjIbVCg","2024-07-27 12:54:57"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kyASaTv4Exjaxc9Op9IrYQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.389","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ROC/Optional-Syntax-Elements-for-TD_ROC","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/kyASaTv4Exjaxc9Op9IrYQ","2024-07-27 12:57:40"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/l0l8TJ~WSf~LqRE40Lxisg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","4","4","0","0.560","0","0","0","","","","","","","","","0.408","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/l0l8TJ~WSf~LqRE40Lxisg","2024-07-27 12:55:27"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/l2mrXm8JEdOhtPK~F_JqKQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.418","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/Example-How-to-Use-TD_NonLinearCombineTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/l2mrXm8JEdOhtPK~F_JqKQ","2024-07-27 12:55:31"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/l5GEVf81YgLiqbJzW5Od7Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.491","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/TD_PolynomialFeaturesTransform-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/l5GEVf81YgLiqbJzW5Od7Q","2024-07-27 12:56:45"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/lDZm0NS0Ex3O7Um1lLRNyw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.384","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/Optional-Syntax-Elements-for-TD_NonLinearCombineFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/lDZm0NS0Ex3O7Um1lLRNyw","2024-07-27 12:57:49"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/lEJkRfNhfxAUeXc5h8nsgQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.392","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Examples-How-to-Use-NGramSplitter/Example-Specify-Accumulate","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/lEJkRfNhfxAUeXc5h8nsgQ","2024-07-27 12:56:46"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/lOPve8w6NhaGrCL4iClt1A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","4","4","0","0.560","0","0","0","","","","","","","","","0.462","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/lOPve8w6NhaGrCL4iClt1A","2024-07-27 12:56:18"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/lQHt6nS~QC0WD47XYi~dWA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.363","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/Required-Syntax-Elements-for-TD_NonLinearCombineFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/lQHt6nS~QC0WD47XYi~dWA","2024-07-27 12:57:48"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/lUEBVbhA2Ulva3gNGnRYzg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.512","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/TD_OneHotEncodingTransform-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/lUEBVbhA2Ulva3gNGnRYzg","2024-07-27 12:55:55"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ld85~hnxFpFQ8C2A3ZTEUQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.391","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/TD_PolynomialFeaturesFit-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ld85~hnxFpFQ8C2A3ZTEUQ","2024-07-27 12:56:17"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ldbEuNkmKFlvzFe2TsM7lQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.520","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/StringSimilarity-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ldbEuNkmKFlvzFe2TsM7lQ","2024-07-27 12:58:23"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/lsdBjQ1bT~jp5JIN_y3KiQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.405","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Exponential-Moving-Average","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/lsdBjQ1bT~jp5JIN_y3KiQ","2024-07-27 12:55:05"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/lzPZj073qCm2XQnTzeMKcA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.455","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/Example-How-to-Use-TD_RowNormalizeFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/lzPZj073qCm2XQnTzeMKcA","2024-07-27 12:55:09"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/mAc6mJkGnmmH5KJUVTvNtw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.384","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/Optional-Syntax-Elements-for-TD_ClassificationEvaluator","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/mAc6mJkGnmmH5KJUVTvNtw","2024-07-27 12:57:46"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/mF4sGOgGytb0EM_zGPFbnw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.430","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/MovingAverage-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/mF4sGOgGytb0EM_zGPFbnw","2024-07-27 12:55:04"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/mPK7tj9~cE_Firnld1aL5w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.592","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/TD_BinCodeFit-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/mPK7tj9~cE_Firnld1aL5w","2024-07-27 12:56:38"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/mcE0h9Jf_bYgfhOU8Wl5_Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.379","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Simple-Moving-Average","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/mcE0h9Jf_bYgfhOU8Wl5_Q","2024-07-27 12:57:28"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/mdl8KLQMHtyH7mafBWYO4Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.749","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/Example-How-to-Use-TD_RowNormalizeTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/mdl8KLQMHtyH7mafBWYO4Q","2024-07-27 12:58:20"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/mfiN_54RPnVPYgvOAj8moA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.424","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_StrApply/TD_StrApply-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/mfiN_54RPnVPYgvOAj8moA","2024-07-27 12:57:22"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/n30lKytbbWyjGIMK4G8nlA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.408","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingFit/TD_TargetEncodingFit-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/n30lKytbbWyjGIMK4G8nlA","2024-07-27 12:54:58"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/n5d2uJ32sOITBs81FRUpNA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.416","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/n5d2uJ32sOITBs81FRUpNA","2024-07-27 12:55:40"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/nKREGAVwo0Es2PtRMV4nUQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.393","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/TD_TrainTestSplit-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/nKREGAVwo0Es2PtRMV4nUQ","2024-07-27 12:57:35"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/nRgIDBiIwrc9Kkwcm4pfRw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.400","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/nRgIDBiIwrc9Kkwcm4pfRw","2024-07-27 12:56:59"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/nVhGoJMnCtcdKL4yc10XLw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.395","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/TD_RoundColumns-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/nVhGoJMnCtcdKL4yc10XLw","2024-07-27 12:55:50"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/nd4d_DMJWV6ZRv231UpPuQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.458","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/TD_ZTest-Usage-Notes","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/nd4d_DMJWV6ZRv231UpPuQ","2024-07-27 12:56:36"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/nd8H0XomzmzjfeRzA8UUHw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.773","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/TD_OneClassSVMPredict-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/nd8H0XomzmzjfeRzA8UUHw","2024-07-27 12:57:04"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/nklHoyCiX4ljoZKBLJ~qGg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.449","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF/Required-Syntax-Elements-for-TD_TFIDF","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/nklHoyCiX4ljoZKBLJ~qGg","2024-07-27 12:55:12"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/noKYQatwWTnyPruVpSLNZw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.448","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit/TD_OutlierFilterFit-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/noKYQatwWTnyPruVpSLNZw","2024-07-27 12:57:14"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/nzyY1iKMEF9MM2d6LD6hNQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","2","0","0.280","0","0","0","","","","","","","","","0.733","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeFit/Example-How-To-Use-TD_BinCodeFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/nzyY1iKMEF9MM2d6LD6hNQ","2024-07-27 12:58:16"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/o7JsPUfVu_PzWbl4shBNLg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","1.275","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/TD_Silhouette-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/o7JsPUfVu_PzWbl4shBNLg","2024-07-27 12:54:59"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/oRTSdqYbwbWckGvFuBcMFA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.465","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/Optional-Syntax-Elements-for-TD_GetFutileColumns","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/oRTSdqYbwbWckGvFuBcMFA","2024-07-27 12:56:34"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/oTEYKUUyJRDCXZx2Iotzrg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.479","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeTransform/Optional-Syntax-Elements-for-TD_RowNormalizeTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/oTEYKUUyJRDCXZx2Iotzrg","2024-07-27 12:58:21"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/oe0KYFXo3lw~V6qHkFyHhw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.388","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/Optional-Syntax-Elements-for-TD_GetRowsWithoutMissingValues","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/oe0KYFXo3lw~V6qHkFyHhw","2024-07-27 12:56:30"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ofFEmGKTPwDfMyTqZCKBCg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.806","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_SVMPredict/Optional-Syntax-Elements-for-TD_SVMPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ofFEmGKTPwDfMyTqZCKBCg","2024-07-27 12:55:47"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ofZHguKNDsT9MFvZ4_FlGg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.384","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Modified-Moving-Average","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ofZHguKNDsT9MFvZ4_FlGg","2024-07-27 12:57:29"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/onbfIA9Rxpvr5gwKYnNqXg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.390","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/Example-How-to-Use-TD_OneClassSVMPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/onbfIA9Rxpvr5gwKYnNqXg","2024-07-27 12:57:06"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/p0u~omTXnlpVThFe28d18Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.493","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/Examples-How-to-Use-StringSimilarity/StringSimilarity-Example-Specify-Column-Names","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/p0u~omTXnlpVThFe28d18Q","2024-07-27 12:56:58"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/p1BpgDN_Kt5REdL562VuDA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.377","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance/Example-TD_VectorDistance-Using-Euclidean-Manhattan-and-Cosine","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/p1BpgDN_Kt5REdL562VuDA","2024-07-27 12:57:00"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/p8JSbl4w0U6cAjSQsjj~hw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.404","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Examples-How-to-Use-TD_ZTest","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/p8JSbl4w0U6cAjSQsjj~hw","2024-07-27 12:56:36"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/p8WbEBSbn6tlyAlk25dJQw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.387","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/TD_DecisionForestPredict-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/p8WbEBSbn6tlyAlk25dJQw","2024-07-27 12:57:19"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/pMuYscDPxnp3c6RTx6YETw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.553","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform/TD_OrdinalEncodingTransform-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/pMuYscDPxnp3c6RTx6YETw","2024-07-27 12:57:58"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/pW4kssjUt095VJQAfmojBg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","2","0","0.280","0","0","0","","","","","","","","","0.466","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_FunctionFit/TD_FunctionFit-Example","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/pW4kssjUt095VJQAfmojBg","2024-07-27 12:54:48"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/pX4JNGP9bXnczCNSt14Lfw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.390","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/TD_KMeans-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/pX4JNGP9bXnczCNSt14Lfw","2024-07-27 12:57:54"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/paWnTGR7p6jAU4zVCedE2g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.584","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/Examples-How-to-Use-TD_FTest/Using-SecondSampleName-and-FirstSampleVariance-Arguments","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/paWnTGR7p6jAU4zVCedE2g","2024-07-27 12:56:38"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/pi0C_z~XmFDCojHf~ihQ5g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.637","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/Optional-Syntax-Elements-for-TD_DecisionForest","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/pi0C_z~XmFDCojHf~ihQ5g","2024-07-27 12:56:41"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/pruExsYpac892iL448hpRA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","4","3","0","0.420","0","0","0","","","","","","","","","0.466","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/pruExsYpac892iL448hpRA","2024-07-27 12:55:25"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/q3rrawnJrzAgtamNOcEWcg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.392","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/Antiselect/Antiselect-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/q3rrawnJrzAgtamNOcEWcg","2024-07-27 12:57:51"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/q9A9nfoqbqX5dsEzrYRASg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.407","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols/LAG-and-LEAD-Expressions-in-Symbol-Predicates/LAG-Expression-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/q9A9nfoqbqX5dsEzrYRASg","2024-07-27 12:58:06"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qAymF3TavJXDWLIPQfQwZA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.375","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/Example-How-to-Use-TD_KMeans","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qAymF3TavJXDWLIPQfQwZA","2024-07-27 12:57:54"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qChyQzZihA_ibsa0LQG8gg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.461","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/TD_ChiSq-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qChyQzZihA_ibsa0LQG8gg","2024-07-27 12:55:45"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qH1rEl_YDIoSbjQp_cpNTw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.392","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qH1rEl_YDIoSbjQp_cpNTw","2024-07-27 12:56:45"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qHWt2sj3Eg5vX1VhHFOK9A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.399","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Weighted-Moving-Average","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qHWt2sj3Eg5vX1VhHFOK9A","2024-07-27 12:57:28"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qL6SfTWz79iFLHIl6QpRzQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.411","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Examples-How-to-Use-Unpack/Example-More-Input-Columns-than-Output-Columns","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qL6SfTWz79iFLHIl6QpRzQ","2024-07-27 12:55:46"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qO5rJOJHPhNx8doFnVn_Dg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.651","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionMinComponents","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qO5rJOJHPhNx8doFnVn_Dg","2024-07-27 12:58:14"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qOtYExzXhZUy2lzKLRvS6g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.403","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ZTest/Examples-How-to-Use-TD_ZTest/Using-One-Sample","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qOtYExzXhZUy2lzKLRvS6g","2024-07-27 12:57:07"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qPuGDsjyY7sfHg7YVnsrsg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.464","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns/Example-How-to-Use-TD_GetFutileColumns","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qPuGDsjyY7sfHg7YVnsrsg","2024-07-27 12:56:33"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qTGtYBEAQdi54f0r0kzcPg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.390","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit/Example-Using-TD_OutlierFilterFit-with-Percentile-Method","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qTGtYBEAQdi54f0r0kzcPg","2024-07-27 12:57:15"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qVn8AEsNaYmpydsxZKcBvg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.454","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Examples-How-to-Use-TD_ANOVA","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qVn8AEsNaYmpydsxZKcBvg","2024-07-27 12:57:33"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qbxv6nI1r2cZYcN5wKLfvA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","4","4","0","0.560","0","0","0","","","","","","","","","0.441","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qbxv6nI1r2cZYcN5wKLfvA","2024-07-27 12:57:59"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qiWXKKgjMwPAdzJ9mMhJRw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.440","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/Example-Cumulative-Moving-Average","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qiWXKKgjMwPAdzJ9mMhJRw","2024-07-27 12:57:28"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qmagizC~C2772YLb0Vddxw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.583","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Accumulated-Columns-Impact-on-Function-Performance","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qmagizC~C2772YLb0Vddxw","2024-07-27 12:56:09"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qnJz9NEpZD1jQJzSeoF3Sw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.457","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_KMeans/Optional-Syntax-Elements-for-TD_KMeans","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qnJz9NEpZD1jQJzSeoF3Sw","2024-07-27 12:57:53"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qxjIcG~UaTxDbAcejEfFFQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","4","4","0","0.560","0","0","0","","","","","","","","","0.406","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qxjIcG~UaTxDbAcejEfFFQ","2024-07-27 12:58:14"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qyBko~5QRUdVRQe_UpsEcA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.414","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM/Examples-How-to-Use-TD_SVM","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qyBko~5QRUdVRQe_UpsEcA","2024-07-27 12:57:10"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qybPvvsA4WOa54EcXfF_XQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.407","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/TD_DecisionForestPredict-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/qybPvvsA4WOa54EcXfF_XQ","2024-07-27 12:57:19"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/r2XQ9vMT~IwP6fhBxPypwQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.559","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_ConvertTo/Required-Syntax-Elements-for-TD_ConvertTo","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/r2XQ9vMT~IwP6fhBxPypwQ","2024-07-27 12:56:03"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/rCcLXrrYaicmhQgmtyayxg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.667","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/rCcLXrrYaicmhQgmtyayxg","2024-07-27 12:55:24"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/rI4GoJ~ctylUwtEfQkFSvg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.384","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Results/nPath-Results-Examples","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/rI4GoJ~ctylUwtEfQkFSvg","2024-07-27 12:58:16"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/rNBuzWidxfXkAPwH2imSIw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.501","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/StringSimilarity/Examples-How-to-Use-StringSimilarity/StringSimilarity-Example-Specify-Column-Ranges","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/rNBuzWidxfXkAPwH2imSIw","2024-07-27 12:56:58"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/rOIYwjAZg~ylnKTGuUw0mw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.394","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_Histogram/Examples-How-to-Use-TD_Histogram","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/rOIYwjAZg~ylnKTGuUw0mw","2024-07-27 12:57:07"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/rYLMvlryHemRzz3KMCKu7w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.379","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/TD_OneClassSVM-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/rYLMvlryHemRzz3KMCKu7w","2024-07-27 12:57:56"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/rd5Sc9Xr3OJjTYoWsaL6wA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","5","4","0","0.560","0","0","0","","","","","","","","","0.672","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/rd5Sc9Xr3OJjTYoWsaL6wA","2024-07-27 12:55:28"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ri6CLjVB0ss5~sVoKvKZLw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.530","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_DecisionForestPredict/Optional-Syntax-Elements-for-TD_DecisionForestPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ri6CLjVB0ss5~sVoKvKZLw","2024-07-27 12:57:20"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/roAWCjMMCabp9KSomQk__A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.434","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_UnivariateStatistics/TD_UnivariateStatistics-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/roAWCjMMCabp9KSomQk__A","2024-07-27 12:55:32"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/s1rmsTlydwAJvbln8jOq3g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.494","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/TD_GLM-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/s1rmsTlydwAJvbln8jOq3g","2024-07-27 12:54:56"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/s29SOJjRf2x6fOOMfiBMlA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.530","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/TD_WordEmbeddings-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/s29SOJjRf2x6fOOMfiBMlA","2024-07-27 12:56:51"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/s57IIbiui_ZucHSACh3r5w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.734","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/TD_XGBoostPredict-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/s57IIbiui_ZucHSACh3r5w","2024-07-27 12:55:37"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/s9f5oHnwNnDauUUIFy0JLA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.417","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/Examples-How-to-Use-TD_GLM","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/s9f5oHnwNnDauUUIFy0JLA","2024-07-27 12:54:55"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/sCzySDTcozFo0yq_DNbB5w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.612","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_GLM/Required-Syntax-Elements-for-TD_GLM","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/sCzySDTcozFo0yq_DNbB5w","2024-07-27 12:54:57"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/sEqor0EwX4ZRGHoasdVcMQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","6","5","0","0.710","0","0","0","","","","","","","","","0.453","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/sEqor0EwX4ZRGHoasdVcMQ","2024-07-27 12:55:27"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/sIsRRZ_sH3XPe7ebygCqGg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.403","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/Optional-Syntax-Elements-for-TD_OneClassSVMPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/sIsRRZ_sH3XPe7ebygCqGg","2024-07-27 12:57:06"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/sNf2ULM6Kci192nwgE3cQg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.390","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_RoundColumns/TD_RoundColumns-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/sNf2ULM6Kci192nwgE3cQg","2024-07-27 12:55:50"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/sW6DbFHmEoyb39wFL29m7A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.372","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance/TD_VectorDistance-Syntax-Elements","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/sW6DbFHmEoyb39wFL29m7A","2024-07-27 12:57:00"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/sc3mi39~jF9gJqXzUilLxQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.398","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/TD_NonLinearCombineTransform-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/sc3mi39~jF9gJqXzUilLxQ","2024-07-27 12:55:29"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/shXe~bdU_3jNK2y8H3hJTg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","1.140","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/Optional-Syntax-Elements-for-TD_ChiSq","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/shXe~bdU_3jNK2y8H3hJTg","2024-07-27 12:55:44"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/snUY7LOhtrrg4v_Wi5jWuA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.463","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Examples-How-to-Use-NGramSplitter/Example-Omit-Accumulate","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/snUY7LOhtrrg4v_Wi5jWuA","2024-07-27 12:56:46"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/srZXyLw1tmiX8kiBVMptKA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.428","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/TD_Unpivoting-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/srZXyLw1tmiX8kiBVMptKA","2024-07-27 12:58:00"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/sr~AZpu7nXNHqahm4AWY2Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.913","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_Silhouette/Example-How-to-Use-TD_Silhouette","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/sr~AZpu7nXNHqahm4AWY2Q","2024-07-27 12:55:00"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/t2N3vo0QvnpXp7RkhODYGQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.387","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_ColumnSummary/Example-How-to-Use-TD_ColumnSummary","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/t2N3vo0QvnpXp7RkhODYGQ","2024-07-27 12:56:47"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/t4mGxrxZDcD8xh9Fl0nQMg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.449","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/TD_OneHotEncodingTransform-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/t4mGxrxZDcD8xh9Fl0nQMg","2024-07-27 12:55:56"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/tBN~4W2rNm3FqoxHdTihkA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","2","0","0.280","0","0","0","","","","","","","","","0.378","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesFit/Example-How-to-Use-TD_PolynomialFeaturesFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/tBN~4W2rNm3FqoxHdTihkA","2024-07-27 12:56:15"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/tDA~1ZvGGU_8hjFx8S8KkQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.429","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Data-Exploration-Functions","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/tDA~1ZvGGU_8hjFx8S8KkQ","2024-07-27 12:57:22"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/tHpBtLLNwvTI9qD4Lx7ErQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.512","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/TD_Unpivoting-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/tHpBtLLNwvTI9qD4Lx7ErQ","2024-07-27 12:58:01"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/tbmMadQvj~Ds8GSEnpvDxw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.388","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply/TD_NumApply-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/tbmMadQvj~Ds8GSEnpvDxw","2024-07-27 12:56:56"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/tcpsHHivSF_IYD7XlgpjiQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","1","0","0.140","0","0","0","","","","","","","","","0.411","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Filters","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/tcpsHHivSF_IYD7XlgpjiQ","2024-07-27 12:55:40"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/tn9YhPZqjKm4CH7IlaI8pg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","4","4","0","0.560","0","0","0","","","","","","","","","0.531","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_NumApply","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/tn9YhPZqjKm4CH7IlaI8pg","2024-07-27 12:55:22"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/t~DHlJ_afV0Q9qm2KClh8Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.386","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Pack-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/t~DHlJ_afV0Q9qm2KClh8Q","2024-07-27 12:55:53"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/u2ycBjxDW81V7XwgJM8ZcA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.385","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/TD_ClassificationEvaluator-Usage-Notes","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/u2ycBjxDW81V7XwgJM8ZcA","2024-07-27 12:57:47"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/u6N0FSwD1LdepKK9m7BeJA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.403","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_OneClassSVMPredict/Required-Syntax-Elements-for-TD_OneClassSVMPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/u6N0FSwD1LdepKK9m7BeJA","2024-07-27 12:57:06"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/uBbmp3CLBQ2aMfvniCSq2w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.650","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_CategoricalSummary/TD_CategoricalSummary-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/uBbmp3CLBQ2aMfvniCSq2w","2024-07-27 12:56:41"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/uEQYVhtTvAL3LokTXyADyw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.400","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierTrainer/TD_NaiveBayesTextClassifierTrainer-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/uEQYVhtTvAL3LokTXyADyw","2024-07-27 12:58:07"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/uFGUmkB_kbij7Ku8_Hhqng","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.697","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/TD_OneClassSVM-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/uFGUmkB_kbij7Ku8_Hhqng","2024-07-27 12:57:54"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/uHvvbz8DaQMPQ7N27YSrgQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.388","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter/Required-Syntax-Elements-for-NGramSplitter","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/uHvvbz8DaQMPQ7N27YSrgQ","2024-07-27 12:56:58"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/uMMRGrJL6gponsb~Dxc_vQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.416","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/TD_OneHotEncodingFit-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/uMMRGrJL6gponsb~Dxc_vQ","2024-07-27 12:56:53"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ualTsZ95fPCZLCEyThTBgA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.390","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingFit/Example-How-to-Use-TD_OneHotEncodingFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ualTsZ95fPCZLCEyThTBgA","2024-07-27 12:57:09"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ujSxr3S6mdqiPjfU34oLrA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.397","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetRowsWithoutMissingValues/Example-How-to-Use-TD_GetRowsWithoutMissingValues","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ujSxr3S6mdqiPjfU34oLrA","2024-07-27 12:56:30"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/umJlSHmduIBlp8ybgsfZyA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","6","4","0","0.560","0","0","0","","","","","","","","","0.454","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/umJlSHmduIBlp8ybgsfZyA","2024-07-27 12:57:57"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/v0duQWXIU7_vLL2XPQiOCA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.441","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Utility-Functions/TD_FillRowID/TD_FillRowID-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/v0duQWXIU7_vLL2XPQiOCA","2024-07-27 12:58:03"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/vBbJE7ChJAzxcCxhd3If8Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.445","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/TD_ANOVA-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/vBbJE7ChJAzxcCxhd3If8Q","2024-07-27 12:57:33"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/vD68~Z4IshMEd3OZXjIceg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.511","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Unpack-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/vD68~Z4IshMEd3OZXjIceg","2024-07-27 12:55:42"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/vL7dUAN5uVfTcWPBx7XR2Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.398","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/TD_QQNorm-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/vL7dUAN5uVfTcWPBx7XR2Q","2024-07-27 12:55:33"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/vN3Dq1Xp4XuLmU0USymi9Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.477","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/Examples-How-to-Use-TD_ANOVA/Using-TD_ANOVA-to-Determine-Difference-of-Insect-Sprays","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/vN3Dq1Xp4XuLmU0USymi9Q","2024-07-27 12:58:10"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/vS8rY0fSEQ1QlPUr9skVVw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.390","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/vS8rY0fSEQ1QlPUr9skVVw","2024-07-27 12:56:27"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/vbQ~BnaMqAcCmLJcEtixnw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.379","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/TD_WhichMin-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/vbQ~BnaMqAcCmLJcEtixnw","2024-07-27 12:56:30"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/vbr95XoUlFRqlAw4NLDedA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.516","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-ClickStream-Data-Examples","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/vbr95XoUlFRqlAw4NLDedA","2024-07-27 12:56:13"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/viKspnIaC98aHTTAtjgXgQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.384","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/TD_NonLinearCombineFit-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/viKspnIaC98aHTTAtjgXgQ","2024-07-27 12:57:48"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/wFInXt7s7L2VTHwxvV8l4w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","2","0","0.280","0","0","0","","","","","","","","","0.465","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Recommendations-for-Using-Analytic-Functions","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/wFInXt7s7L2VTHwxvV8l4w","2024-07-27 12:55:25"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/wN0BgVEE6o6vbAosEtujlg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.404","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Terminology","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/wN0BgVEE6o6vbAosEtujlg","2024-07-27 12:55:35"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/wORvca40GnUSAaavND8lJA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.482","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_SimpleImputeTransform/Required-Syntax-Elements-for-TD_SimpleImputeTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/wORvca40GnUSAaavND8lJA","2024-07-27 12:55:03"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/wPmuZI9CTJ69~70gA16QtA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.398","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/NGramSplitter","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/wPmuZI9CTJ69~70gA16QtA","2024-07-27 12:58:19"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/wUAsYKNZGzkqoIVInazd5g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.450","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/Hypothesis-Test-Types","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/wUAsYKNZGzkqoIVInazd5g","2024-07-27 12:58:04"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/wWadrNwuJ1Io8XmJnvcT7g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","1.166","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_WhichMin/TD_WhichMin-Example","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/wWadrNwuJ1Io8XmJnvcT7g","2024-07-27 12:56:31"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/wenIlWo6oE3AaZ_Qrcg~aw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","11","10","0","1.410","0","0","0","","","","","","","","","0.419","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/wenIlWo6oE3AaZ_Qrcg~aw","2024-07-27 12:57:44"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/wybwkzt5sYrhtXWeL5BTmg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.371","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Maximum-Number-of-Columns-in-a-Database-Table","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/wybwkzt5sYrhtXWeL5BTmg","2024-07-27 12:55:24"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/wzwJlP0U7OEUrCSaYaLM2w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.400","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_GetFutileColumns","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/wzwJlP0U7OEUrCSaYaLM2w","2024-07-27 12:55:20"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/w~84sJbc17CpCMdorusB5A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.400","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_NaiveBayesTextClassifierPredict/TD_NaiveBayesTextClassifierPredict-Examples","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/w~84sJbc17CpCMdorusB5A","2024-07-27 12:55:14"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/x7OYmZIEWSwULo1YXPJ6Iw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.413","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/x7OYmZIEWSwULo1YXPJ6Iw","2024-07-27 12:58:13"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xA1IYk~FbCPn1P8jfgUyRA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.380","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/TD_ScaleFit-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xA1IYk~FbCPn1P8jfgUyRA","2024-07-27 12:57:44"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xAdoKRDJyg~ncQhLYP~~NQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","1.006","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Pack/Examples-How-to-Use-Pack/Example-Default-Options","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xAdoKRDJyg~ncQhLYP~~NQ","2024-07-27 12:57:34"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xB6xOv0m4nyi5yKQjWbOhA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.384","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineFit/TD_NonLinearCombineFit-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xB6xOv0m4nyi5yKQjWbOhA","2024-07-27 12:57:49"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xIwWUOfgYSUJD6QjE4XjIA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.371","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_TrainTestSplit/TD_TrainTestSplit-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xIwWUOfgYSUJD6QjE4XjIA","2024-07-27 12:57:36"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xOAcdREqBdJ64jZGcogdHA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.404","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit/TD_RandomProjectionFit-Example","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xOAcdREqBdJ64jZGcogdHA","2024-07-27 12:57:41"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xPdaRg1mWUIB~hsP7jcX5g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.448","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_OneClassSVM/TD_OneClassSVM-Usage-Notes","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xPdaRg1mWUIB~hsP7jcX5g","2024-07-27 12:57:56"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xSKbxMstx2cncygmSOfFgw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.556","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_DecisionForest/TD_DecisionForest-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xSKbxMstx2cncygmSOfFgw","2024-07-27 12:56:40"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xTwexSEuc0XRrXwUTCYiBA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.379","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/Sessionize/Sessionize-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xTwexSEuc0XRrXwUTCYiBA","2024-07-27 12:58:24"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xdprpzZcYDJmMOemtZJQLA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.469","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_GLMPredict/Required-Syntax-Elements-for-TD_GLMPredict","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xdprpzZcYDJmMOemtZJQLA","2024-07-27 12:57:31"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xgwE4ZsfArfirEFk1w2oCw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","7","6","0","0.850","0","0","0","","","","","","","","","0.402","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_SVM","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xgwE4ZsfArfirEFk1w2oCw","2024-07-27 12:57:49"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xjzlEqYaPWTy3eUo_q~k~A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.485","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OneHotEncodingTransform/TD_OneHotEncodingTransform-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xjzlEqYaPWTy3eUo_q~k~A","2024-07-27 12:55:55"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xlygyKzE_khb5Wuhy8NqJQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.531","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_FTest/TD_FTest-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xlygyKzE_khb5Wuhy8NqJQ","2024-07-27 12:55:59"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xnnFUX2sDLM_NXDkLObQvA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.444","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingFit/Example-How-to-Use-TD_OrdinalEncodingFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xnnFUX2sDLM_NXDkLObQvA","2024-07-27 12:56:50"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xsXtGIHUAlGzEafGNFSvHA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.384","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Examples-How-to-Use-MovingAverage/MovingAverage-Examples-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xsXtGIHUAlGzEafGNFSvHA","2024-07-27 12:57:28"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xxNM0vGfDtBBkWzbm1T1CA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","3","3","0","0.420","0","0","0","","","","","","","","","0.390","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/TD_OutlierFilterFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xxNM0vGfDtBBkWzbm1T1CA","2024-07-27 12:56:23"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xzajltMiFgCI8plN2rCjlA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.400","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_TargetEncodingTransform/TD_TargetEncodingTransform-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/xzajltMiFgCI8plN2rCjlA","2024-07-27 12:57:27"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/y4H_bo~hVkH_zMIvCC3LNQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.399","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_GetRowsWithMissingValues/TD_GetRowsWithMissingValues-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/y4H_bo~hVkH_zMIvCC3LNQ","2024-07-27 12:57:16"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/yDgQHfnvMzBsLM7oySfzkA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.837","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RandomProjectionFit","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/yDgQHfnvMzBsLM7oySfzkA","2024-07-27 12:58:11"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/yGuS5RrgdNzOasZ4QmRQYw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.387","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/MovingAverage/Required-Syntax-Elements-for-MovingAverage","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/yGuS5RrgdNzOasZ4QmRQYw","2024-07-27 12:55:06"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/yQx52sC5NQWIi1GIzYzH9A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.383","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_XGBoostPredict/Examples-How-to-Use-TD_XGBoostPredict/XGBoostPredict-for-Classification","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/yQx52sC5NQWIi1GIzYzH9A","2024-07-27 12:54:50"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/yW_2fGg5L0KvjYhZr7fmGw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.383","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_PolynomialFeaturesTransform/Optional-Syntax-Elements-for-TD_PolynomialFeaturesTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/yW_2fGg5L0KvjYhZr7fmGw","2024-07-27 12:56:44"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/yak3MKFoEICkydApuOr5MQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.429","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Example-How-to-Use-TD_Pivoting/Aggregation-with-PivotColumn","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/yak3MKFoEICkydApuOr5MQ","2024-07-27 12:56:54"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/yn6fB1LmmzB1MhuStua03g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.403","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_BinCodeTransform/Example-How-to-Use-TD_BinCodeTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/yn6fB1LmmzB1MhuStua03g","2024-07-27 12:56:15"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ypMcrO42QzyYwtHf9y3XoQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.395","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/ypMcrO42QzyYwtHf9y3XoQ","2024-07-27 12:55:38"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/z0owdQm7Pa1numW_f_szNg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.409","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Optional-Syntax-Elements-for-TD_Pivoting","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/z0owdQm7Pa1numW_f_szNg","2024-07-27 12:55:15"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/zA6OEofomPrF7RkA6oiCzg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.382","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Usage-Notes/Input-Table-Schemas","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/zA6OEofomPrF7RkA6oiCzg","2024-07-27 12:56:08"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/zAvPV~2FHxPS3ouiJtFItg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","5","3","0","0.420","0","0","0","","","","","","","","","0.460","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_OrdinalEncodingTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/zAvPV~2FHxPS3ouiJtFItg","2024-07-27 12:58:11"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/zXqGW4MeDqnFScclwabtog","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.397","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Multiple-Partitioned-Input-Tables-and-Dimension-Input-Table","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/zXqGW4MeDqnFScclwabtog","2024-07-27 12:57:04"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/zeDvv80efJ5I4DzUys8bNA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.511","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_TFIDF","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/zeDvv80efJ5I4DzUys8bNA","2024-07-27 12:54:51"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/zp2ZKmtcZwt_lNa9b5p3FA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.401","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ChiSq/TD_ChiSq-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/zp2ZKmtcZwt_lNa9b5p3FA","2024-07-27 12:55:43"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/zqjx3aJr9vcucxWttii4Yw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.800","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Pivoting/Example-How-to-Use-TD_Pivoting/PivotColumn","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/zqjx3aJr9vcucxWttii4Yw","2024-07-27 12:56:53"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/zx3_b0_uoICTNYbjku9XDA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.715","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_SentimentExtractor/TD_SentimentExtractor-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/zx3_b0_uoICTNYbjku9XDA","2024-07-27 12:56:05"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/zxwMb9dXc1Wa3zc875W5Vw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.394","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Cleaning-Functions/Unpack/Unpack-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/zxwMb9dXc1Wa3zc875W5Vw","2024-07-27 12:55:43"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/zyPFsHS3nLJkG4qmbV5E1g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.413","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Evaluation-Functions/TD_ClassificationEvaluator/TD_ClassificationEvaluator-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/zyPFsHS3nLJkG4qmbV5E1g","2024-07-27 12:57:46"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~CUFoCE4yWNUEESP3eJoCQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.400","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Data-Exploration-Functions/TD_QQNorm/TD_QQNorm-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~CUFoCE4yWNUEESP3eJoCQ","2024-07-27 12:55:33"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~LigINUnAJw8HVAKoYCf3A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.366","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Training-Functions/TD_VectorDistance/TD_VectorDistance-Output","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~LigINUnAJw8HVAKoYCf3A","2024-07-27 12:57:00"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~NWP6YQE~igO6NdNWmYfVw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.383","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleTransform/TD_ScaleTransform-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~NWP6YQE~igO6NdNWmYfVw","2024-07-27 12:56:12"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~TTPSInI7kDSA5qLj9dNKQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.541","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_ScaleFit/Examples-How-to-Use-TD_ScaleFit/Sparse-Input-with-Partition","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~TTPSInI7kDSA5qLj9dNKQ","2024-07-27 12:56:06"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~V_M_t4fnitBXAkkhykMUQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.439","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Text-Analytic-Functions/TD_WordEmbeddings/TD_WordEmbeddings-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~V_M_t4fnitBXAkkhykMUQ","2024-07-27 12:56:52"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~Xo3QzkYbHTSllk2ZJIMJg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.532","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/TD_Unpivoting-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~Xo3QzkYbHTSllk2ZJIMJg","2024-07-27 12:58:00"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~ZH47hKV60qDeXyOfoYJxA","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.393","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Symbols/LAG-and-LEAD-Expressions-in-Symbol-Predicates/LAG-and-LEAD-Expression-Rules","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~ZH47hKV60qDeXyOfoYJxA","2024-07-27 12:58:06"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~ckFXpzmPNEGv_K9GE6J1Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.424","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Introduction-to-Analytics-Database-Analytic-Functions/Analytics-Database-Analytic-Function-Categories/Model-Evaluation-Functions","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~ckFXpzmPNEGv_K9GE6J1Q","2024-07-27 12:57:24"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~cng~bgC9CeWhKc0Q5Di4w","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.487","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Hypothesis-Testing-Functions/TD_ANOVA/TD_ANOVA-Syntax","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~cng~bgC9CeWhKc0Q5Di4w","2024-07-27 12:57:32"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~cvz3KXf_RbH98_tLMX_gw","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.405","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform/TD_NonLinearCombineTransform-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~cvz3KXf_RbH98_tLMX_gw","2024-07-27 12:55:30"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~fxSjzxtk6f7YtuLNdHO1A","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.375","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_Unpivoting/Optional-Syntax-Elements-for-TD_Unpivoting","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~fxSjzxtk6f7YtuLNdHO1A","2024-07-27 12:58:00"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~g6u2HoRQSscYhMeUrKKyg","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.437","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_RowNormalizeFit/TD_RowNormalizeFit-Input","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~g6u2HoRQSscYhMeUrKKyg","2024-07-27 12:55:08"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~if_V2PcQglhYdAVPfFmkQ","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.412","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Model-Scoring-Functions/TD_KMeansPredict/Example-How-to-Use-the-k-means-Algorithm","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~if_V2PcQglhYdAVPfFmkQ","2024-07-27 12:55:58"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~m2ZCXR4AN9~PU_aAg404Q","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","2","2","0","0.280","0","0","0","","","","","","","","","0.379","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Feature-Engineering-Transform-Functions/TD_NonLinearCombineTransform","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~m2ZCXR4AN9~PU_aAg404Q","2024-07-27 12:58:15"
"https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~tjIGZci92tHn6diKs_20g","","301","Moved Permanently","Non-Indexable","Redirected","","0","0","","0","0","","0","","0","","0","","0","","","","","","","","","","0","0","0","0.000","A+","0","","","","","0.000","2","2","","1","1","0","0.140","0","0","0","","","","","","","","","0.600","","https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Database-Analytic-Functions/Path-and-Pattern-Analysis-Functions/nPath/nPath-Examples/nPath-Range-Matching-Examples/nPath-Range-Matching-Example-Accumulate-Pages-Visited-in-Each-Session","HTTP Redirect","","","","","0","0","0","0","","https://docs.teradata.com/r/VR00jFXwAE1UHr5694v3dQ/~tjIGZci92tHn6diKs_20g","2024-07-27 12:57:02"
